[
    {
        "groupe" : 1,
        "extension": "py",
        "date": "2020-03-12 07:48:50",
        "correct": "0",
        "upload": "def semestreValide(ue1,ue2):\n  if ue1==10 and ue2==10:\n    return True\n  if ue1>ue2 or ue1<ue2 and ue1-ue2>=0:\n    return True\n  else:\n    return False",
        "user": "userdId_1",
        "attemptID": 0,
        "exercise": "70ae7ad6cf504e0fa8cedebd8e8a825f",
        "exercise_name": "semestreValide",
        "embeddingX": "75.57536",
        "embeddingY": "-5.447176"
    },
    {
        "groupe" : 1,
        "extension": "py",
        "date": "2020-03-06 00:33:37",
        "correct": "0",
        "upload": "def nbOccurrencesLettre(lettre,mot):\n    res=0\n    for i in range(0,len(mot)):\n      if lettre in mot:\n        res=res+1\n      return res",
        "user": "userdId_2",
        "attemptID": 1,
        "exercise": "2864c9e5861229d2ff32570f6bc944fb",
        "exercise_name": "nbOccurrencesLettre",
        "embeddingX": "-12.755439",
        "embeddingY": "-43.469128"
    },


    {
      "groupe" : 3,
      "extension": "py",
      "date": "2020-04-06 15:02:51",
      "correct": "0",
      "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  i=0\n  for i in range(nombre):\n    if chiffre==nombre[i]:\n      cpt=cpt+1\n    i=i+1\n  return cpt",
      "user": "userdId_3",
      "attemptID": 2,
      "exercise": "908defc05cefcce7d5707781c7f9e500",
      "exercise_name": "compteChiffre",
      "embeddingX": "-20.47761", "embeddingY": "-31.027876"
    },

      {"extension": "py", "date": "2020-03-06 00:52:19", "correct": "1", "upload": "def premiereOccurrenceLettre(lettre,mot):\n  if len(mot)==0:\n    return None\n  else:\n    res=-1\n    for elem in mot:\n      if lettre!=elem:\n        res=res+1\n      else:\n        res=res+1\n        return res\n        ", "user": "userdId_2", "attemptID": 3, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-9.772555", "embeddingY": "-32.533566"},{"extension": "py", "date": "2020-03-06 22:11:22", "correct": "1", "upload": "def nbVoyelles(mot):\n    res = 0\n    liste_voyelles = [\"a\",\"e\",\"i\",\"o\",\"u\",\"y\"]\n    for lettre in mot:\n        if lettre.lower() in liste_voyelles:\n        \tres += 1\n    return res\n", "user": "userdId_4", "attemptID": 4, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "17.249535", "embeddingY": "-30.631132"},{"extension": "py", "date": "2020-03-10 09:42:02", "correct": "0", "upload": "def nbVoyelles(mot):\n  res=0\n  if mot==0:\n    res=None\n  else:\n    for mot in 'a,e,i,o,u,y':\n      res=res+1\n  \n     \n  return res", "user": "userdId_5", "attemptID": 5, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "0.032986477", "embeddingY": "-29.10405"},{"extension": "py", "date": "2020-04-13 21:32:18", "correct": "0", "upload": "def indiceInsertion(sc,scores):\n  for i in range(len(scores)):\n    if scores[i]<sc:\n      return \n  return(len(scores))", "user": "userdId_6", "attemptID": 6, "exercise": "f8a820b2bd54d18d36716e3d703858f7", "exercise_name": "indiceInsertion", "embeddingX": "-17.112688", "embeddingY": "-47.04488"},{"extension": "py", "date": "2020-03-03 05:30:40", "correct": "1", "upload": "def minimum(liste):\n  if len(liste)==0:\n    res= None\n  else:\n    res= liste[0]\n    for i in range(1, len(liste)):\n    \tif res > liste[i]:\n    \t\tres= liste[i]\n  return res", "user": "userdId_7", "attemptID": 7, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "-0.482918", "embeddingY": "-61.11189"},{"extension": "py", "date": "2020-04-13 20:55:47", "correct": "1", "upload": "def sousChaine(s1,s2):\n  i=0\n  j=0\n  while i<len(s1) and j<len(s2):\n    if s1[i]==s2[j]:\n      i+=1\n    elif i>0:\n      i=0\n      j-=1\n    j+=1\n  return i==len(s1)", "user": "userdId_8", "attemptID": 8, "exercise": "4bdf8c9c5d020593e1771e4d3ae1ae0d", "exercise_name": "sousChaine", "embeddingX": "-19.734081", "embeddingY": "66.06537"},{"extension": "py", "date": "2020-03-05 23:58:42", "correct": "1", "upload": "def minimum(liste):\n  if len (liste)==0:\n    res=None\n  else:\n    res=liste[0]\n    for i in range (1,len(liste)):\n      if liste[i]<res:\n        res=liste[i]\n  return res", "user": "userdId_9", "attemptID": 9, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "25.960981", "embeddingY": "-68.192184"},{"extension": "py", "date": "2020-03-10 03:32:02", "correct": "0", "upload": "def jourNuit(heure):\n  if heure<0 or heure>24:\n    res=\"l'heure saisie est invalide \"\n  else: \n    if heure<5 or heure>=21: \n      res=\" on est la nuit \" \n    elif heure<12:\n      res=\" on est le matin \"\n    elif heure<17: \n      res=\" on est l'apr\u00e8s midi \"\n    else:\n      res=\" on est le soir\"\n    if heure<6 or heure>=18:\n      res=res+\"et il fait nuit \"\n    else:\n      res=res+\"et il fait jour \"   \n    return res", "user": "userdId_10", "attemptID": 10, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "71.265724", "embeddingY": "14.918136"},{"extension": "py", "date": "2020-03-01 01:16:22", "correct": "0", "upload": "from math import sqrt\n\ndef polynome(a,b,c):\n    delta =  b**2 - (4*a*c)\n    \n    if delta > 0:\n        x = str((-b + sqrt(delta))/2*a),str((-b - sqrt(delta))/2*a)\n        \n         \n    elif delta == 0:\n        x = str(-(b/2*a))\n        \n    else:\n        x = \"pas de solution\"\n        \n    return x\n", "user": "userdId_4", "attemptID": 11, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-51.292908", "embeddingY": "11.24997"},{"extension": "py", "date": "2020-03-17 06:36:44", "correct": "0", "upload": "def qualifJO(sexe,record,nbvictoires,champion):\n  if nbvictoires>3:\n    res=True\n  else:\n    res=False\n  ", "user": "userdId_9", "attemptID": 12, "exercise": "891e7b0ed5fbddb755edc84d479bc1ef", "exercise_name": "qualifJO", "embeddingX": "52.56635", "embeddingY": "-11.569014"},{"extension": "py", "date": "2020-04-12 08:20:09", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n    cpt=0\n    x=nombre%10\n    decomp=nombre\n    while decomp!=0:\n      if x==chiffre:\n        cpt+=1\n        decomp=decomp//10\n        x=decomp%10\n      elif x!=chiffre:\n        decomp=decomp//10\n        x=decomp%10\n    if cpt==0:\n      cpt=1\n    return cpt", "user": "userdId_11", "attemptID": 13, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "6.842287", "embeddingY": "15.049884"},{"extension": "py", "date": "2020-03-23 23:07:27", "correct": "0", "upload": "def quatrePlus100(liste):\n  if len(liste)==0:\n    res=[]\n  else:\n    res=[]\n    for i in range(len(liste)):\n      if liste[i]>100:\n        res=res+liste[i]\n    return res", "user": "userdId_9", "attemptID": 14, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-7.867847", "embeddingY": "-62.20604"},{"extension": "py", "date": "2020-03-09 22:06:26", "correct": "0", "upload": "def bissextile(annee):\n  if annee%4==0 and annee%400==0:\n    res=True\n  else:\n    res=False\n  return res", "user": "userdId_12", "attemptID": 15, "exercise": "a7d37636649c0ada991520788deeb2d0", "exercise_name": "bissextile", "embeddingX": "47.123383", "embeddingY": "-1.672436"},{"extension": "py", "date": "2020-03-22 05:26:39", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    maxi=liste[0]\n    for i in range(len(liste)):\n      if liste[i]>maxi:\n        maxi=liste[i]\n  return maxi", "user": "userdId_12", "attemptID": 16, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "2.907127", "embeddingY": "-63.408566"},{"extension": "py", "date": "2020-05-04 22:18:14", "correct": "1", "upload": "def nbOccurrencesLettre(lettre,mot):\n  res=0\n  for elem in mot:\n    if lettre==elem:\n      res+=1\n  return res", "user": "userdId_8", "attemptID": 17, "exercise": "2864c9e5861229d2ff32570f6bc944fb", "exercise_name": "nbOccurrencesLettre", "embeddingX": "-10.189258", "embeddingY": "-27.518318"},{"extension": "py", "date": "2020-03-19 23:20:04", "correct": "0", "upload": "def reconstruireChainePartielle(s,n):\n  res=\"\"\n  for i in range(0,len(s),n):\n    res=res+s[i]\n    return res", "user": "userdId_13", "attemptID": 18, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-59.496906", "embeddingY": "-39.44684"},{"extension": "py", "date": "2020-03-06 00:44:42", "correct": "0", "upload": "def moyenne(liste):\n  res=0\n  cpt=0\n  if len(liste)==0:\n    moy=None\n  else:\n     for i in liste:\n       res=res+i\n       cpt=cpt+1\n     moy=res*cpt\n  return moy", "user": "userdId_14", "attemptID": 19, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "2.9545722", "embeddingY": "-7.7575383"},{"extension": "py", "date": "2020-03-30 02:43:39", "correct": "0", "upload": "def fusion(liste1,liste2):\n  liste=[]\n  liste.extend(liste1)\n  liste.extend(liste2)\n  i=1\n  res=[]\n  while i<len(liste) :\n    n=liste[0]\n    if n>liste[i] :\n      res.append(liste[i])\n    elif n<liste[i] :\n      res.append(n)\n      n=liste[i]\n    i=i+1\n  \n  return res", "user": "userdId_15", "attemptID": 20, "exercise": "6613efb6c873b142dc2b6040c14eb616", "exercise_name": "fusion", "embeddingX": "-33.728424", "embeddingY": "39.42235"},{"extension": "py", "date": "2020-04-11 05:22:51", "correct": "1", "upload": "def compteChiffre(chiffre,nombre):\n  if chiffre==nombre:\n    res=1\n  else:\n    res=0\n    x=nombre\n    while x!=0:\n      if x%10==chiffre:\n        res+=1\n      x=x//10\n  return res", "user": "userdId_16", "attemptID": 21, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "13.912511", "embeddingY": "12.933796"},{"extension": "py", "date": "2020-04-12 09:48:03", "correct": "0", "upload": "def suiteAriGeo(liste):\n  i=1\n  while i<len(liste)-1:\n    a=liste[0]\n    b=liste[0]\n    if liste[i+1]==liste[i]+(liste[1]-liste[0]):\n      b=liste[1]-liste[0]\n    if liste[0]!=0:                        \n      if liste[i+1]==liste[i]*liste[1]/liste[0]:\n        a=liste[1]/liste[0]\n        b=0\n    if liste[i+1]==liste[i]*(liste[1]-liste[0])+(liste[i]-(liste[i-1]*(liste[1]-liste[0]))):\n      a=liste[1]-liste[0]\n      b=liste[i]-(liste[i-1]*a)\n    i=i+1\n  ok=True\n  i=0\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=a*liste[i]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 22, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "34.636974", "embeddingY": "84.19754"},{"extension": "py", "date": "2020-04-07 03:37:48", "correct": "0", "upload": "def motPalindrome(mot):\n  i=0\n  trouve=False\n  res=True\n  while i<len(mot)/2 and not trouve:\n    if mot[i]==mot[-i-1]:\n      i+=1\n      trouve=True\n  if trouve: \n    res=True\n  return res", "user": "userdId_16", "attemptID": 23, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "28.137579", "embeddingY": "47.431473"},{"extension": "py", "date": "2020-03-17 06:31:10", "correct": "0", "upload": "def doubleLettre(mot):\n  c1=(0,len(mot),2)\n  c2=(1,len(mot),2)\n  if c1==c2:\n    res=True\n  else:\n    res=False\n  return res", "user": "userdId_8", "attemptID": 24, "exercise": "00da9cf1fa2b468d915724499459ed8f", "exercise_name": "doubleLettre", "embeddingX": "17.0328", "embeddingY": "-0.3935247"},{"extension": "py", "date": "2020-03-13 00:34:28", "correct": "0", "upload": "def sommeNbPairs(liste):\n  if liste==[] :\n    res=0\n  else:\n    for elem in liste:\n      if elem%2==0 :\n        res=res+elem\n  return res", "user": "userdId_15", "attemptID": 25, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "30.19334", "embeddingY": "-21.014408"},{"extension": "py", "date": "2020-03-03 00:06:25", "correct": "0", "upload": "def jourNuit(heure):\n  if heure > 24 or heure < 0 :\n    res = (\"l'heure saisie est invalide\")\n  elif heure >= 6 and heure <= 18 :\n    if heure >= 5 and heure <= 12 :\n      res = (\"on est le matin et il fait jour\")\n    elif heure > 12 and heure <= 17 :\n      res = (\"on est l'apr\u00e8s-midi et il fait jour\")\n    else :\n      res = (\"on est le soir et il fait jour\")\n  else :\n    if heure >= 5 and heure < 12 :\n      res = (\"on est le matin et il fait nuit\")\n    elif heure > 12 and heure < 17 :\n      res = (\"on est l'apr\u00e8s-midi et il fait nuit\")\n    elif heure > 17 and heure < 21 :\n      res = (\"on est le soir et il fait nuit\")\n    else :\n      res = (\"on est la nuit et il fait nuit\")\n  return res", "user": "userdId_17", "attemptID": 26, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "75.59882", "embeddingY": "21.709692"},{"extension": "py", "date": "2020-04-05 12:09:14", "correct": "0", "upload": "def suiteGeo(liste):\n    if 0 in liste:\n      ok=False\n    elif liste==[] or len(liste)==1:\n      ok=True\n    else:\n      ok=True\n      ctePrec=liste[1]/liste[0]\n      cteAct=None\n      i=2\n      while i<len(liste) and ok:\n        cteAct=liste[i]/liste[i-1]\n        if cteAct!=ctePrec:\n          ok=False\n        ctePrec=cteAct\n        i+=1\n    return ok", "user": "userdId_18", "attemptID": 27, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "41.49159", "embeddingY": "63.55755"},{"extension": "py", "date": "2020-03-31 05:19:51", "correct": "1", "upload": "def listeSymetrique(l):\n  i=0\n  ok=True\n  while i<len(l)//2 and ok:\n    if l[i]!=l[-i-1]:\n      ok=False\n    i=i+1\n  return ok\n", "user": "userdId_9", "attemptID": 28, "exercise": "8eb27aeda471a467e2223abebeca886e", "exercise_name": "listeSymetrique", "embeddingX": "23.884977", "embeddingY": "49.45815"},{"extension": "py", "date": "2020-04-14 04:03:19", "correct": "1", "upload": "def nbOccurrencesJoueur(joueurs,nom):\n  cpt=0\n  i=0\n  while i<len(joueurs):\n    if nom==joueurs[i]:\n      cpt=cpt+1\n    i=i+1\n  return cpt", "user": "userdId_7", "attemptID": 29, "exercise": "00ee5faf82e54951fbdb2ba2656f7ae7", "exercise_name": "nbOccurrencesJoueur", "embeddingX": "-19.598333", "embeddingY": "61.74153"},{"extension": "py", "date": "2020-03-13 00:56:29", "correct": "0", "upload": "def doubleLettre(mot):\n\tres=0\n\tfor l in mot:\n\t\tprec=''\n\t\tact=l\n\t\tif prec==act:\n\t\t\tres=1\n\tif res==1:\n\t\treturn True\n\telse:\n\t\treturn False\n\t\t\t\n", "user": "userdId_19", "attemptID": 30, "exercise": "00da9cf1fa2b468d915724499459ed8f", "exercise_name": "doubleLettre", "embeddingX": "11.47345", "embeddingY": "-5.7812567"},{"extension": "py", "date": "2020-06-02 21:55:59", "correct": "0", "upload": "def polynome(a,b,c):\n  import math\n  delta=b**2-4*a*c\n  if delta>0:\n    x1=(-b+(math.sqrt(delta)))/2*a\n    x2=(-b-(math.sqrt(delta)))/2*a\n    return (x1,x2)\n  elif delta==0:\n    x=(-b)/2*a\n    return x\n  else:\n    return 'pas de solution'", "user": "userdId_12", "attemptID": 31, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-55.73845", "embeddingY": "7.3544307"},{"extension": "py", "date": "2020-03-30 22:22:41", "correct": "1", "upload": "def indiceOccurrence(n,x,l):\n  i=0\n  j=0\n  res = -1\n  while j <n and i < len(l):\n    if l[i] == x:\n      j+=1\n      if j == n:\n        res = i\n    i+=1\n  if res == -1: res = None\n  return(res)", "user": "userdId_4", "attemptID": 32, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-7.716519", "embeddingY": "73.16533"},{"extension": "py", "date": "2020-03-23 01:39:41", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n  if len(mot)==0:\n    res=None \n  else:\n    res=None\n    for i in range (len(mot)): \n      if lettre==mot[i]:\n        res=i\n  return res", "user": "userdId_16", "attemptID": 33, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-18.452425", "embeddingY": "-40.222622"},{"extension": "py", "date": "2020-03-12 23:43:29", "correct": "1", "upload": "def jourNuit(heure):\n  if heure > 24 or heure < 0 :\n    res = \"l'heure saisie est invalide\"\n  else :\n    if heure < 5 :\n      res = \"on est la nuit \"\n    elif heure < 12 :\n      res = \"on est le matin \"\n    elif heure < 17 :\n      res = \"on est l'apr\u00e8s-midi \"\n    elif heure < 21 :\n      res = \"on est le soir \"\n    else :\n      res = \"on est la nuit \"\n    if heure >= 6 and heure < 18 :\n      res = res + \"et il fait jour\"\n    else :\n      res = res + \"et il fait nuit\"\n  return res", "user": "userdId_17", "attemptID": 34, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "79.51345", "embeddingY": "20.027796"},{"extension": "py", "date": "2020-03-27 05:46:34", "correct": "0", "upload": "def quatrePlus100(liste):\n  res=[]\n  i=0\n  while len(res)<4 :\n    if liste[i]>100 :\n      res.append(liste[i])\n    i=i+1\n  return res", "user": "userdId_15", "attemptID": 35, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-26.41441", "embeddingY": "37.309135"},{"extension": "py", "date": "2020-04-11 04:03:49", "correct": "1", "upload": "def motPalindrome(mot):\n  res=True\n  i=0\n  while i<len(mot)//2 and res:\n    if mot[i]!=mot[-i-1]:\n      res=False\n    i+=1\n  return res", "user": "userdId_8", "attemptID": 36, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "24.282875", "embeddingY": "37.119804"},{"extension": "py", "date": "2020-03-06 00:16:18", "correct": "0", "upload": "def nbVoyelles(mot):\n  voyel='aeiouy'\n  if len(mot)==0:\n    voy=None\n  else:\n    voy=0\n    for i in range(len(mot)):\n      if voyel[i]==mot[i]:\n        voy=voy+1\n  return voy", "user": "userdId_13", "attemptID": 37, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-2.5766017", "embeddingY": "-44.673428"},{"extension": "py", "date": "2020-03-27 06:35:03", "correct": "0", "upload": "def compare(chaine1,chaine2):\n  i=0\n  res=0\n  while i<len(chaine1) and i<len(chaine2):\n    if chaine1[i]<chaine2[i]:\n      res=-1\n    elif chaine1[i]>chaine2[i]:\n      res=1\n    i=i+1\n  if len(chaine1)!=len(chaine2):\n    if res==0 and len(chaine1)>len(chaine2):\n      res=1\n    elif res==0 and len(chaine2)>len(chaine1):\n      res=-1\n  return res", "user": "userdId_12", "attemptID": 38, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-25.583176", "embeddingY": "64.20478"},{"extension": "py", "date": "2020-03-02 07:48:03", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1<=annee2 and mois1<=mois2 and jour1>jour2:\n    return -1\n  elif annee1==annee2 and mois1==mois2 and jour1==jour2:\n    return 0\n  elif annee1>=annee2 and mois1>=mois2 and jour1>jour2:\n    return 1\n  \ncompareDates(10,1,2020,14,2,2020)\ncompareDates(14,2,2020,11,2,2020)\ncompareDates(10,1,2020,10,1,2020)", "user": "userdId_1", "attemptID": 39, "exercise": "af7c1467ef9f7684d9ff58734067ae98", "exercise_name": "compareDates", "embeddingX": "82.11924", "embeddingY": "-14.853758"},{"extension": "py", "date": "2020-03-06 00:44:54", "correct": "1", "upload": "def moyenne(liste):\n  res=0\n  cpt=0\n  if len(liste)==0:\n    moy=None\n  else:\n     for i in liste:\n       res=res+i\n       cpt=cpt+1\n     moy=res/cpt\n  return moy", "user": "userdId_14", "attemptID": 40, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "0.7705084", "embeddingY": "-8.485276"},{"extension": "py", "date": "2020-03-05 23:51:19", "correct": "0", "upload": "def somme(liste):\n  res=0\n  for elem in list:\n    res=res+elem\n    return res", "user": "userdId_20", "attemptID": 41, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-31.563759", "embeddingY": "-12.899508"},{"extension": "py", "date": "2020-02-29 06:01:32", "correct": "0", "upload": "def polynome(a,b,c):\n    delta=(b**2)-(4*a*c)\n    if delta>0:\n      x1=(-b-racine_delta)/2*a\n      x2=(-b+racine_delta)/2*a\n      print(x1,x2)\n    elif delta==0:\n      x0=-b/2*a\n      print(x0)\n    else:\n      print('pas de solution')", "user": "userdId_18", "attemptID": 42, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-51.553093", "embeddingY": "6.165462"},{"extension": "py", "date": "2020-04-07 10:23:30", "correct": "0", "upload": "def suiteAri(liste):\n  ok=True\n  if len(liste)==0:\n    ok=True\ndef elemAri(u0,r):\n  i=0\n  while i<len(liste) and ok:\n    cpt=cpt+r\n    if liste[i+1]!=cpt:\n      ok=False\n    i=i+1\n  return ok\n    \n    ", "user": "userdId_1", "attemptID": 43, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "16.81605", "embeddingY": "-49.322155"},{"extension": "py", "date": "2020-03-22 14:33:30", "correct": "1", "upload": "def doubleLettre(mot):\n  reponse=False\n  aux=''\n  for c in mot: \n    if c==aux:\n      reponse=True\n    aux=c\n  return reponse", "user": "userdId_21", "attemptID": 44, "exercise": "00da9cf1fa2b468d915724499459ed8f", "exercise_name": "doubleLettre", "embeddingX": "16.999445", "embeddingY": "-5.935228"},{"extension": "py", "date": "2020-03-17 05:49:44", "correct": "0", "upload": "def maximum(liste):\n    res=0\n    if len (liste)==0:\n       res=none\n    else:\n         res=liste[0]\n         for elem in liste:\n             res=elem\n          \n    return res", "user": "userdId_22", "attemptID": 45, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-3.358905", "embeddingY": "-36.120266"},{"extension": "py", "date": "2020-03-17 05:28:28", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  res=''\n  if debut+longueur>len(s):\n    fin=len(s)\n  else:\n    fin=debut+longueur\n  for i in range(debut,Fin):\n    res=res+s[i]\n  return res", "user": "userdId_23", "attemptID": 46, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-75.96114", "embeddingY": "10.947994"},{"extension": "py", "date": "2020-03-27 07:35:29", "correct": "0", "upload": "def quatrePlus100(liste):\n    res=0\n    i=0\n    while i!=4 :\n      if len(s)>100 :\n        res=res+s[i]\n        i=i+1\n    return res", "user": "userdId_24", "attemptID": 47, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-20.064924", "embeddingY": "38.960045"},{"extension": "py", "date": "2020-03-05 06:40:36", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  for debut1 in range (fin2):\n    res=True\n    \n  for debut2 in range(fin1):\n    res=True\n    \n  \n  return res\n  ", "user": "userdId_5", "attemptID": 48, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "65.121025", "embeddingY": "-31.13552"},{"extension": "py", "date": "2020-04-01 05:24:46", "correct": "0", "upload": "def quatrePlus100(liste):\n  i=0\n  res=[]\n  while i<len(liste) and len(res)<4:\n    if liste[i]>100:\n      res=res+liste[i]\n    i=i+1\n  return res", "user": "userdId_12", "attemptID": 49, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-27.147808", "embeddingY": "41.439182"},{"extension": "py", "date": "2020-03-17 05:12:08", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  res=''\n  if fin>len(s):\n    res=res+fin\n  for i in range(debut,debut+longueur):\n      res=res+s[i]\n  return res", "user": "userdId_25", "attemptID": 50, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-78.83529", "embeddingY": "7.693863"},{"extension": "py", "date": "2020-04-05 03:38:58", "correct": "0", "upload": "def moyenne(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    s=0\n    for elem in liste:\n      s+=elem\n    res=s//len(liste)\n  return res", "user": "userdId_26", "attemptID": 51, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-8.535286", "embeddingY": "-15.921522"},{"extension": "py", "date": "2020-03-31 03:16:22", "correct": "0", "upload": "def fusion(liste1,liste2):\n  res=[]\n  i=0\n  j=0\n  while i<len(liste1) and j<len(liste2):\n    if liste1[i]<=liste2[j]:\n      res.append(liste1[i])\n      i+=1\n    else:\n      res.append(liste2[j])\n      j+=1\n    if len(liste1)<len(liste2):\n      res.append(liste2[j])\n      j+=1\n    else:\n      res.append(liste1[i])\n      i+=1\n  return res", "user": "userdId_8", "attemptID": 52, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-43.235756", "embeddingY": "53.164875"},{"extension": "py", "date": "2020-03-02 09:23:21", "correct": "0", "upload": "def qualifJO(sexe,record,nbvictoires,champion):\n    res = False\n    if (sexe == \"F\" or sexe == \"M\") and record > 0 and nbvictoires > 0 and type(champion) == bool:\n\t    if sexe == \"F\" and record < 15 or sexe == \"M\" and record < 12 and nbvictoires >= 3 or champion == True:\n         \tres = True\n        \n    \n    return res", "user": "userdId_4", "attemptID": 53, "exercise": "78ec7738f3a7f3553d4a5c653534c32d", "exercise_name": "qualifJO", "embeddingX": "66.98957", "embeddingY": "-11.457941"},{"extension": "py", "date": "2020-03-29 23:46:13", "correct": "0", "upload": "def permutationListe(liste,permutation):\n  res = liste\n  for i in range(len(liste)) :\n    res[permutation[i]] = liste[i]\n  return res", "user": "userdId_6", "attemptID": 54, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-50.05362", "embeddingY": "-30.878904"},{"extension": "py", "date": "2020-03-06 00:18:15", "correct": "1", "upload": "def nbOccurrencesLettre(lettre,mot):\n\tres=0\n\tfor l in mot:\n\t\tif l==lettre:\n\t\t\tres+=1\n\treturn res", "user": "userdId_19", "attemptID": 55, "exercise": "2864c9e5861229d2ff32570f6bc944fb", "exercise_name": "nbOccurrencesLettre", "embeddingX": "-10.119733", "embeddingY": "-27.217731"},{"extension": "py", "date": "2020-04-07 19:48:29", "correct": "1", "upload": "def produitScalaire(vec1,vec2):\n  res=0\n  for i in range(len(vec1)):\n    res=vec1[i]*vec2[i]+res\n  return res", "user": "userdId_3", "attemptID": 56, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-49.48623", "embeddingY": "-35.977932"},{"extension": "py", "date": "2020-03-22 05:00:50", "correct": "0", "upload": "def polynome(a,b,c):\n  delta=b**2-4*a*c\n  if delta>0:\n    x=(-b+(delta**0.5))/2*a,(-b-(delta**0.5))/2*a\n  elif delta==0:\n    x=-b/2*a\n  else:\n    x='pas de solution'\n  return x", "user": "userdId_12", "attemptID": 57, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-57.998016", "embeddingY": "7.5856166"},{"extension": "py", "date": "2020-04-11 08:02:48", "correct": "0", "upload": "def sousChaine(s1,s2):\n  res=True\n  i=0\n  j=0\n  while i<len(s1) and j<len(s2) and s1[i]!=s2[j]:\n    j+=1\n  else:\n    while i<len(s1) and j<len(s2) and s1[i]==s2[j]:\n      if s1[i]==s2[j]:\n        res=False\n      i+=1\n      j+=1  \n  return res", "user": "userdId_8", "attemptID": 58, "exercise": "4bdf8c9c5d020593e1771e4d3ae1ae0d", "exercise_name": "sousChaine", "embeddingX": "-4.8939857", "embeddingY": "58.72064"},{"extension": "py", "date": "2020-03-10 04:21:50", "correct": "1", "upload": "def sommeNPremiersEntiers(n):\n  res=0\n  for i in range(n+1):\n    res=res+i\n  return res", "user": "userdId_26", "attemptID": 59, "exercise": "c315a540cf0bfb0182dc114c6f0eafd1", "exercise_name": "sommeNPremiersEntiers", "embeddingX": "-19.778566", "embeddingY": "12.961775"},{"extension": "py", "date": "2020-03-16 08:33:54", "correct": "0", "upload": "def prononcable(mot):\n  if len(mot)==0:\n    return True\n  for lettre in mot:\n    if lettre=='aeiouy' and lettre!=3*lettre:\n      if lettre!='aeiouy' and lettre!=3*lettre:\n        return True\n    else:\n      return False", "user": "userdId_1", "attemptID": 60, "exercise": "6318b210c201fba050d60bc0913cb7ef", "exercise_name": "prononcable", "embeddingX": "17.234299", "embeddingY": "-44.04855"},{"extension": "py", "date": "2020-04-12 08:37:36", "correct": "0", "upload": "def suiteAriGeo(liste):\n  i=0\n  while i<len(liste)-1:\n    a=liste[0]\n    b=liste[0]\n    if liste[i+1]==liste[i]+(liste[1]-liste[0]):\n      b=liste[1]-liste[0]\n    if liste[0]!=0:                        \n      if liste[i+1]==liste[i]*liste[1]/liste[0]:\n        a=liste[1]/liste[0]\n        b=0\n    if liste[i+1]==liste[i]*(liste[1]-liste[0])+(liste[i]-(liste[i-1]*a)):\n      a=liste[1]-liste[0]\n      b=liste[i]-(liste[i-1]*a)\n    i=i+1\n  ok=True\n  i=0\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=a*liste[i]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 61, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "34.9685", "embeddingY": "83.909"},{"extension": "py", "date": "2020-04-12 05:35:37", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n    if len(liste)==0:\n      res=True\n    else:\n      res=True\n      i=0\n      while i<len(liste) and res:\n        if liste[i]!=a*liste[i-1]+b:\n          res=False\n      return res\n    ", "user": "userdId_11", "attemptID": 62, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-82.623695", "embeddingY": "16.843872"},{"extension": "py", "date": "2020-04-13 21:35:02", "correct": "0", "upload": "def suiteAri(liste):\n  res=True\n  if len(liste)>1:\n    r=liste[1]-liste[0]\n    res=True\n    n=1\n  while n<len(liste) and ok:\n    if liste[n]!=liste[n-1]*1+r:\n      ok=False\n    n+=1\n  return res", "user": "userdId_8", "attemptID": 63, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "11.983859", "embeddingY": "55.855324"},{"extension": "py", "date": "2020-03-27 05:53:35", "correct": "0", "upload": "def quatrePlus100(liste):\n  i=0\n  while i>len(liste)and len(res)<4:\n    if l[i]>100:\n      res=res+[liste[i]]\n    i=i+1\n  return res", "user": "userdId_20", "attemptID": 64, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-19.177193", "embeddingY": "44.08492"},{"extension": "py", "date": "2020-03-08 23:24:26", "correct": "0", "upload": "from math import sqrt\n\ndef polynome(a,b,c):\n  d=b**2-(4*a*c)\n  if d<0:\n    return 'pas de solution'\n  elif d==0:\n    solution=-b/(2*a)\n    return solution\n  else:\n    if d>0:\n      solution1=(-b+sqrt(d))/(2*a)\n      solution2=(-b-sqrt(d))/(2*a)\n      return [solution1,solution2]", "user": "userdId_1", "attemptID": 65, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-49.645245", "embeddingY": "9.244743"},{"extension": "py", "date": "2020-04-06 07:15:27", "correct": "1", "upload": "def elemAri(n,u0,r):\n  res=u0\n  for i in range(n):\n    res=res+r\n  return res", "user": "userdId_27", "attemptID": 66, "exercise": "f239498950e974e29e01472749d9a09d", "exercise_name": "elemAri", "embeddingX": "-23.482685", "embeddingY": "13.5801525"},{"extension": "py", "date": "2020-03-05 06:42:22", "correct": "0", "upload": "from math import sqrt\ndef polynome(a,b,c):\n  x=0\n  delta=b**2-4*a*c\n  if delta>0 :\n    x=(-b-sqrt(delta))/2*a;(-b+sqrt(delta))/2-a\n  elif delta==0 :\n    x=-b/2*a\n  else :\n    x='pas de solution'\n  return x\n\n    \n", "user": "userdId_28", "attemptID": 67, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-52.89636", "embeddingY": "10.78606"},{"extension": "py", "date": "2020-04-07 03:17:01", "correct": "0", "upload": "def suiteAriGeo(liste):\n  if len(liste)<2:\n    ok=True\n  else:\n    ok=True\n    ecart1=liste[1]-liste[0]\n    ecart2=liste[2]-liste[1]\n    a=ecart2/ecart1\n    b=-a*liste[0]+liste[1]\n    if a*liste[2]+b!=liste[3]:\n      ok=False\n  return ok", "user": "userdId_18", "attemptID": 68, "exercise": "4c9665daf155b115fe13218141fa1aff", "exercise_name": "suiteAriGeo", "embeddingX": "37.484447", "embeddingY": "76.22297"},{"extension": "py", "date": "2020-03-06 00:40:14", "correct": "0", "upload": "def nbOccurrencesLettre(lettre,mot):\n    if len(mot) == 0:\n      res = 0\n    else:\n      res = 0\n      if l == lettre:\n        res+=1\n    return res", "user": "userdId_29", "attemptID": 69, "exercise": "2864c9e5861229d2ff32570f6bc944fb", "exercise_name": "nbOccurrencesLettre", "embeddingX": "11.063985", "embeddingY": "-47.95898"},{"extension": "py", "date": "2020-04-12 11:07:56", "correct": "0", "upload": "def phrasePalindrome(phrase):\n    if len(phrase)==0:\n      res=True\n    else:\n      res=True\n      i=0\n      x=''\n      while i<len(phrase)//2 and res:\n        if phrase[i]==x:\n          phrase=phrase-phrase[i]\n        else:\n          if phrase[i]!=phrase[-(i+1)]:\n            res=False\n        i+=1\n    return res", "user": "userdId_11", "attemptID": 70, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "33.710983", "embeddingY": "34.88293"},{"extension": "py", "date": "2020-03-03 00:06:35", "correct": "0", "upload": "def jourNuit(heure):\n  if heure > 24 or heure < 0 :\n    res = (\"l'heure saisie est invalide\")\n  elif heure >= 6 and heure <= 18 :\n    if heure >= 5 and heure <= 12 :\n      res = (\"on est le matin et il fait jour\")\n    elif heure > 12 and heure < 17 :\n      res = (\"on est l'apr\u00e8s-midi et il fait jour\")\n    else :\n      res = (\"on est le soir et il fait jour\")\n  else :\n    if heure >= 5 and heure < 12 :\n      res = (\"on est le matin et il fait nuit\")\n    elif heure > 12 and heure < 17 :\n      res = (\"on est l'apr\u00e8s-midi et il fait nuit\")\n    elif heure > 17 and heure < 21 :\n      res = (\"on est le soir et il fait nuit\")\n    else :\n      res = (\"on est la nuit et il fait nuit\")\n  return res", "user": "userdId_17", "attemptID": 71, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "75.63871", "embeddingY": "21.686453"},{"extension": "py", "date": "2020-04-10 00:21:01", "correct": "0", "upload": "def suiteAriGeo(liste):\n  i=0\n  while i<len(liste)-1:\n    a=liste[1]-liste[0]\n    b=liste[1]-liste[0]\n    if liste[i+1]==liste[i]*a:\n        b=0 and a==liste[1]/liste[0]\n    if liste[i+1]==liste[i]+b:\n      a=1 and b==liste[1]-liste[0]\n    i=i+1\ndef verifSuiteAriGeo(liste,a,b):\n  ok=True\n  i=0\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=a*liste[i]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 72, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "30.661165", "embeddingY": "78.769104"},{"extension": "py", "date": "2020-03-07 03:06:50", "correct": "0", "upload": "def nbSyllabes(mot):\n  if len(mot)==0:\n    return 0\n  else:\n    if (mot[0] in 'aeiouy'):\n      cpt = 0\n    else:\n      cpt = 1\n    for i in range (0, len(mot)-1):\n      if not(mot[i] in 'aeiouy') and (mot[i+1] in 'aeiouy'):\n        cpt+=1\n    return cpt\n        ", "user": "userdId_6", "attemptID": 73, "exercise": "1c86bec0f4df503e23db53994f3d2991", "exercise_name": "nbSyllabes", "embeddingX": "-29.181952", "embeddingY": "-69.81897"},{"extension": "py", "date": "2020-04-05 11:55:52", "correct": "1", "upload": "def motPalindrome(mot):\n  ok=True\n  i=0\n  j=len(mot)-1\n  while i<j and ok:\n    if mot[i]!=mot[j]:\n      ok=False\n    i=i+1\n    j=j-1\n  return ok", "user": "userdId_1", "attemptID": 74, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "20.029346", "embeddingY": "59.38014"},{"extension": "py", "date": "2020-04-05 08:53:19", "correct": "0", "upload": "def produitScalaire(vec1,vec2):\n  res=0\n  for i in range(4):\n    res+=[vec1[i]]*[vec2[i]]\n  return res", "user": "userdId_26", "attemptID": 75, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-55.32963", "embeddingY": "-7.46998"},{"extension": "py", "date": "2020-04-09 09:01:24", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n    cpt=0\n    decomp=nombre\n    while decomp!=0:\n      if decomp==chiffre:\n        cpt+=1\n        decomp=decomp%10\n    if cpt==0:\n      cpt=1\n    return cpt\n    ", "user": "userdId_11", "attemptID": 76, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "11.153989", "embeddingY": "11.395062"},{"extension": "py", "date": "2020-03-31 00:37:44", "correct": "1", "upload": "def stockerChiffres(nombre):\n  res = []\n  for nb in str(nombre):\n    res.append(int(nb))\n  res.reverse()\n  return res ", "user": "userdId_4", "attemptID": 77, "exercise": "49a87f644f84a443327fb4315b47f249", "exercise_name": "stockerChiffres", "embeddingX": "-38.498154", "embeddingY": "2.3526185"},{"extension": "py", "date": "2020-03-23 02:04:03", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n  if len(mot)==0:\n    res=None \n  else:\n    res=[]\n    for i in range(len(mot)): \n      if lettre==mot[i]:\n        res=i\n  return res", "user": "userdId_16", "attemptID": 78, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-19.286955", "embeddingY": "-40.31674"},{"extension": "py", "date": "2020-03-19 23:29:09", "correct": "0", "upload": "def reconstruireChainePartielle(s,n):\n  if s=='':\n    res=s\n  for i in range(s,n):\n    res=res+i\n  return res", "user": "userdId_2", "attemptID": 79, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-21.463057", "embeddingY": "-23.773352"},{"extension": "py", "date": "2020-03-03 06:43:31", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1<annee2:\n    res=-1\n  elif annee1>annee2:\n    res=1\n  else:\n    if annee1==annee2:\n      if mois1==mois2:\n        if jour1==jour2:\n          res=0\n  return res", "user": "userdId_30", "attemptID": 80, "exercise": "af7c1467ef9f7684d9ff58734067ae98", "exercise_name": "compareDates", "embeddingX": "79.20543", "embeddingY": "-35.82526"},{"extension": "py", "date": "2020-05-04 20:25:33", "correct": "0", "upload": "def polynome(a,b,c):\n  res=\"pas de solution\"\n  delta=b**2-4*a*c\n  if delta>0:\n    S1=(-b+delta**(1/2))/2*a\n    S2=(-b-delta**(1/2))/2*a\n    res=(S1,S2)\n  elif delta==0:\n    res=-b/2*a\n  return res", "user": "userdId_8", "attemptID": 81, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-50.63615", "embeddingY": "11.5837965"},{"extension": "py", "date": "2020-03-12 10:13:01", "correct": "0", "upload": "def maximum(liste):\n  max=liste[0]\n  for i in (liste):\n       if max<liste(i):\n            max=liste(i)\n  else:\n    if max>liste(i):\n         max= max\n  return max", "user": "userdId_20", "attemptID": 82, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "37.538223", "embeddingY": "-58.438484"},{"extension": "py", "date": "2020-03-14 00:16:58", "correct": "0", "upload": "def minimum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=liste[0]\n    for i in liste[i]:\n      if liste[i]<i:\n        res=liste[i]\n  return res", "user": "userdId_14", "attemptID": 83, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "15.796444", "embeddingY": "-54.265427"},{"extension": "py", "date": "2020-04-06 15:09:04", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  i=0\n  for i in range(nombre):\n    if chiffre==nombre[i]:\n      cpt=cpt+1\n    i=i+1\n  return cpt", "user": "userdId_3", "attemptID": 84, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-20.843739", "embeddingY": "-31.569937"},{"extension": "py", "date": "2020-03-06 00:27:33", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n  if len(mot)==0:\n    pos=None\n  else:\n    for elem in mot:\n      if lettre==elem:\n        pos=mot[elem]\n      else:\n        pos=None\n        \n  return pos", "user": "userdId_15", "attemptID": 85, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-13.664241", "embeddingY": "-33.41528"},{"extension": "py", "date": "2020-04-12 08:19:23", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n    cpt=0\n    x=nombre%10\n    decomp=nombre\n    while decomp!=0:\n      if x==chiffre:\n        cpt+=1\n        decomp=decomp//10\n        x=decomp%10\n      else:\n        decomp=decomp//10\n        x=decomp%10\n    if x==0:\n      cpt=1\n    return cpt", "user": "userdId_11", "attemptID": 86, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "7.2041793", "embeddingY": "15.341877"},{"extension": "py", "date": "2020-03-09 21:59:51", "correct": "1", "upload": "def sommeNPremiersEntiers(n):\n    if n<1:\n      return 0\n    return ((n/2)*(n+1))", "user": "userdId_6", "attemptID": 87, "exercise": "c315a540cf0bfb0182dc114c6f0eafd1", "exercise_name": "sommeNPremiersEntiers", "embeddingX": "64.55469", "embeddingY": "11.240912"},{"extension": "py", "date": "2020-03-06 00:50:09", "correct": "0", "upload": "def ecart(liste):\n  if len(liste)==2:\n    res=0\n  if len(liste)==0:\n    res=None\n  return res", "user": "userdId_14", "attemptID": 88, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "12.788272", "embeddingY": "-50.34846"},{"extension": "py", "date": "2020-04-12 08:39:30", "correct": "0", "upload": "def suiteAriGeo(liste):\n  i=0\n  while i<len(liste)-1:\n    a=liste[0]\n    b=liste[0]\n    if liste[i+1]==liste[i]+(liste[1]-liste[0]):\n      b=liste[1]-liste[0]\n    if liste[0]!=0:                        \n      if liste[i+1]==liste[i]*liste[1]/liste[0]:\n        a=liste[1]/liste[0]\n        b=0\n    if liste[i+1]==liste[i]*(liste[1]-liste[0])+(liste[i]-(liste[i-1]*(liste[1]-liste[0]))):\n      a=liste[1]-liste[0]\n      b=liste[i]-(liste[i-1]*a)\n    i=i+1\n  ok=True\n  i=0\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=a*liste[i]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 89, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "35.199112", "embeddingY": "84.386345"},{"extension": "py", "date": "2020-03-10 03:14:18", "correct": "0", "upload": "def jourNuit(heure):\n    if heure<0 or heure>24:\n      res=\"l'heure saisie est invalide\"\n    else:\n      if heure<5 or heure>21:\n        res=\"on est le soir\"\n      elif heure<12:\n        res=\"on est le matin\"\n      elif heure<17:\n        res=\"on est l'apres midi\"\n      else:\n        res=\"on est le soir\"\n      if heure<6 or heure>=18:\n        res=res+\" et il fait nuit\"\n      else:\n        res=res+\" et il fait jour\"\n    return res", "user": "userdId_9", "attemptID": 90, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "72.308014", "embeddingY": "12.93437"},{"extension": "py", "date": "2020-04-06 06:21:25", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  i=0\n  for i in range(nombre):\n    if chiffre==nombre[i]:\n      cpt=cpt+1\n    i=i+1\n  return cpt", "user": "userdId_3", "attemptID": 91, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-20.850468", "embeddingY": "-31.579306"},{"extension": "py", "date": "2020-03-31 05:03:17", "correct": "1", "upload": "def listeSymetrique(l):\n  trouve=True\n  i=0\n  j=len(l)-1\n  while i<len(l) and j<len(l) and trouve:\n    if l[i]!=l[j]:\n      trouve=False\n    i+=1\n    j-=1\n  return trouve", "user": "userdId_27", "attemptID": 92, "exercise": "8eb27aeda471a467e2223abebeca886e", "exercise_name": "listeSymetrique", "embeddingX": "36.482315", "embeddingY": "46.642567"},{"extension": "py", "date": "2020-04-07 03:02:22", "correct": "0", "upload": "def suiteGeo(liste):\n  i=1\n  ok=True\n  if len(liste)>=2 and liste[0]!=0:\n    raison=liste[1]/liste[0]\n    while i<len(liste)-1 and ok:\n      ok=liste[i+1]==liste[i]*raison\n      i+=1\n  return ok", "user": "userdId_12", "attemptID": 93, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "25.075407", "embeddingY": "68.03612"},{"extension": "py", "date": "2020-03-06 00:20:50", "correct": "0", "upload": "def maximum(liste):\n  res= (liste[0])\n  for elem in liste:\n    if  res < elem:\n      res=elem\n  return res", "user": "userdId_20", "attemptID": 94, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "41.930874", "embeddingY": "-57.596603"},{"extension": "py", "date": "2020-03-17 05:47:43", "correct": "0", "upload": "def maximum(liste):\n    if len (liste)==0:\n      res=none\n    else:\n         res=liste[0]\n         for elem in liste:\n             res=elem\n          \n    return res", "user": "userdId_22", "attemptID": 95, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-3.1911666", "embeddingY": "-35.818695"},{"extension": "py", "date": "2020-04-07 00:53:27", "correct": "1", "upload": "def nbOccurrencesLettre(lettre,mot):\n  res=0\n  for i in range(len(mot)):\n    if lettre==mot[i]:\n      res+=1\n  return res", "user": "userdId_16", "attemptID": 96, "exercise": "2864c9e5861229d2ff32570f6bc944fb", "exercise_name": "nbOccurrencesLettre", "embeddingX": "-20.981485", "embeddingY": "-38.766052"},{"extension": "py", "date": "2020-04-10 00:26:06", "correct": "0", "upload": "def suiteAriGeo(liste):\n  i=0\n  while i<len(liste)-1:\n    a=liste[1]-liste[0]\n    b=liste[1]-liste[0]\n    if liste[i+1]==liste[i]*a:\n        b=0 and a==liste[1]/liste[0]\n    if liste[i+1]==liste[i]+b:\n      a=1 and b==liste[1]-liste[0]\n    i=i+1\n  i=0\n  ok=True\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=a*liste[i]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 97, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "32.201115", "embeddingY": "74.55048"},{"extension": "py", "date": "2020-04-14 03:50:24", "correct": "0", "upload": "def listeDecroissante(scores):\n   for i in range(len(scores)):\n      if scores[i]<scores[i+1]:\n        return False\n      else: \n        return True", "user": "userdId_31", "attemptID": 98, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "18.851746", "embeddingY": "-69.134995"},{"extension": "py", "date": "2020-03-03 03:55:46", "correct": "1", "upload": "def somme(liste):\n  res=0\n  for elem in liste:\n  \tres+=elem\n  return res", "user": "userdId_32", "attemptID": 99, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-25.940208", "embeddingY": "-1.6066942"},{"extension": "py", "date": "2020-03-06 00:47:19", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    res=0\n  else:\n      res=0\n      i=\"a,e,i,o,u,y\"\n      if i in mot:\n        res=res+1\n  return res             \n\n      \n    ", "user": "userdId_33", "attemptID": 100, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "4.994054", "embeddingY": "-33.191555"},{"extension": "py", "date": "2020-04-05 11:18:48", "correct": "1", "upload": "def sousChaine(s1,s2):\n    if s1=='':\n      ok=True\n    elif s2=='':\n      ok=False\n    else:\n      ok=False\n      cpt=0\n      i=0\n      j=0\n      while i<len(s1) and j<len(s2) and not ok:\n        if s1[i]==s2[j]:\n          cpt+=1\n          i+=1\n          j+=1\n        else:\n          cpt=0\n          i=0\n          j+=1\n        if cpt==len(s1):\n          ok=True\n    return ok", "user": "userdId_18", "attemptID": 101, "exercise": "a7cdd094daa2f0bfccc7a4ec419f7243", "exercise_name": "sousChaine", "embeddingX": "-3.0882332", "embeddingY": "63.22238"},{"extension": "py", "date": "2020-03-05 23:47:09", "correct": "0", "upload": "def maximum(liste):\n  res=0\n  for elem in liste:\n    if liste>elem:\n      res=elem\n  return res", "user": "userdId_23", "attemptID": 102, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "31.248314", "embeddingY": "-41.550716"},{"extension": "py", "date": "2020-03-31 09:11:37", "correct": "0", "upload": "def plusLongueSuite(liste):\n    if len(liste)==0:\n      cptMax=0\n    else:\n      elemPrec=None\n      cpt=0\n      cptMax=0\n      for elem in liste:\n        if elem==elemPrec:\n          cpt+=1\n        else:\n          if cpt>cptMax:\n            cptmax=cpt\n          cpt=1\n        elemPrec=elem\n      if cpt>cptMax:\n        cptMax=cpt\n    return cptMax\n        ", "user": "userdId_11", "attemptID": 103, "exercise": "deed004abb317b11778f7e8247197a40", "exercise_name": "plusLongueSuite", "embeddingX": "10.070551", "embeddingY": "-7.332359"},{"extension": "py", "date": "2020-04-02 22:49:28", "correct": "1", "upload": "def indiceOccurrence(n,x,l):\n  trouve=False\n  i=0\n  cpt=0\n  while i<len(l) and not trouve:\n    if l[i]==x:\n      cpt+=1\n    if cpt==n:\n      trouve=True\n    i+=1\n  #post traitement\n  if trouve:\n    res=i-1\n  else:\n    res=None\n  return res", "user": "userdId_34", "attemptID": 104, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-1.3638494", "embeddingY": "68.94091"},{"extension": "py", "date": "2020-04-06 15:04:58", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  i=0\n  for i in nombre:\n    if chiffre==nombre[i]:\n      cpt=cpt+1\n    i=i+1\n  return cpt", "user": "userdId_3", "attemptID": 105, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-36.96441", "embeddingY": "-13.654741"},{"extension": "py", "date": "2020-03-06 00:10:43", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    res=0\n  else:\n    for elem in mot:\n      res=0\n      if elem=='a':\n        res=res+1\n  return res     ", "user": "userdId_14", "attemptID": 106, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "2.7125223", "embeddingY": "-26.727135"},{"extension": "py", "date": "2020-03-06 00:42:37", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n  if len(mot)==0:\n    pos=None\n  else:\n    cpt=0\n    for elem in mot:\n      cpt=cpt+1\n      if lettre==elem:\n        pos=elem\n      else:\n        pos=None\n        \n  return pos", "user": "userdId_15", "attemptID": 107, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-11.839328", "embeddingY": "-22.151068"},{"extension": "py", "date": "2020-03-22 10:00:22", "correct": "0", "upload": "def bissextile(annee):\n\tif annee%4==0 or annee%400==0:\t\t\n\t\tres=True\n\telif annee%100==0:\n\t\tres=False\n\treturn res", "user": "userdId_21", "attemptID": 108, "exercise": "a7d37636649c0ada991520788deeb2d0", "exercise_name": "bissextile", "embeddingX": "44.583904", "embeddingY": "-0.12352354"},{"extension": "py", "date": "2020-03-15 21:42:24", "correct": "1", "upload": "def qualifJO(sexe,record,nbvictoires,champion):\n  if champion==True:\n    res=True\n  elif sexe=='M' and record<12.0 and nbvictoires>=3:\n    res=True\n  elif sexe=='F' and record<15.0 and nbvictoires>=3:\n    res=True\n  else:\n    res=False\n  return res", "user": "userdId_32", "attemptID": 109, "exercise": "891e7b0ed5fbddb755edc84d479bc1ef", "exercise_name": "qualifJO", "embeddingX": "63.959293", "embeddingY": "-10.8477335"},{"extension": "py", "date": "2020-03-31 04:03:30", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n  cpt=0\n  i=0\n  while i<len(l) and cpt<n:\n    if l[i]==x:\n       cpt=cpt+1\n    i=i+1\n  if cpt==0:\n    res=None\n  else:\n    res=l[cpt]\n  return res", "user": "userdId_12", "attemptID": 110, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-6.1020794", "embeddingY": "77.2011"},{"extension": "py", "date": "2020-03-08 23:24:43", "correct": "1", "upload": "from math import sqrt\n\ndef polynome(a,b,c):\n  d=b**2-(4*a*c)\n  if d<0:\n    return 'pas de solution'\n  elif d==0:\n    solution=-b/(2*a)\n    return solution\n  else:\n    if d>0:\n      solution1=(-b+sqrt(d))/(2*a)\n      solution2=(-b-sqrt(d))/(2*a)\n      return (solution1,solution2)", "user": "userdId_1", "attemptID": 111, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-51.843414", "embeddingY": "6.814907"},{"extension": "py", "date": "2020-03-05 23:48:03", "correct": "0", "upload": "def somme(liste):\n  res=0\n  for elem in list:\n    res=res+elem\n  return res", "user": "userdId_20", "attemptID": 112, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-31.6918", "embeddingY": "-12.940065"},{"extension": "py", "date": "2020-04-07 04:09:12", "correct": "1", "upload": "def motPalindrome(mot):\n  i=0\n  ok=True\n  res=False\n  while i<len(mot)/2 and ok:\n    if mot[i]!=mot[-i-1]:\n      ok=False\n    i+=1\n  if ok: \n    res=True\n  return res", "user": "userdId_32", "attemptID": 113, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "32.306026", "embeddingY": "46.310307"},{"extension": "py", "date": "2020-04-17 00:24:06", "correct": "1", "upload": "def meilleurClassementJoueur(scores,joueurs,nom):\n  i=0\n  while i<len(scores):\n    if nom==joueurs[i]:\n      return i+1\n    i+=1\n  return -1", "user": "userdId_34", "attemptID": 114, "exercise": "be6ce0a06c5d396190024c7c681da95d", "exercise_name": "meilleurClassementJoueur", "embeddingX": "-13.509242", "embeddingY": "67.52106"},{"extension": "py", "date": "2020-04-12 06:10:20", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=False\n  c=[]\n  e=liste\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n  return e", "user": "userdId_8", "attemptID": 115, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-65.09215", "embeddingY": "18.535307"},{"extension": "py", "date": "2020-03-22 05:25:07", "correct": "0", "upload": "def maximum(liste):\n  maxi=liste[0]\n  for i in range(liste):\n    if liste[i]>maxi:\n      maxi=elem\n  return maxi", "user": "userdId_12", "attemptID": 116, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-49.389397", "embeddingY": "-17.131943"},{"extension": "py", "date": "2020-03-05 22:01:21", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=None\n    for i in range(len(liste)):\n      if res>liste[i]:\n        res=liste[i]\n  return res", "user": "userdId_30", "attemptID": 117, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "1.1692673", "embeddingY": "-56.59575"},{"extension": "py", "date": "2020-03-15 06:17:43", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n    if debut1<fin2 or fin1<debut2:\n      res=False\n    else:\n      res=True\n    return res", "user": "userdId_21", "attemptID": 118, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "61.107418", "embeddingY": "-19.80558"},{"extension": "py", "date": "2020-03-31 05:34:02", "correct": "0", "upload": "def nbChiffres(nombre):\n  res=0\n  nb=nombre\n  cpt=1\n  while nb%10!=0:\n    cpt=cpt+1\n    nb=nb//10\n  return cpt\n    \n    ", "user": "userdId_28", "attemptID": 119, "exercise": "3dcf332c003a1f3bf15df22ee17884a3", "exercise_name": "nbChiffres", "embeddingX": "0.5579823", "embeddingY": "17.310919"},{"extension": "py", "date": "2020-03-12 23:57:40", "correct": "0", "upload": "def jourNuit(heure):\n  \n  if heure<0 or heure>24 :\n    res=\"l'heure saisie est invalide\"\n  else : \n    if heure>=6 and heure<18 :\n      res=\"et il fait jour\"\n    else :\n      res=\"et il fait nuit\"\n  \n  if heure>=5 and heure<12 :\n    res=\"on est le matin\"+res\n  elif heure>=12 and heure<17 :\n    res=\"on est l'apr\u00e8s-midi\"+res\n  elif heure>=17 and heure<21 :\n    res=\"on est le soir\"+res\n  else :\n    res=\"on est la nuit\"+res\n    \n  return res", "user": "userdId_15", "attemptID": 120, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "78.45027", "embeddingY": "20.31868"},{"extension": "py", "date": "2020-04-06 05:32:44", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  i=0\n  mot=[]\n  phrs=[]\n  mts=True\n  res=True\n  while i<len(phrase):\n    if phrase[i]!=\" \" and mts==True:\n      mot+=phrase[i]\n    elif phrase[i]==\" \":\n      mts=False\n    elif phrase[i]!=\" \":\n      phrs+=phrase[i]\n    i+=1\n  while i<len(mot) and res==True:\n    if mot[i]==phrs[-i-1]:\n      res=True\n    else:\n      res=False\n    i+=1\n  return res", "user": "userdId_26", "attemptID": 121, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "40.80645", "embeddingY": "35.14226"},{"extension": "py", "date": "2020-04-13 22:30:19", "correct": "1", "upload": "def indiceInsertion(sc,scores):\n  i=0\n  c=True\n  res=0\n  while i<len(scores) and c:\n    if sc>=scores[i]:\n      res=i\n      c=False\n    i+=1\n    if c:\n      res=len(scores)\n  return res", "user": "userdId_19", "attemptID": 122, "exercise": "f8a820b2bd54d18d36716e3d703858f7", "exercise_name": "indiceInsertion", "embeddingX": "-1.0339743", "embeddingY": "55.944103"},{"extension": "py", "date": "2020-03-14 09:34:53", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n    if debut1<fin2 or fin1<debut2:\n      res=False \n    else: \n      res=True\n    return res", "user": "userdId_21", "attemptID": 123, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "61.092007", "embeddingY": "-19.793072"},{"extension": "py", "date": "2020-03-12 21:36:32", "correct": "0", "upload": "def nbVoyelles(mot):\n   res=0\n   if mot==0:\n      res=0\n   return res", "user": "userdId_14", "attemptID": 124, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "41.110615", "embeddingY": "-2.3711479"},{"extension": "py", "date": "2020-03-22 10:35:27", "correct": "0", "upload": "def bissextile(a):\n\tif a%4==0 and a%100==0 or a%400==0:\n\t\tres=True \n\telse:\n\t\tres=False\n\treturn res", "user": "userdId_21", "attemptID": 125, "exercise": "a7d37636649c0ada991520788deeb2d0", "exercise_name": "bissextile", "embeddingX": "47.008385", "embeddingY": "0.9786234"},{"extension": "py", "date": "2020-03-27 06:50:39", "correct": "0", "upload": "def compare(chaine1,chaine2):\n  i=0\n  res=()\n  while i<len(chaine1) and i<len(chaine2):\n    if chaine1[i]<chaine2[i]:\n      res=-1\n    elif chaine1==chaine2:\n      res=0\n    else:\n      res=-1\n  i=i+1\n  return res", "user": "userdId_1", "attemptID": 126, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-24.482988", "embeddingY": "66.51899"},{"extension": "py", "date": "2020-04-07 02:59:50", "correct": "1", "upload": "def suiteAri(liste):\n  i=1\n  ok=True\n  if len(liste)>=2:\n    raison=liste[1]-liste[0]\n    while i<len(liste)-1 and ok:\n      ok=liste[i+1]==liste[i]+raison\n      i+=1\n  return ok", "user": "userdId_12", "attemptID": 127, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "31.98365", "embeddingY": "53.228836"},{"extension": "py", "date": "2020-05-04 21:54:13", "correct": "1", "upload": "def maximum(liste):\n  if liste==[]:\n    res=None\n  else:\n    res=liste[0]\n    for i in range(1,len(liste)):\n      if liste[i]>res:\n        res=liste[i]\n  return res", "user": "userdId_8", "attemptID": 128, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-6.646277", "embeddingY": "-63.945583"},{"extension": "py", "date": "2020-03-17 04:57:40", "correct": "1", "upload": "def reconstruireChainePartielle(s,n):\n    res=''\n    for i in range(0,len(s),n):\n      res=res+s[i]\n    return res", "user": "userdId_9", "attemptID": 129, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-60.052708", "embeddingY": "-41.73217"},{"extension": "py", "date": "2020-05-04 21:18:37", "correct": "1", "upload": "def bissextile(annee):\n  res=False\n  if annee%4==0 and annee%100!=0:\n    res=True\n  elif annee%400==0:\n    res=True\n  return res", "user": "userdId_26", "attemptID": 130, "exercise": "a7d37636649c0ada991520788deeb2d0", "exercise_name": "bissextile", "embeddingX": "47.791294", "embeddingY": "-0.22557488"},{"extension": "py", "date": "2020-03-03 06:22:25", "correct": "1", "upload": "def minimum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=liste[0]\n    for i in range(1,len(liste)):\n      if liste[i]<res:\n        res=liste[i]\n  return res", "user": "userdId_35", "attemptID": 131, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "26.34559", "embeddingY": "-68.090836"},{"extension": "py", "date": "2020-04-12 07:03:32", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  if liste==[]:\n    res=True\n  c=[]\n  res=False\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n    c=[liste[0]+2]+c\n  return c", "user": "userdId_8", "attemptID": 132, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-68.33085", "embeddingY": "19.81244"},{"extension": "py", "date": "2020-03-12 06:40:02", "correct": "0", "upload": "def maximum(liste):\n  res=(liste[0])\n  for i in liste:\n     if res<liste:\n      res=max\n  return res ", "user": "userdId_20", "attemptID": 133, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "39.514698", "embeddingY": "-59.14233"},{"extension": "py", "date": "2020-04-14 03:59:27", "correct": "0", "upload": "def listeDecroissante(scores):\n  ok=True\n  while i<len(scores) and ok:\n    if liste[i]>liste[i+1]:\n      res=ok\n    else:\n      res=Faux\n  return res", "user": "userdId_21", "attemptID": 134, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "-1.5028939", "embeddingY": "40.315838"},{"extension": "py", "date": "2020-03-12 21:42:37", "correct": "0", "upload": "def nbVoyelles(mot):\n  res=0\n  for lettre in mot:\n    if lettre in 'aeiouy':\n      res=res+1\n    return res", "user": "userdId_23", "attemptID": 135, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "13.918438", "embeddingY": "-26.315117"},{"extension": "py", "date": "2020-03-15 02:56:54", "correct": "0", "upload": "def doubleLettre(mot):\n  res=0\n  for l1 in mot:\n    if l1==\"abcdefghijklmnopqrstuvwxyz\" and l2==\"abcdefghijklmnopqrstuvwxyz\":\n      l1=l2\n  return res", "user": "userdId_8", "attemptID": 136, "exercise": "00da9cf1fa2b468d915724499459ed8f", "exercise_name": "doubleLettre", "embeddingX": "15.671286", "embeddingY": "-9.100614"},{"extension": "py", "date": "2020-05-04 20:14:07", "correct": "0", "upload": "def polynome(a,b,c):\n  res=\"pas de solution\"\n  delta=b**2-4*a*c\n  if delta>0:\n    res=(-b+print(sqrt(delta)))/2*a\n  return res", "user": "userdId_8", "attemptID": 137, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-52.519268", "embeddingY": "12.339114"},{"extension": "py", "date": "2020-03-10 04:27:51", "correct": "0", "upload": "def sommeNPremiersEntiers(n):\n  res=0\n  for i in range(n+1):\n      res=res+1\n  return res", "user": "userdId_36", "attemptID": 138, "exercise": "c315a540cf0bfb0182dc114c6f0eafd1", "exercise_name": "sommeNPremiersEntiers", "embeddingX": "-18.362984", "embeddingY": "13.747333"},{"extension": "py", "date": "2020-04-07 22:48:59", "correct": "0", "upload": "def suiteGeo(liste):\n  res = True\n  i = 0\n  if liste == [] or len(liste) == 1 :\n    res = True\n  else :\n    raison = liste[0]/liste[1]\n  while res and i < len(liste)-1 :\n    if liste[i]*raison != liste[i+1]:\n      res = False\n    i = i + 1\n  return res\n", "user": "userdId_17", "attemptID": 139, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "30.815256", "embeddingY": "70.86569"},{"extension": "py", "date": "2020-03-06 00:04:16", "correct": "0", "upload": "def moyenne(liste):\n  if liste==[]:\n    return None\n  else:\n    S=0\n    nbNotes=0\n    for i in liste:\n      S=S+liste[i]\n      nbNotes=nbNotes+1\n      \n  return S/nbNotes", "user": "userdId_15", "attemptID": 140, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-13.657662", "embeddingY": "-12.026625"},{"extension": "py", "date": "2020-03-14 03:26:57", "correct": "0", "upload": "def moyenne(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=0\n    x=0\n    for i in range(len(liste)):\n      res=res+i\n      x=x+1\n  moy=res%x\n  return moy", "user": "userdId_14", "attemptID": 141, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-6.3796706", "embeddingY": "-1.760083"},{"extension": "py", "date": "2020-04-06 15:19:58", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  i=0\n  for i in range(len(nombre)):\n    if nombre[i]==chiffre:\n      cpt=cpt+1\n    i=i+1\n  return cpt", "user": "userdId_3", "attemptID": 142, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-35.98049", "embeddingY": "-17.435043"},{"extension": "py", "date": "2020-04-10 00:59:34", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  res=True\n  if len(liste)==0 or len(liste)==1:\n    res=True\n  while i<len(liste)-1 and res:\n    if liste[0]==0:\n      res=False\n    if liste[i]!=0:\n      q=liste[1]/liste[0]\n    if liste[i]!=0:\n      if liste[i+1]/liste[0]!=q:\n        res=False\n    if liste[i] and liste[i+1]==0:\n      res=True\n    if liste[i]==0 and liste[i+1]==0:\n      res=True\n    i+=1\n  return res", "user": "userdId_26", "attemptID": 143, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "35.22095", "embeddingY": "62.26877"},{"extension": "py", "date": "2020-03-31 06:04:59", "correct": "0", "upload": "def stockerChiffres(nombre):\n  res=[]\n  while nombre!=0:\n    res.append(nombre%10)\n    nombre=nombre//10\n  if nombre==0:\n    res=[0]\n  return res", "user": "userdId_8", "attemptID": 144, "exercise": "49a87f644f84a443327fb4315b47f249", "exercise_name": "stockerChiffres", "embeddingX": "40.93417", "embeddingY": "12.860487"},{"extension": "py", "date": "2020-04-06 14:50:34", "correct": "0", "upload": "def produitScalaire(vec1,vec2):\n  for i in range(len(vec1),len(vec2)):\n    res=res+(vec1[i]*vec2[i])\n  return res", "user": "userdId_3", "attemptID": 145, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-46.157658", "embeddingY": "-28.611322"},{"extension": "py", "date": "2020-03-06 00:32:36", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    res=0\n  else:\n    for lettre in [\"a\",\"e\",\"i\",\"o\",\"u\",\"y\"]:\n      res=res+1\n  return res\n  \n      \n  \n\n ", "user": "userdId_9", "attemptID": 146, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "12.888423", "embeddingY": "-38.60079"},{"extension": "py", "date": "2020-03-15 02:56:46", "correct": "0", "upload": "def doubleLettre(mot):\n  res=0\n  for l1 in mot:\n    if l1==\"abcdefghijklmnopqrstuvwxyz\" and l2==\"abcdefghijklmnopqrstuvwxyz\":\n      l1=l2\n  return res", "user": "userdId_8", "attemptID": 147, "exercise": "00da9cf1fa2b468d915724499459ed8f", "exercise_name": "doubleLettre", "embeddingX": "15.66753", "embeddingY": "-9.100108"},{"extension": "py", "date": "2020-04-07 03:30:04", "correct": "0", "upload": "def suiteGeo(liste):\n  i=-1\n  ok=True\n  if len(liste)>1 and ok:\n    while i>-len(liste):\n      if liste[i-1]!=0 and liste[i]%liste[i-1]!=0:\n        ok=False\n      i-=1\n  if 0 in liste:\n    ok=False\n  return ok", "user": "userdId_12", "attemptID": 148, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "17.20239", "embeddingY": "31.215895"},{"extension": "py", "date": "2020-03-12 06:43:07", "correct": "0", "upload": "def maximum(liste):\n  res=liste[0]\n  for i in liste:\n    res=max\n    if res<liste:\n       res=max\n  return res", "user": "userdId_20", "attemptID": 149, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "38.99339", "embeddingY": "-59.001694"},{"extension": "py", "date": "2020-03-05 21:42:43", "correct": "0", "upload": "def somme(liste):\n  res=0\n  for i in range (len(liste)):\n   res=res+liste(i)\n  return None", "user": "userdId_23", "attemptID": 150, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-40.265842", "embeddingY": "-30.76103"},{"extension": "py", "date": "2020-04-14 04:15:44", "correct": "0", "upload": "def meilleurScoreJoueur(scores,joueurs,nom):\n  res=0\n  for i in range(len(joueurs)):\n    if joueurs[i]==nom:\n      return score[i]\n  return res", "user": "userdId_12", "attemptID": 151, "exercise": "c96fadc94086276f98451a798b3bb730", "exercise_name": "meilleurScoreJoueur", "embeddingX": "-24.57161", "embeddingY": "-35.926876"},{"extension": "py", "date": "2020-04-06 12:00:06", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=True\n  i=1\n  while i<len(liste):\n    if liste[i]!=a*liste[i-1]+b:\n      res=False\n    i+=1\n  return res\ndef suiteAri(liste):\n  i=1\n  a=1\n  b=0\n  while i<len(liste):\n    if liste[i]!=liste[i-1]:\n      b=liste[i]-liste[i-1]\n      a=liste[i]/liste[i-1]\n    i+=1 \n  return verifSuiteAriGeo(liste,a,b)", "user": "userdId_27", "attemptID": 152, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "15.481299", "embeddingY": "78.12674"},{"extension": "py", "date": "2020-03-17 05:34:04", "correct": "0", "upload": "def distribution(liste,n):\n  cpt=[0]*n+1\n  for elem in liste:\n    cpt[elem]+=1\n  return cpt\n  \n    ", "user": "userdId_9", "attemptID": 153, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-57.219604", "embeddingY": "-5.6753626"},{"extension": "py", "date": "2020-03-24 05:43:23", "correct": "0", "upload": "def compare(chaine1,chaine2):\n  i=0\n  res=0\n  while i<len(chaine1) and i<len(chaine2) and res==0:\n    if chaine1[i]<chaine2[i]:\n      res=-1\n    if chaine1[i]>chaine2[i]:\n      res=1\n  i=i+1\n  return res\n\n", "user": "userdId_13", "attemptID": 154, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-22.661293", "embeddingY": "64.79192"},{"extension": "py", "date": "2020-03-05 22:25:17", "correct": "0", "upload": "def prononcable(mot):\n  if len(mot)==0:\n    return None\n  elif len(mot)<4:\n    return True\n  else:\n    cpt=0\n    laLettrePrecedenteEstUneVoyelle = (mot[0] in 'aeiouy')\n    for i in mot :\n      if (i in 'aeiouy') == laLettrePrecedenteEstUneVoyelle:\n        cpt+=1\n        if cpt == 4:\n          return False\n      else:\n        cpt = 1\n        laLettrePrecedenteEstUneVoyelle = not laLettrePrecedenteEstUneVoyelle \n    return True", "user": "userdId_6", "attemptID": 155, "exercise": "6318b210c201fba050d60bc0913cb7ef", "exercise_name": "prononcable", "embeddingX": "16.133219", "embeddingY": "-14.971571"},{"extension": "py", "date": "2020-03-06 00:34:19", "correct": "0", "upload": "def ecart(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=0\n    def maximum(liste):\n      maxi=liste[0]\n      for i in range(len(liste)):\n        if liste[i]>maxi:\n          maxi=liste[i]\n    def minimum(liste):\n      mini=liste[0]\n      for i in range(len(liste)):\n        if liste[i]<mini:\n          mini=liste[i]\n    res=maxi-mini\n  return res", "user": "userdId_12", "attemptID": 156, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "7.7249064", "embeddingY": "-46.223644"},{"extension": "py", "date": "2020-04-07 23:25:47", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  ok=True\n  i=0\n  while i<len(phrase)//2 and ok:\n    if phrase[i]!=phrase[-i-1]:\n      ok=False\n    i+=1\n  return ok", "user": "userdId_13", "attemptID": 157, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "24.359386", "embeddingY": "37.165565"},{"extension": "py", "date": "2020-03-14 00:17:59", "correct": "1", "upload": "def minimum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=liste[0]\n    for i in range(len(liste)):\n      if liste[i]<res:\n        res=liste[i]\n  return res", "user": "userdId_14", "attemptID": 158, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "27.210133", "embeddingY": "-68.819176"},{"extension": "py", "date": "2020-04-12 05:40:22", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=False\n  c=[]\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n    c=range(0,len(liste),1)+d\n  return c", "user": "userdId_8", "attemptID": 159, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-78.11264", "embeddingY": "7.735676"},{"extension": "py", "date": "2020-03-10 08:56:50", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n\tif jour1<jour2 or mois1<mois2 or annee1<annee2: \n\t\tres=-1\n\telif jour1>jour2 or mois1>mois2 or annee1>annee2:\n\t\tres=1\n\telse:\n\t\tres=0\n\treturn res", "user": "userdId_37", "attemptID": 160, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "80.1113", "embeddingY": "-29.49269"},{"extension": "py", "date": "2020-03-05 23:35:29", "correct": "1", "upload": "def somme(liste):\n  res=0\n  for elem in liste:\n    res=res+elem\n  return res", "user": "userdId_33", "attemptID": 161, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-30.247654", "embeddingY": "1.8309377"},{"extension": "py", "date": "2020-03-10 04:27:45", "correct": "1", "upload": "def sommeNPremiersEntiersPairs(n):\n  res=0\n  for x in range(n+1):\n    if x%2==0:\n      res=res+x\n  return res", "user": "userdId_31", "attemptID": 162, "exercise": "3030dc079e6607c253e89e8ef4784b74", "exercise_name": "sommeNPremiersEntiersPairs", "embeddingX": "29.954992", "embeddingY": "-12.208858"},{"extension": "py", "date": "2020-03-17 00:58:36", "correct": "0", "upload": "def plusLongueSuite(liste):\n  cpt=0\n  res=0\n  for n in liste:\n    while n==n:\n      cpt=cpt+1\n    if n!=n:\n      cpt=0\n  if res<cpt:\n    res=cpt\n  \n    return cpt", "user": "userdId_5", "attemptID": 163, "exercise": "deed004abb317b11778f7e8247197a40", "exercise_name": "plusLongueSuite", "embeddingX": "1.1456779", "embeddingY": "25.159975"},{"extension": "py", "date": "2020-03-02 21:30:37", "correct": "1", "upload": "def nombrePair(n):\n  if n%2 == 0 :\n    res = True\n  else :\n    res = False\n    \n  return res", "user": "userdId_17", "attemptID": 164, "exercise": "3001254263845e9a478696f81a704d33", "exercise_name": "nombrePair", "embeddingX": "43.918858", "embeddingY": "-4.440053"},{"extension": "py", "date": "2020-03-28 11:48:21", "correct": "1", "upload": "def maximum(liste):\n    if len(liste)==0:\n      max=None\n    else:\n      max=liste[0]\n      for i in range(1,len(liste)):\n        if liste[i]>max:\n          max=liste[i]\n    return max\n      ", "user": "userdId_11", "attemptID": 165, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "12.065827", "embeddingY": "-70.7898"},{"extension": "py", "date": "2020-03-13 00:35:05", "correct": "0", "upload": "def sommeNbPairs(l):\n  res=0\n  for x in l:\n    if x%2:\n      res=res+x\n      \n  return res", "user": "userdId_38", "attemptID": 166, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "-29.05619", "embeddingY": "2.213719"},{"extension": "py", "date": "2020-04-07 10:04:54", "correct": "0", "upload": "def suiteArielemAri(liste):\n  ok=True\n  cpt=u0\n  i=0\n  if len(liste)==0:\n    ok=True\n  while i<len(liste) and ok:\n    cpt=cpt+r\n    if liste[i+1]!=cpt:\n      ok=False\n    i=i+1\n  return ok\n    \n    ", "user": "userdId_1", "attemptID": 167, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "10.774981", "embeddingY": "62.445156"},{"extension": "py", "date": "2020-03-17 06:11:08", "correct": "1", "upload": "def permutationListe(liste,permutation):\n  res=[0]*(len(liste))\n  for i in range(len(permutation)):\n    res[permutation[i]]=liste[i]\n  return res", "user": "userdId_8", "attemptID": 168, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-51.716393", "embeddingY": "-30.952564"},{"extension": "py", "date": "2020-03-31 03:14:49", "correct": "0", "upload": "def fusion(liste1,liste2):\n  res=[]\n  i=0\n  j=0\n  while i<liste1 and j<liste2:\n    if liste1[i]<=liste2[j]:\n      res.append(liste1[i])\n      i+=1\n    else:\n      res.append(liste2[j])\n      j+=1\n    if len(liste1)<len(liste2):\n      res.append(liste2[j])\n      j+=1\n    else:\n      res.append(liste1[i])\n      i+=1\n  return res", "user": "userdId_8", "attemptID": 169, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-17.235647", "embeddingY": "45.58173"},{"extension": "py", "date": "2020-04-06 11:07:27", "correct": "0", "upload": "def quatrePlus100(liste):\n    if len(liste)==0:\n      res=[]\n    else:\n      res=[]\n      i=0\n      while i<len(liste) and len(res)!=4:\n        if liste[i]>100:\n          res=res+[liste[i]]\n          i=i+1\n    return res\n  ", "user": "userdId_11", "attemptID": 170, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-24.061527", "embeddingY": "42.27235"},{"extension": "py", "date": "2020-03-27 05:33:33", "correct": "0", "upload": "def quatrePlus100(liste):\n  i=0\n  while i>len(liste):\n    res.append(liste[4])\n    i=i+1\n    return i", "user": "userdId_20", "attemptID": 171, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-19.012812", "embeddingY": "31.845556"},{"extension": "py", "date": "2020-03-06 00:47:41", "correct": "1", "upload": "def ecart(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=0\n    maxi=liste[0]\n    mini=liste[0]\n    for i in range(len(liste)):\n      if liste[i]>maxi:\n        maxi=liste[i]\n    for i in range(len(liste)):\n      if liste[i]<mini:\n        mini=liste[i]\n    res=maxi-mini\n  return res", "user": "userdId_12", "attemptID": 172, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "-0.2418526", "embeddingY": "-84.02922"},{"extension": "py", "date": "2020-04-06 22:33:32", "correct": "0", "upload": "def elemAri(n,u0,r):\n  res=0\n  for i in range(0,n+1):\n    res=res+(u0+r)\n  return res", "user": "userdId_12", "attemptID": 173, "exercise": "f239498950e974e29e01472749d9a09d", "exercise_name": "elemAri", "embeddingX": "-21.128016", "embeddingY": "16.038586"},{"extension": "py", "date": "2020-04-12 10:12:38", "correct": "0", "upload": "def phrasePalindrome(phrase):\n    if len(phrase)==0:\n      res=True\n    else:\n      res=True\n      i=0\n      x=''\n      while i<len(phrase)//2 and res:\n        if phrase[i]!=phrase[-(i+1)]:\n          res=False\n        i+=1\n        if phrase[i]==x:\n          i+=1\n    return res", "user": "userdId_11", "attemptID": 174, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "33.744507", "embeddingY": "34.831882"},{"extension": "py", "date": "2020-04-07 23:58:01", "correct": "0", "upload": "def suiteGeo(liste):\n  ok=True\n  i=0\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i]==0:\n      ok=False\n    if liste[i]!=0:\n      q=liste[1]/liste[0]\n    if liste[i]!=0:\n      if liste[i+1]/liste[i]!=q:\n        ok=False\n    i=i+1\n  return ok\n\n", "user": "userdId_1", "attemptID": 175, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "32.075798", "embeddingY": "63.786003"},{"extension": "py", "date": "2020-03-04 10:30:47", "correct": "1", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut2<=fin1 and fin2>=debut1 :\n    res=True\n  else :\n    res=False\n  return res\n\n    \n  \n\n    \n    ", "user": "userdId_28", "attemptID": 176, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "52.238483", "embeddingY": "-24.009138"},{"extension": "py", "date": "2020-03-09 22:35:32", "correct": "1", "upload": "def somme(liste):\n  res=0\n  for i in range(len(liste)):\n    res=res+liste[i]\n  return res", "user": "userdId_12", "attemptID": 177, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-44.49751", "embeddingY": "-35.749474"},{"extension": "py", "date": "2020-03-03 23:44:28", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  return None\n  if debut2<fin1<fin2 or debut1<fin2<fin1:\n    return True\n  else:\n    return False\n    \n", "user": "userdId_19", "attemptID": 178, "exercise": "6fd66bb2393fbf3809f1c6d04f3831f7", "exercise_name": "rendezVous", "embeddingX": "-88.03902", "embeddingY": "3.9687512"},{"extension": "py", "date": "2020-04-06 21:56:07", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n    res=0\n    for i in nombre:\n      if i==chiffre:\n        res=res+1\n    return res", "user": "userdId_28", "attemptID": 179, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-36.045544", "embeddingY": "-13.582797"},{"extension": "py", "date": "2020-03-19 23:57:04", "correct": "0", "upload": "def permutationListe(liste,permutation):\n  res=[0]*len(liste)\n  for elem,smt in liste,permutation:\n    res[smt]=liste[elem]\n  return res", "user": "userdId_12", "attemptID": 180, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-52.009014", "embeddingY": "-24.074133"},{"extension": "py", "date": "2020-03-20 00:51:17", "correct": "0", "upload": "def distribution(liste,n):\n  liste2=[]\n  liste2=liste2+([0]*(n+1))\n  for i in range(0,liste):\n    liste2[i]=liste2[i]+1\n  return liste2\n  \n              \n                 \n", "user": "userdId_2", "attemptID": 181, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-56.988884", "embeddingY": "-6.990818"},{"extension": "py", "date": "2020-03-05 23:44:27", "correct": "1", "upload": "def maximum(liste):\n  if liste==[]:\n    return None\n  else :\n    res=liste[0]\n    for i in range(1,len(liste)):\n      if res<liste[i]:\n        res=liste[i]\n  return res", "user": "userdId_15", "attemptID": 182, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "25.523296", "embeddingY": "-71.04772"},{"extension": "py", "date": "2020-03-04 05:07:58", "correct": "0", "upload": "def maximum(liste):\n    if len(liste)==0:\n      res=None\n    else:\n      res=liste[0]\n      for i in range(1,len(liste)):\n        if i>res:\n          res=i\n    return res", "user": "userdId_18", "attemptID": 183, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "1.6101301", "embeddingY": "-59.853252"},{"extension": "py", "date": "2020-03-06 00:04:58", "correct": "0", "upload": "def moyenne(liste):\n  somme=0\n  nbtermes=0\n  for elem in liste:\n    somme=somme+elem\n    nbtermes=nbtermes+1\n  moy=somme/nbtermes\n  return moy\n\n  ", "user": "userdId_2", "attemptID": 184, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-22.219856", "embeddingY": "0.4469872"},{"extension": "py", "date": "2020-03-17 06:42:52", "correct": "0", "upload": "def permutationListe(liste,permutation):\n  res=listte[0]\n  for elem in liste:\n    res[n]=liste[i]\n  return res", "user": "userdId_25", "attemptID": 185, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-48.61346", "embeddingY": "-9.935266"},{"extension": "py", "date": "2020-06-02 21:27:40", "correct": "1", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut1>fin2 or debut2>fin1:\n    return False\n  else:\n    return True", "user": "userdId_12", "attemptID": 186, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "63.043476", "embeddingY": "-24.733564"},{"extension": "py", "date": "2020-03-17 05:41:24", "correct": "1", "upload": "def permutationChaine(s):\n    res=''\n    for i in range(0,len(s)-1,2):\n        res=res+s[i+1]+s[i]\n    if len(s)%2!=0:\n        res=res+s[-1]\n    return res", "user": "userdId_39", "attemptID": 187, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-36.2482", "embeddingY": "-59.579582"},{"extension": "py", "date": "2020-03-12 21:50:01", "correct": "0", "upload": "def minimum(liste):\n  res=l[0]\n  for elem in liste:\n    if l[0]<elem:\n      res=elem\n  return res", "user": "userdId_23", "attemptID": 188, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "43.373684", "embeddingY": "-60.289246"},{"extension": "py", "date": "2020-03-06 00:10:31", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    res=0\n  else:\n    for elem in mot:\n      res=0\n      if elem==a:\n        res=res+1\n  return res     ", "user": "userdId_14", "attemptID": 189, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "0.41765556", "embeddingY": "-37.354355"},{"extension": "py", "date": "2020-03-24 06:38:14", "correct": "0", "upload": "def fusion(liste1,liste2):\n  res=[]\n  i=0\n  while i<len(liste1)+len(liste2):\n    if liste1[i]>liste2[i]:\n      res=res+[liste2[i]]\n    elif liste1[i]==liste2[i]:\n      res=res+[liste1[i]]+[liste2[i]]\n    else:\n      res=res+[liste1[i]]\n  return res", "user": "userdId_26", "attemptID": 190, "exercise": "6613efb6c873b142dc2b6040c14eb616", "exercise_name": "fusion", "embeddingX": "-24.500656", "embeddingY": "55.613754"},{"extension": "py", "date": "2020-03-17 05:31:45", "correct": "0", "upload": "def permutationChaine(s):\n  res=''\n  for i in range(0,len(s)-1,2):\n    res=res+s[i+1]+s[i]\n  return res\n    ", "user": "userdId_9", "attemptID": 191, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-44.19827", "embeddingY": "-50.33672"},{"extension": "py", "date": "2020-04-02 23:32:35", "correct": "0", "upload": "def listeSymetrique(l):\n  i=0\n  j=-1\n  res=True\n  while i<(len(l))/2 and j>(-len(l))/2 and res==True:\n    if l[i]!=l[j]:\n      res=False\n    i=i+1\n    j=j-1\n  return res", "user": "userdId_12", "attemptID": 192, "exercise": "8eb27aeda471a467e2223abebeca886e", "exercise_name": "listeSymetrique", "embeddingX": "25.549545", "embeddingY": "62.913925"},{"extension": "py", "date": "2020-03-10 04:24:43", "correct": "1", "upload": "def sommeNPremiersEntiersPairs(n):\n  res=0\n  for e in range(n+1):\n    if e%2==0:\n      res=res+e\n  return res", "user": "userdId_26", "attemptID": 193, "exercise": "3030dc079e6607c253e89e8ef4784b74", "exercise_name": "sommeNPremiersEntiersPairs", "embeddingX": "30.110933", "embeddingY": "-12.188837"},{"extension": "py", "date": "2020-04-11 05:58:50", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  if chiffre or nombre==0:\n    res=1\n  else:\n    res=0\n    while nombre!=0:\n      nombre=nombre//10\n      if nombre%10==chiffre:\n        res+=1\n  return res", "user": "userdId_8", "attemptID": 194, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "40.88204", "embeddingY": "-0.17930618"},{"extension": "py", "date": "2020-03-20 00:08:45", "correct": "0", "upload": "def permutationChaine(s):\n  res=''\n  for i in range(len(s)):\n    res=res+s[i+1]\n    res=res+s[i]\n  return res\n", "user": "userdId_40", "attemptID": 195, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-57.102562", "embeddingY": "-35.198074"},{"extension": "py", "date": "2020-04-13 21:23:21", "correct": "0", "upload": "def indiceInsertion(sc,scores):\n  cpt = 0\n  while scores[cpt]>sc:\n    cpt+=1\n  return cpt", "user": "userdId_6", "attemptID": 196, "exercise": "f8a820b2bd54d18d36716e3d703858f7", "exercise_name": "indiceInsertion", "embeddingX": "-13.779471", "embeddingY": "61.519794"},{"extension": "py", "date": "2020-03-31 00:35:03", "correct": "0", "upload": "def stockerChiffres(nombre):\n    res = list(str(nombre))\n    res.reverse()\n    return res ", "user": "userdId_4", "attemptID": 197, "exercise": "49a87f644f84a443327fb4315b47f249", "exercise_name": "stockerChiffres", "embeddingX": "-40.73159", "embeddingY": "15.963963"},{"extension": "py", "date": "2020-04-14 04:43:11", "correct": "0", "upload": "def indiceInsertion(sc,scores):\n  i=0\n  res=None\n  while i<len(scores) and res==None:\n    if sc>=scores[i]:\n      res=i\n    elif sc<scores[i]:\n      res=-i\n    i=i+1\n  return res", "user": "userdId_7", "attemptID": 198, "exercise": "f8a820b2bd54d18d36716e3d703858f7", "exercise_name": "indiceInsertion", "embeddingX": "-22.626562", "embeddingY": "70.36191"},{"extension": "py", "date": "2020-04-06 02:39:57", "correct": "0", "upload": "def suiteGeo(liste):\n  ok=True\n  i=0\n  if len(liste)<=1 :\n    ok=True\n  else :\n    while i<(len(liste)-1) and ok :\n      if (liste[i]*liste[i+1])==0 :\n        ok=False\n      elif liste[i]!=(liste[0]*(liste[i+1]//liste[i])**i):\n        ok=False\n      i+=1\n  return ok", "user": "userdId_15", "attemptID": 199, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "51.161842", "embeddingY": "46.105064"},{"extension": "py", "date": "2020-03-06 00:25:07", "correct": "0", "upload": "def nbVoyelles(mot):\n  nb=0\n  for lettre in [\"a\",\"e\",\"i\",\"o\",\"u\",\"y\"]:\n    res=nb+1\n  return res\n  \n      \n  \n\n ", "user": "userdId_9", "attemptID": 200, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-28.0356", "embeddingY": "-9.98554"},{"extension": "py", "date": "2020-03-27 05:38:16", "correct": "1", "upload": "def quatrePlus100(liste):\n  res = []\n  cpt = 0\n  i = 0\n  while cpt < 4 and i < len(liste):\n    if liste[i] > 100 :\n      res.append(liste[i])\n      cpt = cpt + 1\n    i = i + 1\n  return res \n", "user": "userdId_17", "attemptID": 201, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-30.246058", "embeddingY": "42.133038"},{"extension": "py", "date": "2020-04-13 23:45:34", "correct": "0", "upload": "def meilleurScoreJoueur(scores,joueurs,nom):\n  if nom not in joueurs:\n    res=0\n  if nom in joueurs:\n    for i in joueurs:\n      joueurs[i]=joueurs\n      scores[i]=joueurs[i]\n  return res", "user": "userdId_8", "attemptID": 202, "exercise": "c96fadc94086276f98451a798b3bb730", "exercise_name": "meilleurScoreJoueur", "embeddingX": "-23.177454", "embeddingY": "-34.53669"},{"extension": "py", "date": "2020-03-13 00:50:58", "correct": "0", "upload": "def sommeNPremiersEntiers(n):\n  if n<0:\n    return 0\n  else:\n    res=0\n  for elem in n:\n    res=res+n\n  return res\n      \n    ", "user": "userdId_1", "attemptID": 203, "exercise": "c315a540cf0bfb0182dc114c6f0eafd1", "exercise_name": "sommeNPremiersEntiers", "embeddingX": "40.578327", "embeddingY": "-52.78585"},{"extension": "py", "date": "2020-03-17 08:55:18", "correct": "0", "upload": "def nombrePair(n):\n  if n==[0,2,4,6,8] :\n    res=True\n  else :\n    res=False\n    return res", "user": "userdId_24", "attemptID": 204, "exercise": "3001254263845e9a478696f81a704d33", "exercise_name": "nombrePair", "embeddingX": "44.077957", "embeddingY": "-8.079311"},{"extension": "py", "date": "2020-03-05 23:52:31", "correct": "0", "upload": "def moyenne(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=0\n    cpt=0\n    for elem in liste:\n      res= res+elem\n      cpt= cpt+1\n      res= res//cpt\n  return res", "user": "userdId_13", "attemptID": 205, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-4.8076954", "embeddingY": "-7.2679935"},{"extension": "py", "date": "2020-04-07 23:45:29", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  ok=False\n  i=0\n  while i<len(phrase)//2:\n    if phrase[i]==\" \" and phrase[-i]==\" \":\n      i+=1\n    elif phrase[i]==phrase[-i-1]:\n      ok=True\n      i+=1\n    else:\n      ok=False\n      i+=1\n  if phrase==\"\":\n    ok=True\n  return ok", "user": "userdId_13", "attemptID": 206, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "28.863268", "embeddingY": "34.55379"},{"extension": "py", "date": "2020-03-04 10:19:07", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  res=0\n  if debut2<=fin1 and fin2>=debut1 :\n    return\n  else :\n    return\n  return res\n\n    \n    ", "user": "userdId_28", "attemptID": 207, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "52.746853", "embeddingY": "-26.609993"},{"extension": "py", "date": "2020-03-06 00:17:12", "correct": "0", "upload": "def maximum(liste):\n  res=0\n  if i in range(len(liste)):\n      res=res+liste[i]\n  return res", "user": "userdId_41", "attemptID": 208, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "6.822881", "embeddingY": "-19.77763"},{"extension": "py", "date": "2020-03-06 00:05:45", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=liste[0]\n    for i in range(len(liste)):\n      if liste[i]>res:\n        res=liste[i]\n  return None", "user": "userdId_12", "attemptID": 209, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "2.124905", "embeddingY": "-61.94051"},{"extension": "py", "date": "2020-04-05 07:16:23", "correct": "0", "upload": "def nbSyllabes(mot):\n    cpt=0\n    if mot[0] in 'aeiouy':\n      cpt+=1\n    for i in range(1,len(mot)):\n      if mot[i] in 'aeiouy' and mot[i-1] not in 'aeiouy':\n        cpt+=1\n    if mot[-1]=='e':\n      cpt-=1\n    if cpt==0:\n      cpt+=1\n    if mot=='':\n      cpt=0\n    return cpt", "user": "userdId_18", "attemptID": 210, "exercise": "1c86bec0f4df503e23db53994f3d2991", "exercise_name": "nbSyllabes", "embeddingX": "-24.641912", "embeddingY": "-69.8535"},{"extension": "py", "date": "2020-05-04 21:58:47", "correct": "1", "upload": "def moyenne(liste):\n  if liste==[]:\n    res=None\n  else:\n    res=0\n    for elem in liste:\n      res+=elem\n    res/=len(liste)\n  return res", "user": "userdId_26", "attemptID": 211, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-4.825756", "embeddingY": "-19.729319"},{"extension": "py", "date": "2020-03-06 23:25:26", "correct": "1", "upload": "def prononcable(mot):\n    res = True\n    liste_voyelles = [\"a\",\"e\",\"i\",\"o\",\"u\",\"y\"]\n    nb_ = 0\n    last = \"\"\n    for lettre in mot:\n        if lettre.lower() in liste_voyelles:\n            if last == \"syl\":\n        \t    nb_ = 0\n            last = \"voy\"\n            nb_ += 1\n        else:\n            if last == \"voy\":\n        \t    nb_ = 0\n            last = \"syl\"\n            nb_ += 1\n        \n        if nb_ > 3:\n            res = False\n    return res", "user": "userdId_4", "attemptID": 212, "exercise": "6318b210c201fba050d60bc0913cb7ef", "exercise_name": "prononcable", "embeddingX": "11.596211", "embeddingY": "-7.186788"},{"extension": "py", "date": "2020-03-17 05:42:05", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  res=''\n  if debut+longueur>len(s):\n    res=debut+longueur\n  else:\n    if debut+longueur<len(s):\n      fin=debut+longueur\n  for i in range(debut,debut+longueur): \n    fin=res+s[i]\n  return res", "user": "userdId_25", "attemptID": 213, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-72.25784", "embeddingY": "31.122732"},{"extension": "py", "date": "2020-03-13 00:53:53", "correct": "0", "upload": "def sommeNPremiersEntiers(n):\n  res=0\n  for n in liste :\n    res=res+n\n  return res", "user": "userdId_1", "attemptID": 214, "exercise": "c315a540cf0bfb0182dc114c6f0eafd1", "exercise_name": "sommeNPremiersEntiers", "embeddingX": "-50.86998", "embeddingY": "-11.368908"},{"extension": "py", "date": "2020-03-18 04:02:20", "correct": "0", "upload": "def distribution(liste,n):\n  res = [0]*(n+1)\n  for elem in liste :\n    res[elem] = res[elem]+1\n    return res", "user": "userdId_17", "attemptID": 215, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-59.196552", "embeddingY": "-13.189119"},{"extension": "py", "date": "2020-03-01 01:44:11", "correct": "1", "upload": "def semestreValide(ue1,ue2):\n    res = False\n    if ue1 >= 10 and ue2 >= 10:\n        res = True\n    elif (ue1 > 10 and ue2 < 10) and (ue1+ue2)/2 >= 10:\n        res = True\n    \n\n    return res", "user": "userdId_4", "attemptID": 216, "exercise": "70ae7ad6cf504e0fa8cedebd8e8a825f", "exercise_name": "semestreValide", "embeddingX": "68.245674", "embeddingY": "-0.46644485"},{"extension": "py", "date": "2020-04-07 01:56:52", "correct": "1", "upload": "def elemAri(n,u0,r):\n  res = u0\n  for i in range (n):\n    res = res + r\n  return res", "user": "userdId_17", "attemptID": 217, "exercise": "f239498950e974e29e01472749d9a09d", "exercise_name": "elemAri", "embeddingX": "-23.479765", "embeddingY": "13.575011"},{"extension": "py", "date": "2020-04-07 23:50:15", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  P=[]\n  i=0\n  c=True\n  if a>=phrase[i]>=z:\n    P.append(phrase[i])\n  \n  while i<(len(P)/2) and c:\n    \n    if P[i]==P[len(P)-i-1]:\n        c=True\n    else:\n        c=False\n    i=i+1\n  if c==True:\n    return True\n  else:\n    return False", "user": "userdId_19", "attemptID": 218, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "9.881528", "embeddingY": "-1.6311392"},{"extension": "py", "date": "2020-04-12 04:11:54", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  c=[]\n  for elem in liste:\n    c=a*elem+b\n    res=False\n  if c==[]:\n    res=True\n  return res", "user": "userdId_8", "attemptID": 219, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-79.62721", "embeddingY": "10.535837"},{"extension": "py", "date": "2020-03-12 23:46:04", "correct": "0", "upload": "def jourNuit(heure):\n  Error=\"l'heure saisie est invalide\"\n  Time=\"on est\"\n  if heure<0 or heure>24:\n    res=Error\n  elif heure>=5 and heure<12:\n    res=Time+' le matin'\n    if heure>=6 and heure<=18:\n      res=res+' et il fait jour'\n    else:\n      res=res+' et il fait nuit'\n  elif heure>=12 and heure<17:\n    res=Time+\" l'apr\u00e8s-midi et il fait jour\"\n  elif heure>=17 and heure<21:\n    res=Time+' le soir'\n    if heure>=6 and heure<=18:\n      res=res+' et il fait jour'\n    else:\n      res=res+' et il fait nuit'\n  else:\n    res=' la nuit et il fait nuit'\n  return res\n    \n  \n    ", "user": "userdId_2", "attemptID": 220, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "80.79413", "embeddingY": "15.2695675"},{"extension": "py", "date": "2020-04-05 07:16:05", "correct": "0", "upload": "def nbSyllabes(mot):\n    cpt=0\n    if mot[i] in 'aeiouy':\n      cpt+=1\n    for i in range(1,len(mot)):\n      if mot[i] in 'aeiouy' and mot[i-1] not in 'aeiouy':\n        cpt+=1\n    if mot[-1]=='e':\n      cpt-=1\n    if cpt==0:\n      cpt+=1\n    if mot=='':\n      cpt=0\n    return cpt", "user": "userdId_18", "attemptID": 221, "exercise": "1c86bec0f4df503e23db53994f3d2991", "exercise_name": "nbSyllabes", "embeddingX": "12.409771", "embeddingY": "-20.357765"},{"extension": "py", "date": "2020-03-05 22:15:12", "correct": "0", "upload": "def maximum(liste):\n  liste:[12,1,25,7]\n  res=0\t\n  for i in range(len(liste)):\n    if res>len(liste):\n      res=len(liste)\n  \n    return res\n  ", "user": "userdId_23", "attemptID": 222, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-2.3053858", "embeddingY": "-53.5529"},{"extension": "py", "date": "2020-04-10 01:06:54", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  res=True\n  if len(liste)==0 or len(liste)==1:\n    res=True\n  while i<len(liste)-1 and res:\n    if liste[0]==0:\n      res=False\n    if liste[i]!=0:\n      q=liste[1]/liste[0]\n    if liste[i]!=0:\n      if liste[i+1]/liste[0]!=q:\n        res=False\n   \n    if liste[i]==0 and liste[i+1]==0:\n      res=True\n    i+=1\n  return res", "user": "userdId_26", "attemptID": 223, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "35.804607", "embeddingY": "61.425804"},{"extension": "py", "date": "2020-03-23 00:48:27", "correct": "0", "upload": "def reconstruireChainePartielle(s,n):\n    res = \" \"\n    for i in range (len(s),n) :\n      res = res + [s[i]]\n    return res", "user": "userdId_24", "attemptID": 224, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-60.069565", "embeddingY": "-36.11795"},{"extension": "py", "date": "2020-04-12 10:34:18", "correct": "0", "upload": "def elemGeo(n,u0,q):\n  q=1\n  for i in range(n):\n    q=q*n\n  res=u0*q\n  \n  return res", "user": "userdId_38", "attemptID": 225, "exercise": "d7c83a7fb9b49e28804e55955ad06968", "exercise_name": "elemGeo", "embeddingX": "-27.523046", "embeddingY": "16.430147"},{"extension": "py", "date": "2020-03-05 22:00:57", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    for i in range(len(liste)):\n      if res>liste[i]:\n        res=liste[i]\n  return res", "user": "userdId_30", "attemptID": 226, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "5.14026", "embeddingY": "-62.060883"},{"extension": "py", "date": "2020-03-24 06:01:58", "correct": "1", "upload": "def compare(chaine1,chaine2):\n  i=0\n  res=0\n  while i<len(chaine1) and i<len(chaine2) and res==0:\n    if chaine1[i]<chaine2[i]:\n      res=-1\n    elif chaine1[i]>chaine2[i]:\n      res=1\n    i=i+1\n  if res==0:\n    if len(chaine1)<len(chaine2):\n      res=-1\n    elif len(chaine1)>len(chaine2):\n      res=1\n  return res\n\n", "user": "userdId_13", "attemptID": 227, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-24.532873", "embeddingY": "61.644527"},{"extension": "py", "date": "2020-04-12 10:34:00", "correct": "0", "upload": "def elemGeo(n,u0,q):\n  for i in range(n):\n    q=q*n\n  res=u0*q\n  \n  return res", "user": "userdId_38", "attemptID": 228, "exercise": "d7c83a7fb9b49e28804e55955ad06968", "exercise_name": "elemGeo", "embeddingX": "-27.447395", "embeddingY": "16.107906"},{"extension": "py", "date": "2020-04-14 03:27:43", "correct": "0", "upload": "def listeDecroissante(scores):\n  if scores==[]:\n    ok=True\n  else:\n    scorePrec=scores[0]\n    ok=True\n    i=1\n    while i<len(scores) and ok:\n      if scorePrec<=scores[i]:\n        ok=False\n      i+=1\n  return ok", "user": "userdId_18", "attemptID": 229, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "32.051296", "embeddingY": "42.58077"},{"extension": "py", "date": "2020-04-05 23:57:44", "correct": "1", "upload": "def sousChaine(s1,s2):\n    if s1=='':\n      ok=True\n    elif s2=='':\n      ok=False\n    else:\n      ok=False\n      cpt=0\n      i=0\n      j=0\n      while i<len(s1) and j<len(s2) and not ok:\n        if s1[i]==s2[j]:\n          cpt+=1\n          i+=1\n          j+=1\n        else:\n          cpt=0\n          i=0\n          j+=1\n        if cpt==len(s1):\n          ok=True\n    return ok", "user": "userdId_18", "attemptID": 230, "exercise": "a7cdd094daa2f0bfccc7a4ec419f7243", "exercise_name": "sousChaine", "embeddingX": "-3.0891874", "embeddingY": "63.22126"},{"extension": "py", "date": "2020-03-17 06:42:10", "correct": "0", "upload": "def permutationListe(liste,permutation):\n  res=[0]*(n+1)\n  for elem in liste:\n    res[n]=liste[i]\n  return res", "user": "userdId_25", "attemptID": 231, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-55.93997", "embeddingY": "-5.6684656"},{"extension": "py", "date": "2020-03-06 00:33:16", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0 :\n    res=0\n  else:\n    res=len(mot)\n    return res", "user": "userdId_24", "attemptID": 232, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "11.610381", "embeddingY": "-49.129845"},{"extension": "py", "date": "2020-03-23 01:38:46", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n    fin=debut+longueur\n    if fin>len(s):\n      fin=len(s)\n    else:\n      res=''\n      for i in range(debut,fin):\n        res=res+s[i]\n    return res", "user": "userdId_11", "attemptID": 233, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-71.43288", "embeddingY": "19.175251"},{"extension": "py", "date": "2020-04-13 23:16:01", "correct": "0", "upload": "def listeDecroissante(scores):\n  res=False\n  if scores==[]:\n    res=True\n  for i in scores:\n    if scores[i]>scores[i+1]:\n      res=True\n  return res", "user": "userdId_8", "attemptID": 234, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "-2.630854", "embeddingY": "-68.849655"},{"extension": "py", "date": "2020-04-07 11:49:03", "correct": "0", "upload": "def suiteGeo(liste):\n    if 0 not in liste:\n        if len(liste) == 0 or len(liste) == 1:\n            res = True\n        else:\n            test = liste[1]/liste[0]\n            if len(liste) >= 3:\n                for i in range(2,len(liste)):\n                    if liste[i]/liste[i-1] == test:\n                        res = True\n                    else:\n                        res = False\n            else:\n                res = True\n    else:\n        res = False\n    return res", "user": "userdId_42", "attemptID": 235, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "-17.714392", "embeddingY": "-82.85407"},{"extension": "py", "date": "2020-04-02 23:50:52", "correct": "0", "upload": "def listeSymetrique(l):\n    i=0\n    ok=True \n    while i<len(l) and ok:\n      if l[i]!=l[-i-1]:\n        ok=False\n    return ok\n\n   ", "user": "userdId_43", "attemptID": 236, "exercise": "8eb27aeda471a467e2223abebeca886e", "exercise_name": "listeSymetrique", "embeddingX": "20.004402", "embeddingY": "36.983555"},{"extension": "py", "date": "2020-03-17 05:30:24", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  res=''\n  if debut+longueur>len(s):\n    res=debut+longueur\n  else:\n    for i in range(debut,debut+longueur): \n      res=res+s[i]\n  return res", "user": "userdId_25", "attemptID": 237, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-78.90099", "embeddingY": "19.124704"},{"extension": "py", "date": "2020-03-14 04:04:43", "correct": "0", "upload": "def bissextile(annee):\n  if annee%4==0 or annee%400==0:\n    res=True\n  else:\n    res=False\n  return res", "user": "userdId_14", "attemptID": 238, "exercise": "a7d37636649c0ada991520788deeb2d0", "exercise_name": "bissextile", "embeddingX": "44.648544", "embeddingY": "-0.10496241"},{"extension": "py", "date": "2020-03-02 02:53:04", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1<=annee2 and jour1<jour2 and mois1<=mois2:\n    return -1\n  elif annee1!=annee2 and jour1!=jour2 and mois1!=mois2:\n    return 0\n  else:\n    return 1\n  \ncompareDates(10,1,2020,14,2,2020)\ncompareDates(14,2,2020,11,2,2020)\ncompareDates(10,1,2020,10,1,2020)", "user": "userdId_1", "attemptID": 239, "exercise": "af7c1467ef9f7684d9ff58734067ae98", "exercise_name": "compareDates", "embeddingX": "88.37387", "embeddingY": "-17.203045"},{"extension": "py", "date": "2020-03-13 00:59:54", "correct": "0", "upload": "def sommeNPremiersEntiersPairs(n):\n  res=0\n  for elem in range (1,n+1,2):\n    res=res+elem\n  return res", "user": "userdId_5", "attemptID": 240, "exercise": "3030dc079e6607c253e89e8ef4784b74", "exercise_name": "sommeNPremiersEntiersPairs", "embeddingX": "-18.167925", "embeddingY": "12.896049"},{"extension": "py", "date": "2020-04-03 00:03:16", "correct": "0", "upload": "def nbChiffres(nombre):\n  res=0\n  while nombre!=0:\n    nombre=nombre//10\n    res=res+1\n  return res  ", "user": "userdId_12", "attemptID": 241, "exercise": "3dcf332c003a1f3bf15df22ee17884a3", "exercise_name": "nbChiffres", "embeddingX": "32.463867", "embeddingY": "10.821591"},{"extension": "py", "date": "2020-03-04 10:29:40", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut2<=fin1 and fin2>=debut1 :\n    res=true\n  else :\n    res=false\n    \n  \n\n    \n    ", "user": "userdId_28", "attemptID": 242, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "51.535343", "embeddingY": "-26.836798"},{"extension": "py", "date": "2020-03-10 10:20:57", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n    if len(mot)==0:\n      res=None\n    else:\n      res=0\n      for elem in mot:\n        if lettre==elem:\n          res=mot[elem]\n        else:\n          if lettre!=mot[elem]:\n            res=None\n    return res\n  \n      ", "user": "userdId_11", "attemptID": 243, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-15.932781", "embeddingY": "-34.124092"},{"extension": "py", "date": "2020-03-27 05:43:35", "correct": "0", "upload": "def quatrePlus100(liste):\n  res=''\n  i=0\n  while i>len(liste):\n    if l[i]>100:\n      res.append(l[i])\n      i=i+1\n  if len(liste)<4:\n    res=i\n  return res", "user": "userdId_20", "attemptID": 244, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-20.75163", "embeddingY": "35.72132"},{"extension": "py", "date": "2020-04-14 04:26:21", "correct": "1", "upload": "def listeDecroissante(score):\n  c=True\n  i=0\n  while i<(len(score)-1) and c:\n    if score[i]<score[i+1]:\n      c=False\n    i=i+1\n  return c      ", "user": "userdId_39", "attemptID": 245, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "18.232168", "embeddingY": "50.478535"},{"extension": "py", "date": "2020-03-12 23:54:30", "correct": "0", "upload": "def jourNuit(heure):\n  h=heure[0]\n  if 0>h or h>24:\n    res=\"l'heure saisi est invalide\"\n  else:\n    if h>=5 and h<=12:\n      res=\"on est le matin\"\n    else:\n      if h>=12 and h<=17:\n        res=\"on est l'apr\u00e8s-midi\"\n      else:\n        if h>=17 and h<=21:\n          res=\"on est la nuit\"\n  if h>=6 and h<=18:\n    res=res+\" il fait jour\"\n  else:\n    res=res+\" il fait nuit\"\n    \n    return res", "user": "userdId_14", "attemptID": 246, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "-49.243015", "embeddingY": "-14.755131"},{"extension": "py", "date": "2020-04-05 03:39:40", "correct": "0", "upload": "def moyenne(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    s=0\n    for elem in liste:\n      s+=elem\n    res=s//len(liste)\n  return res", "user": "userdId_26", "attemptID": 247, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-8.568292", "embeddingY": "-15.487998"},{"extension": "py", "date": "2020-03-07 00:43:10", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1<annee2:\n    res=-1\n  elif annee1>annee2:\n      res=1\n  elif mois1<mois2:\n      res=-1\n      if mois1>mois2:\n        res=1\n      elif jour1<jour2:\n        res=-1\n        if jour1>jour2:\n          res=1\n  else:\n    res=0\n  return res", "user": "userdId_8", "attemptID": 248, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "80.848946", "embeddingY": "-33.81092"},{"extension": "py", "date": "2020-03-15 21:32:50", "correct": "0", "upload": "def qualifJO(sexe,record,nbvictoires,champion):\n  if champion==True:\n    res=True\n  elif sexe==M and record<12.0 and nbvictoires>=3:\n    res=True\n  elif sexe==F and record<15.0 and nbvictoires>=3:\n    res=True\n  else:\n    res=False\n  return res", "user": "userdId_32", "attemptID": 249, "exercise": "78ec7738f3a7f3553d4a5c653534c32d", "exercise_name": "qualifJO", "embeddingX": "61.39861", "embeddingY": "-11.338328"},{"extension": "py", "date": "2020-03-23 22:26:09", "correct": "0", "upload": "def quatrePlus100(liste):\n  res=[]\n  i=0\n  while len(res)<4 :\n    if liste[i]>100 :\n      res=res+[liste[i]]\n    i=i+1\n  return res", "user": "userdId_28", "attemptID": 250, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-28.19587", "embeddingY": "37.49541"},{"extension": "py", "date": "2020-03-31 07:51:43", "correct": "1", "upload": "def ecart(liste):\n    if len(liste)==0:\n      res=None\n    else:\n      res=0\n      max=liste[0]\n      for i in range(1,len(liste)):\n        if liste[i]>max:\n          max=liste[i]\n      min=liste[0]\n      for i in range(1,len(liste)):\n        if liste[i]<min:\n          min=liste[i]\n      res=max-min\n    return res", "user": "userdId_11", "attemptID": 251, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "13.6577635", "embeddingY": "-84.1039"},{"extension": "py", "date": "2020-04-06 07:18:44", "correct": "1", "upload": "def somme(liste):\n  res=0\n  for i in range(len(liste)):\n    res=res+liste[i]\n  return res", "user": "userdId_16", "attemptID": 252, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-44.202248", "embeddingY": "-37.497208"},{"extension": "py", "date": "2020-04-05 03:28:09", "correct": "1", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=liste[0]\n    for i in range(1,len(liste)-1):\n      if res<=liste[i]:\n        res=liste[i]\n  return res", "user": "userdId_26", "attemptID": 253, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-4.982587", "embeddingY": "-67.71912"},{"extension": "py", "date": "2020-04-14 03:52:59", "correct": "0", "upload": "def listeDecroissante(scores):\n  if scores==[]:\n    return True\n  else:\n   for i in range(len(scores)):\n      if scores[i]<scores[i+1]:\n        return False\n      else: \n        return True", "user": "userdId_31", "attemptID": 254, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "18.800835", "embeddingY": "-69.01675"},{"extension": "py", "date": "2020-03-10 04:29:32", "correct": "1", "upload": "def sommeNPremiersEntiersPairs(n):\n  res=0\n  for x in range(1,n+1):\n    if x%2==0:\n      res=res+x\n  return res", "user": "userdId_16", "attemptID": 255, "exercise": "3030dc079e6607c253e89e8ef4784b74", "exercise_name": "sommeNPremiersEntiersPairs", "embeddingX": "30.110746", "embeddingY": "-11.71129"},{"extension": "py", "date": "2020-03-12 21:57:30", "correct": "0", "upload": "def maximum(liste):\n  res=liste[0]\n  for elem in liste:\n    if res<elem:\n      res=elem\n  return res", "user": "userdId_23", "attemptID": 256, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "41.74395", "embeddingY": "-58.14661"},{"extension": "py", "date": "2020-04-07 22:09:50", "correct": "0", "upload": "def suiteGeo(liste):\n  ok=True\n  i=0\n  while i<len(liste)-1 and ok:\n    if liste[i]!=0:\n      q=liste[1]/liste[0]\n    if liste[i]==0:\n      ok=False\n    if liste[i]!=0:\n      if liste[i+1]/liste[i]!=q:\n        ok=False\n    i=i+1\n  return ok\n    ", "user": "userdId_1", "attemptID": 257, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "29.667402", "embeddingY": "61.616226"},{"extension": "py", "date": "2020-04-12 03:57:53", "correct": "1", "upload": "def elemAri(n,u0,r):\n  res=u0+n*r\n  return res", "user": "userdId_8", "attemptID": 258, "exercise": "f239498950e974e29e01472749d9a09d", "exercise_name": "elemAri", "embeddingX": "-35.637672", "embeddingY": "18.628498"},{"extension": "py", "date": "2020-03-09 21:34:23", "correct": "0", "upload": "def jourNuit(heure):\n    return None", "user": "userdId_44", "attemptID": 259, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "-88.31492", "embeddingY": "4.130574"},{"extension": "py", "date": "2020-03-06 00:12:37", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(liste)==0:\n    voy=None\n  if len(voyel)==0:\n    voyel=None\n  else:\n    voy=0\n    for i in range(len(liste)):\n      if voyel[i]==liste[i]:\n        voy=voy+1\n  return None", "user": "userdId_13", "attemptID": 260, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "20.317606", "embeddingY": "-38.609726"},{"extension": "py", "date": "2020-03-03 23:58:44", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1<annee2:\n    res=-1\n  if annee2>annee1:\n    res=1\n  if annee1==annee2:\n    if mois1<mois2:\n      res=-1\n    if mois1>mois2:\n      res=1\n    if mois1==mois2:\n      if jour1<jour2:\n        res=-1\n      if jour1>jour2:\n        res=1\n      if jour1==jour2:\n        res=0\n  return res\n    ", "user": "userdId_19", "attemptID": 261, "exercise": "af7c1467ef9f7684d9ff58734067ae98", "exercise_name": "compareDates", "embeddingX": "82.210396", "embeddingY": "-35.364994"},{"extension": "py", "date": "2020-03-02 02:44:08", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if jour1<jour2 and mois1<mois2 and annee1!=annee2:\n    return -1\n  elif jour1!=jour2 and mois1!=mois2 and annee1!=annee2:\n    return 0\n  else:\n    return 1\n  \ncompareDates(10,1,2020,14,2,2020)\ncompareDates(14,2,2020,11,2,2020)\ncompareDates(10,1,2020,10,1,2020)", "user": "userdId_1", "attemptID": 262, "exercise": "af7c1467ef9f7684d9ff58734067ae98", "exercise_name": "compareDates", "embeddingX": "88.88419", "embeddingY": "-17.432959"},{"extension": "py", "date": "2020-04-08 00:49:11", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res = True\n  i = 0\n  while res and i < len(liste)-1:\n    if liste[i+1] != (a*liste[i]+b) :\n      res = False\n    i = i + 1\n  return res\n\ndef suiteAriGeo(liste):\n  if len(liste) < 3 :\n    res = True\n  else :\n    ecart1 = liste[1]-liste[0]\n    ecart2 = liste[2]-liste[1]\n  if ecart1 == 0 or ecart2 == 0 :\n    res = False\n  else :\n    a = ecart2/ecart1\n    b = liste[1]-a*liste[0]\n    res = verifSuiteAriGeo(liste,a,b)\n  return res\n", "user": "userdId_17", "attemptID": 263, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "16.645172", "embeddingY": "70.85071"},{"extension": "py", "date": "2020-03-20 00:34:51", "correct": "0", "upload": "def permutationListe(liste,permutation):\n    res = [0]*len(liste)\n    for i in range (len(liste)) :\n      res.append(liste[permutation[i]])\n    return res", "user": "userdId_17", "attemptID": 264, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-47.137188", "embeddingY": "-32.00528"},{"extension": "py", "date": "2020-04-07 03:35:47", "correct": "1", "upload": "def sousChaine(s1,s2):\n  Trouve=False\n  i=0\n  if s1=='':\n    Trouve=True\n  while i<len(s1) and i<len(s2):\n    if s1 in s2:\n      Trouve=True\n    i=i+1\n  return Trouve\n", "user": "userdId_1", "attemptID": 265, "exercise": "a7cdd094daa2f0bfccc7a4ec419f7243", "exercise_name": "sousChaine", "embeddingX": "0.1775703", "embeddingY": "52.11433"},{"extension": "py", "date": "2020-03-13 01:01:05", "correct": "1", "upload": "def sommeNPremiersEntiersPairs(n):\n  \n  somme=0\n  for elem in range(1,n+1):\n    if elem%2==0:\n      somme=somme+elem\n  return somme\n    ", "user": "userdId_13", "attemptID": 266, "exercise": "3030dc079e6607c253e89e8ef4784b74", "exercise_name": "sommeNPremiersEntiersPairs", "embeddingX": "29.844076", "embeddingY": "-11.625439"},{"extension": "py", "date": "2020-04-07 03:05:08", "correct": "0", "upload": "def produitScalaire(vec1,vec2):\n  res=0\n  i=0\n  while i<len(vec1) and i<len(vec2) and res==0:\n    res=vec1[i]*vec2[i]\n    res+=res[i+1]\n  return res", "user": "userdId_8", "attemptID": 267, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-15.647713", "embeddingY": "48.166042"},{"extension": "py", "date": "2020-03-12 21:54:11", "correct": "0", "upload": "def maximum(liste):\n   if len(liste)==0:\n      res=None\n   else:\n      res=liste[0]\n      for i in liste:\n         if res<liste[0]:\n            res=liste[0]\n   return res", "user": "userdId_14", "attemptID": 268, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "29.849646", "embeddingY": "-62.397015"},{"extension": "py", "date": "2020-03-05 21:33:14", "correct": "1", "upload": "def somme(liste):\n    res = 0\n    for i in range(0,len(liste),1):\n    \tres = res + liste[i]\n    return res", "user": "userdId_29", "attemptID": 269, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-45.86838", "embeddingY": "-39.510876"},{"extension": "py", "date": "2020-05-04 22:42:57", "correct": "0", "upload": "def prononcable(mot):\n  res=True\n  cpt=0\n  i=0\n  while i<len(mot) and res:\n    if mot[i] not in 'aeiouy':\n      cpt+=1\n    elif mot[i] in 'aeiouy':\n      cpt=0\n    elif cpt>=4:\n      res=False\n    i+=1\n  return res", "user": "userdId_26", "attemptID": 270, "exercise": "6318b210c201fba050d60bc0913cb7ef", "exercise_name": "prononcable", "embeddingX": "14.400178", "embeddingY": "38.433548"},{"extension": "py", "date": "2020-03-17 06:31:27", "correct": "0", "upload": "def distribution(liste,n):\n  res=[0]*(n+1)\n  for elem in liste:\n    res=res+1\n  return res", "user": "userdId_23", "attemptID": 271, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-57.9469", "embeddingY": "-7.2176223"},{"extension": "py", "date": "2020-04-14 03:38:07", "correct": "0", "upload": "def listeDecroissante(scores):\n  i=0\n  while i < len(scores)-1:\n    if scores[i] > scores[i+1]:\n      return True\n    else:\n      return False\n  i=i+1", "user": "userdId_31", "attemptID": 272, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "16.404371", "embeddingY": "47.370125"},{"extension": "py", "date": "2020-03-13 00:40:23", "correct": "0", "upload": "def sommeNPremiersEntiersPairs(n):\n  if n<=0:\n    res=0\n  else:\n    res=(n*(n+2))/2\n  return res", "user": "userdId_2", "attemptID": 273, "exercise": "3030dc079e6607c253e89e8ef4784b74", "exercise_name": "sommeNPremiersEntiersPairs", "embeddingX": "62.959557", "embeddingY": "10.873181"},{"extension": "py", "date": "2020-03-30 22:07:04", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n  i=0\n  j=0\n  res = -1\n  while j <3 and i < len(l):\n    if l[i] == x:\n      j+=1\n      if j == 3:\n        res = l[i+1]\n    i+=1\n  \n  if res == -1: res = None\n  return(res)", "user": "userdId_4", "attemptID": 274, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-7.422434", "embeddingY": "71.50937"},{"extension": "py", "date": "2020-04-05 23:05:19", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  liste=[]\n  chif=0\n  res=0\n  i=0\n  if nombre==0 :\n    liste.append(nombre)\n  else :\n    while nombre!=0 :\n      chiffre=nombre%10\n      liste.append(chif)\n      nombre=nombre//10\n  \n  while i<len(liste) :\n    if liste[i]==chiffre :\n      res+=1\n    i+=1\n  return res", "user": "userdId_15", "attemptID": 275, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "19.263948", "embeddingY": "18.457588"},{"extension": "py", "date": "2020-04-06 17:25:37", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  i=0\n  for i in range(nombre):\n    if chiffre==nombre:\n      cpt=cpt+1\n    i=i+1\n  return cpt", "user": "userdId_3", "attemptID": 276, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-17.549938", "embeddingY": "-24.447594"},{"extension": "py", "date": "2020-04-03 00:17:16", "correct": "1", "upload": "def nbChiffres(nombre):\n  i=0\n  if nombre==0:\n    i+=1\n  while nombre!=0:\n    nombre =nombre//10\n    i+=1\n  return i", "user": "userdId_1", "attemptID": 277, "exercise": "3dcf332c003a1f3bf15df22ee17884a3", "exercise_name": "nbChiffres", "embeddingX": "32.134747", "embeddingY": "13.6303215"},{"extension": "py", "date": "2020-04-12 04:36:47", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=False\n  c=[]\n  for i in range(len(liste)):\n    c=a*liste[i]+b\n    c+=liste[-1]\n  return c", "user": "userdId_8", "attemptID": 278, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-85.42781", "embeddingY": "22.527956"},{"extension": "py", "date": "2020-03-22 08:00:50", "correct": "0", "upload": "def maximum(liste):\n  if liste==():\n    res=none\n  else:\n    res=liste[1]\n    for i in range (len(liste)):\n      if res<liste[i]:\n        res=liste[i]\n  return res", "user": "userdId_16", "attemptID": 279, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "19.97411", "embeddingY": "-64.33266"},{"extension": "py", "date": "2020-04-11 05:48:33", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  res=1\n  while nombre!=0:\n    nombre=nombre//10\n    if nombre%10==chiffre:\n      res+=1\n  return res", "user": "userdId_8", "attemptID": 280, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "22.842106", "embeddingY": "10.390777"},{"extension": "py", "date": "2020-04-10 00:51:49", "correct": "0", "upload": "def suiteAriGeo(liste):\n  i=0\n  while i<len(liste)-1:\n    a=liste[1]-liste[0]\n    b=liste[i+1]-liste[i]*a\n    if liste[0]!=0:\n      a=liste[1]/liste[0]\n      if liste[i+1]==liste[i]*a:\n        b=0\n    b=liste[1]-liste[0]\n    if liste[i+1]==liste[i]+b:\n      a=1\n    i=i+1\n  i=0\n  ok=True\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=a*liste[i]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 281, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "33.955112", "embeddingY": "82.680046"},{"extension": "py", "date": "2020-03-09 08:39:37", "correct": "0", "upload": "def nbVoyelles(mot):\n    cpt=0\n    for i in range(len(mot)):\n      if mot[i]==Voyelle:\n        cpt=cpt+1\n    return cpt\n  ", "user": "userdId_11", "attemptID": 282, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-4.18326", "embeddingY": "-42.243458"},{"extension": "py", "date": "2020-03-24 06:39:42", "correct": "0", "upload": "def fusion(liste1,liste2):\n  res=[]\n  i=0\n  while i<len(liste1)+len(liste2) and res==len(liste1)+len(liste2):\n    if liste1[i]>liste2[i]:\n      res=res+[liste2[i]]\n    elif liste1[i]==liste2[i]:\n      res=res+[liste1[i]]+[liste2[i]]\n    else:\n      res=res+[liste1[i]]\n  return res", "user": "userdId_26", "attemptID": 283, "exercise": "6613efb6c873b142dc2b6040c14eb616", "exercise_name": "fusion", "embeddingX": "-20.364103", "embeddingY": "51.16635"},{"extension": "py", "date": "2020-03-17 05:18:36", "correct": "0", "upload": "def distribution(liste,n):\n  cpt=[0]*(n+1)\n  for elem in liste:\n    cpt=cpt+liste[elem]\n  return cpt", "user": "userdId_7", "attemptID": 284, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-59.382206", "embeddingY": "-9.165411"},{"extension": "py", "date": "2020-03-22 05:10:36", "correct": "0", "upload": "def bissextile(annee):\n  if annee%4==0 and annee%4!=0 or annee%400==0:\n    res=True\n  else:\n    res=False\n  return res", "user": "userdId_12", "attemptID": 285, "exercise": "a7d37636649c0ada991520788deeb2d0", "exercise_name": "bissextile", "embeddingX": "47.679897", "embeddingY": "1.7169379"},{"extension": "py", "date": "2020-04-12 05:19:29", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=False\n  c=[]\n  for i in range(-1,len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n  return c", "user": "userdId_8", "attemptID": 286, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-64.81712", "embeddingY": "18.185081"},{"extension": "py", "date": "2020-04-07 23:49:28", "correct": "0", "upload": "def suiteGeo(liste):\n  ok=True\n  i=0\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i]==0:\n      ok=False\n    if liste[i]!=0:\n      q=liste[1]/liste[0]\n    if liste[i]!=0:\n      if liste[i+1]/liste[i]!=q:\n        ok=False\n    i=i+1\n  return ok\n\n", "user": "userdId_1", "attemptID": 287, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "32.07265", "embeddingY": "63.702637"},{"extension": "py", "date": "2020-03-20 00:17:24", "correct": "0", "upload": "def permutationChaine(s):\n  res=''\n  if len(s)<1:\n  \tres=''\n  else:\n    for i in range(0,len(s)-1,2):\n      res=res+s[i+1]\n      res=res+s[i]\n  l=s[len(s)]\n  res=res+s[l]\n  return res", "user": "userdId_40", "attemptID": 288, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-40.453495", "embeddingY": "-54.625866"},{"extension": "py", "date": "2020-03-06 00:11:00", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    return None\n  cpt=0\n  for elem in mot=={('a','e','i','o','u','y')}:\n    cpt=cpt+1\n  return cpt", "user": "userdId_1", "attemptID": 289, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "4.757266", "embeddingY": "-44.808132"},{"extension": "py", "date": "2020-04-02 23:59:11", "correct": "0", "upload": "def listeSymetrique(l):\n  ok=True\n  i=0\n  while i<len(liste)/2 and ok:\n    if l[i]!=l[-1-i]:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_14", "attemptID": 290, "exercise": "8eb27aeda471a467e2223abebeca886e", "exercise_name": "listeSymetrique", "embeddingX": "-2.9878464", "embeddingY": "42.595024"},{"extension": "py", "date": "2020-03-17 05:42:35", "correct": "0", "upload": "def permutationChaine(s):\n  res=\"\"\n  for i in range(0,len(s)-1,2):\n    res=res+s[1+i]+s[i]\n  if len(s)!=0:\n    res=s[i]%2\n    res=res+s[i-1]\n  return res", "user": "userdId_8", "attemptID": 291, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-38.539047", "embeddingY": "-61.515606"},{"extension": "py", "date": "2020-03-30 03:06:49", "correct": "0", "upload": "def fusion(liste1,liste2):\n  liste=[]\n  liste.extend(liste1)\n  liste.extend(liste2)\n  i=1\n  n=0\n  res=[]\n  while i<len(liste) :\n    if liste[i-1]>liste[i] :\n      res.append(liste[i])\n      if liste[i-1]>n :\n        n=liste[i-1]\n    elif liste[i-1]<liste[i] :\n      res.append(liste[i-1])\n      if liste[i]>n :\n        n=liste[i]\n    i=i+1\n  res.append(n)\n  \n  return res", "user": "userdId_15", "attemptID": 292, "exercise": "6613efb6c873b142dc2b6040c14eb616", "exercise_name": "fusion", "embeddingX": "-33.91448", "embeddingY": "39.907677"},{"extension": "py", "date": "2020-03-13 00:02:30", "correct": "0", "upload": "def jourNuit(heure):\n  afficher=\"\"\n  if heure>24 or heure<0 or heure==None:\n    afficher=\"l'heure saisie est invalide\"\n  else:\n    if 0<=heure<=5 or 5<=heure<=12:\n      afficher=\"on est le matin et il fait nuit\"\n    if 21<=heure<=24 and 0<=heure<=5:\n      afficher=\"on est la nuit et il fait nuit\"\n    if 12<=heure<=17 or 6<=heure<=18:\n      afficher=\"on est l'apres-midi et il fait jour\"\n    if 17<=heure<=21 or 6<=heure<=18:\n      afficher=\"on est le soir et il fait jour\"\n     \n  return afficher", "user": "userdId_38", "attemptID": 293, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "72.26488", "embeddingY": "22.418001"},{"extension": "py", "date": "2020-03-09 08:55:08", "correct": "0", "upload": "def nbVoyelles(mot):\n    cpt=0\n    for lettre in mot:\n      if lettre==\"a\":\n        cpt=cpt+1\n      if lettre==\"e\":\n        cpt=cpt+1\n      if lettre==\"i\":\n        cpt=cpt=1\n      if lettre==\"o\":\n        cpt=cpt+1\n      if lettre==\"u\":\n        cpt=cpt+1\n      if lettre==\"y\":\n        cpt=cpt+1\n    return cpt\n  ", "user": "userdId_11", "attemptID": 294, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "1.9774244", "embeddingY": "-24.143362"},{"extension": "py", "date": "2020-05-04 22:00:00", "correct": "0", "upload": "def moyenne(liste):\n  if liste==[]:\n    res=None\n  else:\n    res=0\n    for elem in liste:\n      res+=elem\n    res=len(liste)\n  return res", "user": "userdId_8", "attemptID": 295, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-4.7152123", "embeddingY": "-19.185831"},{"extension": "py", "date": "2020-04-07 04:04:13", "correct": "0", "upload": "def elemAri(n,u0,r):\n  cpt=0\n  i=0\n  while i<n:\n    cpt=cpt+u0+r\n    i=i+1\n  return cpt\n  ", "user": "userdId_1", "attemptID": 296, "exercise": "f239498950e974e29e01472749d9a09d", "exercise_name": "elemAri", "embeddingX": "-8.625509", "embeddingY": "26.07772"},{"extension": "py", "date": "2020-03-31 04:13:43", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n  i=0\n  cpt=0\n  trouve=False\n  res=None\n  while i<len(l) and not trouve:\n    if x==l[i]:\n      cpt+=1  \n    if n==cpt:\n      trouve=True    \n    i+=1\n    res=i-1\n  if n>cpt:\n    res=None\n  elif cpt==0:\n    res=None\n  return res", "user": "userdId_27", "attemptID": 297, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-0.8132549", "embeddingY": "67.79069"},{"extension": "py", "date": "2020-03-24 06:38:50", "correct": "0", "upload": "def fusion(liste1,liste2):\n  liste3=[liste1]+[liste2]\n  liste3.sort()\n \n  return liste3", "user": "userdId_13", "attemptID": 298, "exercise": "6613efb6c873b142dc2b6040c14eb616", "exercise_name": "fusion", "embeddingX": "-50.512196", "embeddingY": "-3.4115145"},{"extension": "py", "date": "2020-03-06 23:46:50", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut1>=debut2 or fin1<=fin2:\n    if fin1>=debut2:\n      res=True\n  else:\n    res=False\n  return res", "user": "userdId_8", "attemptID": 299, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "53.932472", "embeddingY": "-21.08268"},{"extension": "py", "date": "2020-03-20 00:00:05", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  res=\"\"\n  fin=deb+long\n  if fin>len(s):\n    fin=len(s)\n  for i in range(deb,fin):\n    res=res+s[i]\n  return None", "user": "userdId_20", "attemptID": 300, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-72.71316", "embeddingY": "19.015682"},{"extension": "py", "date": "2020-03-31 07:01:25", "correct": "0", "upload": "def nombreSymetrique(nombre):\n    res=stockerChiffres(nombre)\n    trouve=listeSymetrique(res)\n    return trouve", "user": "userdId_9", "attemptID": 301, "exercise": "fae4d6a34289cf5bf06f9d6d17e8547e", "exercise_name": "nombreSymetrique", "embeddingX": "-43.253464", "embeddingY": "15.807581"},{"extension": "py", "date": "2020-03-20 00:52:55", "correct": "0", "upload": "def distribution(liste,n):\n  liste2=[]\n  liste2=liste2+([0]*(n+1))\n  for i in range(liste):\n    liste2[i]=liste2[i]+1\n  return liste2\n  \n              \n                 \n", "user": "userdId_2", "attemptID": 302, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-56.97207", "embeddingY": "-7.0090666"},{"extension": "py", "date": "2020-04-13 20:27:31", "correct": "1", "upload": "def motPalindrome(mot):\n  res=True\n  i=0\n  while i<len(mot)//2 and res:\n    if mot[i]!=mot[-1-i]:\n      res=False\n    i+=1\n  return res", "user": "userdId_8", "attemptID": 303, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "24.28942", "embeddingY": "37.107277"},{"extension": "py", "date": "2020-03-19 23:33:40", "correct": "1", "upload": "def permutationChaine(s):\n  res=''\n  for i in range(0,len(s)-1,2):\n    res=res+s[i+1]+s[i]\n  if len(s)%2!=0:\n    res=res+s[-1]\n  return res", "user": "userdId_12", "attemptID": 304, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-35.411156", "embeddingY": "-58.543118"},{"extension": "py", "date": "2020-04-12 10:33:25", "correct": "0", "upload": "def elemGeo(n,u0,q):\n  q=1\n  for i in range(n):\n    q=q*n\n  res=u0**q\n  \n  return res", "user": "userdId_38", "attemptID": 305, "exercise": "d7c83a7fb9b49e28804e55955ad06968", "exercise_name": "elemGeo", "embeddingX": "-28.220264", "embeddingY": "16.439014"},{"extension": "py", "date": "2020-04-02 23:29:21", "correct": "1", "upload": "def listeSymetrique(l):\n  ok=True\n  i=0\n  while i<len(l) and ok:\n    if l[i]!=l[-i-1]:\n      ok=False  \n    i+=1\n  return ok\n   ", "user": "userdId_34", "attemptID": 306, "exercise": "8eb27aeda471a467e2223abebeca886e", "exercise_name": "listeSymetrique", "embeddingX": "22.913383", "embeddingY": "40.869003"},{"extension": "py", "date": "2020-03-31 05:33:44", "correct": "0", "upload": "def nbChiffres(nombre):\n  res=0\n  nb=nombre\n  cpt=0\n  while nb%10!=0:\n    cpt=cpt+1\n    nb=nb//10\n  return cpt\n    \n    ", "user": "userdId_28", "attemptID": 307, "exercise": "3dcf332c003a1f3bf15df22ee17884a3", "exercise_name": "nbChiffres", "embeddingX": "0.56307375", "embeddingY": "17.304075"},{"extension": "py", "date": "2020-03-10 04:19:58", "correct": "0", "upload": "def nbSyllabes(mot):\n  if mot=='':\n    res=0\n  else:\n    res=0\n    Voyelles=['a','e','i','o','u','y']\n    ch=\"\"\n    for i in range(1,len(mot)):\n      if mot[i-1] not in Voyelles and mot[i] in Voyelles:\n        res=res+1\n      else:\n        ch=mot[i]\n    if mot[0] in Voyelles :\n      res=res+1\n    elif mot[-1] not in Voyelles and len(mot)>3:\n      res=res-1\n  return res\n    ", "user": "userdId_15", "attemptID": 308, "exercise": "1c86bec0f4df503e23db53994f3d2991", "exercise_name": "nbSyllabes", "embeddingX": "-19.44546", "embeddingY": "-72.77732"},{"extension": "py", "date": "2020-03-20 00:46:16", "correct": "0", "upload": "def permutationListe(liste,permutation):\n    res = [0]*len(liste)\n    for i in range (len(liste)) :\n      for elem in permutation :\n        if elem == i :\n          res[i] = liste[elem]\n    return res", "user": "userdId_17", "attemptID": 309, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-27.11067", "embeddingY": "-33.44121"},{"extension": "py", "date": "2020-03-06 00:33:31", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    res=0\n  else:\n    for lettre in [\"a\",\"e\",\"i\",\"o\",\"u\",\"y\"]:\n      res=res+lettre\n  return res\n  \n      \n  \n\n ", "user": "userdId_9", "attemptID": 310, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "12.8941965", "embeddingY": "-38.51693"},{"extension": "py", "date": "2020-03-10 03:13:33", "correct": "0", "upload": "def jourNuit(heure):\n    if heure<0 or heure>24:\n      res=\"l'heure saisie est invalide\"\n    else:\n      if heure<5 or heure>21:\n        res=\"on est la nuit\"\n      elif heure<12:\n        res=\"on est le matin\"\n      elif heure<17:\n        res=\"on est l'apres midi\"\n      else:\n        res=\"on est le soir\"\n      if heure<6 or heure>=18:\n        res=res+\" et il fait nuit\"\n      else:\n        res=res+\" et il fait jour\"\n    return res", "user": "userdId_9", "attemptID": 311, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "71.86364", "embeddingY": "12.853296"},{"extension": "py", "date": "2020-03-31 04:05:59", "correct": "0", "upload": "def indiceOccurence(n,x,l):\n  cpt=0\n  trouve=0\n  i=0  \n  while i<len(l) and trouve==False:\n    if l[i]==x:\n      cpt=cpt+1\n    if cpt==n:\n      trouve=True\n    i=i+1    \n#post-traitement\n  if trouve!=n:\n    i=none\n  return i    ", "user": "userdId_39", "attemptID": 312, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-1.8973507", "embeddingY": "77.46063"},{"extension": "py", "date": "2020-03-17 05:27:56", "correct": "1", "upload": "def distribution(liste,n):\n  cpt=[0]*(n+1)\n  for elem in liste:\n    cpt[elem]=cpt[elem]+1\n  return cpt", "user": "userdId_7", "attemptID": 313, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-59.300034", "embeddingY": "-14.861272"},{"extension": "py", "date": "2020-03-13 00:32:30", "correct": "0", "upload": "def sommeNbPairs(liste):\n  res = 0\n  for i in liste :\n    if liste[i]%2 == 0 :\n      res = res + liste[i]\n  return res", "user": "userdId_17", "attemptID": 314, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "31.956875", "embeddingY": "-22.766953"},{"extension": "py", "date": "2020-05-11 01:57:36", "correct": "1", "upload": "def indiceInsertion(sc,scores):\n  i=0\n  res=0\n  while i<len(scores):\n    if sc>scores[i]:\n      return i\n    i+=1\n  if res==0:\n    res=len(scores)\n  return res", "user": "userdId_12", "attemptID": 315, "exercise": "f8a820b2bd54d18d36716e3d703858f7", "exercise_name": "indiceInsertion", "embeddingX": "-16.766657", "embeddingY": "64.495285"},{"extension": "py", "date": "2020-03-16 08:33:29", "correct": "0", "upload": "def prononcable(mot):\n  if len(mot)=='':\n    return True\n  for lettre in mot:\n    if lettre=='aeiouy' and lettre!=3*lettre:\n      if lettre!='aeiouy' and lettre!=3*lettre:\n        return True\n    else:\n      return False", "user": "userdId_1", "attemptID": 316, "exercise": "6318b210c201fba050d60bc0913cb7ef", "exercise_name": "prononcable", "embeddingX": "17.232365", "embeddingY": "-44.04296"},{"extension": "py", "date": "2020-03-06 00:12:27", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    res=0\n  else:\n    for elem in mot:\n      res=0\n      if elem=='a' or'e' or'i' or'o' or'u' or'y':\n        res=res+1\n  return res     ", "user": "userdId_14", "attemptID": 317, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "4.8069057", "embeddingY": "-25.861397"},{"extension": "py", "date": "2020-04-13 22:11:25", "correct": "1", "upload": "def verifSuiteAriGeo(liste,a,b):\n  ok=True\n  n=1\n  while n<len(liste) and ok:\n    if liste[n]!=liste[n-1]*a+b:\n      ok=False\n    n+=1\n  return ok\ndef suiteGeo(liste):\n  res=True\n  if len(liste)>1:\n    if liste[0]==0:\n      q=0\n    else:\n      q=liste[1]/liste[0]\n    res=verifSuiteAriGeo(liste,q,0)\n  return res", "user": "userdId_8", "attemptID": 318, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "14.821986", "embeddingY": "74.823586"},{"extension": "py", "date": "2020-04-06 08:25:18", "correct": "1", "upload": "def moyenne(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=0\n    for i in range(len(liste)):\n      res+=liste[i]\n    res=res/len(liste)\n  return res", "user": "userdId_16", "attemptID": 319, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-19.729088", "embeddingY": "-51.340996"},{"extension": "py", "date": "2020-04-05 03:43:41", "correct": "0", "upload": "def moyenne(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    s=0\n    for elem in liste:\n      s+=elem\n    res=s//len(liste)\n  return res", "user": "userdId_26", "attemptID": 320, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-8.552749", "embeddingY": "-15.411034"},{"extension": "py", "date": "2020-03-11 03:12:02", "correct": "0", "upload": "def prononcable(mot):\n  listvoy = [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\",\"\"]\n  cons = 0\n  for lettre in mot:\n      if lettre not in listvoy:\n          cons += 1\n      elif cons >= 3:\n          return False\n      else:\n        cons = 0\n        return True", "user": "userdId_42", "attemptID": 321, "exercise": "6318b210c201fba050d60bc0913cb7ef", "exercise_name": "prononcable", "embeddingX": "23.801695", "embeddingY": "-31.484606"},{"extension": "py", "date": "2020-03-11 00:01:05", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut1>fin2 and debut2<fin1:\n    res=False \n  else:\n    res=True\n  return res\n", "user": "userdId_21", "attemptID": 322, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "63.60337", "embeddingY": "-20.404808"},{"extension": "py", "date": "2020-03-10 04:09:16", "correct": "1", "upload": "def semestreValide(ue1,ue2):\n  if ue1>=10 and ue2>=10:\n    res=True\n  else:\n    if ue1>=10 and ue2<=10 and ue1+ue2>10:\n      res=True\n    else:\n      res=False\n  return res", "user": "userdId_5", "attemptID": 323, "exercise": "70ae7ad6cf504e0fa8cedebd8e8a825f", "exercise_name": "semestreValide", "embeddingX": "69.0493", "embeddingY": "-1.2479835"},{"extension": "py", "date": "2020-03-05 23:36:53", "correct": "0", "upload": "def maximum(liste):\n  max=0\n  for i in max:\n    if i>max:\n      max=i\n  return max", "user": "userdId_13", "attemptID": 324, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-34.57252", "embeddingY": "-11.7426195"},{"extension": "py", "date": "2020-04-12 04:54:16", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=False\n  c=[]\n  for i in range(len(liste)-1):\n    c=a*liste[i]+b\n    c=c.append(liste[i])\n    if c==liste:\n      res=True\n  return res", "user": "userdId_8", "attemptID": 325, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-83.344864", "embeddingY": "15.640856"},{"extension": "py", "date": "2020-03-03 05:53:31", "correct": "0", "upload": "def nbVoyelles(mot):\n  if \"aeiouy\" in (mot):\n    res=\"aeiouy\"\n    return res", "user": "userdId_8", "attemptID": 326, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "11.108935", "embeddingY": "-22.078133"},{"extension": "py", "date": "2020-04-17 00:05:34", "correct": "1", "upload": "def listeDecroissante(scores):\n  res=True\n  if len(scores)==0:\n    return res\n  else:\n    x=scores[0]\n    for elem in scores:\n      if x<elem:\n        res=False\n      x=elem\n    return res", "user": "userdId_14", "attemptID": 327, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "16.828457", "embeddingY": "-11.901557"},{"extension": "py", "date": "2020-03-31 05:55:06", "correct": "1", "upload": "def nbChiffres(nombre):\n  cpt=0\n  while nombre!=0:\n    nombre=nombre//10\n    cpt+=1\n  if cpt==0:\n    cpt=1\n  return cpt", "user": "userdId_9", "attemptID": 328, "exercise": "3dcf332c003a1f3bf15df22ee17884a3", "exercise_name": "nbChiffres", "embeddingX": "31.757177", "embeddingY": "14.006753"},{"extension": "py", "date": "2020-03-17 08:47:32", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n    if debut1 <= fin2 and debut1>=fin2 :\n      res=True\n    else :\n      res=False\n    return res", "user": "userdId_24", "attemptID": 329, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "51.32094", "embeddingY": "-23.019554"},{"extension": "py", "date": "2020-04-03 00:40:07", "correct": "1", "upload": "def stockerChiffres(n):\n  res=[]\n  if n==0:\n    res.append(n)\n  while n!=0:\n    res.append(n%10)\n    n=n//10\n  return res", "user": "userdId_30", "attemptID": 330, "exercise": "49a87f644f84a443327fb4315b47f249", "exercise_name": "stockerChiffres", "embeddingX": "41.773155", "embeddingY": "14.936714"},{"extension": "py", "date": "2020-03-03 05:49:13", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    for i in range(len(liste)):\n      res=liste[0]\n      if liste[i]>res:\n        res=liste[i]\n  return res", "user": "userdId_8", "attemptID": 331, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "1.2098277", "embeddingY": "-63.53436"},{"extension": "py", "date": "2020-03-31 03:29:55", "correct": "1", "upload": "def fusion(liste1,liste2):\n  res=[]\n  i=0\n  j=0\n  while i<len(liste1) and j<len(liste2):\n    if liste1[i]<liste2[j]:\n      res.append(liste1[i])\n      i=i+1\n    else:\n      res.append(liste2[j])\n      j=j+1\n  while i<len(liste1):\n   res.append(liste1[i])\n   i=i+1\n  while j<len(liste2):\n   res.append(liste2[j])\n   j=j+1\n  return res", "user": "userdId_12", "attemptID": 332, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-39.48226", "embeddingY": "49.286827"},{"extension": "py", "date": "2020-03-30 21:37:16", "correct": "0", "upload": "def fusion(liste1,liste2):\n  i=0\n  j=0\n  listefusion=[]\n  while i<len(liste1) and j<len(liste2):\n    if liste1[i]>liste2[j]:\n      listefusion.append(liste2[j])\n      j=j+1\n    else:\n      listefusion.append(liste1[i])\n      i=i+1\n\n  if max(liste1)>max(liste2):\n    for ind in range (i,len(liste1)):\n      listefusion.append(liste1[ind])\n\n  if max(liste2)>max(liste1):\n    for ind in range (j,len(liste2)):\n      listefusion.append(liste2[ind])\n  return listefusion\n", "user": "userdId_19", "attemptID": 333, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-34.22528", "embeddingY": "49.169647"},{"extension": "py", "date": "2020-03-27 05:46:17", "correct": "0", "upload": "def quatrePlus100(liste):\n  i=0\n  while i>len(liste):\n    if l[i]>100:\n      res.append(l[i])\n      i=i+1\n  if len(res)<4:\n    res=i+1\n  return i", "user": "userdId_20", "attemptID": 334, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-21.086271", "embeddingY": "32.574684"},{"extension": "py", "date": "2020-05-04 22:42:39", "correct": "0", "upload": "def prononcable(mot):\n  res=True\n  x=\"aeiouy\"\n  cpt=0\n  i=0\n  while i<len(mot) and not x:\n    cpt+=1\n    i+=1\n  if cpt>3:\n    res=False\n  return res", "user": "userdId_8", "attemptID": 335, "exercise": "6318b210c201fba050d60bc0913cb7ef", "exercise_name": "prononcable", "embeddingX": "4.3969803", "embeddingY": "50.615875"},{"extension": "py", "date": "2020-03-09 23:53:03", "correct": "0", "upload": "def ecart(liste):\n    if len(liste)==0:\n      res=None\n    else:\n      res=liste[0]\n      maxi=[]\n      mini=[]\n      for i in range(1,len(liste)):\n        if liste[i]<res:\n          min=liste[i]\n        if liste[i]>res:\n          max=liste[i]\n          res=maxi-mini\n    return res\n      \n      ", "user": "userdId_9", "attemptID": 336, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "1.6717415", "embeddingY": "-85.61127"},{"extension": "py", "date": "2020-03-06 00:44:22", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    res=None\n  else:\n    res=mot[0]\n    for mot in \"aeiouy\":\n      res=res+1\n  \n  return res", "user": "userdId_5", "attemptID": 337, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-0.2190138", "embeddingY": "-30.42821"},{"extension": "py", "date": "2020-03-10 21:18:43", "correct": "0", "upload": "def ecart(liste):\n  res=0\n  if len(liste)==0:\n    res=None\n  if len(liste)==1:\n    res=0\n  x=liste[0]\n  y=liste[0]\n  for i in range(1,len(liste)):\n    if liste[i]>x:\n      x=liste[i]\n    if liste[i]<y:\n      y=liste[i]\n  res=x-y\n  return res", "user": "userdId_14", "attemptID": 338, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "-0.60157007", "embeddingY": "-83.19435"},{"extension": "py", "date": "2020-03-09 08:45:13", "correct": "0", "upload": "def moyenne(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=0\n    cpt=0\n    for elem in liste:\n      res=res+elem\n    cpt=cpt+1\n  return (res/cpt)\n\n    ", "user": "userdId_11", "attemptID": 339, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-3.852051", "embeddingY": "-9.547595"},{"extension": "py", "date": "2020-03-12 10:15:50", "correct": "0", "upload": "def jourNuit(heure):\n  0<=heure<=24\n  if 6<=heure<=18 :\n    temps='il fait jour'\n  else :\n    temps='il fait nuit'\n  if 0<=heure<=5 and 21<=heure<=24 :\n    soleil='on est la nuit'\n  if 5<=heure<=12 :\n    soleil='on est le matin'\n  if 12<=heure<=17 :\n    soleil=\"on est l'apr\u00e8s-midi\"\n  if 17<=heure<=21 :\n    soleil=\"on est le soir\"\n  heure= soleil + temps\n  return heure", "user": "userdId_24", "attemptID": 340, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "72.0188", "embeddingY": "30.248789"},{"extension": "py", "date": "2020-03-06 00:17:41", "correct": "0", "upload": "def maximum(liste):\n  res=max\n  for i in range (len(liste)):\n    if (liste[i]):\n      res=(liste[i])\n  return res", "user": "userdId_45", "attemptID": 341, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-39.64259", "embeddingY": "-40.251415"},{"extension": "py", "date": "2020-03-06 00:06:10", "correct": "1", "upload": "def minimum(liste):\n  if len (liste)==0:\n    res=None\n  else:\n    res=liste[0]\n    for i in range (1,len(liste)):\n      if liste[i]<res:\n        res=liste[i]\n    return res", "user": "userdId_13", "attemptID": 342, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "25.986702", "embeddingY": "-67.89227"},{"extension": "py", "date": "2020-03-17 06:05:29", "correct": "0", "upload": "def permutationListe(liste,permutation):\n  res=[]\n  for i in liste:\n    res[i]=liste[permutation[i]]\n  return res", "user": "userdId_7", "attemptID": 343, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-51.75406", "embeddingY": "-16.248165"},{"extension": "py", "date": "2020-04-06 22:53:59", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  ok=True\n  i=0\n  while i<len(liste) and ok:\n    if liste[i]==a*liste[i+1]+b:\n      ok=False\n    prec=ok\n    i+=1\n  return ok", "user": "userdId_12", "attemptID": 344, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-74.51605", "embeddingY": "26.553982"},{"extension": "py", "date": "2020-03-22 10:33:19", "correct": "0", "upload": "def moyenne(liste):\n  if liste==():\n    res=none\n  else:\n    x=0\n    cpt=0\n    for i in range(len(liste)):\n      cpt=cpt+1\n      x=x+liste[i]\n    res=x/cpt\n  return res", "user": "userdId_16", "attemptID": 345, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-11.695598", "embeddingY": "-6.2101645"},{"extension": "py", "date": "2020-04-07 03:25:39", "correct": "0", "upload": "def suiteGeo(liste):\n  i=-1\n  ok=True\n  if len(liste)>1:\n    while i>-len(liste):\n      if liste[i-1]==0 or liste[i]%liste[i-1]!=0:\n        ok=False\n      i-=1\n  return ok", "user": "userdId_12", "attemptID": 346, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "16.990023", "embeddingY": "30.59916"},{"extension": "py", "date": "2020-05-04 20:23:28", "correct": "0", "upload": "def polynome(a,b,c):\n  res=\"pas de solution\"\n  delta=b**2-4*a*c\n  if delta>0:\n    S1=(-b+delta**(1/2))/2*a\n    S2=(-b-delta**(1/2))/2*a\n    res=\"(S1,S2)\"\n  return res", "user": "userdId_8", "attemptID": 347, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-55.803745", "embeddingY": "13.434647"},{"extension": "py", "date": "2020-03-30 22:06:11", "correct": "0", "upload": "def stockerChiffres(nombre):\n  temp = str(nombre)\n  res = temp\n  for i in range(len(temp)):\n    res[-(1+i)]=temp[i]\n  return res", "user": "userdId_6", "attemptID": 348, "exercise": "49a87f644f84a443327fb4315b47f249", "exercise_name": "stockerChiffres", "embeddingX": "-55.77715", "embeddingY": "-28.212498"},{"extension": "py", "date": "2020-04-14 06:03:56", "correct": "0", "upload": "def indiceInsertion(sc,scores):\n  res=0\n  i=0\n  while i<len(scores) and sc<scores:\n    res=i\n    i=i+1\n  return res\n", "user": "userdId_28", "attemptID": 349, "exercise": "f8a820b2bd54d18d36716e3d703858f7", "exercise_name": "indiceInsertion", "embeddingX": "-16.022394", "embeddingY": "44.88384"},{"extension": "py", "date": "2020-06-02 22:02:53", "correct": "0", "upload": "def bissextile(annee):\n  if (annee%4==0 and annee%100!=0) or annee%400:\n    return True\n  else:\n    return False", "user": "userdId_12", "attemptID": 350, "exercise": "a7d37636649c0ada991520788deeb2d0", "exercise_name": "bissextile", "embeddingX": "51.063683", "embeddingY": "-0.11272982"},{"extension": "py", "date": "2020-03-05 07:01:49", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut1==debut2:\n    res=True\n  else:\n    for debut1 in range(fin2,fin1):\n      res=True\n      \n      \n      \n   \n  \n  return res\n  ", "user": "userdId_5", "attemptID": 351, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "64.70778", "embeddingY": "-30.070055"},{"extension": "py", "date": "2020-03-10 04:20:36", "correct": "0", "upload": "def doubleLettre(mot):\n  prec=' '\n  for c in mot:\n    if prec==' ' and c!=' ':\n      c1=c2\n      if c1==c2:\n        res=True\n  return res", "user": "userdId_18", "attemptID": 352, "exercise": "00da9cf1fa2b468d915724499459ed8f", "exercise_name": "doubleLettre", "embeddingX": "20.478848", "embeddingY": "-7.111761"},{"extension": "py", "date": "2020-03-12 21:56:01", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=none\n  else:\n    res=liste[0]\n    for i in range(len(liste)):\n      if liste[i]>res:\n        res=liste[i]\n  return res", "user": "userdId_20", "attemptID": 353, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-3.7522213", "embeddingY": "-59.788452"},{"extension": "py", "date": "2020-04-08 02:33:49", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  res=True\n  while i<len(liste)-1 and res==True:\n    if liste[0]!=0:\n      q=liste[i+1]/liste[i]\n      if liste[i+1]/liste[i]==q:\n        res=True\n      else:\n        res=False\n    else:\n      res=False\n    i=i+1\n  return res", "user": "userdId_26", "attemptID": 354, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "28.497095", "embeddingY": "60.151375"},{"extension": "py", "date": "2020-04-07 09:50:55", "correct": "0", "upload": "def suiteAri(liste):\n  ok=True\n  cpt=u0\n  i=0\n  if len(liste)==0:\n    ok=True\n  while i<len(liste) and ok:\n    cpt=cpt+r\n    if liste[i+1]!=cpt:\n      ok=False\n    i=i+1\n  return ok\n    \n    ", "user": "userdId_1", "attemptID": 355, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "-47.001736", "embeddingY": "-8.057052"},{"extension": "py", "date": "2020-04-08 00:18:35", "correct": "1", "upload": "def phrasePalindrome(phrase):\n  P=[]\n  i=0\n  c=True\n  for lettre in phrase:\n    if 'a'<=lettre<='z':\n      P.append(lettre)\n  while i<(len(P)/2) and c:\n    if P[i]!=P[len(P)-i-1]:\n      c=False\n    i=i+1\n  return c", "user": "userdId_19", "attemptID": 356, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "44.632195", "embeddingY": "35.227974"},{"extension": "py", "date": "2020-04-06 09:36:24", "correct": "0", "upload": "def suiteGeo(liste):\n    if liste==[] or len(liste)==1:\n      ok=True\n    elif 0 in liste:\n      while 0 in liste:\n        liste.remove(0)\n      if liste==[] or len(liste)==1:\n        ok=True\n      else:\n        ok=False\n    else:\n      ok=True\n      i=1\n      while i<len(liste) and ok:\n        cte=liste[i]/liste[i-1]\n        if liste[0]*cte**i!=liste[i]:\n          ok=False\n        i+=1\n    return ok", "user": "userdId_18", "attemptID": 357, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "41.290997", "embeddingY": "67.5748"},{"extension": "py", "date": "2020-04-12 10:33:44", "correct": "0", "upload": "def elemGeo(n,u0,q):\n  for i in range(0,n):\n    q=q*n\n  res=u0*q\n  \n  return res", "user": "userdId_38", "attemptID": 358, "exercise": "d7c83a7fb9b49e28804e55955ad06968", "exercise_name": "elemGeo", "embeddingX": "-27.513407", "embeddingY": "16.692875"},{"extension": "py", "date": "2020-05-11 00:20:04", "correct": "0", "upload": "def listeDecroissante(scores):\n  ok=True\n  i=0\n  while i<len(scores)-1:\n    if scores[i]>score[i+1]:\n      ok=False\n  return ok", "user": "userdId_12", "attemptID": 359, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "14.45623", "embeddingY": "50.163174"},{"extension": "py", "date": "2020-03-30 22:22:29", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n  i=0\n  j=0\n  res = -1\n  while j <n and i < len(l):\n    if l[i] == x:\n      j+=1\n      if j == n:\n        res = i\n    i+=1\n    if res == -1: res = None\n  return(res)", "user": "userdId_4", "attemptID": 360, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-7.684209", "embeddingY": "73.10997"},{"extension": "py", "date": "2020-04-07 23:26:12", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  ok=False\n  i=0\n  while i<len(phrase)//2 and not ok:\n    if phrase[i]!=phrase[-i-1]:\n      ok=True\n    i+=1\n  return ok", "user": "userdId_13", "attemptID": 361, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "25.536613", "embeddingY": "37.979805"},{"extension": "py", "date": "2020-04-08 02:28:06", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  res=True\n  while i<len(liste)-1 and res==True:\n    if liste[i]!=0:\n      q=liste[i+1]/liste[i]\n      if liste[i+1]/liste[i]==q:\n        res=True\n      else:\n        res=False\n    else:\n      res=False\n    i=i+1\n  return res", "user": "userdId_26", "attemptID": 362, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "29.457302", "embeddingY": "60.262257"},{"extension": "py", "date": "2020-03-30 11:48:59", "correct": "1", "upload": "def fusion(liste1,liste2):\n    if liste1==[]:\n      res=liste2\n    elif liste2==[]:\n      res=liste1\n    else:\n      res=liste1+liste2\n    res.sort()\n    return res", "user": "userdId_32", "attemptID": 363, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-17.771238", "embeddingY": "-16.074947"},{"extension": "py", "date": "2020-03-06 00:12:04", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=liste[0]\n    for i in range(len(liste)):\n      if liste[i]<res:\n        res=liste[i]\n  return res", "user": "userdId_12", "attemptID": 364, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "27.171528", "embeddingY": "-68.1895"},{"extension": "py", "date": "2020-03-05 21:59:42", "correct": "0", "upload": "def maximum(liste):\n    max = 0\n    for i in range(0,len(liste)):\n    \tif liste[i] > max:\n        \tmax = liste[i]\n    return max", "user": "userdId_29", "attemptID": 365, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "10.680541", "embeddingY": "-72.7836"},{"extension": "py", "date": "2020-03-30 11:33:11", "correct": "1", "upload": "def listeSymetrique(l):\n    res=True\n    i=0\n    while i<len(l)//2 and res:\n        if l[i]!=l[-(i+1)]:\n            res=False\n        i+=1\n    return res\n\ndef stockerChiffres(nombre):\n    res=[]\n    decomp=nombre\n    while decomp!=0:\n        res+=[decomp%10]\n        decomp=decomp//10\n    if res==[]: #cas de 0\n        res=[0]\n    return res\n\ndef nombreSymetrique(nombre):\n    decomp=stockerChiffres(nombre);\n    return listeSymetrique(decomp)\n\n", "user": "userdId_32", "attemptID": 366, "exercise": "fae4d6a34289cf5bf06f9d6d17e8547e", "exercise_name": "nombreSymetrique", "embeddingX": "32.64899", "embeddingY": "36.686382"},{"extension": "py", "date": "2020-03-23 01:00:48", "correct": "0", "upload": "def nbOccurrencesLettre(lettre,mot):\n  res=0\n  for i in range(len(mot)):\n    if lettre in mot:\n      res=res+1\n    return res", "user": "userdId_16", "attemptID": 367, "exercise": "2864c9e5861229d2ff32570f6bc944fb", "exercise_name": "nbOccurrencesLettre", "embeddingX": "-12.742443", "embeddingY": "-43.46418"},{"extension": "py", "date": "2020-04-12 08:33:02", "correct": "0", "upload": "def suiteAriGeo(liste):\n  i=0\n  while i<len(liste)-1:\n    a=liste[0]\n    b=liste[0]\n    if liste[i+1]==liste[i]+(liste[1]-liste[0]):\n      b=liste[1]-liste[0]\n    if liste[0]!=0:                        \n      if liste[i+1]==liste[i]*liste[1]/liste[0]:\n        a=liste[1]/liste[0]\n        b=0\n    if liste[i+1]==liste[i]*(liste[1]-liste[0])+(liste[i]-liste[i-1]):\n      a=liste[1]-liste[0]\n      b=liste[i]-(liste[i-1]*(liste[1]-liste[0]))\n    i=i+1\n  ok=True\n  i=0\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=a*liste[i]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 368, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "35.78538", "embeddingY": "84.18212"},{"extension": "py", "date": "2020-03-05 22:04:15", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n     res=None\n  else:\n    res=None\n    for i in range(len(liste)):\n      if liste[i]>res:\n        res=liste[i]>res\n  return res", "user": "userdId_30", "attemptID": 369, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "1.155526", "embeddingY": "-56.58491"},{"extension": "py", "date": "2020-04-03 00:43:42", "correct": "0", "upload": "def stockerChiffres(nombre):\n  i=0\n  res=[]\n  if nombre==0:\n    res=[0]\n  while nombre!=0:\n    n=nombre//10\n    res.append(n%10)\n    i+=1\n  return ", "user": "userdId_1", "attemptID": 370, "exercise": "49a87f644f84a443327fb4315b47f249", "exercise_name": "stockerChiffres", "embeddingX": "46.45975", "embeddingY": "16.031431"},{"extension": "py", "date": "2020-03-10 03:18:32", "correct": "0", "upload": "def jourNuit(heure):\n  if heure<0 or heure >24:\n    res=\"l'heure saisie est invalide\"\n  else:\n    if heure<5 or heure>=21:\n      res=\"on est la nuit\"\n    elif heure<12:\n      res=\"on est le matin\" \n    elif heure<17:\n      res=\"on est l'apr\u00e8s-midi\"\n    elif heure<21:\n      res=\"on est le soir\"\n    if heure<6 or heure>18:\n      res=res+\" et il fait nuit\"\n    else:\n      res=res+\" et il fait jour\"\n  return res", "user": "userdId_16", "attemptID": 371, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "71.16973", "embeddingY": "13.265338"},{"extension": "py", "date": "2020-03-20 00:01:14", "correct": "1", "upload": "def sousChaine(s,debut,longueur):\n  res=\"\"\n  fin=debut+longueur\n  if fin>len(s):\n    fin=len(s)\n  for i in range(debut,fin):\n    res=res+s[i]\n  return res", "user": "userdId_20", "attemptID": 372, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-72.395546", "embeddingY": "25.038527"},{"extension": "py", "date": "2020-04-05 08:58:53", "correct": "0", "upload": "def produitScalaire(vec1,vec2):\n  res=0\n  for i in range(3):\n    e1=vec1[i]\n    e2=vec2[i]\n    res=res+e1*e2\n  return res", "user": "userdId_26", "attemptID": 373, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-64.58343", "embeddingY": "-18.454414"},{"extension": "py", "date": "2020-03-24 05:08:12", "correct": "1", "upload": "def quatrePlus100(liste):\n  res=[]\n  i=0\n  while i<len(liste) and len(res)<=3:\n    if liste[i]>100:\n      res.append(liste[i])\n    i=i+1\n  return res", "user": "userdId_7", "attemptID": 374, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-27.006857", "embeddingY": "40.33395"},{"extension": "py", "date": "2020-03-23 00:34:16", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=[]\n    for i in range(len(liste)):\n      if len(liste+1)>len(liste):\n        res=len(liste+1)\n  return res", "user": "userdId_8", "attemptID": 375, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-7.9932427", "embeddingY": "-59.744442"},{"extension": "py", "date": "2020-04-11 00:31:27", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  c=True\n  if liste[0]==0:\n    c=False\n  while i<(len(liste)-2) and c:\n    if liste[i]!=0 and liste[i+1]!=0:\n      if liste[i+2]/liste[i+1]!=liste[i+1]/liste[i]:\n        c=False\n    i=i+1\n  return c", "user": "userdId_19", "attemptID": 376, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "27.184488", "embeddingY": "55.424423"},{"extension": "py", "date": "2020-03-06 00:08:48", "correct": "0", "upload": "def maximum(liste):\n  res=0\n  for i in range(len(liste)):\n      res=res+liste[i]\n  return res", "user": "userdId_41", "attemptID": 377, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-43.884964", "embeddingY": "-37.528564"},{"extension": "py", "date": "2020-04-06 01:18:19", "correct": "1", "upload": "def verifSuiteAriGeo(liste,a,b):\n  ok=True\n  i=0\n  if len(liste)<=1 :\n    ok=True\n  else :\n    while i<(len(liste)-1) and ok :\n      if (a*liste[i]+b)!=liste[i+1] :\n        ok=False\n      i+=1\n  return ok", "user": "userdId_15", "attemptID": 378, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-82.43439", "embeddingY": "16.656214"},{"extension": "py", "date": "2020-03-23 00:36:44", "correct": "0", "upload": "def reconstruireChainePartielle(s,n):\n    res = \"\"\n    for i in range (s) :\n      res = res + i\n    return res", "user": "userdId_24", "attemptID": 379, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-43.361446", "embeddingY": "-20.679781"},{"extension": "py", "date": "2020-03-19 05:11:59", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if jour1<jour2 or mois1<mois2 or annee1<annee2:\n    res=-1\n    if jour1==jour2 or mois1==mois2 or annee1==annee2:\n      res=1\n  else:\n    res=0\n    return res", "user": "userdId_34", "attemptID": 380, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "78.245895", "embeddingY": "-27.168638"},{"extension": "py", "date": "2020-03-15 03:23:26", "correct": "0", "upload": "def polynome(a,b,c):\n    delta=(b**2)-(4*a*c)\n    x=(-b-delta**0,5)/(2*a)\n    y=(-b+delta**0,5)/(2*a)\n    if delta<0:\n      return(\"pas de solution\")\n    if delta>0:\n      return(x,y)\n    if delta==0:\n      return(x)\n \n\n ", "user": "userdId_21", "attemptID": 381, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-54.388165", "embeddingY": "11.233892"},{"extension": "py", "date": "2020-03-10 01:52:29", "correct": "0", "upload": "def ecart(liste):\n    if len(liste)==0:\n      res=None\n    else:\n      res=liste[0]\n      max=liste[0]\n      min=liste[0]\n      for i in range(1,len(liste)):\n        if liste[i]<res:\n          min=liste[i]\n        if liste[i]>res:\n          max=liste[i]\n          res=max-min\n    return res\n      \n      ", "user": "userdId_9", "attemptID": 382, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "13.351288", "embeddingY": "-83.29464"},{"extension": "py", "date": "2020-03-22 05:12:18", "correct": "1", "upload": "def bissextile(annee):\n  res=False\n  if (annee%4==0 and annee%100!=0 or annee%400==0):\n    res=True\n  return res", "user": "userdId_12", "attemptID": 383, "exercise": "a7d37636649c0ada991520788deeb2d0", "exercise_name": "bissextile", "embeddingX": "47.74202", "embeddingY": "1.8510438"},{"extension": "py", "date": "2020-03-31 04:01:18", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n  cpt=0\n  i=0\n  while i<len(l) and cpt<n:\n    if l[i]==x:\n       cpt=cpt+1\n    i=i+1\n  return [cpt]", "user": "userdId_12", "attemptID": 384, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-7.315622", "embeddingY": "78.41434"},{"extension": "py", "date": "2020-03-10 04:21:55", "correct": "1", "upload": "def sommeNbPairs(liste):\n    res=0\n    for i in range (len(liste)):\n        if liste[i]%2==0:\n            res=res+liste[i]\n    return res", "user": "userdId_36", "attemptID": 385, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "-19.318111", "embeddingY": "-56.656166"},{"extension": "py", "date": "2020-04-21 02:29:09", "correct": "1", "upload": "def nbOccurrencesJoueur(joueurs,nom):\n    cpt=0\n    i=0\n    while i<len(joueurs):\n      if joueurs[i]==nom:\n        cpt+=1\n      i+=1\n    return cpt\n  ", "user": "userdId_11", "attemptID": 386, "exercise": "00ee5faf82e54951fbdb2ba2656f7ae7", "exercise_name": "nbOccurrencesJoueur", "embeddingX": "-16.622564", "embeddingY": "65.65617"},{"extension": "py", "date": "2020-03-17 06:00:25", "correct": "0", "upload": "def sommeNbPairs(liste):\n    if len(liste)==0:\n      res=0\n    else:\n      res=0\n      for i in range(liste):\n        if liste[i]%2==0:\n          res=res+liste[i]\n    return res", "user": "userdId_11", "attemptID": 387, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "2.630423", "embeddingY": "-46.9679"},{"extension": "py", "date": "2020-04-05 03:35:41", "correct": "0", "upload": "def minimum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=liste[0]\n    for i in range(1,len(liste)-1):\n      if res>liste[i]:\n        res=liste[i]\n  return res", "user": "userdId_26", "attemptID": 388, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "-5.3315563", "embeddingY": "-67.51733"},{"extension": "py", "date": "2020-03-19 23:49:19", "correct": "0", "upload": "def permutationChaine(s):\n  res=''\n  for i in range(len(s)):\n    res=res+s[i+1]+res[i]\n  return res", "user": "userdId_40", "attemptID": 389, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-57.27109", "embeddingY": "-35.254086"},{"extension": "py", "date": "2020-03-14 03:05:02", "correct": "0", "upload": "def ecart(liste):\n   res=0\n   if len(liste)==0:\n      res=None\n   if len(liste)==1:\n      res=0\n   else:\n      max=liste[0]\n      min=max\n      for elem in range(len(liste)):\n         if elem>max:\n            max=elem\n      for elem in range(len(liste)):\n         if elem<min:\n            min=elem\n   res=max-min\n   return res", "user": "userdId_14", "attemptID": 390, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "14.3207855", "embeddingY": "-86.49016"},{"extension": "py", "date": "2020-04-12 08:09:48", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n    cpt=0\n    x=nombre%10\n    decomp=nombre\n    while decomp!=0 and x:\n      if x==chiffre:\n        cpt+=1\n        decomp=decomp//10\n        x=decomp%10\n      else:\n        decomp=decomp//10\n        x=decomp%10\n    if cpt==0:\n      cpt=1\n    return cpt", "user": "userdId_11", "attemptID": 391, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "8.527118", "embeddingY": "14.610642"},{"extension": "py", "date": "2020-03-06 00:43:31", "correct": "0", "upload": "def moyenne(liste):\n  res=0\n  cpt=0\n  if len(liste)==0:\n    moy=None\n  else:\n     for i in liste:\n       res=res+i\n       cpt=cpt+1\n  moy=res*cpt\n  return moy", "user": "userdId_14", "attemptID": 392, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "2.9765809", "embeddingY": "-7.72642"},{"extension": "py", "date": "2020-04-03 01:10:20", "correct": "1", "upload": "def doubleChiffre(nombre):\n  trouve=False\n  prec=None\n  while nombre!=0 and not trouve:\n    if prec==nombre%10:\n      trouve=True\n    prec=nombre%10\n    nombre//=10\n  return trouve", "user": "userdId_34", "attemptID": 393, "exercise": "c83ea6acd3e9f6f5543e87d515e8a44a", "exercise_name": "doubleChiffre", "embeddingX": "12.7646885", "embeddingY": "22.069075"},{"extension": "py", "date": "2020-04-07 03:01:46", "correct": "0", "upload": "def suiteGeo(liste):\n  i=1\n  ok=True\n  if len(liste)>=2:\n    raison=liste[1]/liste[0]\n    while i<len(liste)-1 and ok:\n      ok=liste[i+1]==liste[i]*raison\n      i+=1\n  return ok", "user": "userdId_12", "attemptID": 394, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "25.055132", "embeddingY": "67.99566"},{"extension": "py", "date": "2020-04-12 07:17:11", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  if liste==[]:\n    res=True\n  c=[]\n  f=[]\n  res=False\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n    e=liste[0]\n    f.append(e)\n  f.extend(c)\n  return f", "user": "userdId_8", "attemptID": 395, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-78.35935", "embeddingY": "8.464869"},{"extension": "py", "date": "2020-04-17 03:08:48", "correct": "1", "upload": "def nbVoyelles(mot):\n  cpt=0\n  for i in mot: \n    if i in 'aeiouy':\n      cpt=cpt+1\n  return cpt", "user": "userdId_21", "attemptID": 396, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "15.37404", "embeddingY": "-23.903421"},{"extension": "py", "date": "2020-04-11 07:58:49", "correct": "0", "upload": "def sousChaine(s1,s2):\n  res=False\n  i=0\n  j=0\n  while i<len(s1) and j<len(s2) and s1[i]!=s2[j]:\n    j+=1\n  else:\n    while i<len(s1) and j<len(s2) and s1[i]==s2[j]:\n      if s1[i]==s2[j]:\n        res=True\n      i+=1\n      j+=1  \n  return res", "user": "userdId_8", "attemptID": 397, "exercise": "4bdf8c9c5d020593e1771e4d3ae1ae0d", "exercise_name": "sousChaine", "embeddingX": "-4.844238", "embeddingY": "58.694054"},{"extension": "py", "date": "2020-04-12 08:02:51", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n    cpt=0\n    x=nombre%10\n    decomp=nombre\n    while decomp!=0:\n      if x==chiffre:\n        cpt+=1\n      else:\n        decomp=decomp//10\n        x=decomp%10\n    return cpt", "user": "userdId_11", "attemptID": 398, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "6.897961", "embeddingY": "13.809744"},{"extension": "py", "date": "2020-03-17 05:32:38", "correct": "0", "upload": "def permutationChaine(s):\n  res=\"\"\n  for i in range(0,len(s)-1,2):\n    res=res+s[1+i]+s[i]\n  if len(s)!=0:\n    res=res%2\n    res=res+s[i-1]\n  return res", "user": "userdId_8", "attemptID": 399, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-38.590984", "embeddingY": "-61.570526"},{"extension": "py", "date": "2020-04-08 00:01:53", "correct": "0", "upload": "def suiteGeo(liste):\n  ok=True\n  i=0\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[0]==0:\n      ok=False\n    if liste[i]!=0:\n      q=liste[1]/liste[0]\n    if liste[i]!=0:\n      if liste[i+1]/liste[i]!=q:\n        ok=False\n    if liste[i]==0:\n      ok=True\n    i=i+1\n  return ok\n", "user": "userdId_1", "attemptID": 400, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "33.41117", "embeddingY": "64.18529"},{"extension": "py", "date": "2020-04-07 23:29:35", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  res=0\n  for chiffre in nombre:\n    res=res+1\n  return res\n    ", "user": "userdId_19", "attemptID": 401, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-39.23841", "embeddingY": "-12.632116"},{"extension": "py", "date": "2020-03-17 06:14:52", "correct": "0", "upload": "def maximum(liste):\n    if len(liste)==0:\n      res=none\n    else:\n      res=liste[0]\n      for elem in liste:\n        res=elem\n    return res", "user": "userdId_22", "attemptID": 402, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-3.26665", "embeddingY": "-35.8064"},{"extension": "py", "date": "2020-04-29 01:44:50", "correct": "0", "upload": "def nombresPremiers(n):\n    res=[]\n    nb=2\n    while len(res)<n:\n      ok=True\n      i=0\n      while i<len(res) and ok:\n        if nb%res[i]==0:\n          ok=False\n        i+=1\n        if ok:\n          res.append(nb)\n        nb+=1\n    return res\n  ", "user": "userdId_11", "attemptID": 403, "exercise": "7eda5a2bd3cdd0a510f96448337384d9", "exercise_name": "nombresPremiers", "embeddingX": "-4.8479843", "embeddingY": "45.48004"},{"extension": "py", "date": "2020-04-12 07:00:49", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  if liste==[]:\n    res=True\n  c=[]\n  res=False\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n    c=[liste[0]]/len(liste)+c\n  return c", "user": "userdId_8", "attemptID": 404, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-73.63986", "embeddingY": "20.748468"},{"extension": "py", "date": "2020-06-02 22:58:03", "correct": "1", "upload": "def ecart(liste):\n  if len(liste)!=0:\n    max=liste[0]\n    min=liste[0]\n    for elem in liste:\n      if elem>max:\n        max=elem\n      if elem<min:\n        min=elem\n    return max-min    ", "user": "userdId_12", "attemptID": 405, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "14.501378", "embeddingY": "-77.12645"},{"extension": "py", "date": "2020-03-31 06:12:28", "correct": "0", "upload": "def stockerChiffres(nombre):\n  res=[]\n  while nombre!=0:\n    res.append(nombre%10)\n    nombre//=10\n  return res", "user": "userdId_18", "attemptID": 406, "exercise": "49a87f644f84a443327fb4315b47f249", "exercise_name": "stockerChiffres", "embeddingX": "43.971916", "embeddingY": "15.850079"},{"extension": "py", "date": "2020-03-23 23:05:58", "correct": "0", "upload": "def quatrePlus100(liste):\n  if len(liste)==0:\n    res=[]\n  else:\n    res=[]\n    for i in range(len(liste)):\n      if liste[i]>100:\n        res=res+liste[i]\n    return res", "user": "userdId_9", "attemptID": 407, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-7.8715158", "embeddingY": "-62.20904"},{"extension": "py", "date": "2020-04-05 12:04:01", "correct": "1", "upload": "def phrasePalindrome(phrase):\n  ok=True\n  i=0\n  sansespace=''\n  #enlever les espaces de la phrases\n  for lettre in phrase:\n    if lettre!=' ':\n      sansespace+=lettre\n  #v\u00e9rifier la sym\u00e9trie de la phrase\n  while i<len(sansespace)//2 and ok:\n    ok=sansespace[i]==sansespace[-i-1]\n    i+=1\n  return ok\n", "user": "userdId_12", "attemptID": 408, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "44.78422", "embeddingY": "34.17554"},{"extension": "py", "date": "2020-03-20 00:50:13", "correct": "0", "upload": "def permutationChaine(mot):\n  res=\"\"\n  for k in range(0,len(mot)-1,2):\n    res=mot[k+1]+mot[k]\n\n  return res", "user": "userdId_5", "attemptID": 409, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-43.95754", "embeddingY": "-50.489307"},{"extension": "py", "date": "2020-03-23 01:17:21", "correct": "0", "upload": "def nbOccurrencesLettre(lettre,mot):\n  res=0\n  for i in range(len(mot)): \n    if l==mot[i]:\n      res=res+1\n  return res", "user": "userdId_21", "attemptID": 410, "exercise": "2864c9e5861229d2ff32570f6bc944fb", "exercise_name": "nbOccurrencesLettre", "embeddingX": "-25.735838", "embeddingY": "-34.876846"},{"extension": "py", "date": "2020-03-01 01:18:33", "correct": "0", "upload": "from math import sqrt\nfrom math import sqrt\n\ndef polynome(a,b,c):\n    delta =  b**2 - (4*a*c)\n    \n    if delta > 0:\n        x = (-b + sqrt(delta))/2*a , (-b -sqrt(delta))/2*a\n        \n         \n    elif delta == 0:\n        x = -(b/2*a)\n        \n    else:\n        x = \"pas de solution\"\n        \n    return x\n", "user": "userdId_4", "attemptID": 411, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-56.065155", "embeddingY": "5.8006883"},{"extension": "py", "date": "2020-04-01 06:17:09", "correct": "1", "upload": "def fusion(liste1,liste2):\n  i=0\n  j=0\n  res=[]\n  while i<len(liste1) and j<len(liste2):\n    if liste1[i]<liste2[j]:\n      res.append(liste1[i])\n      i=i+1\n    else:\n      res.append(liste2[j])\n      j=j+1\n  while i<len(liste1):\n    res.append(liste1[i])\n    i=i+1\n  while j<len(liste2):\n    res.append(liste2[j])\n    j=j+1\n  return res", "user": "userdId_12", "attemptID": 412, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-37.296093", "embeddingY": "50.483025"},{"extension": "py", "date": "2020-03-23 00:34:55", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=[]\n    for i in range(len(liste)):\n      if len(liste)+1>len(liste):\n        res=len(liste+1)\n  return res", "user": "userdId_8", "attemptID": 413, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-8.000774", "embeddingY": "-59.734695"},{"extension": "py", "date": "2020-04-07 04:46:41", "correct": "1", "upload": "def elemAri(n,u0,r):\n  res=u0+r*n\n  return res", "user": "userdId_26", "attemptID": 414, "exercise": "f239498950e974e29e01472749d9a09d", "exercise_name": "elemAri", "embeddingX": "-35.64155", "embeddingY": "18.5854"},{"extension": "py", "date": "2020-04-05 08:50:29", "correct": "1", "upload": "def compteChiffre(chiffre,nombre):\n  if nombre==0:\n    res=[0]\n  else:\n    res=[]\n    while nombre!=0:\n      res.append(nombre%10)\n      nombre//=10\n  cpt=0\n  for i in range(len(res)):\n    if chiffre==res[i]:\n      cpt=cpt+1\n  return cpt", "user": "userdId_18", "attemptID": 415, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-0.022719203", "embeddingY": "5.9476857"},{"extension": "py", "date": "2020-04-06 02:27:40", "correct": "0", "upload": "def suiteGeo(liste):\n  ok=True\n  i=0\n  if len(liste)<=1 :\n    ok=True\n  else :\n    while i<(len(liste)-1) and ok :\n      if (liste[i]*liste[i+1])==0 :\n        ok=False\n      elif liste[i+1]!=(liste[1]//liste[0])*liste[i]:\n        ok=False\n      i+=1\n  return ok", "user": "userdId_15", "attemptID": 416, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "50.283356", "embeddingY": "45.70159"},{"extension": "py", "date": "2020-04-06 00:28:33", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  ok=True\n  i=0\n  j=0\n  l=[]\n  while j<len(phrase) :\n    if 'a'<= phrase[j] and phrase[j]<='z' and phrase[j]!='' :\n      l.append(phrase[j])\n    j+=1\n\n  while i<len(l):\n    if phrase[i]!=phrase[-i-1]:\n      ok=False\n    i+=1\n  return ok", "user": "userdId_15", "attemptID": 417, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "43.571774", "embeddingY": "36.46894"},{"extension": "py", "date": "2020-03-17 06:41:41", "correct": "0", "upload": "def permutationListe(liste,permutation):\n  res=0\n  for elem in liste:\n    res[elem]=liste[i]\n  return res", "user": "userdId_25", "attemptID": 418, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-50.72134", "embeddingY": "-12.084722"},{"extension": "py", "date": "2020-03-12 21:48:46", "correct": "0", "upload": "def nbVoyelles(mot):\n  res=0\n  for elem in mot:\n    if elem in 'aeiouy':\n      res=res+1\n  return None", "user": "userdId_46", "attemptID": 419, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "17.04265", "embeddingY": "-23.250622"},{"extension": "py", "date": "2020-06-02 23:23:47", "correct": "0", "upload": "def prononcable(mot):\n  for i in range(len(mot)-2):\n    if mot[i] in 'aeiouy' and mot[i+1] in 'aeiouy' and mot[i+2] in 'aeiouy':\n      return False\n    elif mot[i] in 'bcdfghjklmnpqrstvwxz' and mot[i+1] in 'bcdfghjklmnpqrstvwxz' and mot[i+2] in 'bcdfghjklmnpqrstvwxz':\n      return False\n    else:\n      return True", "user": "userdId_12", "attemptID": 420, "exercise": "6318b210c201fba050d60bc0913cb7ef", "exercise_name": "prononcable", "embeddingX": "-28.678741", "embeddingY": "-68.7988"},{"extension": "py", "date": "2020-04-07 23:56:11", "correct": "0", "upload": "def suiteGeo(liste):\n  ok=True\n  i=0\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i]==0:\n      ok=True\n    if liste[i]!=0:\n      q=liste[1]/liste[0]\n    if liste[i]!=0:\n      if liste[i+1]/liste[i]!=q:\n        ok=False\n    i=i+1\n  return ok\n\n", "user": "userdId_1", "attemptID": 421, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "32.15928", "embeddingY": "64.07755"},{"extension": "py", "date": "2020-03-24 04:48:46", "correct": "0", "upload": "def quatrePlus100(liste):\n  i=0\n  res=[]\n  while i<len(liste) and i>100:\n    res.append(l[i])\n  return res", "user": "userdId_13", "attemptID": 422, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-19.68732", "embeddingY": "43.85173"},{"extension": "py", "date": "2020-03-17 05:49:18", "correct": "0", "upload": "def distribution(liste,n):\n    cpts=[0]*n+1\n    for elem in liste:\n        cpts[elem]=cpts[elem]+1\n    return res", "user": "userdId_39", "attemptID": 423, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-57.19264", "embeddingY": "-5.750277"},{"extension": "py", "date": "2020-04-07 10:47:31", "correct": "0", "upload": "def nextConway(s):\n  res=''\n  cpt=1\n  for i in range(len(s)):\n    if i==len(s)-1 or s[i+1]!=s[i]:\n      res+=str(cpt)+s[i]\n      cpt=1\n    else:\n      cpt+=1\n  return int(res)", "user": "userdId_27", "attemptID": 424, "exercise": "a580c32690609356dae4401b3c89a3b8", "exercise_name": "nextConway", "embeddingX": "-29.328856", "embeddingY": "-57.811016"},{"extension": "py", "date": "2020-04-12 05:36:40", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=False\n  c=[]\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n    c=liste[i]+d\n  return c", "user": "userdId_8", "attemptID": 425, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-77.22142", "embeddingY": "16.579752"},{"extension": "py", "date": "2020-04-08 00:17:13", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  res=[]\n  cpt=0\n  if nombre==0:\n    res.append(nombre)\n  while nombre!=0:\n    res.append(nombre%10)\n    nombre=nombre//10\n  for i in range(len(res)):\n    if i==chiffre:\n      cpt=cpt+1\n  return cpt", "user": "userdId_14", "attemptID": 426, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-0.4952221", "embeddingY": "7.368473"},{"extension": "py", "date": "2020-04-13 21:17:05", "correct": "1", "upload": "def verifSuiteAriGeo(liste,a,b):\n  ok=True\n  n=1\n  while n<len(liste) and ok:\n    if liste[n]!=liste[n-1]*a+b:\n      ok=False\n    n+=1\n  return ok", "user": "userdId_8", "attemptID": 427, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-73.48379", "embeddingY": "16.1022"},{"extension": "py", "date": "2020-03-05 23:41:38", "correct": "1", "upload": "def somme(liste):\n    res=0\n    for elem in liste:\n      res=res+elem\n    return res  ", "user": "userdId_46", "attemptID": 428, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-28.163288", "embeddingY": "2.768422"},{"extension": "py", "date": "2020-03-05 23:50:29", "correct": "0", "upload": "def maximum(liste):\n    max=0\n    for elem in range(1, len(liste)):\n      if len[liste] > max:\n        max=l[liste]\n    return max    \n      \n   \n    ", "user": "userdId_46", "attemptID": 429, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "9.259238", "embeddingY": "-74.38702"},{"extension": "py", "date": "2020-03-09 21:45:42", "correct": "1", "upload": "def maximum(liste):\n  if liste == []:\n    return None\n  else:\n    maximum = liste[0]\n    for i in range(1,len(liste)):\n      if maximum < liste[i]:\n        maximum = liste[i]\n    return maximum", "user": "userdId_42", "attemptID": 430, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "25.557415", "embeddingY": "-71.079185"},{"extension": "py", "date": "2020-04-12 10:59:18", "correct": "0", "upload": "def phrasePalindrome(phrase):\n    if len(phrase)==0:\n      res=True\n    else:\n      res=True\n      i=0\n      x=''\n      while i<len(phrase)//2 and res:\n        if phrase[i]!=phrase[-(i+1)]:\n          res=False\n        i+=1\n    return res", "user": "userdId_11", "attemptID": 431, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "32.77818", "embeddingY": "35.147198"},{"extension": "py", "date": "2020-04-08 00:57:16", "correct": "1", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res = True\n  i = 0\n  while res and i < len(liste)-1:\n    if liste[i+1] != (a*liste[i]+b) :\n      res = False\n    i = i + 1\n  return res\n\ndef suiteAriGeo(liste):\n  if len(liste) < 3 :\n    res = True\n  else :\n    ecart1 = liste[1]-liste[0]\n    ecart2 = liste[2]-liste[1]\n    if ecart1 == 0 or ecart2 == 0:\n      a = 1\n    else :\n      a = ecart2/ecart1\n    b = liste[1]-a*liste[0]\n    res = verifSuiteAriGeo(liste,a,b)\n  return res\n", "user": "userdId_17", "attemptID": 432, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "16.60574", "embeddingY": "71.01258"},{"extension": "py", "date": "2020-03-06 00:19:44", "correct": "0", "upload": "def minimum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    \n    return None", "user": "userdId_14", "attemptID": 433, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "11.699961", "embeddingY": "-50.74117"},{"extension": "py", "date": "2020-04-10 00:55:25", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  res=True\n  if len(liste)==0:\n    res=True\n  while i<len(liste)-1 and res==True:\n    if liste[i]==0:\n      res=False\n    if liste[i]!=0:\n      q=liste[1]/liste[0]\n    if liste[i]!=0:\n      if liste[i+1]/liste[0]!=q:\n        res=False\n    if liste[i] and liste[i+1]==0:\n      res=True\n    if liste[i]==0 and liste[i+1]==0:\n      res=True\n    i+=1\n  return res", "user": "userdId_26", "attemptID": 434, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "34.71567", "embeddingY": "61.701218"},{"extension": "py", "date": "2020-04-14 00:23:49", "correct": "0", "upload": "def indiceInsertion(sc,scores):\n  res=0\n  for elem in scores:\n    if elem>=sc:\n      res+=1\n    return res", "user": "userdId_8", "attemptID": 435, "exercise": "f8a820b2bd54d18d36716e3d703858f7", "exercise_name": "indiceInsertion", "embeddingX": "-6.9442086", "embeddingY": "-26.554573"},{"extension": "py", "date": "2020-03-12 06:40:37", "correct": "0", "upload": "def maximum(liste):\n  res=12\n  for i in liste:\n     if res<liste:\n        res=max\n  return res ", "user": "userdId_20", "attemptID": 436, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "40.85675", "embeddingY": "-52.938835"},{"extension": "py", "date": "2020-03-27 05:52:07", "correct": "0", "upload": "def QuatrePremElemSup100(liste):\n  res=[]\n  i=0\n  while i<len(liste) and len(res)<4:\n    if liste[i]>100:\n      res=res+[liste[i]]\n    i=i+1\n  return res", "user": "userdId_34", "attemptID": 437, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-21.51276", "embeddingY": "42.773785"},{"extension": "py", "date": "2020-04-07 23:32:58", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  ok=False\n  i=0\n  while i<len(phrase)//2:\n    if phrase[i]!=phrase[-i-1]:\n      ok=False\n    else:\n      ok=True\n    i+=1\n  if phrase==\"\":\n    ok=True\n  return ok", "user": "userdId_13", "attemptID": 438, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "26.33917", "embeddingY": "33.69937"},{"extension": "py", "date": "2020-04-21 04:09:31", "correct": "1", "upload": "def listeMatchs(liste):\n  lmatchs=[]\n  i=0\n  j=i+1\n  while i<len(liste)-1:\n    lmatchs+=[(liste[i],liste[j])]\n    j+=1\n    if j>=len(liste):\n      i+=1\n      j=i+1\n  return lmatchs", "user": "userdId_18", "attemptID": 439, "exercise": "7425aa41502a932ef1011f8e2538120a", "exercise_name": "listeMatchs", "embeddingX": "-22.755491", "embeddingY": "25.033358"},{"extension": "py", "date": "2020-03-20 00:47:02", "correct": "1", "upload": "def permutationChaine(s):\n  res=''\n  for i in range (0,len(s)-1,2):\n    res=res+s[i+1]+s[i]\n  if (len(s)%2!=0):\n    res=res+s[-1]\n  \n  return res\n\n", "user": "userdId_15", "attemptID": 440, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-35.966236", "embeddingY": "-58.125595"},{"extension": "py", "date": "2020-03-12 10:17:34", "correct": "0", "upload": "def jourNuit(heure):\n  0<=heure<=24\n  if 6<=heure<=18 :\n    temps='il fait jour'\n  else :\n    temps='il fait nuit'\n  if 0<=heure<=5 and 21<=heure<=24 :\n    soleil='on est la nuit'\n  if 5<=heure<=12 :\n    soleil='on est le matin'\n  if 12<=heure<=17 :\n    soleil=\"on est l'apr\u00e8s-midi\"\n  if 17<=heure<=21 :\n    soleil=\"on est le soir\"\n  heure= temps\n  return heure", "user": "userdId_24", "attemptID": 441, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "72.026726", "embeddingY": "30.2038"},{"extension": "py", "date": "2020-04-07 23:48:09", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  res=True\n  if len(liste)==0:\n    res=True\n  if len(liste)==[1]:\n    res=True\n  if len(liste)==0:\n    res=False\n  while i<len(liste)-1 and res==True:\n    q=liste[i+1]/liste[i]\n    if liste[i+1]/liste[i]==q:\n      res=True\n    else:\n      res=False\n    i+=1\n  return res\n", "user": "userdId_34", "attemptID": 442, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "36.43707", "embeddingY": "53.93308"},{"extension": "py", "date": "2020-03-31 05:14:46", "correct": "1", "upload": "def distribution(liste,n):\n    cpts=[0]*(n+1)\n    for elem in liste:\n      cpts[elem]=cpts[elem]+1\n    return cpts", "user": "userdId_18", "attemptID": 443, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-58.85939", "embeddingY": "-15.405543"},{"extension": "py", "date": "2020-03-31 00:42:56", "correct": "0", "upload": "def doubleChiffre(nombre):\n  nombre = str(nombre)\n  res = False\n  i = 0\n  while res == False and i < len(nombre)-1:\n    if nombre[i] == nombre[i+1]:\n      res = True\n\n  return res", "user": "userdId_4", "attemptID": 444, "exercise": "7f84d207313ad3dc0f4fef3d72d72abb", "exercise_name": "doubleChiffre", "embeddingX": "33.8934", "embeddingY": "50.71707"},{"extension": "py", "date": "2020-04-07 23:05:45", "correct": "1", "upload": "def produitScalaire(vec1,vec2):\n  if len(vec1)==[] and len(vec2)==[]:\n    res=0\n  else:\n    res=0\n    for i in range(len(vec1) and len(vec2)):\n      vec1[i]==vec2[i]\n      res=res+vec1[i]\n  return res", "user": "userdId_13", "attemptID": 445, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-29.400644", "embeddingY": "-44.596634"},{"extension": "py", "date": "2020-03-03 05:41:25", "correct": "1", "upload": "def maximum(liste):\n  if len(liste)==0: \n    res=None\n  else: \n    res=liste[0]\n    for i in range(1,len(liste)):\n      if liste[i]>res:\n        res=liste[i]\n  return res", "user": "userdId_35", "attemptID": 446, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "0.037352484", "embeddingY": "-61.05787"},{"extension": "py", "date": "2020-04-03 00:10:53", "correct": "0", "upload": "def nbChiffres(nombre):\n  i=0\n  while nombre!=0:\n    nombre=nombre//10    \n  i+=1\n  if nombre==0:\n    i=1\n  return i", "user": "userdId_1", "attemptID": 447, "exercise": "3dcf332c003a1f3bf15df22ee17884a3", "exercise_name": "nbChiffres", "embeddingX": "32.069942", "embeddingY": "13.390751"},{"extension": "py", "date": "2020-04-12 07:17:51", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n    cpt=0\n    decomp=nombre\n    x=nombre%10\n    while decomp!=0 and x:\n      if x==chiffre:\n        cpt+=1\n      else:\n        decomp=decomp//10\n        x=decomp%10\n    return cpt", "user": "userdId_11", "attemptID": 448, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "7.699166", "embeddingY": "12.740735"},{"extension": "py", "date": "2020-03-12 09:34:11", "correct": "1", "upload": "def minimum(liste):\n  if len(liste)==0:\n    return None\n  min=liste[0]\n  for i in range (1,(len(liste))):\n    if liste[i]<min:\n      min=liste[i]\n  return min", "user": "userdId_1", "attemptID": 449, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "18.844799", "embeddingY": "-78.900764"},{"extension": "py", "date": "2020-03-23 01:17:41", "correct": "1", "upload": "def nbOccurrencesLettre(lettre,mot):\n  res=0\n  for i in range(len(mot)): \n    if lettre==mot[i]:\n      res=res+1\n  return res", "user": "userdId_21", "attemptID": 450, "exercise": "2864c9e5861229d2ff32570f6bc944fb", "exercise_name": "nbOccurrencesLettre", "embeddingX": "-21.217379", "embeddingY": "-40.833076"},{"extension": "py", "date": "2020-05-04 21:22:28", "correct": "1", "upload": "def bissextile(annee):\n  res=False\n  if annee%4==0 and annee%100!=0 or annee%400==0:\n    res=True\n  return res", "user": "userdId_8", "attemptID": 451, "exercise": "a7d37636649c0ada991520788deeb2d0", "exercise_name": "bissextile", "embeddingX": "47.747578", "embeddingY": "1.3806274"},{"extension": "py", "date": "2020-03-10 04:26:16", "correct": "0", "upload": "def sommeNPremiersEntiersPairs(n):\n    res=0\n    for x in range(1,n+1):\n        if x%2==0:\n            res=res+x\n    return None", "user": "userdId_39", "attemptID": 452, "exercise": "3030dc079e6607c253e89e8ef4784b74", "exercise_name": "sommeNPremiersEntiersPairs", "embeddingX": "30.815187", "embeddingY": "-12.290178"},{"extension": "py", "date": "2020-03-03 06:24:20", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if jour1<jour2:\n    if mois1<mois2:\n      if annee1<=annee2:\n        res=-1\n  else:\n    if jour1>jour2:\n      if mois1>mois2:\n        if annee1>=annee2:\n          res=1\n    else:\n      if jour1==jour2:\n        if jour1==jour2:\n          if annee1==annee2:\n            res=0", "user": "userdId_30", "attemptID": 453, "exercise": "af7c1467ef9f7684d9ff58734067ae98", "exercise_name": "compareDates", "embeddingX": "78.13535", "embeddingY": "-19.869816"},{"extension": "py", "date": "2020-04-10 01:01:57", "correct": "0", "upload": "def suiteAriGeo(liste):\n  i=0\n  while i<len(liste)-1:\n    a=liste[1]/liste[0]\n    b=liste[i+1]-liste[i]*a\n    if liste[0]!=0:\n      a=liste[1]/liste[0]\n      if liste[i+1]==liste[i]*a:\n          b=0\n    if liste[i+1]==liste[i]+b:\n      a=1\n    i=i+1\n  i=0\n  ok=True\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=a*liste[i]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 454, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "33.119644", "embeddingY": "80.85597"},{"extension": "py", "date": "2020-03-09 08:51:56", "correct": "0", "upload": "def nbVoyelles(mot):\n    cpt=0\n    for c in mot:\n      if c==\"a,e,i,o,u,y\":\n        cpt=cpt+1\n    return cpt\n  ", "user": "userdId_11", "attemptID": 455, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "1.1721376", "embeddingY": "-24.476746"},{"extension": "py", "date": "2020-03-20 00:36:57", "correct": "0", "upload": "def permutationChaine(o):\n  res=\"\"\n  for i in range(o,len(o)-1,2):\n    res=res+o[i+1]+s[i]\n  if (len(o)%2!=0):\n    res=res+[-1]\n  return res", "user": "userdId_20", "attemptID": 456, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-36.310425", "embeddingY": "-24.381447"},{"extension": "py", "date": "2020-03-06 00:15:10", "correct": "0", "upload": "def nbOccurrencesLettre(lettre,mot):\n  cpt=0\n  if len(mot)==0:\n    cpt=None\n  else:\n    for elem in mot:\n      if lettre==elem:\n        cpt=cpt+1\n  return cpt", "user": "userdId_15", "attemptID": 457, "exercise": "2864c9e5861229d2ff32570f6bc944fb", "exercise_name": "nbOccurrencesLettre", "embeddingX": "-11.555896", "embeddingY": "-30.617558"},{"extension": "py", "date": "2020-03-05 23:38:09", "correct": "1", "upload": "def somme(liste):\n  res=0\n  for elem in liste :\n    res=res+elem\n  return res", "user": "userdId_24", "attemptID": 458, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-28.5156", "embeddingY": "3.4272366"},{"extension": "py", "date": "2020-04-12 12:08:06", "correct": "1", "upload": "def produitScalaire(vec1,vec2):\n    if len(vec1)==0 or len(vec2)==0:\n      res=0\n    else:\n      res=0\n      for i in range(len(vec1) and len(vec2)):\n        res=res+vec1[i]*vec2[i]\n    return res", "user": "userdId_11", "attemptID": 459, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-32.005272", "embeddingY": "-41.749207"},{"extension": "py", "date": "2020-03-12 21:57:57", "correct": "0", "upload": "def maximum(liste):\n  max=len(1,liste)\n  for i in range(len(liste)):\n    if i>max:\n      max=i\n  return None", "user": "userdId_46", "attemptID": 460, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-40.763374", "embeddingY": "-25.378922"},{"extension": "py", "date": "2020-03-10 04:05:53", "correct": "0", "upload": "def semestreValide(ue1,ue2):\n  if ue1>=10 and ue1>ue2:\n    res=True\n  else:\n    res=False\n  return res", "user": "userdId_5", "attemptID": 461, "exercise": "70ae7ad6cf504e0fa8cedebd8e8a825f", "exercise_name": "semestreValide", "embeddingX": "69.08014", "embeddingY": "-1.6312095"},{"extension": "py", "date": "2020-04-06 22:21:05", "correct": "1", "upload": "def sousChaine(s1,s2):\n  i=0\n  j=0\n  while i<len(s2) and j<len(s1): \n    if s2[i]==s1[j]:\n      j+=1\n    else:\n      j=0\n    i+=1\n  return j==len(s1)", "user": "userdId_12", "attemptID": 462, "exercise": "a7cdd094daa2f0bfccc7a4ec419f7243", "exercise_name": "sousChaine", "embeddingX": "-18.384638", "embeddingY": "66.39399"},{"extension": "py", "date": "2020-03-06 00:10:58", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    res=0\n  else:\n    for elem in mot:\n      res=0\n      if elem=='e':\n        res=res+1\n  return res     ", "user": "userdId_14", "attemptID": 463, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "2.7627285", "embeddingY": "-26.709335"},{"extension": "py", "date": "2020-04-07 23:39:40", "correct": "1", "upload": "def compteChiffre(chiffre,nombre):\n  res=0\n  i=0\n  if nombre==0:\n    res=1\n  while nombre!=0:\n    if chiffre==nombre%10:\n      res=res+1\n    i=i+1\n    nombre=nombre//10\n  return res\n", "user": "userdId_19", "attemptID": 464, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "15.787152", "embeddingY": "12.706395"},{"extension": "py", "date": "2020-04-12 05:10:56", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=False\n  c=[]\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n  return c", "user": "userdId_8", "attemptID": 465, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-71.871506", "embeddingY": "28.617813"},{"extension": "py", "date": "2020-04-08 00:45:35", "correct": "1", "upload": "def elemAri(n,u0,r):\n  i=0\n  res=u0\n  while i!=n:\n    res=res+r\n    i+=1\n  return res", "user": "userdId_13", "attemptID": 466, "exercise": "f239498950e974e29e01472749d9a09d", "exercise_name": "elemAri", "embeddingX": "-7.203613", "embeddingY": "23.279171"},{"extension": "py", "date": "2020-03-06 22:28:01", "correct": "1", "upload": "def ecart(liste):\n    res = None\n    if len(liste) > 0:\n        liste.sort()\n        min, max = liste[0], liste[-1]            \n        res = (min - max)* (-1)\n    return res ", "user": "userdId_4", "attemptID": 467, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "8.399948", "embeddingY": "-57.092148"},{"extension": "py", "date": "2020-03-30 02:23:13", "correct": "1", "upload": "def distribution(liste,n):\n  res=[0]*(n+1)\n  for elem in liste:\n    if 0<=elem<=n:\n      res[elem]+=1\n  return res", "user": "userdId_15", "attemptID": 468, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-64.67989", "embeddingY": "-11.264218"},{"extension": "py", "date": "2020-04-12 08:18:49", "correct": "0", "upload": "def suiteAriGeo(liste):\n  i=0\n  while i<len(liste)-1:\n    a=liste[0]\n    b=liste[0]\n    if liste[0]==0:\n      a=1\n      b=liste[i+1]\n    if liste[i+1]==liste[i]+(liste[1]-liste[0]):\n      b=liste[1]-liste[0]\n    if liste[0]!=0:                        \n      if liste[i+1]==liste[1]/liste[0]:\n        a=liste[1]/liste[0]\n        b=0\n    if liste[i+1]==liste[1]-liste[0]+liste[0]:\n      a=liste[1]-liste[0]\n      b=liste[0]\n    i=i+1\n  ok=True\n  i=0\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=a*liste[i]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 469, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "37.28061", "embeddingY": "82.52913"},{"extension": "py", "date": "2020-04-06 11:58:45", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=True\n  i=1\n  while i<len(liste):\n    if liste[i]!=a*liste[i-1]+b:\n      res=False\n    i+=1\n  return res\ndef suiteGeo(liste):\n  i=1\n  a=1\n  b=0\n  while i<len(liste) and cpt!=2:\n    if liste[i-1]==0:\n      i+=1\n    else:\n      if liste[i]!=liste[i-1]:\n        a=liste[i]/liste[i-1]\n        b=liste[i]-a*liste[i-1]\n    i+=1 \n  return verifSuiteAriGeo(liste,a,b)", "user": "userdId_27", "attemptID": 470, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "-5.2415466", "embeddingY": "50.073692"},{"extension": "py", "date": "2020-03-10 23:57:05", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut1>fin2 and debut2>fin1:\n    res=FALSE \n  else:\n    res=TRUE\n  return res", "user": "userdId_21", "attemptID": 471, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "67.6805", "embeddingY": "-21.792866"},{"extension": "py", "date": "2020-03-12 23:48:58", "correct": "0", "upload": "def jourNuit(heure):\n  res=''\n  res1=''\n  res2=''\n  if heure<0 or heure>24 :\n    res=\"l'heure saisie est invalide\"\n  else : \n    if heure>=6 and heure<18 :\n      res1=\"il fait jour\"\n    elif (heure>=0 and heure<6) or (heure>=18 and heure<24) :\n      res1=\"il fait nuit\"\n    else :\n      if heure>=5 and heure<12 :\n        res2=\"on est le matin\"\n      elif heure>=12 and heure<17 :\n        res2=\"on est l'apr\u00e8s-midi\"\n      elif heure>=17 and heure<21 :\n        res2=\"on est le soir\"\n      else :\n        res2=\"on est la nuit\"\n      \n  res=res1+\"et\"+res2\n  return res", "user": "userdId_15", "attemptID": 472, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "81.80978", "embeddingY": "16.05613"},{"extension": "py", "date": "2020-03-08 23:18:48", "correct": "0", "upload": "from math import sqrt\n\ndef polynome(a,b,c):\n  d=b**2-(4*a*c)\n  if d<0:\n    return 'pas de solution'\n  elif d==0:\n    solution=-b/(2*a)\n    return solution\n  else:\n    if d>0:\n      solution1=(-b+sqrt(d))/(2*a)\n      solution2=(-b-sqrt(d))/(2*a)\n      return solution1 and solution2", "user": "userdId_1", "attemptID": 473, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-54.673008", "embeddingY": "11.375884"},{"extension": "py", "date": "2020-03-23 00:43:00", "correct": "0", "upload": "def reconstruireChainePartielle(s,n):\n    res = \"\"\n    for i in s :\n      res = res + i\n    return res", "user": "userdId_24", "attemptID": 474, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-33.531773", "embeddingY": "3.2741854"},{"extension": "py", "date": "2020-03-05 23:49:13", "correct": "0", "upload": "def maximum(liste):\n  res=0\n  for i in range(len(liste)) :\n    if liste[i]>0 :\n      res=res+liste[i]\n    else :\n      res=None\n  return res", "user": "userdId_24", "attemptID": 475, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-1.7079309", "embeddingY": "-57.607616"},{"extension": "py", "date": "2020-03-02 08:39:33", "correct": "0", "upload": "def jourNuit(heure):\n    res = \"l'heure saisie est invalide\"\n\n    if heure <= 24:\n        if heure >= 5 and heure < 12:\n            res = \"on est le matin \"\n        elif heure >= 12 and heure < 17:\n      \t    res = \"on est l'apr\u00e8s-midi \"\n        elif heure >= 17 and heure <= 21:\n            res = \"on est la nuit \"\n        else:\n            res = \"on sais pas c'est pas dis \"\n        if heure >= 6 and heure <= 18:\n            res += \"et il fait jour\"\n        else:\n            res += \"et il fait nuit\"\n    return res", "user": "userdId_4", "attemptID": 476, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "77.28073", "embeddingY": "24.796448"},{"extension": "py", "date": "2020-03-06 00:53:53", "correct": "0", "upload": "def ecart(liste):\n   if len(liste)==0:\n      ecart=None\n   return ecart", "user": "userdId_14", "attemptID": 477, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "12.900765", "embeddingY": "-50.655437"},{"extension": "py", "date": "2020-03-31 03:39:44", "correct": "1", "upload": "def fusion (liste1,liste2):\n  res=[]\n  i=0\n  j=0\n  while i<len(liste1) and j<len(liste2):\n    if liste1[i]<liste2[j]:\n      res.append(liste1[i])\n      i=i+1\n    else:\n      res.append(liste2[j])\n      j=j+1\n\n  while i<len(liste1):\n    res.append(liste1[i])\n    i=i+1\n  while j<len(liste2):\n    res.append(liste2[j])\n    j=j+1\n  \n  return res", "user": "userdId_10", "attemptID": 478, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-38.871387", "embeddingY": "49.982872"},{"extension": "py", "date": "2020-03-06 00:47:17", "correct": "0", "upload": "def nbVoyelles(mot):\n  res=0\n  for elem in mot:\n    if elem in mot==[\"a\",\"e\",\"i\",\"o\",\"u\",\"y\"]:\n      res=res+1\n    return res", "user": "userdId_23", "attemptID": 479, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "13.523631", "embeddingY": "-34.73395"},{"extension": "py", "date": "2020-04-07 19:51:09", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  ok=True\n  i=0\n  cpt=0\n  while i<len(nombre) and okay:\n    if chiffre==nombre[i]:\n      cpt=cpt+1\n    i=i+1\n  return cpt", "user": "userdId_3", "attemptID": 480, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-3.1519938", "embeddingY": "45.802505"},{"extension": "py", "date": "2020-03-06 23:27:31", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut1>=debut2 or fin1<=fin2 or fin1<debut2:\n    res=True\n  else:\n    res=False\n  return res", "user": "userdId_8", "attemptID": 481, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "56.55914", "embeddingY": "-21.090494"},{"extension": "py", "date": "2020-03-16 05:39:20", "correct": "0", "upload": "def qualifJO(sexe,record,nbvictoires,champion):\n    if sexe=='M':\n      if (record<12.0 and nbvictoires>=3) or champion==True:\n          res=True\n      else:\n          res=False\n    elif sexe=='F':\n      if (record<15.0 and nbvictoires>=3) or champion==True:\n        res=True\n      else:\n        res=False\n    else:\n      res=False\n    return res", "user": "userdId_18", "attemptID": 482, "exercise": "78ec7738f3a7f3553d4a5c653534c32d", "exercise_name": "qualifJO", "embeddingX": "64.0373", "embeddingY": "-10.182212"},{"extension": "py", "date": "2020-03-20 00:26:57", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  res=''\n  if debut+longueur > len(s):\n    longueur=len(s)-debut\n  else:\n    for i in range (debut,debut+longueur):\n      res=res+s[i]\n  return res", "user": "userdId_15", "attemptID": 483, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-70.017265", "embeddingY": "25.68219"},{"extension": "py", "date": "2020-03-31 03:09:24", "correct": "0", "upload": "def fusion(liste1,liste2):\n    if liste1==[]:\n      res=liste2\n    elif liste2==[]:\n      res=liste1\n    else:\n      res=[]\n      i=0\n      j=0\n      while i<len(liste1) and j<len(liste2):\n        if liste1[i]<liste2[j]:\n          res.append(liste1[i])\n          i=i+1\n        else:\n          res.append(liste2[j])\n          j=j+1\n      if len(liste1)>len(liste2):\n        while i<len(liste1):\n          res.append(liste1[i])\n          i=i+1\n      elif len(liste1)<len(liste2):\n        while j<len(liste2):\n          res.append(liste2[j])\n          j=j+1\n    res.sort()\n    return res", "user": "userdId_18", "attemptID": 484, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-38.720802", "embeddingY": "50.790253"},{"extension": "py", "date": "2020-03-13 00:52:28", "correct": "0", "upload": "def doubleLettre(mot):\n  lettre2 = ' '\n  cpt = 0\n  res = False\n  for lettre1 in mot :\n    if lettre1 != lettre2 :\n      cpt =  0\n    else : \n      cpt = cpt + 1\n      if cpt >= 2 :\n        res = True\n  \t\n  return res", "user": "userdId_17", "attemptID": 485, "exercise": "00da9cf1fa2b468d915724499459ed8f", "exercise_name": "doubleLettre", "embeddingX": "11.4741535", "embeddingY": "-4.777339"},{"extension": "py", "date": "2020-03-03 06:32:19", "correct": "0", "upload": "def bissextile(annee):\n  if annee%400 == 0:\n    res= True\n  else:\n    res= False\n      \n  return res", "user": "userdId_7", "attemptID": 486, "exercise": "a7d37636649c0ada991520788deeb2d0", "exercise_name": "bissextile", "embeddingX": "44.11859", "embeddingY": "-4.4706717"},{"extension": "py", "date": "2020-04-21 02:34:06", "correct": "0", "upload": "def listeDecroissante(scores):\n    ok=True\n    i=0\n    while i<len(scores) and ok:\n      if scores[i]<scores[i+1]:\n        ok=False\n      i+=1\n    return ok", "user": "userdId_11", "attemptID": 487, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "22.077675", "embeddingY": "42.34174"},{"extension": "py", "date": "2020-04-05 02:54:22", "correct": "0", "upload": "def bissextile(annee):\n  if annee%4==0 and not annee%100!=0 or annee%400==0:\n    res=True\n  else:\n    res=False\n  return res", "user": "userdId_26", "attemptID": 488, "exercise": "a7d37636649c0ada991520788deeb2d0", "exercise_name": "bissextile", "embeddingX": "49.421688", "embeddingY": "1.7302029"},{"extension": "py", "date": "2020-03-19 23:29:31", "correct": "1", "upload": "def sousChaine(s,debut,longueur):\n  res=''\n  fin=debut+longueur\n  if fin>len(s):\n    fin=len(s)\n  for i in range(debut,fin):\n    res=res+s[i]\n  return res", "user": "userdId_12", "attemptID": 489, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-74.76971", "embeddingY": "19.419395"},{"extension": "py", "date": "2020-03-17 05:11:51", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  res=\"\"\n  fin=debut+longueur\n  if fin>len(s):\n    fin=len(s)\n  else:\n    for i in range(len(fin)):\n      res=res+fin[i]\n  return res", "user": "userdId_8", "attemptID": 490, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-71.332245", "embeddingY": "13.713925"},{"extension": "py", "date": "2020-04-12 06:11:38", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  liste", "user": "userdId_8", "attemptID": 491, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-77.482635", "embeddingY": "8.879826"},{"extension": "py", "date": "2020-03-03 06:32:02", "correct": "0", "upload": "def bissextile(annee):\n  if n%400 == 0:\n    res= True\n  else:\n    res= False\n      \n  return res", "user": "userdId_7", "attemptID": 492, "exercise": "a7d37636649c0ada991520788deeb2d0", "exercise_name": "bissextile", "embeddingX": "21.523355", "embeddingY": "-37.312244"},{"extension": "py", "date": "2020-04-12 05:33:34", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=False\n  c=[]\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    liste[0]\n    c.append(d)\n  return c", "user": "userdId_8", "attemptID": 493, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-83.58336", "embeddingY": "19.836117"},{"extension": "py", "date": "2020-04-05 03:39:59", "correct": "0", "upload": "def moyenne(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    s=0\n    for elem in liste:\n      s+=elem\n    res=s//len(liste)\n  return res", "user": "userdId_26", "attemptID": 494, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-8.659666", "embeddingY": "-15.539475"},{"extension": "py", "date": "2020-03-16 05:27:32", "correct": "0", "upload": "def nbSyllabes(mot):\n    cpt=0\n    voyelles='aeiouy'\n    if mot[0] in voyelles:\n        cpt+=1\n    for i in range(1,len(mot)):\n        if mot[i] in voyelles and mot[i-1] not in voyelles:\n            cpt+=1\n    if mot.endswith('e'):\n        cpt-=1\n    if cpt==0:\n        cpt+=1\n    if cpt=='':\n      cpt=0\n    return cpt\n    ", "user": "userdId_18", "attemptID": 495, "exercise": "1c86bec0f4df503e23db53994f3d2991", "exercise_name": "nbSyllabes", "embeddingX": "-24.016603", "embeddingY": "-71.69276"},{"extension": "py", "date": "2020-04-14 05:59:12", "correct": "0", "upload": "def indiceInsertion(sc,scores):\n  res=0\n  i=0\n  while i<len(joueurs) and res==0:\n    if sc>scores[i]:\n      res=i\n    i=i+1\n  return res\n", "user": "userdId_28", "attemptID": 496, "exercise": "f8a820b2bd54d18d36716e3d703858f7", "exercise_name": "indiceInsertion", "embeddingX": "-28.336458", "embeddingY": "62.963318"},{"extension": "py", "date": "2020-04-07 04:05:38", "correct": "0", "upload": "def elemAri(n,u0,r):\n  cpt=n\n  i=0\n  while i<n:\n    cpt=cpt+u0+r\n    i=i+1\n  return cpt\n  ", "user": "userdId_1", "attemptID": 497, "exercise": "f239498950e974e29e01472749d9a09d", "exercise_name": "elemAri", "embeddingX": "-8.617049", "embeddingY": "26.080582"},{"extension": "py", "date": "2020-03-08 21:42:43", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1==annee2 and mois1==mois2 and jour1==jour2:\n    return 0\n  elif annee1<annee2 and mois1<=mois2 and jour1<jour2:\n    return -1\n  elif annee1<annee2 and mois1>=mois2 and jour1>=jour2:\n    return -1\n  else:\n    return 1", "user": "userdId_1", "attemptID": 498, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "83.9889", "embeddingY": "-12.748781"},{"extension": "py", "date": "2020-03-17 05:15:28", "correct": "1", "upload": "def sousChaine(s,debut,longueur):\n  res=\"\"\n  fin=debut+longueur\n  if fin>len(s):\n    fin=len(s)\n  for i in range(debut,fin):\n    res=res+s[i]\n  return res", "user": "userdId_8", "attemptID": 499, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-70.54467", "embeddingY": "17.315649"},{"extension": "py", "date": "2020-03-06 00:03:38", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    res=0\n  else:\n    for elem in mot:\n      res=0\n      if elem==a:\n        res=res+1\n  return res     ", "user": "userdId_14", "attemptID": 500, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "0.42652172", "embeddingY": "-37.33097"},{"extension": "py", "date": "2020-03-05 23:35:16", "correct": "1", "upload": "def somme(liste):\n  res=0\n  for elem in liste:\n    res=res+elem\n  return res", "user": "userdId_45", "attemptID": 501, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-29.844294", "embeddingY": "2.6339762"},{"extension": "py", "date": "2020-04-06 22:22:25", "correct": "1", "upload": "def sousChaine(s1,s2):\n  i=0\n  j=0\n  while i<len(s2) and j<len(s1): \n    if s2[i]==s1[j]:\n      j+=1\n    else:\n      j=0\n    i+=1\n  return j==len(s1)", "user": "userdId_12", "attemptID": 502, "exercise": "a7cdd094daa2f0bfccc7a4ec419f7243", "exercise_name": "sousChaine", "embeddingX": "-18.39599", "embeddingY": "66.400566"},{"extension": "py", "date": "2020-04-14 03:53:54", "correct": "0", "upload": "def meilleurScoreJoueur(scores,joueurs,nom):\n  trouve=False\n  i=0\n  res=0\n  while i<len(joueurs) and i<len(scores) and trouve==False:\n    if nom==joueurs[i]:\n      trouve=True\n      res=scores[i]\n    i=i+1\n    if nom!=joueurs[i]:\n      res=0\n      trouve=True\n  return res", "user": "userdId_7", "attemptID": 503, "exercise": "c96fadc94086276f98451a798b3bb730", "exercise_name": "meilleurScoreJoueur", "embeddingX": "-2.4502282", "embeddingY": "76.53453"},{"extension": "py", "date": "2020-03-22 05:21:39", "correct": "1", "upload": "def somme(liste):\n  res=0\n  for elem in liste:\n    res=res+elem\n  return res", "user": "userdId_12", "attemptID": 504, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-29.932215", "embeddingY": "2.5137987"},{"extension": "py", "date": "2020-03-10 04:41:57", "correct": "0", "upload": "def nbSyllabes(mot):\n  if mot=='':\n    res=0\n  else:\n    res=0\n    Voyelles=['aeiouy']\n    ch=\"\"\n    for i in range(1,len(mot)):\n      if mot[i-1] not in Voyelles and mot[i] in Voyelles:\n        res=res+1\n      else:\n        ch=mot[i]\n    if mot[0] in Voyelles :\n      res=res+1\n    elif mot[-1] not in Voyelles:\n      res=res-1\n    else:\n      if res==0:\n        res=res+1\n  return res", "user": "userdId_15", "attemptID": 505, "exercise": "1c86bec0f4df503e23db53994f3d2991", "exercise_name": "nbSyllabes", "embeddingX": "-19.886803", "embeddingY": "-73.1432"},{"extension": "py", "date": "2020-03-31 00:45:27", "correct": "0", "upload": "def moyenne(liste):\n  somme=0\n  cpt=0\n  for elem in liste : \n    somme=somme+elem\n    cpt=cpt+1\n  res=somme/cpt\n  return res", "user": "userdId_10", "attemptID": 506, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-22.219578", "embeddingY": "0.44737422"},{"extension": "py", "date": "2020-03-20 00:03:29", "correct": "0", "upload": "def sousChaine(s,d,l):\n  res=\"\"\n  for j in range(s[d],d+l):\n    res=res+j\n\n  return res\n", "user": "userdId_5", "attemptID": 507, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-83.72075", "embeddingY": "21.557236"},{"extension": "py", "date": "2020-04-06 15:07:12", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  for i in nombre:\n    if chiffre==nombre[i]:\n      cpt=cpt+1\n    i=i+1\n  return cpt", "user": "userdId_3", "attemptID": 508, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-36.742237", "embeddingY": "-13.272031"},{"extension": "py", "date": "2020-03-12 22:14:32", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=liste[0]\n  for i in range(len(liste)):\n    if liste[i]>=res:\n      res=i\n  return res", "user": "userdId_35", "attemptID": 509, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "4.1202283", "embeddingY": "-58.9408"},{"extension": "py", "date": "2020-03-17 06:25:46", "correct": "0", "upload": "def distribution(liste,n):\n  res=liste[0]*n+1\n  for elem in liste:\n    res=liste[i]+1\n  return res", "user": "userdId_23", "attemptID": 510, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-60.119057", "embeddingY": "-10.750136"},{"extension": "py", "date": "2020-04-12 05:41:15", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=False\n  c=[]\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n    c=liste[:0]+d\n  return c", "user": "userdId_8", "attemptID": 511, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-75.46531", "embeddingY": "27.120735"},{"extension": "py", "date": "2020-04-10 00:47:21", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i]!=0:\n      q=liste[i]/liste[0]\n      if liste[i+1]/liste[i]!=q:\n        ok=True\n    i=i+1\n  return ok", "user": "userdId_3", "attemptID": 512, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "23.625338", "embeddingY": "60.754826"},{"extension": "py", "date": "2020-03-22 08:34:05", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n    if annee1<annee and mois1<mois2 and jour1<jour2: \n      res=-1\n    if annee1==annee2 and  mois1==mois2 and jour1==jour2: \n       res=0\n    else : \n      res=0", "user": "userdId_47", "attemptID": 513, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "75.03978", "embeddingY": "-28.227915"},{"extension": "py", "date": "2020-03-10 02:52:07", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n  if mot=='':\n    cpt=None\n  else:\n    cpt=-1\n    for i in range(len(mot)):\n      if mot[i]!=lettre:\n        cpt=cpt+1\n        return cpt\n  ", "user": "userdId_15", "attemptID": 514, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-22.027475", "embeddingY": "-44.535774"},{"extension": "py", "date": "2020-03-17 06:12:54", "correct": "0", "upload": "def distribution(liste,n):\n  res=[0]*n+1\n  for i in range(len(liste)):\n                 res=(liste[i])=liste[i]+1\n  return res", "user": "userdId_23", "attemptID": 515, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-57.19874", "embeddingY": "-5.7097173"},{"extension": "py", "date": "2020-03-03 05:32:33", "correct": "1", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=liste[0]\n    for i in range(len(liste)):\n      if liste[i]>res:\n        res=liste[i]\n  return res", "user": "userdId_30", "attemptID": 516, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "0.7511293", "embeddingY": "-62.82953"},{"extension": "py", "date": "2020-04-07 10:38:24", "correct": "0", "upload": "def suiteGeo(liste):\n  ok=True\n  i=0\n  if len(liste)==0:\n    ok=True\n  while i<len(liste)-1 and ok:\n    q=liste[1]*liste[0]\n    if liste[i+1]/liste[i]!=q:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 517, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "28.458677", "embeddingY": "68.55427"},{"extension": "py", "date": "2020-03-31 01:02:59", "correct": "0", "upload": "def symetrique(l):\n  \n  l2 = l[int(len(l)/2):]\n  l2.reverse()\n  if len(l)%2 == 0:\n    l = l[:int(len(l)/2)]\n  else:\n    l = l[:int(len(l)/2)+1]\n  res = True\n  print(l,l2)\n  if l != l2:\n    res = False\n  \n  return res", "user": "userdId_4", "attemptID": 518, "exercise": "8eb27aeda471a467e2223abebeca886e", "exercise_name": "listeSymetrique", "embeddingX": "6.8740363", "embeddingY": "-51.260612"},{"extension": "py", "date": "2020-05-04 20:16:37", "correct": "0", "upload": "def polynome(a,b,c):\n  from math import sqrt\n  res=\"pas de solution\"\n  delta=b**2-4*a*c\n  if delta>0:\n    res=(-b+print(sqrt(delta)))/2*a\n  return res", "user": "userdId_8", "attemptID": 519, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-53.444214", "embeddingY": "4.5298333"},{"extension": "py", "date": "2020-03-10 09:34:59", "correct": "1", "upload": "def nombrePair(n):\n  if n%2==0:\n    res=True\n  else:\n    res=False\n  return res", "user": "userdId_5", "attemptID": 520, "exercise": "3001254263845e9a478696f81a704d33", "exercise_name": "nombrePair", "embeddingX": "44.32077", "embeddingY": "-3.6675787"},{"extension": "py", "date": "2020-04-16 23:46:14", "correct": "0", "upload": "def indiceInsertion(sc,scores):\n  i=0\n  while i<len(scores):\n    if sc>scores[i]:\n      return i\n    i=i+1\n  if sc<scores[i]:\n      return len(scores)", "user": "userdId_1", "attemptID": 521, "exercise": "f8a820b2bd54d18d36716e3d703858f7", "exercise_name": "indiceInsertion", "embeddingX": "-16.43112", "embeddingY": "60.688538"},{"extension": "py", "date": "2020-03-23 00:47:56", "correct": "0", "upload": "def sommeNPremiersEntiers(n):\n    if n<0:\n      res=0\n    else:\n      res=0\n      for elem in range(n):\n        res=res+elem\n    return res", "user": "userdId_11", "attemptID": 522, "exercise": "c315a540cf0bfb0182dc114c6f0eafd1", "exercise_name": "sommeNPremiersEntiers", "embeddingX": "-15.82096", "embeddingY": "11.318827"},{"extension": "py", "date": "2020-03-02 02:35:48", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if fin1>debut2 and debut1<fin2:\n    return True\n  else:\n    return False\n  \nrendezVous(1,10,7,20)\nrendezVous(1,7,10,20)", "user": "userdId_1", "attemptID": 523, "exercise": "6fd66bb2393fbf3809f1c6d04f3831f7", "exercise_name": "rendezVous", "embeddingX": "61.06145", "embeddingY": "-24.521414"},{"extension": "py", "date": "2020-03-31 06:45:20", "correct": "0", "upload": "def nombreSymetrique(nombre):\n  res.append(nombre%10)\n  res=True\n  i=0\n  while i<len(l)//2 and res:\n    if l[i]!=l[-i-1]:\n      res=False\n    i+=1\n  return res", "user": "userdId_8", "attemptID": 524, "exercise": "fae4d6a34289cf5bf06f9d6d17e8547e", "exercise_name": "nombreSymetrique", "embeddingX": "43.147434", "embeddingY": "18.796556"},{"extension": "py", "date": "2020-04-12 06:07:48", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=False\n  c=[]\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n    c=liste[0].extend(c)\n  return c", "user": "userdId_8", "attemptID": 525, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-74.95218", "embeddingY": "27.635824"},{"extension": "py", "date": "2020-03-14 10:15:51", "correct": "0", "upload": "def nbVoyelles(mot):\n    res=0\n    if lettre == 'aeiouy':\n      res=res+1\n    return res", "user": "userdId_21", "attemptID": 526, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "9.746353", "embeddingY": "-18.501762"},{"extension": "py", "date": "2020-03-14 04:02:57", "correct": "0", "upload": "def bissextile(annee):\n  if annee%4==0 and annee%400==0:\n    res=True\n  else:\n    res=False\n    return res", "user": "userdId_14", "attemptID": 527, "exercise": "a7d37636649c0ada991520788deeb2d0", "exercise_name": "bissextile", "embeddingX": "47.131332", "embeddingY": "-1.6513772"},{"extension": "py", "date": "2020-04-12 11:59:32", "correct": "0", "upload": "def suiteGeo(liste):\n    if len(liste)==0:\n      res=True\n    else:\n      res=True\n      for i in range(len(liste)):\n        if liste[i]==0:\n          res=False\n        else:\n          x=liste[1]/liste[0]\n          if liste[i]==liste[i-1]*x:\n            res=True\n          else:\n            res=False\n    return res", "user": "userdId_11", "attemptID": 528, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "-15.237953", "embeddingY": "-82.3183"},{"extension": "py", "date": "2020-03-17 06:45:37", "correct": "0", "upload": "def permutationListe(liste,permutation):\n  res=liste[0]\n  for elem in liste:\n    res[permutation]=liste[elem]\n  return res", "user": "userdId_25", "attemptID": 529, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-50.456364", "embeddingY": "-16.388544"},{"extension": "py", "date": "2020-03-22 05:11:42", "correct": "0", "upload": "def bissextile(annee):\n  if (annee%4==0 and annee%4!=0 or annee%400==0):\n    res=True\n  else:\n    res=False\n  return res", "user": "userdId_12", "attemptID": 530, "exercise": "a7d37636649c0ada991520788deeb2d0", "exercise_name": "bissextile", "embeddingX": "47.941845", "embeddingY": "1.8497015"},{"extension": "py", "date": "2020-03-20 00:59:33", "correct": "0", "upload": "def distribution(liste,n):\n  res=[]\n  for i in range(0,n):\n    b=1\n    for a in liste:\n      if a==i:\n        res[i]=i+b\n        b=b+1\n    res=res+res[i]", "user": "userdId_40", "attemptID": 531, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "7.2025075", "embeddingY": "-0.30811304"},{"extension": "py", "date": "2020-03-20 00:53:11", "correct": "0", "upload": "def permutationListe(liste,permutation):\n  res=[]\n  for i in range(permutation):\n    res.insert(permutation(i),liste(i))\n  return res", "user": "userdId_13", "attemptID": 532, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-42.229675", "embeddingY": "-16.742273"},{"extension": "py", "date": "2020-04-12 06:25:00", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  if liste==[]:\n    res=True\n  c=[]\n  res=False\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n    c=liste[0]+c\n    if c==liste:\n      res=True\n  return res", "user": "userdId_8", "attemptID": 533, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-75.17283", "embeddingY": "22.674139"},{"extension": "py", "date": "2020-03-27 05:42:40", "correct": "0", "upload": "def quatrePlus100(liste):\n  i=0\n  while i>len(liste):\n    if l[i]>100:\n      res.append(l[i])\n      i=i+1\n  if len(res)<4:\n    res=i\n  return res", "user": "userdId_20", "attemptID": 534, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-21.085714", "embeddingY": "32.573414"},{"extension": "py", "date": "2020-04-12 05:40:06", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=False\n  c=[]\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n    c=range(0,len(liste)-1,0)+d\n  return c", "user": "userdId_8", "attemptID": 535, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-73.214584", "embeddingY": "21.494654"},{"extension": "py", "date": "2020-04-06 03:53:34", "correct": "0", "upload": "def suiteGeo(liste):\n    if liste==[] or len(liste)==1:\n      ok=True\n    elif 0 in liste:\n      ok=False\n    else:\n      ok=True\n      ctePrec=liste[1]/liste[0]\n      i=2\n      while i<len(liste) and ok:\n        cteAct=liste[i]/liste[i-1]\n        if cteAct!=ctePrec:\n          ok=False\n        ctePrec=cteAct\n        i+=1\n    return ok", "user": "userdId_18", "attemptID": 536, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "41.256256", "embeddingY": "63.57315"},{"extension": "py", "date": "2020-04-06 08:31:03", "correct": "1", "upload": "def produitScalaire(vec1,vec2):\n    res = 0\n    if len(vec1) == 0 or len(vec2) == 0:\n        res = 0\n    else:\n        for i in range(len(vec1)):\n            res += vec1[i] * vec2[i]\n    return res", "user": "userdId_42", "attemptID": 537, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-32.97548", "embeddingY": "-38.446198"},{"extension": "py", "date": "2020-03-27 06:46:52", "correct": "0", "upload": "def compare(chaine1,chaine2):\n  i=0\n  res=()\n  while i<len(chaine1) and i<len(chaine2):\n    if chaine1[i]<chaine2[i]:\n      res=-1\n    elif chaine1==chaine2:\n      res=0\n    else:\n      res=-1\n  i=i+1\n  return res", "user": "userdId_1", "attemptID": 538, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-24.482111", "embeddingY": "66.51946"},{"extension": "py", "date": "2020-03-27 05:45:29", "correct": "0", "upload": "def quatrePlus100(liste):\n  i=0\n  while i>len(liste):\n    if l[i]>100:\n      res.append(l[i])\n      i=i+1\n  if len(liste)<4:\n    res=i\n  return res", "user": "userdId_20", "attemptID": 539, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-21.223112", "embeddingY": "33.416016"},{"extension": "py", "date": "2020-04-12 08:32:15", "correct": "0", "upload": "def suiteAriGeo(liste):\n  i=0\n  while i<len(liste)-1:\n    a=liste[0]\n    b=liste[0]\n    if liste[i+1]==liste[i]+(liste[1]-liste[0]):\n      b=liste[1]-liste[0]\n    if liste[0]!=0:                        \n      if liste[i+1]==liste[i]*liste[1]/liste[0]:\n        a=liste[1]/liste[0]\n        b=0\n    if liste[i+1]==liste[i]*(liste[1]-liste[0])+(liste[i]-liste[i-1]):\n      a=liste[1]-liste[0]\n      b=liste[i]-(liste[i-1]*a)\n    i=i+1\n  ok=True\n  i=0\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=a*liste[i]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 540, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "35.609745", "embeddingY": "84.05712"},{"extension": "py", "date": "2020-04-10 01:05:16", "correct": "0", "upload": "def suiteAriGeo(liste):\n  i=0\n  while i<len(liste)-1:\n    if liste[i]!=0:\n      a=liste[1]/liste[0]\n      b=liste[i+1]-liste[i]*a\n    if liste[0]!=0:\n      a=liste[1]/liste[0]\n      if liste[i+1]==liste[i]*a:\n          b=0\n    b=liste[1]-liste[0]\n    if liste[i+1]==liste[i]+b:\n      a=1\n    i=i+1\n  i=0\n  ok=True\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=a*liste[i]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 541, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "35.33154", "embeddingY": "83.01428"},{"extension": "py", "date": "2020-03-19 23:34:00", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  res=\"\"\n  if longueur>len(s):\n    longueur=longueur-(longueur-len(s))\n  for i in range(debut,longueur):\n    res=res+s[i]\n  return res\n", "user": "userdId_13", "attemptID": 542, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-78.31894", "embeddingY": "20.01918"},{"extension": "py", "date": "2020-04-06 10:34:30", "correct": "0", "upload": "def suiteAriGeo(liste):\n    if liste==[] or len(liste)==1:\n      ok1=True\n    else:\n      ok1=True\n      ctePrec=liste[1]-liste[0]\n      cteAct=None\n      i=2\n      while i<len(liste) and ok1:\n        cteAct=liste[i]-liste[i-1]\n        if liste[0]+i*ctePrec!=cteAct:\n          ok1=False\n        ctePrec=cteAct\n        i+=1\n    if liste==[] or len(liste)==1:\n      ok2=True\n    elif 0 in liste:\n      if liste[0]!=0:\n        ok2=True\n      while 0 in liste:\n        liste.remove(0)\n      if liste==[]:\n        ok2=True\n      else:\n        ok2=False\n    else:\n      ok2=True\n      i=1\n      while i<len(liste) and ok2:\n        cte=liste[i]/liste[i-1]\n        if liste[0]*cte**i!=liste[i]:\n          ok2=False\n        i+=1\n    return ok1 or ok2", "user": "userdId_18", "attemptID": 543, "exercise": "4c9665daf155b115fe13218141fa1aff", "exercise_name": "suiteAriGeo", "embeddingX": "28.839249", "embeddingY": "84.2167"},{"extension": "py", "date": "2020-06-02 22:33:43", "correct": "1", "upload": "def semestreValide(ue1,ue2):\n  moyenne=(ue1+ue2)/2\n  if ue1>=10 and ue2>=10:\n    return True\n  elif ue1>ue2 and moyenne>=10:\n    return True\n  else:\n    return False", "user": "userdId_12", "attemptID": 544, "exercise": "70ae7ad6cf504e0fa8cedebd8e8a825f", "exercise_name": "semestreValide", "embeddingX": "68.723694", "embeddingY": "-0.16362841"},{"extension": "py", "date": "2020-03-12 22:08:24", "correct": "0", "upload": "def moyenne(liste):\n  if len (liste)==0:\n    res=None\n  else:\n    res=0\n    cpt=0\n    for elem in liste:\n      res=res+elem\n      cpt=cpt+elem\n      res=res%cpt\n  return res ", "user": "userdId_20", "attemptID": 545, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-5.008203", "embeddingY": "-3.793065"},{"extension": "py", "date": "2020-03-31 04:28:54", "correct": "0", "upload": "def indiceOccurence(n,x,l):\n  res=None\n  cpt=0 \n  trouve=False \n  i=0\n  while i<len(l) and trouve==False:\n    if l[i]==x:\n      cpt+=1\n    if cpt==n:\n      trouve=True\n      res=i\n    i+=1\n  return res\n      ", "user": "userdId_21", "attemptID": 546, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "1.6147513", "embeddingY": "71.21311"},{"extension": "py", "date": "2020-03-23 22:29:20", "correct": "0", "upload": "def quatrePlus100(liste):\n  res=[]\n  x=0\n  while len(res)<4 :\n    if liste[x]>100 :\n      res=res+[liste[x]]\n    i=i+1\n  return res", "user": "userdId_28", "attemptID": 547, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-30.641003", "embeddingY": "38.521664"},{"extension": "py", "date": "2020-04-12 08:27:08", "correct": "0", "upload": "def suiteAriGeo(liste):\n  i=0\n  while i<len(liste)-1:\n    a=liste[0]\n    b=liste[0]\n    if liste[i+1]==liste[i]+(liste[1]-liste[0]):\n      b=liste[1]-liste[0]\n    if liste[0]!=0:                        \n      if liste[i+1]==liste[i]*liste[1]/liste[0]:\n        a=liste[1]/liste[0]\n        b=0\n    if liste[i+1]==liste[i]*(liste[1]-liste[0])+liste[0]:\n      b=liste[0]\n    if liste[i]==0 and liste[i+1]==0:\n      a=0\n      b=0\n    i=i+1\n  ok=True\n  i=0\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=a*liste[i]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 548, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "33.320225", "embeddingY": "85.61241"},{"extension": "py", "date": "2020-03-17 05:50:08", "correct": "0", "upload": "def distribution(liste,n):\n    cpt=0*n+1\n    for elem in liste:\n        cpt[elem]=cpt[elem]+1\n    return res", "user": "userdId_39", "attemptID": 549, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-60.877106", "embeddingY": "-9.754134"},{"extension": "py", "date": "2020-04-07 02:56:00", "correct": "1", "upload": "def motPalindrome(mot):\n  ok=True\n  i=0\n  while i<len(mot)//2 and ok:\n    if mot[i]!=mot[-i-1]:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_9", "attemptID": 550, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "23.859644", "embeddingY": "49.448803"},{"extension": "py", "date": "2020-04-06 03:46:44", "correct": "1", "upload": "def nextConway(s):\n  res=''\n  prec=None\n  cpt=0\n  for c in s:\n    if c==prec:\n      cpt+=1\n    else:\n      if prec:\n        res+=str(cpt)+str(prec)\n      cpt=1\n    prec=c\n  if prec:\n    res+=str(cpt)+str(prec)\n  return res", "user": "userdId_6", "attemptID": 551, "exercise": "a580c32690609356dae4401b3c89a3b8", "exercise_name": "nextConway", "embeddingX": "6.955464", "embeddingY": "-6.4643188"},{"extension": "py", "date": "2020-03-12 21:48:21", "correct": "1", "upload": "def nbVoyelles(mot):\n   res=0\n   for lettre in mot:\n      if lettre in 'aeiouy':\n         res=res+1\n   return res", "user": "userdId_14", "attemptID": 552, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "16.337532", "embeddingY": "-24.073088"},{"extension": "py", "date": "2020-04-12 11:34:31", "correct": "0", "upload": "def phrasePalindrome(phrase):\n    if len(phrase)==0:\n      res=True\n    else:\n      res=True\n      i=0\n      x=''\n      while i<len(phrase)//2 and res:\n        if phrase[i]!=phrase[-(i+1)]:\n          res=False\n        if phrase[i]==x or phrase[-(i+1)]:\n          res=False\n        i+=2\n    return res", "user": "userdId_11", "attemptID": 553, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "31.628551", "embeddingY": "31.226524"},{"extension": "py", "date": "2020-03-09 22:01:15", "correct": "1", "upload": "def nbOccurrencesLettre(lettre,mot):\n    res = 0\n    for c in mot:\n      if c == lettre:\n        res += 1\n    return res", "user": "userdId_42", "attemptID": 554, "exercise": "2864c9e5861229d2ff32570f6bc944fb", "exercise_name": "nbOccurrencesLettre", "embeddingX": "-10.060803", "embeddingY": "-27.493687"},{"extension": "py", "date": "2020-03-31 04:30:00", "correct": "0", "upload": "def indiceOccurence(n,x,l):\n  res=None\n  cpt=0 \n  trouve=False \n  i=0\n  while i<len(l) and not trouve:\n    if l[i]==x:\n      cpt+=1\n    if cpt==n:\n      trouve=True\n      res=i\n    i+=1\n  return res\n      ", "user": "userdId_21", "attemptID": 555, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "1.5722927", "embeddingY": "71.342125"},{"extension": "py", "date": "2020-03-03 05:30:06", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    for i in (liste):\n      if liste[i]>res:\n        res=liste[i]\n  return res", "user": "userdId_8", "attemptID": 556, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "7.1645885", "embeddingY": "-61.505337"},{"extension": "py", "date": "2020-04-12 08:01:08", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n    cpt=0\n    x=nombre%10\n    decomp=nombre\n    while decomp!=0:\n      if x!=chiffre:\n        decomp=decomp//10\n        x=decomp%10\n      else:\n        cpt+=1\n    return cpt", "user": "userdId_11", "attemptID": 557, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "6.098982", "embeddingY": "13.444112"},{"extension": "py", "date": "2020-03-31 03:37:16", "correct": "1", "upload": "def fusion(liste1,liste2):\n  res=[]\n  i=0\n  j=0\n  while i<len(liste1) and j<len(liste2):\n    if liste1[i]>liste2[j]:\n      res.append(liste2[j]) \n      j+=1\n    else: \n      res.append(liste1[i])\n      i+=1\n  while i<len(liste1):\n      res.append(liste1[i])\n      i+=1\n  while j<len(liste2):\n      res.append(liste2[j])\n      j+=1\n  return res ", "user": "userdId_32", "attemptID": 558, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-42.650635", "embeddingY": "51.68026"},{"extension": "py", "date": "2020-03-02 23:41:55", "correct": "0", "upload": "def polynome(a, b, c):\n    Delta = (b ** 2) - (4 * a * c)\n    if Delta < 0:\n        return (\"pas de solution\")\n    else:\n        if Delta == 0:\n            sol = -b / (2 * a)\n            return (sol)\n        else:\n            sol1 = (-b - sqrt(Delta)) / 2 * a\n            sol2 = (-b + sqrt(Delta)) / 2 * a\n            return (sol2, sol1)", "user": "userdId_42", "attemptID": 559, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-52.143204", "embeddingY": "13.948048"},{"extension": "py", "date": "2020-04-06 05:25:55", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  i=0\n  mot=[]\n  mts=True\n  while i<len(phrase):\n    if phrase[i]!=\" \" and mts==True:\n      mot+=phrase[i]\n    elif phrase[i]==\" \":\n      mts=False\n    elif phrase[i]!=\" \":\n      phrs+=phrase[i]\n    i+=1\n  while i<len(mot) and res==True:\n    if mot[i]==phrs[-i-1]:\n      res=True\n    else:\n      res=False\n  return res", "user": "userdId_26", "attemptID": 560, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "40.531933", "embeddingY": "35.409233"},{"extension": "py", "date": "2020-04-12 06:10:07", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=False\n  c=[]\n  e=[liste]\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n  return e", "user": "userdId_8", "attemptID": 561, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-82.33536", "embeddingY": "16.959887"},{"extension": "py", "date": "2020-03-17 05:41:41", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  res=''\n  if debut+longueur>len(s):\n    res=debut+longueur\n  else:\n    if debut+longueur<len(s):\n      fin=debut+longueur\n  for i in range(debut,debut+longueur): \n      res=res+s[i]\n  return res", "user": "userdId_25", "attemptID": 562, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-84.94194", "embeddingY": "19.862024"},{"extension": "py", "date": "2020-04-07 04:03:45", "correct": "0", "upload": "def elemAri(n,u0,r):\n  cpt=0\n  i=1\n  while i<=n:\n    cpt=cpt+u0+r\n    i=i+1\n  return cpt\n  ", "user": "userdId_1", "attemptID": 563, "exercise": "f239498950e974e29e01472749d9a09d", "exercise_name": "elemAri", "embeddingX": "-8.415416", "embeddingY": "24.34698"},{"extension": "py", "date": "2020-03-05 23:39:34", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n    return None\n  else:\n    max=l[0]\n    for elem in liste:\n      if elem>max:\n        max=elem\n  return max", "user": "userdId_14", "attemptID": 564, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "8.79564", "embeddingY": "-66.07494"},{"extension": "py", "date": "2020-03-09 08:49:13", "correct": "0", "upload": "def nbVoyelles(mot):\n    cpt=0\n    for i in mot:\n      if mot[i]==\"a,e,i,o,u,y\":\n        cpt=cpt+1\n    return cpt\n  ", "user": "userdId_11", "attemptID": 565, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "1.3818926", "embeddingY": "-41.98908"},{"extension": "py", "date": "2020-04-12 05:16:24", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=False\n  c=[]\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n  return c", "user": "userdId_8", "attemptID": 566, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-72.70111", "embeddingY": "15.966312"},{"extension": "py", "date": "2020-04-03 00:07:39", "correct": "0", "upload": "def nbChiffres(nombre):\n  cpt=0\n  while nombre!=0:\n    nombre=nombre//10\n    cpt=cpt+1\n  if nombre==0:\n    cpt=1\n  return cpt", "user": "userdId_12", "attemptID": 567, "exercise": "3dcf332c003a1f3bf15df22ee17884a3", "exercise_name": "nbChiffres", "embeddingX": "31.987179", "embeddingY": "11.59194"},{"extension": "py", "date": "2020-03-02 02:27:57", "correct": "0", "upload": "def rendezVous(fin1,debut2):\n  if fin1>debut2:\n    print(\"True\")\n  else:\n    print(\"False\")\n   ", "user": "userdId_1", "attemptID": 568, "exercise": "6fd66bb2393fbf3809f1c6d04f3831f7", "exercise_name": "rendezVous", "embeddingX": "-67.52834", "embeddingY": "17.551998"},{"extension": "py", "date": "2020-04-07 23:54:33", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  ok=False\n  i=0\n  j=0\n  while i<len(phrase)//2 and j<len(phrase)//2:\n    if phrase[i]==\" \" and phrase[-j]==\" \":\n      i+=1\n      j+=1\n    elif phrase[i]!=phrase[-j-1]:\n      ok=False\n    else:\n      ok=True\n  i+=1\n  j+=1\n  if phrase==\"\":\n    ok=True\n  return ok", "user": "userdId_13", "attemptID": 569, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "37.33815", "embeddingY": "32.83175"},{"extension": "py", "date": "2020-03-10 04:19:48", "correct": "0", "upload": "def nbSyllabes(mot):\n  if mot=='':\n    res=0\n  else:\n    res=0\n    Voyelles=['a','e','i','o','u','y']\n    ch=\"\"\n    for i in range(1,len(mot)):\n      if mot[i-1] not in Voyelles and mot[i] in Voyelles:\n        res=res+1\n      else:\n        ch=mot[i]\n    if mot[0] in Voyelles :\n      res=res+1\n    elif mot[-1] not in Voyelles and len(mot)>5:\n      res=res-1\n  return res\n    ", "user": "userdId_15", "attemptID": 570, "exercise": "1c86bec0f4df503e23db53994f3d2991", "exercise_name": "nbSyllabes", "embeddingX": "-19.452904", "embeddingY": "-72.75407"},{"extension": "py", "date": "2020-03-31 04:06:57", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n  cpt=0\n  i=0\n  while i<len(l) and i<n:\n    if l[i]==x:\n      cpt+=1\n    i+=1\n  if cpt!=n:\n    res=None\n  else:\n    res=cpt\n  return res\n", "user": "userdId_13", "attemptID": 571, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-8.866706", "embeddingY": "74.97162"},{"extension": "py", "date": "2020-03-22 05:25:23", "correct": "0", "upload": "def maximum(liste):\n  maxi=liste[0]\n  for i in range(len(liste)):\n    if liste[i]>maxi:\n      maxi=elem\n  return maxi", "user": "userdId_12", "attemptID": 572, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "1.0116479", "embeddingY": "-67.49488"},{"extension": "py", "date": "2020-04-12 05:09:47", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=False\n  c=[]\n  for i in range(len(liste)-1):\n    c=a*liste[i]+b\n    c.append(c)\n    if c==liste:\n      res=True\n  return res", "user": "userdId_8", "attemptID": 573, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-81.67709", "embeddingY": "16.628407"},{"extension": "py", "date": "2020-03-06 00:12:47", "correct": "0", "upload": "def moyenne(liste):\n\tif len(liste) == 0:\n\t\tres= None\n\telse:\n\t\tnb = 0\n\t\tres = 0\n\t\tfor elem in liste:\n\t\t\tres = res + elem\n\t\tmoy = res / nb\n\treturn moy", "user": "userdId_29", "attemptID": 574, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-0.724811", "embeddingY": "-8.787719"},{"extension": "py", "date": "2020-03-05 23:46:31", "correct": "0", "upload": "def maximum(liste):\n  res=0\n  for i in range(len(liste)):\n      res=res+liste[i]\n  return res", "user": "userdId_41", "attemptID": 575, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-45.77818", "embeddingY": "-36.76616"},{"extension": "py", "date": "2020-03-06 00:14:54", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(liste)==0:\n    res=0\n  else:\n    for lettre in [\"a\",\"e\",\"i\",\"o\",\"u\",\"y\"]:\n      res=res+1\n  return res\n  \n\n ", "user": "userdId_9", "attemptID": 576, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "20.321426", "embeddingY": "-38.600735"},{"extension": "py", "date": "2020-04-05 08:52:28", "correct": "0", "upload": "def produitScalaire(vec1,vec2):\n  res=0\n  for i in range(4):\n    res=res+vec1[i]*vec2[i]\n  return res", "user": "userdId_26", "attemptID": 577, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-63.64099", "embeddingY": "-16.523907"},{"extension": "py", "date": "2020-04-08 00:45:29", "correct": "1", "upload": "def sousChaine(s1,s2):\n  if s1 in s2:\n    return True\n  else:\n    return False\n      ", "user": "userdId_19", "attemptID": 578, "exercise": "a7cdd094daa2f0bfccc7a4ec419f7243", "exercise_name": "sousChaine", "embeddingX": "46.8901", "embeddingY": "-16.60432"},{"extension": "py", "date": "2020-03-05 21:44:50", "correct": "1", "upload": "def somme(liste):\n  res=0\n  for i in range (len(liste)):\n    res=res+liste[i]\n  return res", "user": "userdId_25", "attemptID": 579, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-44.968475", "embeddingY": "-36.935547"},{"extension": "py", "date": "2020-04-10 07:01:36", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n    cpt=0\n    decomp=nombre%10\n    while decomp!=1:\n      if decomp==chiffre:\n        cpt+=1\n      else:\n        decomp=decomp%10\n    return cpt\n  ", "user": "userdId_11", "attemptID": 580, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "11.327739", "embeddingY": "9.917842"},{"extension": "py", "date": "2020-04-07 23:54:18", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  res=0\n  for i in nombre:\n    if i==chiffre:\n      res=res+1\n  return res", "user": "userdId_2", "attemptID": 581, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-35.96293", "embeddingY": "-13.093749"},{"extension": "py", "date": "2020-03-06 00:00:33", "correct": "0", "upload": "def nbVoyelles(mot):\n  cpt=0\n  if elem in liste=={a,e,i,o,u,y}:\n    cpt=cpt+1\n  return cpt", "user": "userdId_1", "attemptID": 582, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "7.569012", "embeddingY": "-15.697975"},{"extension": "py", "date": "2020-03-30 21:55:09", "correct": "1", "upload": "def fusion(liste1,liste2):\n  i=0\n  j=0\n  listefusion=[]\n  \n  while i<len(liste1) and j<len(liste2):\n    if liste1[i]>liste2[j]:\n      listefusion.append(liste2[j])\n      j=j+1\n    else:\n      listefusion.append(liste1[i])\n      i=i+1\n  if j==len(liste2):\n    while i<len(liste1):\n      listefusion.append(liste1[i])\n      i=i+1\n  if i==len(liste1):\n    while j<len(liste2):\n      listefusion.append(liste2[j])\n      j=j+1\n  \n  return listefusion\n    \n    \n", "user": "userdId_19", "attemptID": 583, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-33.656174", "embeddingY": "50.94705"},{"extension": "py", "date": "2020-03-31 08:18:14", "correct": "0", "upload": "def prononcable(mot):\n    if len(mot)==0:\n      res=True\n    else:\n      res=False\n      for i in range(len(mot)):\n        if (mot[i] in 'aeiouy') and (mot[i+3] not in 'aeiouy'):\n          res=True\n    return res\n  \n                                     ", "user": "userdId_11", "attemptID": 584, "exercise": "6318b210c201fba050d60bc0913cb7ef", "exercise_name": "prononcable", "embeddingX": "-24.017769", "embeddingY": "-68.120605"},{"extension": "py", "date": "2020-03-13 00:49:23", "correct": "1", "upload": "def sommeNPremiersEntiersPairs(n):\n\tres=0\n\tif n<0:\n\t\tres=0\n\tfor i in range(2,n+1,2):\n\t\t\tres=res+i\n\treturn res", "user": "userdId_19", "attemptID": 585, "exercise": "3030dc079e6607c253e89e8ef4784b74", "exercise_name": "sommeNPremiersEntiersPairs", "embeddingX": "-14.393085", "embeddingY": "12.380152"},{"extension": "py", "date": "2020-03-31 01:10:57", "correct": "0", "upload": "def listeSymetrique(l):\n    trouve=True\n    i=0\n    j=-1\n    while i<len(l) and j<=-len(l) and trouve==True:\n      if l[i]!=l[j]:\n        trouve=False\n      i=i+1\n      j=j-1\n    return trouve\n  \n      ", "user": "userdId_28", "attemptID": 586, "exercise": "8eb27aeda471a467e2223abebeca886e", "exercise_name": "listeSymetrique", "embeddingX": "5.288557", "embeddingY": "44.576847"},{"extension": "py", "date": "2020-03-06 00:22:31", "correct": "0", "upload": "def maximum(liste):\n res=liste[0]\n for elem in liste:\n    if elem>res:\n      res=elem\n \n    ", "user": "userdId_33", "attemptID": 587, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "33.141193", "embeddingY": "-46.31532"},{"extension": "py", "date": "2020-04-07 23:12:17", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  res=False\n  prec=None\n  while nombre!=0 and not res:\n    nombre=nombre//10\n    if chiffre==prec:\n      res=True\n    prec=chiffre\n    cpt=cpt+1\n  return ", "user": "userdId_13", "attemptID": 588, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "10.4431715", "embeddingY": "24.354124"},{"extension": "py", "date": "2020-04-07 03:28:59", "correct": "1", "upload": "def produitScalaire(l1,l2):\n  res=0\n  i=0\n  while i<len(l1) and i<len(l2):\n    res=res+(l1[i]*l2[i])\n    i+=1\n  return res", "user": "userdId_30", "attemptID": 589, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-15.684854", "embeddingY": "49.90468"},{"extension": "py", "date": "2020-04-13 21:54:02", "correct": "0", "upload": "def listeDecroissante(scores):\n  i=0\n  ok=True\n  while i<len(scores) :\n    if scores[i]<scores[i+1] :\n      ok=False\n    i+=1\n  return ok", "user": "userdId_15", "attemptID": 590, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "19.982994", "embeddingY": "43.237976"},{"extension": "py", "date": "2020-03-31 09:08:13", "correct": "0", "upload": "def plusLongueSuite(liste):\n    if len(liste)==0:\n      cptmax=0\n    else:\n      cpt=0\n      cptmax=0\n      for i in range(len(liste)):\n        if liste[i]==liste[i+1]:\n          cpt+=1\n        else:\n          if cpt>cptmax:\n            cptmax=cpt\n    return cptmax\n        ", "user": "userdId_11", "attemptID": 591, "exercise": "deed004abb317b11778f7e8247197a40", "exercise_name": "plusLongueSuite", "embeddingX": "-3.3990695", "embeddingY": "-60.90813"},{"extension": "py", "date": "2020-03-17 06:15:33", "correct": "0", "upload": "def sommeNPremiersEntiers(n):\n    if n<0:\n      res=0\n    else:\n      res=0\n      for elem in range(1,n):\n        res=res+elem\n    return res\n  ", "user": "userdId_11", "attemptID": 592, "exercise": "c315a540cf0bfb0182dc114c6f0eafd1", "exercise_name": "sommeNPremiersEntiers", "embeddingX": "-16.233137", "embeddingY": "11.736223"},{"extension": "py", "date": "2020-04-05 03:49:09", "correct": "0", "upload": "def moyenne(liste):\n  if len(liste)==0:\n    res=None\n    return res\n \n  else:\n    s=0\n    for elem in liste:\n      s+=elem\n    res=s//len(liste)\n  return res", "user": "userdId_26", "attemptID": 593, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-8.509264", "embeddingY": "-15.427881"},{"extension": "py", "date": "2020-03-04 10:49:57", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2) :\n  if(debut1,fin1,debut2,fin2)in '1,10,7,20' :\n     res=True\n  if(debut1,fin1,debut2,fin2)in '1,7,10,20' :\n     res=False\n  if(debut1,fin1,debut2,fin2)in '20,25,10,20' :\n     res=True\n  return res\n  ", "user": "userdId_39", "attemptID": 594, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "-68.74657", "embeddingY": "34.502934"},{"extension": "py", "date": "2020-04-12 07:33:26", "correct": "0", "upload": "def suiteAriGeo(liste):\n  i=1\n  while i<len(liste):\n    a=liste[1]-liste[0]\n    b=liste[1]-liste[0]  \n  ok=True\n  i=0\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste) and ok:\n    if liste[i+1]!=a*liste[i]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 595, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "15.190091", "embeddingY": "63.485878"},{"extension": "py", "date": "2020-03-20 00:30:13", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n    res=''\n    fin=deb+longueur\n    if fin>len(mot):\n      fin=len(mot)\n    for i in range (deb,fin):\n      res=res+mot[i]\n    return res", "user": "userdId_1", "attemptID": 596, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-69.291176", "embeddingY": "28.73701"},{"extension": "py", "date": "2020-04-05 04:16:49", "correct": "0", "upload": "def moyenne(liste):\n  if len(liste)!=0:\n    s=0\n    for elem in liste:\n      s+=elem\n    res=s//len(liste)\n  else:\n    res=None\n    \n  return res", "user": "userdId_26", "attemptID": 597, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-7.1666126", "embeddingY": "-15.116343"},{"extension": "py", "date": "2020-03-06 00:00:16", "correct": "0", "upload": "def maximum(liste):\n  res=0\n  for i in liste:\n    res=res+i\n    if res<i:\n      res=i\n    \n  return res", "user": "userdId_5", "attemptID": 598, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "42.376804", "embeddingY": "-53.92165"},{"extension": "py", "date": "2020-04-11 00:34:12", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  c=True\n  if len(liste)==0:\n    c=True\n  elif liste[0]==0:\n    c=False\n  else:\n    while i<(len(liste)-2) and c:\n      if liste[i+2]/liste[i+1]!=liste[i+1]/liste[i]:\n        c=False\n      i=i+1\n  return c", "user": "userdId_19", "attemptID": 599, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "27.325403", "embeddingY": "55.652016"},{"extension": "py", "date": "2020-03-12 21:47:17", "correct": "0", "upload": "def nbVoyelles(mot):\n   for lettre in mot:\n      if lettre in 'aeiouy':\n         res=res+1\n   return res", "user": "userdId_14", "attemptID": 600, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "14.866047", "embeddingY": "-22.00238"},{"extension": "py", "date": "2020-06-02 21:59:26", "correct": "1", "upload": "def polynome(a,b,c):\n  import math\n  delta=b**2-4*a*c\n  if delta>0:\n    x1=(-b+(math.sqrt(delta)))/2*a\n    x2=(-b-(math.sqrt(delta)))/2*a\n    res=(x1,x2)\n  elif delta==0:\n    x=(-b)/(2*a)\n    res=x\n  else:\n    res='pas de solution'\n  return res", "user": "userdId_12", "attemptID": 601, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-48.737144", "embeddingY": "6.1182966"},{"extension": "py", "date": "2020-03-23 01:58:19", "correct": "0", "upload": "def nbVoyelles(mot):\n    res=0\n    for i in range (len(mot)) :\n      if i =='a,e,i,o,u,y' :\n        res=res+1\n    return res", "user": "userdId_24", "attemptID": 602, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-8.896786", "embeddingY": "-50.241623"},{"extension": "py", "date": "2020-03-17 05:49:58", "correct": "0", "upload": "def distribution(liste,n):\n    cpts=0*n+1\n    for elem in liste:\n        cpt[elem]=cpt[elem]+1\n    return res", "user": "userdId_39", "attemptID": 603, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-59.70431", "embeddingY": "-11.159606"},{"extension": "py", "date": "2020-04-08 02:32:26", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  res=True\n  while i<len(liste)-1 and res==True:\n    if liste[i]!=0:\n      q=liste[i+1]/liste[i]\n      if liste[i+1]/liste[i]==q:\n        res=True\n      else:\n        res=False\n    else:\n      res=False\n    i=i+1\n  return res", "user": "userdId_26", "attemptID": 604, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "29.500841", "embeddingY": "60.216812"},{"extension": "py", "date": "2020-03-05 21:43:32", "correct": "1", "upload": "def nbVoyelles(mot):\n  n = 0\n  for i in mot:\n    if i in 'aeiouy':\n      n+=1\n  return n", "user": "userdId_6", "attemptID": 605, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "12.630238", "embeddingY": "-24.770716"},{"extension": "py", "date": "2020-03-31 03:39:18", "correct": "1", "upload": "def fusion(liste1,liste2):\n  res=[]\n  i=0\n  j=0\n  while i<len(liste1) and j<len(liste2):\n    if liste1[i]<=liste2[j]:\n      res.append(liste1[i])\n      i=i+1\n    else:\n      res.append(liste2[j])\n      j=j+1\n  while j<len(liste2):\n    res.append(liste2[j])\n    j=j+1\n  while i<len(liste1):\n    res.append(liste1[i])\n    i=i+1\n  return res", "user": "userdId_30", "attemptID": 606, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-40.96543", "embeddingY": "49.767326"},{"extension": "py", "date": "2020-04-12 06:39:52", "correct": "0", "upload": "def phrasePalindrome(phrase):\n    if len(phrase)==0:\n      res=True\n    else:\n      res=True\n      i=0\n      while i<len(phrase)//2 and res:\n        if phrase[i]!=phrase[-(i+1)] or phrase[i]!='':\n          res=False\n        i+=1\n    return res", "user": "userdId_11", "attemptID": 607, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "29.952368", "embeddingY": "31.556345"},{"extension": "py", "date": "2020-04-06 15:28:31", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  for chiffre in nombre:\n    if chiffre==nombre[i]:\n      cpt=cpt+1\n    i=i+1\n  return cpt", "user": "userdId_3", "attemptID": 608, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-39.23358", "embeddingY": "-12.6322565"},{"extension": "py", "date": "2020-03-15 02:44:49", "correct": "1", "upload": "def sommeNPremiersEntiersPairs(n):\n  res=0\n  for x in range(1,n+1):\n    if x%2==0:\n      res=res+x\n  return res", "user": "userdId_8", "attemptID": 609, "exercise": "3030dc079e6607c253e89e8ef4784b74", "exercise_name": "sommeNPremiersEntiersPairs", "embeddingX": "30.160915", "embeddingY": "-11.791843"},{"extension": "py", "date": "2020-03-15 02:43:06", "correct": "1", "upload": "def sommeNPremiersEntiers(n):\n  res=0\n  for x in range(1,n+1):\n    res=res+x\n  return res", "user": "userdId_8", "attemptID": 610, "exercise": "c315a540cf0bfb0182dc114c6f0eafd1", "exercise_name": "sommeNPremiersEntiers", "embeddingX": "-18.665083", "embeddingY": "13.340372"},{"extension": "py", "date": "2020-05-04 21:31:35", "correct": "1", "upload": "def semestreValide(ue1,ue2):\n  res=False\n  if ue1<10:\n    res=False\n  elif ue1>=10 and ue2>=10 or ue1+ue2>=20:\n    res=True\n  return res", "user": "userdId_8", "attemptID": 611, "exercise": "70ae7ad6cf504e0fa8cedebd8e8a825f", "exercise_name": "semestreValide", "embeddingX": "67.70468", "embeddingY": "-1.6105255"},{"extension": "py", "date": "2020-03-17 05:08:47", "correct": "0", "upload": "def permutationChaine(s):\n  res=''\n  for i in range(0,len(s)-1,2):\n    res=res+s[i+1]+s[i]\n  return res", "user": "userdId_7", "attemptID": 612, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-44.193573", "embeddingY": "-50.303005"},{"extension": "py", "date": "2020-04-05 10:26:08", "correct": "1", "upload": "def phrasePalindrome(phrase):\n    phrase = phrase.replace(\" \",\"\")\n    res = False\n    if(phrase == phrase[::-1]):\n        res = True\n    return res", "user": "userdId_4", "attemptID": 613, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "44.014248", "embeddingY": "-9.861892"},{"extension": "py", "date": "2020-03-05 22:14:15", "correct": "0", "upload": "def prononcable(mot):\n  if len(mot)<4:\n    return True\n  else:\n    cpt=0\n    laLettrePrecedenteEstUneVoyelle = (mot[0] in 'aeiouy')\n    for i in mot :\n      if (i in 'aeiouy') == laLettrePrecedenteEstUneVoyelle:\n        cpt+=1\n        if cpt == 4:\n          return False\n      else:\n        cpt = 0\n        laLettrePrecedenteEstUneVoyelle = not laLettrePrecedenteEstUneVoyelle \n    return True", "user": "userdId_6", "attemptID": 614, "exercise": "6318b210c201fba050d60bc0913cb7ef", "exercise_name": "prononcable", "embeddingX": "16.134176", "embeddingY": "-14.960075"},{"extension": "py", "date": "2020-03-07 00:44:44", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1<annee2:\n    res=-1\n  elif annee1>annee2:\n      res=1\n  elif mois1<mois2:\n      res=-1\n      if mois1>mois2:\n        res=1\n      elif jour1<jour2:\n        res=-1\n        if jour1>jour2:\n          res=1\n  else:\n    res=0\n  return res", "user": "userdId_8", "attemptID": 615, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "80.8735", "embeddingY": "-33.59798"},{"extension": "py", "date": "2020-04-06 21:29:14", "correct": "1", "upload": "def motPalindrome(mot):\n  res=True\n  i=0\n  j=len(mot)-1\n  while i<len(mot) and res:\n    if mot[i]!=mot[j]:\n      res=False\n    i=i+1\n    j=j-1\n  return res\n", "user": "userdId_28", "attemptID": 616, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "20.082703", "embeddingY": "59.51915"},{"extension": "py", "date": "2020-04-11 05:49:43", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  while nombre!=0:\n    nombre=nombre//10\n    if nombre%10==chiffre:\n      res+=1\n  return res", "user": "userdId_8", "attemptID": 617, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "23.673313", "embeddingY": "10.749774"},{"extension": "py", "date": "2020-03-09 22:38:08", "correct": "1", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=liste[0]\n    for i in range(len(liste)):\n      if liste[i]>res:\n        res=liste[i]\n  return res", "user": "userdId_12", "attemptID": 618, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "1.377214", "embeddingY": "-62.540897"},{"extension": "py", "date": "2020-03-13 00:49:41", "correct": "1", "upload": "def sommeNPremiersEntiersPairs(n):\n    res = 0\n    for i in range(n+1):\n      if i%2 == 0:\n        res = res + i\n    return res", "user": "userdId_29", "attemptID": 619, "exercise": "3030dc079e6607c253e89e8ef4784b74", "exercise_name": "sommeNPremiersEntiersPairs", "embeddingX": "30.027235", "embeddingY": "-12.275884"},{"extension": "py", "date": "2020-03-17 05:27:52", "correct": "0", "upload": "def distribution(liste,n):\n  cpt[elem]=[0]*4\n  for elem in liste:\n    cpt[elem]=cpt[elem]+1\n  return cpt ", "user": "userdId_35", "attemptID": 620, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-55.722717", "embeddingY": "-5.5653667"},{"extension": "py", "date": "2020-03-09 05:21:59", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  res=0\n  for elem in compareDates:\n    if (jour1,mois1,annee1<jour2,mois2,annee2):\n      res=-1\n    elif (jour1,mois1,annee1==jour2,mois2,annee2):\n      res=0\n    else:\n      res=1\n  return res", "user": "userdId_23", "attemptID": 621, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "-31.192078", "embeddingY": "-12.6712675"},{"extension": "py", "date": "2020-04-12 08:36:14", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n    cpt=0\n    x=nombre%10\n    decomp=nombre\n    while decomp!=0:\n      if x==chiffre:\n        cpt+=1\n        decomp=decomp//10\n        x=decomp%10\n      else:\n        decomp=decomp//10\n        x=decomp%10\n    if cpt==0:\n      cpt=1\n    return cpt", "user": "userdId_11", "attemptID": 622, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "7.112408", "embeddingY": "15.143363"},{"extension": "py", "date": "2020-03-10 08:55:57", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n\tif jour1<jour2 or mois1<=mois2 or annee1<=annee2: \n\t\tres=-1\n\telif jour1>jour2 or mois1>=mois2 or annee1>=annee2:\n\t\tres=1\n\telse:\n\t\tres=0\n\treturn res", "user": "userdId_37", "attemptID": 623, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "79.57862", "embeddingY": "-29.582684"},{"extension": "py", "date": "2020-03-31 06:36:13", "correct": "1", "upload": "def doubleChiffre(nombre):\n  res=False\n  prec=None\n  while nombre!=0 and not res:\n    chiffre=nombre%10\n    nombre=nombre//10\n    if chiffre==prec:\n      res=True\n    prec=chiffre\n  return res", "user": "userdId_8", "attemptID": 624, "exercise": "c83ea6acd3e9f6f5543e87d515e8a44a", "exercise_name": "doubleChiffre", "embeddingX": "10.788089", "embeddingY": "21.40182"},{"extension": "py", "date": "2020-03-19 23:25:35", "correct": "1", "upload": "def sousChaine(s,debut,longueur):\n  res=\"\"\n  fin=debut+longueur\n  if fin>len(s):\n    fin=len(s)\n  \n  for i in range (debut,fin):\n    res=res+s[i]\n    \n    \n  return res", "user": "userdId_38", "attemptID": 625, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-71.544655", "embeddingY": "18.513567"},{"extension": "py", "date": "2020-03-24 03:13:05", "correct": "0", "upload": "def quatrePlus100(liste):\n    res=[]\n    i=0\n    nb=0\n    while i<=len(liste) or nb<4:\n      if liste[i]>100:\n        res=res+liste[i]\n        nb=nb+1\n      i=i+1\n    return res", "user": "userdId_18", "attemptID": 626, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-30.954762", "embeddingY": "37.31384"},{"extension": "py", "date": "2020-03-01 01:03:53", "correct": "1", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n    res = False\n\n    for date in range(debut2,fin2+1):\n        \n        if date in range(debut1,fin1+1): \n            res = True \n            \n            \n    return res", "user": "userdId_4", "attemptID": 627, "exercise": "6fd66bb2393fbf3809f1c6d04f3831f7", "exercise_name": "rendezVous", "embeddingX": "5.292401", "embeddingY": "-18.701332"},{"extension": "py", "date": "2020-03-23 23:06:22", "correct": "0", "upload": "def quatrePlus100(liste):\n  if len(liste)==0:\n    res=[]\n  else:\n    res=[]\n    for i in range(len(liste)):\n      if liste[i]>100:\n        res=res+liste[i]\n    return res", "user": "userdId_9", "attemptID": 628, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-7.8830485", "embeddingY": "-62.202587"},{"extension": "py", "date": "2020-04-05 08:25:08", "correct": "0", "upload": "def plusLongueSuite(liste):\n    if liste==[]:\n      res=0\n    else:\n      cpt=1\n      cptMax=1\n      prec=liste[0]\n      for i in range(1,len(liste)):\n        if prec==liste[i]:\n          cpt+=1\n          if cpt>cptMax:\n            cptMax=cpt\n        else:\n          cpt=0\n        prec=liste[i]\n    return cptMax\n      ", "user": "userdId_18", "attemptID": 629, "exercise": "deed004abb317b11778f7e8247197a40", "exercise_name": "plusLongueSuite", "embeddingX": "-3.1785376", "embeddingY": "-78.97409"},{"extension": "py", "date": "2020-03-06 00:24:56", "correct": "0", "upload": "def minimum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    for elem in liste:\n      if elem<liste[0]:\n        res=liste[0]\n  return res", "user": "userdId_14", "attemptID": 630, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "29.853075", "embeddingY": "-62.43154"},{"extension": "py", "date": "2020-03-10 04:21:35", "correct": "0", "upload": "def sommeNPremiersEntiers(n):\n    res=0\n    for n in range(len(n)):\n        res=res+n\n    return res", "user": "userdId_39", "attemptID": 631, "exercise": "c315a540cf0bfb0182dc114c6f0eafd1", "exercise_name": "sommeNPremiersEntiers", "embeddingX": "-40.33796", "embeddingY": "-25.26551"},{"extension": "py", "date": "2020-03-30 02:46:55", "correct": "0", "upload": "def fusion(liste1,liste2):\n  liste=[]\n  liste.extend(liste1)\n  liste.extend(liste2)\n  i=0\n  res=[]\n  while i<len(liste) :\n    n=liste[0]\n    if n>liste[i] :\n      res.append(liste[i])\n    elif n<liste[i] :\n      res.append(n)\n      n=liste[i]\n    i=i+1\n  \n  return res", "user": "userdId_15", "attemptID": 632, "exercise": "6613efb6c873b142dc2b6040c14eb616", "exercise_name": "fusion", "embeddingX": "-33.727276", "embeddingY": "39.413136"},{"extension": "py", "date": "2020-04-03 00:10:36", "correct": "0", "upload": "def nbChiffres(nombre):\n  i=0\n  while nombre!=0:\n    nombre=nombre//10    \n    i+=1\n  if nombre==0:\n    i=1\n  return i", "user": "userdId_1", "attemptID": 633, "exercise": "3dcf332c003a1f3bf15df22ee17884a3", "exercise_name": "nbChiffres", "embeddingX": "32.33488", "embeddingY": "13.929237"},{"extension": "py", "date": "2020-03-12 21:52:46", "correct": "0", "upload": "def maximum(liste):\n   res=liste[0]\n   if len(liste)==0:\n      res=None\n   else:\n      for i in liste:\n         if res<liste[0]:\n            res=liste[0]\n   return res", "user": "userdId_14", "attemptID": 634, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "29.67935", "embeddingY": "-61.960297"},{"extension": "py", "date": "2020-03-05 21:34:05", "correct": "0", "upload": "def somme(liste):\n    res=0\n    for i in range(len(liste)):\n       res=res+liste(i)\n    return res", "user": "userdId_16", "attemptID": 635, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-40.25772", "embeddingY": "-30.773249"},{"extension": "py", "date": "2020-04-13 21:29:37", "correct": "0", "upload": "def indiceInsertion(sc,scores):\n  cpt = 0\n  while cpt<len(scores) & scores[cpt]>sc :\n    cpt+=1\n  return cpt", "user": "userdId_6", "attemptID": 636, "exercise": "f8a820b2bd54d18d36716e3d703858f7", "exercise_name": "indiceInsertion", "embeddingX": "-13.3452015", "embeddingY": "61.779716"},{"extension": "py", "date": "2020-03-31 05:03:16", "correct": "1", "upload": "def sousChaine(s,debut,longueur):\n    res=''\n    fin=debut+longueur\n    if fin>len(s):\n      fin=len(s)\n    for i in range(debut,fin):\n      res=res+s[i]\n    return res", "user": "userdId_18", "attemptID": 637, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-76.683685", "embeddingY": "18.999155"},{"extension": "py", "date": "2020-03-19 23:48:57", "correct": "0", "upload": "def reconstruireChainePartielle(s,n):\n  res=''\n  for i in (len(s),n):\n    res=res+s[i]\n  return res", "user": "userdId_2", "attemptID": 638, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-40.158867", "embeddingY": "-4.38018"},{"extension": "py", "date": "2020-03-17 06:37:22", "correct": "0", "upload": "def permutationListe(liste,permutation):\n  res=0\n  for elem in liste:\n    res=elem*(n+1)\n  return res", "user": "userdId_25", "attemptID": 639, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-29.378479", "embeddingY": "-4.214263"},{"extension": "py", "date": "2020-05-04 21:13:05", "correct": "0", "upload": "def nombrePair(n):\n  res=False\n  for elem in range(n):\n    if elem%2==0:\n      res=True\n  return res", "user": "userdId_8", "attemptID": 640, "exercise": "3001254263845e9a478696f81a704d33", "exercise_name": "nombrePair", "embeddingX": "31.720188", "embeddingY": "-7.367782"},{"extension": "py", "date": "2020-04-06 22:39:57", "correct": "0", "upload": "def motPalindrome(mot):\n    if len(mot)==0:\n      res=True\n    else:\n      res=True\n      i=0\n      while i<len(mot) and res==True:\n        if mot[i//2]==mot[-i//2]:\n          res=True\n          i+=1\n        else:\n          res=False\n    return res\n", "user": "userdId_11", "attemptID": 641, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "26.593767", "embeddingY": "43.984467"},{"extension": "py", "date": "2020-03-31 04:25:58", "correct": "0", "upload": "def stockerChiffres(nombre):\n  nombre = str(nombre)\n  i = 0\n  res = []\n  while i < len(nombre):\n    res.append (nombre[i])\n    i = i + 1 \n  return res", "user": "userdId_17", "attemptID": 642, "exercise": "49a87f644f84a443327fb4315b47f249", "exercise_name": "stockerChiffres", "embeddingX": "-40.005882", "embeddingY": "42.79419"},{"extension": "py", "date": "2020-03-05 22:02:32", "correct": "0", "upload": "def maximum(liste):\n    max = ''\n    for i in range(0,len(liste)):\n    \tif liste[i] > max:\n        \tmax = liste[i]\n    return max", "user": "userdId_29", "attemptID": 643, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "10.497155", "embeddingY": "-73.782234"},{"extension": "py", "date": "2020-03-09 21:51:52", "correct": "1", "upload": "def jourNuit(heure):\n  if not(0<=heure<=24):\n    return \"l'heure saisie est invalide\"\n  else:\n    res='on est '\n    if(5<=heure<12):\n      res+='le matin '\n    elif(12<=heure<17):\n      res+=\"l'apr\u00e8s-midi \"\n    elif(17<=heure<21):\n      res+='le soir '\n    else:\n      res+='la nuit '\n    res += 'et il fait '\n    if(6<=heure<18):\n      res+='jour'\n    else:\n      res+='nuit'\n    return res", "user": "userdId_6", "attemptID": 644, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "74.89417", "embeddingY": "26.150406"},{"extension": "py", "date": "2020-03-05 22:18:43", "correct": "0", "upload": "def prononcable(mot):\n  if len(mot)<4:\n    return True\n  else:\n    cpt=0\n    laLettrePrecedenteEstUneVoyelle = (mot[0] in 'aeiouy')\n    for i in mot :\n      if (i in 'aeiouy') == laLettrePrecedenteEstUneVoyelle:\n        cpt+=1\n        if cpt == 4:\n          return False\n      else:\n        cpt = 0\n        laLettrePrecedenteEstUneVoyelle = not laLettrePrecedenteEstUneVoyelle \n    return True", "user": "userdId_6", "attemptID": 645, "exercise": "6318b210c201fba050d60bc0913cb7ef", "exercise_name": "prononcable", "embeddingX": "16.13013", "embeddingY": "-14.953899"},{"extension": "py", "date": "2020-03-12 09:28:53", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    return 0\n  cpt=0\n  for lettre in mot:\n    if lettre in mot=='aeiouy':\n      cpt=cpt+1\n  return cpt", "user": "userdId_1", "attemptID": 646, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "7.5399756", "embeddingY": "-32.056183"},{"extension": "py", "date": "2020-04-16 22:04:01", "correct": "1", "upload": "def compareDates(j1,m1,a1,j2,m2,a2):\n  if a1>a2:\n    res=1\n  elif a1<a2: \n    res=-1\n  elif m1>m2:\n    res=1\n  elif m1<m2:\n    res=-1\n  elif j1>j2:\n    res=1\n  elif j1<j2:\n    res=-1\n  else: \n    res=0\n  return res", "user": "userdId_21", "attemptID": 647, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "82.192955", "embeddingY": "-32.371876"},{"extension": "py", "date": "2020-03-31 03:34:49", "correct": "0", "upload": "def fusion(liste1,liste2):\n  res=[]\n  i=0\n  j=0\n  while i<len(liste1) or j<len(liste2):\n    if liste1[i]>liste2[j]:\n      res.append(liste2[j])\n      j=j+1\n    else :\n      res.append(liste1[i])\n      i=i+1\n  while i<len(liste1):\n    res.append(liste1[i])\n    i=i+1\n  while j<len(liste2):\n    res.append(liste2)\n    j=j+1\n  return res\n", "user": "userdId_3", "attemptID": 648, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-38.347214", "embeddingY": "46.883617"},{"extension": "py", "date": "2020-03-23 01:17:12", "correct": "0", "upload": "def nbOccurrencesLettre(lettre,mot):\n  res=0\n  for i in range(len(mot)): \n    if l==mot[i]:\n      res=res+1\n  return res", "user": "userdId_21", "attemptID": 649, "exercise": "2864c9e5861229d2ff32570f6bc944fb", "exercise_name": "nbOccurrencesLettre", "embeddingX": "-25.732891", "embeddingY": "-34.878197"},{"extension": "py", "date": "2020-04-12 09:53:11", "correct": "0", "upload": "def suiteAriGeo(liste):\n  i=0\n  while i<len(liste)-1:\n    a=liste[0]\n    b=liste[0]\n    if liste[i+1]==liste[i]+(liste[1]-liste[0]):\n      b=liste[1]-liste[0]\n    if liste[0]!=0:                        \n      if liste[i+1]==liste[i]*liste[1]/liste[0]:\n        a=liste[1]/liste[0]\n        b=0\n    if liste[i+1]==liste[i]*(liste[1]-liste[0])+(liste[i]-(liste[i]*(liste[1]-liste[0]))):\n      a=liste[1]-liste[0]\n      b=liste[i]-(liste[i-1]*a)\n    i=i+1\n  ok=True\n  i=0\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=a*liste[i]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 650, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "35.461945", "embeddingY": "84.42647"},{"extension": "py", "date": "2020-03-12 22:13:06", "correct": "0", "upload": "def moyenne(liste):\n  if len (liste)==0:\n    res=None\n  else:\n    res=0\n    cpt=0\n    for elem in liste:\n      res=res+elem\n      cpt=cpt+elem\n    res=elem/cpt\n  return res ", "user": "userdId_20", "attemptID": 651, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-3.6956632", "embeddingY": "-8.184712"},{"extension": "py", "date": "2020-03-20 00:44:41", "correct": "1", "upload": "def permutationChaine(s):\n  res=\"\"\n  for i in range(0,len(s)-1,2):\n    res=res+s[i+1]+s[i]\n  if len(s)%2!=0:\n    res=res+s[-1]\n  return res\n    ", "user": "userdId_34", "attemptID": 652, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-34.82065", "embeddingY": "-58.935654"},{"extension": "py", "date": "2020-03-06 00:46:37", "correct": "1", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    res=0\n  else:\n    res=0\n    for lettre in mot:\n      if lettre in [\"a\",\"e\",\"i\",\"o\",\"u\",\"y\"]:\n        res=res+1\n  return res\n  \n      \n  \n\n ", "user": "userdId_9", "attemptID": 653, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "13.044191", "embeddingY": "-36.579365"},{"extension": "py", "date": "2020-04-11 07:27:01", "correct": "0", "upload": "def sousChaine(s1,s2):\n  res=True\n  i=0\n  j=0\n  while i<len(s1[i]) in j<len(s2[i]) and res:\n    res=True\n  else:\n    res=False\n  return res", "user": "userdId_8", "attemptID": 654, "exercise": "4bdf8c9c5d020593e1771e4d3ae1ae0d", "exercise_name": "sousChaine", "embeddingX": "-4.1335726", "embeddingY": "47.440456"},{"extension": "py", "date": "2020-03-22 11:28:11", "correct": "1", "upload": "def ecart(liste):\n  if liste==[]:\n    res=None\n  else:\n    if len(liste)==1:\n      res=0\n    else:\n      max=liste[0]\n      min=liste[0]\n      for i in range(len(liste)):\n        if liste[i]>max:\n          max=liste[i]\n      for i in range(len(liste)):\n        if liste[i]<min:\n          min=liste[i]\n      res=max-min\n  return res", "user": "userdId_27", "attemptID": 655, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "11.744157", "embeddingY": "-83.27716"},{"extension": "py", "date": "2020-04-11 00:29:28", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  c=True\n  while i<(len(liste)-2) and c:\n    if liste[i+2]/liste[i+1]!=liste[i+1]/liste[i]:\n      c=False\n    i=i+1\n  return c", "user": "userdId_19", "attemptID": 656, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "25.635857", "embeddingY": "54.704742"},{"extension": "py", "date": "2020-03-06 00:28:54", "correct": "0", "upload": "def ecart(liste):\n    if liste==[]:\n      return None\n    elif len(liste)==1:\n      return 0\n    else:\n      res=liste[0]\n      min=0\n      for i in range(0,len(liste)):\n        if res>liste[i]:\n          min=liste[i]\n      max=0\n      for i in range(0,len(liste)):\n        if res<liste[i]:\n          max=liste[i]\n      ecart=max-min\n      return ecart\n          \n      \n      \n      ", "user": "userdId_2", "attemptID": 657, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "10.114652", "embeddingY": "-84.65245"},{"extension": "py", "date": "2020-03-06 00:18:55", "correct": "0", "upload": "def maximum(liste):\n res=0\n for elem in liste:\n    if elem>res:\n      res=elem\n return res\n    ", "user": "userdId_33", "attemptID": 658, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "30.792217", "embeddingY": "-42.93407"},{"extension": "py", "date": "2020-04-14 00:23:17", "correct": "0", "upload": "def indiceInsertion(sc,scores):\n  res=0\n  for elem in scores:\n    if sc>=elem:\n      res+=1\n    return res", "user": "userdId_8", "attemptID": 659, "exercise": "f8a820b2bd54d18d36716e3d703858f7", "exercise_name": "indiceInsertion", "embeddingX": "-6.9706964", "embeddingY": "-26.568138"},{"extension": "py", "date": "2020-03-06 00:00:16", "correct": "1", "upload": "def somme(liste):\n  res=0\n  for elem in liste:\n    res=res+elem\n  return res", "user": "userdId_45", "attemptID": 660, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-30.137411", "embeddingY": "2.1130605"},{"extension": "py", "date": "2020-06-02 22:33:10", "correct": "0", "upload": "def semestreValide(ue1,ue2):\n  moyenne=(ue1+ue2)/2\n  if ue1>10 and ue2>10:\n    return True\n  elif ue1>ue2 and moyenne>10:\n    return True\n  else:\n    return False", "user": "userdId_12", "attemptID": 661, "exercise": "70ae7ad6cf504e0fa8cedebd8e8a825f", "exercise_name": "semestreValide", "embeddingX": "68.092415", "embeddingY": "0.6180432"},{"extension": "py", "date": "2020-04-06 15:06:19", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  i=0\n  for i in range(len(nombre)):\n    if chiffre==nombre[i]:\n      cpt=cpt+1\n    i=i+1\n  return cpt", "user": "userdId_3", "attemptID": 662, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-35.987034", "embeddingY": "-17.40199"},{"extension": "py", "date": "2020-03-24 05:00:00", "correct": "0", "upload": "def quatrePlus100(liste):\n  i=0\n  res=[]\n  while i<len(liste) and i<5:\n    if liste[i]>100:\n      res.append(liste[i])\n    i=i+1\n  return res\n", "user": "userdId_13", "attemptID": 663, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-25.605186", "embeddingY": "39.90756"},{"extension": "py", "date": "2020-03-09 05:22:46", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  res=0\n  for elem in jour1,mois1,annee1,jour2,mois2,annee2 :\n    if (jour1,mois1,annee1<jour2,mois2,annee2):\n      res=-1\n    elif (jour1,mois1,annee1==jour2,mois2,annee2):\n      res=0\n    else:\n      res=1\n  return res", "user": "userdId_23", "attemptID": 664, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "-22.328611", "embeddingY": "-8.884519"},{"extension": "py", "date": "2020-04-16 08:48:13", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n  prec=0\n  res=0\n  i=0\n  while i<len(l) and prec<n:\n    if l[i]==x:\n      prec=prec+1\n    i=i+1\n    if prec==n:\n      return i\n    elif prec<n:\n      return None", "user": "userdId_28", "attemptID": 665, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-5.7245765", "embeddingY": "76.680725"},{"extension": "py", "date": "2020-04-12 10:08:02", "correct": "0", "upload": "def phrasePalindrome(phrase):\n    if len(phrase)==0:\n      res=True\n    else:\n      res=True\n      i=0\n      x=''\n      while i<len(phrase)//2 and res:\n        if phrase[i]!=phrase[-(i+1)] or phrase[i]==x:\n          res=False\n        i+=1\n    return res", "user": "userdId_11", "attemptID": 666, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "31.556404", "embeddingY": "31.10133"},{"extension": "py", "date": "2020-03-02 02:54:56", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1<=annee2 or mois1<=mois2 and jour1<jour2:\n    return -1\n  elif annee1==annee2 or mois1==mois2 and jour1==jour2:\n    return 0\n  else:\n    return 1\n  \ncompareDates(10,1,2020,14,2,2020)\ncompareDates(14,2,2020,11,2,2020)\ncompareDates(10,1,2020,10,1,2020)", "user": "userdId_1", "attemptID": 667, "exercise": "af7c1467ef9f7684d9ff58734067ae98", "exercise_name": "compareDates", "embeddingX": "86.97752", "embeddingY": "-11.695432"},{"extension": "py", "date": "2020-03-16 04:30:17", "correct": "1", "upload": "def nbOccurrencesLettre(lettre,mot):\n    if lettre=='' or mot=='':\n      cpt=0\n    else:\n      cpt=0\n      for c in mot:\n        if lettre==c:\n          cpt=cpt+1\n    return cpt", "user": "userdId_18", "attemptID": 668, "exercise": "2864c9e5861229d2ff32570f6bc944fb", "exercise_name": "nbOccurrencesLettre", "embeddingX": "-13.191382", "embeddingY": "-27.222391"},{"extension": "py", "date": "2020-05-04 19:57:15", "correct": "1", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  res=True\n  if fin1<debut2 or debut1>fin2:\n    res=False\n  return res", "user": "userdId_8", "attemptID": 669, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "62.22588", "embeddingY": "-20.547699"},{"extension": "py", "date": "2020-03-23 01:59:19", "correct": "0", "upload": "def nbVoyelles(mot):\n    res=0\n    for i in range (len(mot)) :\n      if mot[i] =='a,e,i,o,u,y' :\n        res=res+1\n    return res", "user": "userdId_24", "attemptID": 670, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-8.88872", "embeddingY": "-52.061775"},{"extension": "py", "date": "2020-03-06 00:58:17", "correct": "1", "upload": "def ecart(liste):\n\tif len(liste) == 0:\n\t\tres = None\n\telse:\n\t\tma = liste[0]\n\t\tmi = liste[0]\n\t\tfor i in range(len(liste)):\n\t\t\tif liste[i] > ma and liste[i] > mi:\n\t\t\t\tma = liste[i]\n\t\t\telif liste[i] < ma and liste[i]< mi:\n\t\t\t\tmi = liste[i]\n\t\tres = ma - mi\n\treturn res", "user": "userdId_29", "attemptID": 671, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "-2.1685076", "embeddingY": "-84.9901"},{"extension": "py", "date": "2020-03-19 06:01:26", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1<annee2:\n    res=-1\n  elif date1==None or date2==None:\n    res=None\n  elif jour1==jour2 and mois1==mois2 and annee1==annee2:\n      res=0\n  else:\n    res=1\n  return res", "user": "userdId_34", "attemptID": 672, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "73.92677", "embeddingY": "-34.815495"},{"extension": "py", "date": "2020-03-31 04:29:48", "correct": "1", "upload": "def listeSymetrique(l):\n  if l==[]:\n    ok=True\n  else:\n    ok=True\n    i=0\n    while i<len(l) and ok:\n      if l[i]!=l[-i-1]:\n        ok=False\n      i+=1\n  return ok", "user": "userdId_18", "attemptID": 673, "exercise": "8eb27aeda471a467e2223abebeca886e", "exercise_name": "listeSymetrique", "embeddingX": "23.967934", "embeddingY": "41.520897"},{"extension": "py", "date": "2020-04-06 05:11:30", "correct": "1", "upload": "def produitScalaire(vec1,vec2):\n  res=0\n  for i in range(len(vec1)):\n    aux=vec1[i]*vec2[i]\n    res=res+aux\n  return res", "user": "userdId_27", "attemptID": 674, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-49.80816", "embeddingY": "-35.841038"},{"extension": "py", "date": "2020-04-03 00:29:23", "correct": "1", "upload": "def doubleChiffre(nombre):\n  res=False\n  l=[]\n  chiffre=0\n  i=1\n  while nombre!=0 :\n    chiffre=nombre%10\n    l.append(chiffre)\n    nombre=nombre//10\n  \n  while i<len(l) :\n    if l[i-1]==l[i] :\n      res=True\n    i+=1\n  \n  return res", "user": "userdId_15", "attemptID": 675, "exercise": "c83ea6acd3e9f6f5543e87d515e8a44a", "exercise_name": "doubleChiffre", "embeddingX": "32.253853", "embeddingY": "38.1904"},{"extension": "py", "date": "2020-03-13 00:45:25", "correct": "0", "upload": "def sommeNPremiersEntiers(n):\n  if n<0:\n    return 0\n  else:\n    res=0\n    for i in range (len(n)):\n      res=res+n[i]\n  return res\n      \n    ", "user": "userdId_1", "attemptID": 676, "exercise": "c315a540cf0bfb0182dc114c6f0eafd1", "exercise_name": "sommeNPremiersEntiers", "embeddingX": "32.089737", "embeddingY": "-68.2533"},{"extension": "py", "date": "2020-04-08 05:56:50", "correct": "1", "upload": "def sousChaine(s1,s2):\n  i=0\n  j=0\n  while i<len(s2) and j<len(s1):\n    if s1[j]==s2[i]:\n      j+=1\n    elif j>0:\n      i-=1\n      j=0\n    i+=1\n  return j==len(s1)\n", "user": "userdId_32", "attemptID": 677, "exercise": "a7cdd094daa2f0bfccc7a4ec419f7243", "exercise_name": "sousChaine", "embeddingX": "-19.73773", "embeddingY": "66.05602"},{"extension": "py", "date": "2020-03-01 07:58:51", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  \n  result:[]\n    \n  if annee1>annee2:\n    result.append(1)\n    print (result)\n  if annee1<annee2:\n    result.append(-1)\n  if annee1==annee2:\n    if mois1>mois2:\n      result.append(1)\n      print (result)\n    if mois1<mois2:\n      result.append(-1)\n      print (result)\n    if mois1==mois2:\n      if jour1>jour2:\n        result.append(1)\n        print (result)\n      if jour1<jour2:\n        result.append(-1)\n        print(result)\n      else:\n        result.append(0)\n        print (result)\n  return None", "user": "userdId_13", "attemptID": 678, "exercise": "af7c1467ef9f7684d9ff58734067ae98", "exercise_name": "compareDates", "embeddingX": "86.4055", "embeddingY": "-22.275358"},{"extension": "py", "date": "2020-03-23 00:28:24", "correct": "1", "upload": "def ecart(liste):\n  min=0\n  max=0\n  if liste==[]:\n    res=None\n  elif len(liste)==1:\n    res=0\n  else:\n    for elem in liste:\n      if elem<=min:\n        min=elem\n      elif elem>=max:\n        max=elem\n    res=max-min\n  return res", "user": "userdId_26", "attemptID": 679, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "11.033093", "embeddingY": "-81.83206"},{"extension": "py", "date": "2020-03-03 05:21:36", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=0\n    for elem in (liste):\n      if res<elem:\n        res=elem\n  return res", "user": "userdId_8", "attemptID": 680, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "30.995111", "embeddingY": "-62.276684"},{"extension": "py", "date": "2020-04-13 21:21:54", "correct": "0", "upload": "def meilleurClassementJoueur(scores,joueurs,nom):\n  cpt = 0\n  while cpt<len(joueurs):\n    if joueurs[cpt]==nom:\n      return cpt\n    cpt+=1\n  return -1", "user": "userdId_6", "attemptID": 681, "exercise": "be6ce0a06c5d396190024c7c681da95d", "exercise_name": "meilleurClassementJoueur", "embeddingX": "-12.157745", "embeddingY": "67.7784"},{"extension": "py", "date": "2020-04-12 08:33:18", "correct": "0", "upload": "def suiteAriGeo(liste):\n  i=0\n  while i<len(liste)-1:\n    a=liste[0]\n    b=liste[0]\n    if liste[i+1]==liste[i]+(liste[1]-liste[0]):\n      b=liste[1]-liste[0]\n    if liste[0]!=0:                        \n      if liste[i+1]==liste[i]*liste[1]/liste[0]:\n        a=liste[1]/liste[0]\n        b=0\n    i=i+1\n  ok=True\n  i=0\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=a*liste[i]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 682, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "33.81483", "embeddingY": "81.12694"},{"extension": "py", "date": "2020-03-17 05:18:58", "correct": "0", "upload": "def permutationChaine(s):\n  res=''\n  for i in range(0,len(s)-1,2):\n    if s[i]%2!=0:\n      res=res+s(-1)\n    return res\n    ", "user": "userdId_9", "attemptID": 683, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-37.25679", "embeddingY": "-63.607567"},{"extension": "py", "date": "2020-03-03 05:29:08", "correct": "1", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=liste[0]\n    for i in range(len(liste)):\n      if liste[i]>res:\n        res=liste[i]\n  return res", "user": "userdId_32", "attemptID": 684, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "0.77080256", "embeddingY": "-62.971912"},{"extension": "py", "date": "2020-03-30 23:50:03", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n  cpt=0\n  trouve=False\n  i=0\n  res=None\n  while i<len(l) and trouve:\n    if l[i]==x:\n      cpt=cpt+1\n    if cpt==n:\n      trouve=True\n      res=i\n    i=i+1\n  return res\n\n      \n    ", "user": "userdId_28", "attemptID": 685, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "0.7188594", "embeddingY": "47.57821"},{"extension": "py", "date": "2020-04-08 00:48:29", "correct": "0", "upload": "def suiteAriGeo(liste):\n  ok=True\n  i=0\n  j=0\n  R=0\n  if len(liste)<=2 :\n    ok=True\n  else :\n    for elem in (liste) :\n      if liste[0]==0 :\n        Q=1\n      else :\n        Q=(liste[1]/liste[0])\n        R=(liste[1]-liste[0])\n    while j<(len(liste)-1) :\n      if liste[j+1]==liste[j]+R :\n        Q=1\n      elif liste[j+1]==Q*liste[j] :\n        R=0\n      j+=1\n      \n    while i<(len(liste)-1) and ok :\n      if liste[i+1]!=Q*liste[i]+R :\n        ok=False\n      i+=1\n  return ok", "user": "userdId_15", "attemptID": 686, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "44.265556", "embeddingY": "56.27373"},{"extension": "py", "date": "2020-03-15 00:57:56", "correct": "1", "upload": "def jourNuit(heure):\n  if heure<0 or heure>24:\n    res=\"l'heure saisie est invalide\"\n  else:#l'heure saisie est valide\n    if heure<5 or heure>=21:\n      res=\"on est la nuit \"\n    elif heure>=17:\n      res=\"on est le soir \"\n    elif heure>=12:\n      res=\"on est l'apr\u00e8s-midi \"\n    else:\n      res=\"on est le matin \"\n    if heure<6 or heure>=18:\n      res=res+\"et il fait nuit\"\n    else:\n      res=res+\"et il fait jour\"\n  return res", "user": "userdId_8", "attemptID": 687, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "73.95656", "embeddingY": "15.620222"},{"extension": "py", "date": "2020-03-17 06:24:34", "correct": "0", "upload": "def maximum(liste):\n    if len(liste)==0:\n      res=0\n    else:\n      res=liste[0]\n    for elem in liste:\n        res=liste\n    return res", "user": "userdId_22", "attemptID": 688, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "7.0308895", "embeddingY": "-39.398457"},{"extension": "py", "date": "2020-03-24 03:59:35", "correct": "0", "upload": "def compare(chaine1,chaine2):\n  while i<len(chaine1) and i<len(chaine2) and res==0:\n    if chaine1[i]>chaine2[i]:\n      res=-1\n    elif chaine1[i]<chaine2[i]:\n      res=1\n    i=i+1\n  return res", "user": "userdId_26", "attemptID": 689, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-10.806555", "embeddingY": "42.393936"},{"extension": "py", "date": "2020-04-12 06:32:08", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  if liste==[]:\n    res=True\n  c=[]\n  res=False\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n    c=liste[:0]+c\n  if c==liste:\n    res=True\n    return res", "user": "userdId_8", "attemptID": 690, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-78.407646", "embeddingY": "7.994357"},{"extension": "py", "date": "2020-03-31 06:57:46", "correct": "0", "upload": "def doubleChiffre(nombre):\n  res=False\n  Prec=None\n  while nombre!=0 and not res:\n    chiffre=nombre%10\n    nombre=nombre//10\n    if chiffre==prec:\n      res=True\n    Prec=chiffre\n  return trouve", "user": "userdId_9", "attemptID": 691, "exercise": "c83ea6acd3e9f6f5543e87d515e8a44a", "exercise_name": "doubleChiffre", "embeddingX": "9.97646", "embeddingY": "21.241661"},{"extension": "py", "date": "2020-04-07 02:08:23", "correct": "0", "upload": "def jourNuit(heure):\n  res=''\n  if 6<=heure<=18 and 5<=heure<=12:\n    res=\"on est le matin et il fait jour\"\n  if 6<=heure<=18 and 12<heure<17:\n    res=\"on est l'apres-midi et il fait jour\"\n  if 17<heure<=18 and 6<=heure<=18:\n    res=\"on est le soir et il fait jour\"\n  if 18<=heure<=5 and 17<=heure<=5:\n    res=\"on est la nuit et il fait nuit\"\n  return res", "user": "userdId_16", "attemptID": 692, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "73.644585", "embeddingY": "24.287138"},{"extension": "py", "date": "2020-03-13 00:36:39", "correct": "1", "upload": "def sommeNbPairs(liste):\n  res=0\n  if liste==[]:\n    res=res\n  else:\n    for n in liste:\n      if n%2==0:\n        res=res+n\n  return res\n        \n        \n      ", "user": "userdId_2", "attemptID": 693, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "30.608316", "embeddingY": "-18.217833"},{"extension": "py", "date": "2020-04-12 10:58:27", "correct": "0", "upload": "def motPalindrome(mot):\n    if len(mot)==0:\n      res=True\n    else:\n      res=True\n      i=0\n      while i<len(mot)//2 and res:\n        if mot[i]!=mot[-(i+1)]:\n          res=False\n    return res", "user": "userdId_11", "attemptID": 694, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "23.25408", "embeddingY": "34.426197"},{"extension": "py", "date": "2020-03-09 08:13:04", "correct": "0", "upload": "def maximum(liste):\n    if len(liste)==0:\n      max=None\n    else:\n      max=liste[0]\n      for i in range(liste):\n        if liste[i]>max:\n          max=liste[i]\n    return max\n  ", "user": "userdId_11", "attemptID": 695, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "12.758212", "embeddingY": "-69.51377"},{"extension": "py", "date": "2020-04-17 01:03:38", "correct": "0", "upload": "def nbOccurrencesJoueur(joueurs,nom):\n  cpt=0\n  for i in range(len(joueurs)):\n    if joueur[i]==nom:\n      cpt=cpt+1\n    return cpt", "user": "userdId_5", "attemptID": 696, "exercise": "00ee5faf82e54951fbdb2ba2656f7ae7", "exercise_name": "nbOccurrencesJoueur", "embeddingX": "-17.894194", "embeddingY": "-36.55483"},{"extension": "py", "date": "2020-04-13 22:31:21", "correct": "0", "upload": "def nextConway(s):\n  res=''\n  prec=None\n  cpt=0\n  for c in s:\n    if c==prec:\n      cpt+=1\n    else:\n      if prec:\n        res+=str(cpt)+str(prec)\n      cpt+=1\n    prec=c\n  if prec:\n    res+=str(cpt)+str(prec)\n  return res", "user": "userdId_8", "attemptID": 697, "exercise": "a580c32690609356dae4401b3c89a3b8", "exercise_name": "nextConway", "embeddingX": "6.9768877", "embeddingY": "-6.445307"},{"extension": "py", "date": "2020-04-05 07:09:17", "correct": "0", "upload": "def nbSyllabes(mot):\n    cpt=0\n    if mot[0] in 'aeiouy':\n      cpt+=1\n    for i in range(1,len(mot)):\n      if mot[i] in 'aeiouy' and mot[i-1] not in 'aeiouy':\n        cpt+=1\n    if mot[-1]=='e':\n      cpt-=1\n    if cpt==0:\n      cpt+=1\n    if mot=='':\n      cpt=0\n    return cpt", "user": "userdId_18", "attemptID": 698, "exercise": "1c86bec0f4df503e23db53994f3d2991", "exercise_name": "nbSyllabes", "embeddingX": "-24.631264", "embeddingY": "-69.86593"},{"extension": "py", "date": "2020-04-05 10:49:58", "correct": "1", "upload": "def verifSuiteAriGeo(liste,a,b):\n    res=True\n    n=1\n    while n<len(liste) and res:\n        if liste[n]!=liste[n-1]*a+b:\n            res=False\n        n+=1\n    return res\n", "user": "userdId_4", "attemptID": 699, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-75.2635", "embeddingY": "13.857639"},{"extension": "py", "date": "2020-04-06 02:09:20", "correct": "0", "upload": "def produitScalaire(vec1,vec2):\n  if vec1 == []:\n    coordvec1 = [0,0]\n  if vec2 == []:\n    coordvec2 = [0,0]\n  else :\n    coordvec1 = [vec1[0]-vec1[2],vec1[1]-vec1[3]]\n    coordvec2 = [vec2[0]-vec2[2],vec2[1]-vec2[3]]\n  res = coordvec1[0]*coordvec2[0]+coordvec1[1]*coordvec2[1]\n  return res", "user": "userdId_17", "attemptID": 700, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-22.032303", "embeddingY": "-16.541842"},{"extension": "py", "date": "2020-03-02 23:56:45", "correct": "1", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n    if fin2 <= fin1 and fin2 >= debut1:\n        return True\n    elif fin1 <= fin2 and fin1 >= debut2:\n        return True\n    else:\n        return False", "user": "userdId_42", "attemptID": 701, "exercise": "6fd66bb2393fbf3809f1c6d04f3831f7", "exercise_name": "rendezVous", "embeddingX": "55.893696", "embeddingY": "-26.11049"},{"extension": "py", "date": "2020-03-31 04:23:17", "correct": "1", "upload": "def listeSymetrique(l):\n  res=True\n  i=0\n  j=-1\n  while i<len(l) and j<len(l):\n    if l[i]==l[j]:\n      i=i+1\n      j=j-1\n    else:\n      res=False\n      i=i+1\n      j=j+1\n  return res", "user": "userdId_7", "attemptID": 702, "exercise": "8eb27aeda471a467e2223abebeca886e", "exercise_name": "listeSymetrique", "embeddingX": "22.808256", "embeddingY": "56.636017"},{"extension": "py", "date": "2020-04-12 09:38:14", "correct": "0", "upload": "def suiteAriGeo(liste):\n  i=0\n  while i<len(liste)-1:\n    a=liste[0]\n    b=liste[0]\n    if liste[i]==liste-[i+1]:\n      a=-1\n      b=0\n    if liste[i+1]==liste[i]+(liste[1]-liste[0]):\n      b=liste[1]-liste[0]\n    if liste[0]!=0:                        \n      if liste[i+1]==liste[i]*liste[1]/liste[0]:\n        a=liste[1]/liste[0]\n        b=0\n    if liste[i+1]==liste[i]*(liste[1]-liste[0])+(liste[i]-(liste[i-1]*(liste[1]-liste[0]))):\n      a=liste[1]-liste[0]\n      b=liste[i]-(liste[i-1]*a)\n    i=i+1\n  ok=True\n  i=0\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=a*liste[i]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 703, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "12.103996", "embeddingY": "60.594387"},{"extension": "py", "date": "2020-04-07 07:15:48", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=True\n  i=1\n  while i<len(liste):\n    if liste[i]!=a*liste[i-1]+b:\n      res=False\n    i+=1\n  return res\ndef suiteAriGeo(liste):\n  i=1\n  res=True\n  if len(liste)>3:\n    ecart1=liste[1]-liste[0]\n    ecart2=liste[2]-liste[1]\n    if ecart1>0:\n      a=ecart2/ecart1\n      b=liste[1]-a*liste[0]\n    while i<len(liste):\n      if verifSuiteAriGeo(liste,a,b)!=True:\n        res=False\n      i+=1 \n  return res", "user": "userdId_27", "attemptID": 704, "exercise": "4c9665daf155b115fe13218141fa1aff", "exercise_name": "suiteAriGeo", "embeddingX": "16.201471", "embeddingY": "76.985054"},{"extension": "py", "date": "2020-03-17 06:05:18", "correct": "0", "upload": "def distribution(liste,n):\n    res=[0]*n\n    for i in range(len(liste)):\n        if liste[i]==0:\n            res[0]=res[0]+1\n        elif liste[i]==1:\n            res[1]=res[1]+1\n        elif liste[i]==2:\n            res[2]=res[2]+1\n        else:\n          res[3]=res[3]+1\n    return res\n\n\n  \n  \n", "user": "userdId_28", "attemptID": 705, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-16.836132", "embeddingY": "-58.20528"},{"extension": "py", "date": "2020-03-03 05:45:03", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None \n  else :\n    res=0\n    for i in range (1,len(liste)):\n      if liste [i]>res:\n        res=liste [i]\n  return res", "user": "userdId_25", "attemptID": 706, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-0.07452859", "embeddingY": "-60.315002"},{"extension": "py", "date": "2020-05-04 22:11:12", "correct": "0", "upload": "def ecart(liste):\n  if liste==[]:\n    res=None\n  else:\n    maxi=liste[0]\n    mini=liste[0]\n    for i in range(1,len(liste)):\n      if liste[i]<mini:\n        mini=liste[i]\n      elif liste[i]>maxi:\n        maxi=liste[i]\n  return res", "user": "userdId_8", "attemptID": 707, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "1.0447104", "embeddingY": "-84.36645"},{"extension": "py", "date": "2020-03-05 22:06:55", "correct": "0", "upload": "def maximum(l):\n  res=l[0]\n  for i in range(1,len(l)):\n    if i==None:\n      res=None\n    else:\n      if res<i:\n        res=i\n  return res", "user": "userdId_48", "attemptID": 708, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "27.205297", "embeddingY": "-66.87181"},{"extension": "py", "date": "2020-03-05 22:14:29", "correct": "0", "upload": "def maximum(liste):\n    max=0\n    for i in range(0,len(liste)):\n      if liste[i] > max:\n        max = liste[i]\n    return max", "user": "userdId_29", "attemptID": 709, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "10.981867", "embeddingY": "-72.55393"},{"extension": "py", "date": "2020-04-12 04:40:41", "correct": "0", "upload": "def elemGeo(n,u0,q):\n  if n==0:\n    res=u0\n  else:\n    res=q*(u0*q)\n  return res", "user": "userdId_16", "attemptID": 710, "exercise": "d7c83a7fb9b49e28804e55955ad06968", "exercise_name": "elemGeo", "embeddingX": "41.241528", "embeddingY": "-1.8107449"},{"extension": "py", "date": "2020-03-13 00:49:28", "correct": "1", "upload": "def doubleLettre(mot):\n  res=False\n  l1=''\n  for l2 in mot:\n    if l1==l2:\n      res=True\n    l1=l2\n  \n  return res", "user": "userdId_15", "attemptID": 711, "exercise": "00da9cf1fa2b468d915724499459ed8f", "exercise_name": "doubleLettre", "embeddingX": "16.95967", "embeddingY": "-5.9602127"},{"extension": "py", "date": "2020-03-16 04:21:30", "correct": "1", "upload": "def moyenne(liste):\n    if liste==[]:\n      res=None\n    else:\n      res=0\n      cpt=0\n      for i in range(len(liste)):\n        res=res+liste[i]\n        cpt=cpt+1\n      res=res/cpt\n    return res", "user": "userdId_18", "attemptID": 712, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-8.537892", "embeddingY": "-7.5716724"},{"extension": "py", "date": "2020-04-03 00:03:50", "correct": "0", "upload": "def nbChiffres(nombre):\n  res=1\n  while nombre!=0:\n    nombre=nombre//10\n    res=res+1\n  return res  ", "user": "userdId_12", "attemptID": 713, "exercise": "3dcf332c003a1f3bf15df22ee17884a3", "exercise_name": "nbChiffres", "embeddingX": "32.477283", "embeddingY": "10.8205"},{"extension": "py", "date": "2020-03-17 05:50:51", "correct": "0", "upload": "def permutationListe(liste,permutation):\n  res=0\n  for elem in liste:\n    res=res+elem\n  return res", "user": "userdId_25", "attemptID": 714, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-32.32752", "embeddingY": "4.600741"},{"extension": "py", "date": "2020-03-23 00:48:23", "correct": "1", "upload": "def ecart(liste):\n  if len(liste)==0:\n    res=None\n  elif len(liste)==1:\n      res=0\n  else:\n      max=liste[0] \n      min=liste[0] \n      for i in range (len(liste)):\n        if max<liste[i]:\n          max=liste[i]\n        elif min>liste[i]:\n          min=liste[i]\n      res=max-min\n  return res", "user": "userdId_16", "attemptID": 715, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "13.040907", "embeddingY": "-83.83353"},{"extension": "py", "date": "2020-04-07 02:11:33", "correct": "1", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res = True\n  i = 0\n  while res and i < len(liste)-1 :\n    if liste[i+1] != (a*liste[i]+b) :\n      res = False\n    i = i + 1\n  return res", "user": "userdId_17", "attemptID": 716, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-77.98097", "embeddingY": "16.207224"},{"extension": "py", "date": "2020-04-10 00:19:57", "correct": "0", "upload": "def suiteAriGeo(liste):\n  i=0\n  while i<len(liste):\n    a=liste[1]-liste[0]\n    b=liste[1]-liste[0]\n    if liste[i+1]==liste[i]*a:\n        b=0 and a==liste[1]/liste[0]\n    if liste[i+1]==liste[i]+b:\n      a=1 and b==liste[1]-liste[0]\n    i=i+1\n  \ndef verifSuiteAriGeo(liste,a,b):\n  ok=True\n  i=0\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=a*liste[i]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 717, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "30.65598", "embeddingY": "78.754906"},{"extension": "py", "date": "2020-03-31 04:30:10", "correct": "1", "upload": "def stockerChiffres(nombre):\n  nombre = str(nombre)\n  i = 0\n  res = []\n  while i < len(nombre):\n    res = [int(nombre[i])] + res\n    i = i + 1 \n  return res", "user": "userdId_17", "attemptID": 718, "exercise": "49a87f644f84a443327fb4315b47f249", "exercise_name": "stockerChiffres", "embeddingX": "-40.59427", "embeddingY": "42.335323"},{"extension": "py", "date": "2020-04-10 00:51:50", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  ok=False\n  i=0\n  j=0\n  while i<len(phrase)//2 and j<len(phrase)//2:\n    if phrase[i]==\" \":\n      i=i+1\n    elif phrase[-j]==\" \":\n      j=j-1\n    elif phrase[i]!=phrase[-j-1]:\n      ok=False\n    else:\n      ok=True\n    i=i+1\n    j=j-1\n  if phrase==\"\":\n    ok=True\n  return ok", "user": "userdId_3", "attemptID": 719, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "43.302437", "embeddingY": "43.410706"},{"extension": "py", "date": "2020-03-22 12:45:09", "correct": "0", "upload": "def maximum(liste):\n  max=l[0]\n  for i in range(0,len(liste)):\n    if max<i:\n      max=i\n  return max", "user": "userdId_21", "attemptID": 720, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "28.370613", "embeddingY": "-73.623344"},{"extension": "py", "date": "2020-03-17 04:50:18", "correct": "1", "upload": "def reconstruireChainePartielle(s,n):\n  res=''\n  for i in range(0,len(s),n):\n    res=res+s[i]\n  return res", "user": "userdId_12", "attemptID": 721, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-60.919212", "embeddingY": "-40.848335"},{"extension": "py", "date": "2020-04-12 06:44:20", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  if liste==[]:\n    res=True\n  c=[]\n  f=[]\n  res=False\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n    e=liste[0]\n    f.append(e)\n    f.extend(c)\n  if f==liste:\n    res=True\n  return res", "user": "userdId_8", "attemptID": 722, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-77.00994", "embeddingY": "12.172598"},{"extension": "py", "date": "2020-03-05 23:42:38", "correct": "0", "upload": "def maximum(liste):\n    res = liste[0]\n    for i in range(1,len(liste)):\n      if liste[i] > res :\n        res = liste[i]\n    if len(liste) == 0:\n      res = None\n    return res", "user": "userdId_29", "attemptID": 723, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-2.31882", "embeddingY": "-62.188145"},{"extension": "py", "date": "2020-03-31 03:27:56", "correct": "1", "upload": "def fusion(liste1,liste2):\n  res=[]\n  i=0\n  j=0\n  while i<len(liste1) and j<len(liste2):\n    if liste1[i]<liste2[j]:\n      res.append(liste1[i])\n      i=i+1\n    else:\n      res.append(liste2[j])\n      j=j+1\n  if i<len(liste1):\n    while i<len(liste1):\n      res.append(liste1[i])\n      i=i+1\n  elif j<len(liste2):\n    while j<len(liste2):\n      res.append(liste2[j])\n      j=j+1\n  return res", "user": "userdId_12", "attemptID": 724, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-39.607616", "embeddingY": "49.268116"},{"extension": "py", "date": "2020-03-06 00:28:43", "correct": "0", "upload": "def maximum(liste):\n  res=liste[0]\n  for elem in liste:\n     if res<elem:\n        res=elem\n  return res", "user": "userdId_23", "attemptID": 725, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "42.11597", "embeddingY": "-57.69952"},{"extension": "py", "date": "2020-04-03 00:39:11", "correct": "0", "upload": "def stockerChiffres(nombre):\n  i=0\n  res=[]\n  if nombre==0:\n    res=[0]\n  while nombre!=0:\n    nombre=nombre%10\n    res.append(nombre%10)\n    i+=1\n  return res", "user": "userdId_1", "attemptID": 726, "exercise": "49a87f644f84a443327fb4315b47f249", "exercise_name": "stockerChiffres", "embeddingX": "45.649483", "embeddingY": "16.363169"},{"extension": "py", "date": "2020-03-12 06:53:43", "correct": "0", "upload": "def maximum(liste):\n  res=liste[0]\n  for i in range(i):\n     if res<i:\n      return i\n  else:\n    return res", "user": "userdId_20", "attemptID": 727, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-49.41994", "embeddingY": "-18.445887"},{"extension": "py", "date": "2020-05-04 21:51:19", "correct": "1", "upload": "def minimum(liste):\n  if liste==[]:\n    res=None\n  else:\n    res=liste[0]\n    for i in range(1,len(liste)):\n      if liste[i]<res:\n        res=liste[i]\n  return res\n", "user": "userdId_26", "attemptID": 728, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "25.55746", "embeddingY": "-71.02985"},{"extension": "py", "date": "2020-03-04 00:16:20", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if fin>=debut2 and debut1<fin2:\n    return True\n  else:\n    return False", "user": "userdId_32", "attemptID": 729, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "50.658886", "embeddingY": "-28.81772"},{"extension": "py", "date": "2020-03-17 06:24:24", "correct": "0", "upload": "def distribution(liste,n):\n  res=[0]*n+1\n  for i in range(len(liste)):\n    res=liste[i]+1\n  return res", "user": "userdId_23", "attemptID": 730, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-57.17327", "embeddingY": "-5.7441535"},{"extension": "py", "date": "2020-03-13 00:51:47", "correct": "0", "upload": "def sommeNPremiersEntiers(n):\n  liste=(0,n)\n  somme=0\n  for i in liste:\n    somme=somme+i\n  return somme", "user": "userdId_13", "attemptID": 731, "exercise": "c315a540cf0bfb0182dc114c6f0eafd1", "exercise_name": "sommeNPremiersEntiers", "embeddingX": "-29.901579", "embeddingY": "-8.608542"},{"extension": "py", "date": "2020-03-10 04:22:15", "correct": "1", "upload": "def sommeNPremiersEntiers(n):\n  res=0\n  for x in range(1,n+1):\n    res=res+x\n  return res", "user": "userdId_16", "attemptID": 732, "exercise": "c315a540cf0bfb0182dc114c6f0eafd1", "exercise_name": "sommeNPremiersEntiers", "embeddingX": "-19.02691", "embeddingY": "12.951042"},{"extension": "py", "date": "2020-06-02 22:52:26", "correct": "1", "upload": "def nbVoyelles(mot):\n  cpt=0\n  for lettre in mot:\n    if lettre in 'aeiouy':\n      cpt+=1\n  return cpt", "user": "userdId_12", "attemptID": 733, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "12.6320505", "embeddingY": "-24.775131"},{"extension": "py", "date": "2020-03-31 04:06:52", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n  cpt=0\n  i=0\n  while i<len(l) and i<n:\n    if l[i]==x:\n      cpt+=1\n    i+=1\n  if cpt!=n:\n    res=None\n  else:\n    res=cpt\n  return res\n", "user": "userdId_13", "attemptID": 734, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-8.85602", "embeddingY": "74.956474"},{"extension": "py", "date": "2020-03-31 00:34:52", "correct": "0", "upload": "def listeSymetrique(l):\n    trouve=True\n    i=0\n    j=-1\n    while i<len(l) and j<=-len(l) and trouve==True:\n      if l(i)!=l(j):\n        trouve=False\n      else:\n        trouve=True\n      i=i+1\n      j=j-1\n    return trouve\n  \n      ", "user": "userdId_28", "attemptID": 735, "exercise": "8eb27aeda471a467e2223abebeca886e", "exercise_name": "listeSymetrique", "embeddingX": "5.282467", "embeddingY": "44.593243"},{"extension": "py", "date": "2020-03-06 00:29:12", "correct": "0", "upload": "def ecart(liste):\n    if liste==[]:\n      return None\n    elif len(liste)==1:\n      return 0\n    else:\n      res=liste[0]\n      min=0\n      for i in range(1,len(liste)):\n        if res>liste[i]:\n          min=liste[i]\n      max=0\n      for i in range(1,len(liste)):\n        if res<liste[i]:\n          max=liste[i]\n      ecart=max-min\n      return ecart\n          \n      \n      \n      ", "user": "userdId_2", "attemptID": 736, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "10.130373", "embeddingY": "-84.63677"},{"extension": "py", "date": "2020-03-24 06:41:30", "correct": "0", "upload": "def fusion(liste1,liste2):\n  res=[]\n  i=0\n  while i<len(liste1)+len(liste2) and res==len(liste1)+len(liste2):\n    if liste1[i]>liste2[i]:\n      res=res+[liste2[i]]\n    elif liste1[i]==liste2[i]:\n      res=res+[liste1[i]]+[liste2[i]]\n    else:\n      res=res+[liste1[i]]\n    i=i+1\n  return res", "user": "userdId_26", "attemptID": 737, "exercise": "6613efb6c873b142dc2b6040c14eb616", "exercise_name": "fusion", "embeddingX": "-20.35704", "embeddingY": "51.157852"},{"extension": "py", "date": "2020-04-05 23:04:41", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  liste=[]\n  chif=0\n  res=0\n  i=0\n  if nombre==0 :\n    res.append(nombre)\n  else :\n    while nombre!=0 :\n      chiffre=nombre%10\n      liste.append(chif)\n      nombre=nombre//10\n  \n  while i<len(liste) :\n    if liste[i]==chiffre :\n      res+=1\n    i+=1\n  return res", "user": "userdId_15", "attemptID": 738, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "19.266844", "embeddingY": "18.452745"},{"extension": "py", "date": "2020-03-03 05:15:40", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    for i in range(len(liste)):\n      if liste[i]>res:\n        res=liste[i]\n  return res", "user": "userdId_30", "attemptID": 739, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "5.1516323", "embeddingY": "-62.076283"},{"extension": "py", "date": "2020-04-06 08:30:08", "correct": "0", "upload": "def suiteGeo(liste):\n    if liste==[] or len(liste)==1:\n      ok=True\n    elif 0 in liste:\n      ok=False\n    else:\n      ok=True\n      ctePrec=liste[1]/liste[0]\n      cteAct=None\n      i=2\n      while i<len(liste) and ok:\n        cteAct=liste[i]/liste[i-1]\n        if cteAct!=ctePrec:\n          ok=False\n        ctePrec=cteAct\n        i+=1\n    return ok", "user": "userdId_18", "attemptID": 740, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "41.49763", "embeddingY": "63.51385"},{"extension": "py", "date": "2020-04-08 00:44:42", "correct": "0", "upload": "def elemAri(n,u0,r):\n  i=0\n  res=0\n  while i!=n:\n    res=res+u0+r\n  return res", "user": "userdId_13", "attemptID": 741, "exercise": "f239498950e974e29e01472749d9a09d", "exercise_name": "elemAri", "embeddingX": "-7.158812", "embeddingY": "23.994785"},{"extension": "py", "date": "2020-04-07 04:28:08", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  ok=True\n  i=0\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=a*liste[i-1]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 742, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-73.61548", "embeddingY": "10.213453"},{"extension": "py", "date": "2020-04-07 23:51:32", "correct": "0", "upload": "def suiteGeo(liste):\n  i = 0\n  j = 0\n  raison = None\n  if liste == [] or len(liste) == 1 :\n    res = True\n  else :\n    res = True \n    while raison == None :\n      if liste[j] != 0 :\n         raison = liste[j+1]/liste[j]\n      j = j + 1\n  while res and i < len(liste) - 1 :\n    if liste[i]*raison != liste[i+1]:\n      res = False\n    i = i + 1\n  return res\n", "user": "userdId_17", "attemptID": 743, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "30.71976", "embeddingY": "73.29494"},{"extension": "py", "date": "2020-03-21 06:05:42", "correct": "0", "upload": "def sommeNbPairs(liste):\n  res=0\n  for i in range(len(liste)):\n    if len(liste)%2!=0:\n      res=res+liste[i]\n  return res", "user": "userdId_9", "attemptID": 744, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "-3.094994", "embeddingY": "-47.955563"},{"extension": "py", "date": "2020-03-05 07:04:06", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut1==debut2:\n    res=True\n  else:\n    for debut1 in range(fin2):\n      if fin1>fin2:\n        res=False\n      else:\n        res=true\n     \n      \n  return res\n  ", "user": "userdId_5", "attemptID": 745, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "64.60543", "embeddingY": "-29.014242"},{"extension": "py", "date": "2020-04-06 04:01:04", "correct": "0", "upload": "def suiteGeo(liste):\n    if liste==[] or len(liste)==1:\n      ok=True\n    elif 0 in liste:\n      ok=False\n    else:\n      ok=True\n      i=1\n      while i<len(liste)+1 and ok:\n        cte=liste[i]/liste[i-1]\n        if liste[0]*cte**i!=liste[i+1]:\n          ok=False\n        i+=1\n    return ok", "user": "userdId_18", "attemptID": 746, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "39.685005", "embeddingY": "66.15341"},{"extension": "py", "date": "2020-03-23 01:36:13", "correct": "1", "upload": "def reconstruireChainePartielle(s,n):\n    res=''\n    for i in range(0,len(s),n):\n      res=res+s[i]\n    return res", "user": "userdId_11", "attemptID": 747, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-60.466343", "embeddingY": "-40.377872"},{"extension": "py", "date": "2020-03-12 10:32:58", "correct": "0", "upload": "def maximum(liste):\n  res=liste[0]\n  for i in list(range(i)):\n    if res<list(i):\n      res=list(i)\n  else:\n    if lis(i)<res:\n      res=res\n  return res     ", "user": "userdId_20", "attemptID": 748, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-49.38306", "embeddingY": "-18.568037"},{"extension": "py", "date": "2020-04-17 03:02:51", "correct": "1", "upload": "def somme(liste):\n  res=0\n  for i in liste: \n    res=res+i\n  return res", "user": "userdId_21", "attemptID": 749, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-27.061325", "embeddingY": "2.5140767"},{"extension": "py", "date": "2020-04-13 20:35:51", "correct": "1", "upload": "def compteChiffre(chiffre,nombre):\n  res=0\n  if nombre==0 and res==0:\n    res=1\n  while nombre>0:\n    if nombre%10==chiffre:\n      res+=1\n    nombre=nombre//10\n  return res", "user": "userdId_8", "attemptID": 750, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "23.978199", "embeddingY": "7.6780887"},{"extension": "py", "date": "2020-04-07 03:54:30", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  nb=nombre\n  while nombre!=0:\n    nb=nombre%10\n    nombre=nombre//10\n    if chiffre==nb:\n      cpt=cpt+1\n  if nombre==0:\n    cpt=cpt+1\n  return cpt", "user": "userdId_7", "attemptID": 751, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "15.73601", "embeddingY": "12.407998"},{"extension": "py", "date": "2020-03-17 05:08:56", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  res=''\n  for i in range(debut,debut+longueur):\n    res=res+s[i]\n  return res", "user": "userdId_25", "attemptID": 752, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-80.29174", "embeddingY": "24.838575"},{"extension": "py", "date": "2020-04-13 22:10:43", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  ok=True\n  n=1\n  while n<len(liste) and ok:\n    if liste[n]!=liste[n-1]*a+b:\n      ok=False\n    n+=1\n  return ok\ndef suiteGeo(liste):\n  res=True\n  if len(liste)>1:\n    q=0\n  else:\n    q=liste[1]/liste[0]\n  res=verifSuiteAriGeo(liste,q,0)\n  return res", "user": "userdId_8", "attemptID": 753, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "14.833167", "embeddingY": "74.87449"},{"extension": "py", "date": "2020-03-31 05:36:54", "correct": "1", "upload": "def nbChiffres(nombre):\n  cpt=1\n  while nombre!=0:\n    if nombre//10!=0:\n      cpt+=1\n    nombre=nombre//10\n  return cpt", "user": "userdId_27", "attemptID": 754, "exercise": "3dcf332c003a1f3bf15df22ee17884a3", "exercise_name": "nbChiffres", "embeddingX": "32.8562", "embeddingY": "13.395808"},{"extension": "py", "date": "2020-03-05 23:47:39", "correct": "0", "upload": "def somme(liste):\n  res=0\n  for elem in list:\n    res=res+elem\n  return res", "user": "userdId_20", "attemptID": 755, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-31.56178", "embeddingY": "-13.339299"},{"extension": "py", "date": "2020-03-23 01:14:05", "correct": "0", "upload": "def prononcable(mot):\n  if mot=='':\n    res=True\n    return res\n  else:\n    res=True\n    aux=''\n    for c in mot:\n      if c==aux:\n        res=False\n      aux=c\n  return res", "user": "userdId_27", "attemptID": 756, "exercise": "6318b210c201fba050d60bc0913cb7ef", "exercise_name": "prononcable", "embeddingX": "17.079454", "embeddingY": "-5.263481"},{"extension": "py", "date": "2020-04-16 23:15:52", "correct": "1", "upload": "def meilleurClassementJoueur(scores,joueurs,nom):\n  i=0\n  trouve=False\n  res=0\n  while i<len(joueurs) and not trouve :\n    if nom==joueurs[i] :\n      trouve=True\n    i+=1\n  if trouve==True :\n    res=i\n  else :\n    res=-1\n  return res", "user": "userdId_15", "attemptID": 757, "exercise": "be6ce0a06c5d396190024c7c681da95d", "exercise_name": "meilleurClassementJoueur", "embeddingX": "-4.0197697", "embeddingY": "69.970894"},{"extension": "py", "date": "2020-03-10 04:27:51", "correct": "0", "upload": "def doubleLettre(mot):\n  prec=' '\n  for c in mot:\n    if prec==c:\n      res=True\n    else:\n      res=False\n    prec=c\n  return res", "user": "userdId_18", "attemptID": 758, "exercise": "00da9cf1fa2b468d915724499459ed8f", "exercise_name": "doubleLettre", "embeddingX": "16.971193", "embeddingY": "-6.605645"},{"extension": "py", "date": "2020-03-21 05:53:45", "correct": "0", "upload": "def qualifJO(sexe,record,nbvictoires,champion):\n  if champion==True:\n    res=True\n  elif sexe=='M' and record<12 and nbvictoires>3:\n    res=True\n  else:\n    if sexe=='F' and record<15 and nbvictoires>3:\n          res=True\n    else:\n      res=False\n  return res", "user": "userdId_9", "attemptID": 759, "exercise": "891e7b0ed5fbddb755edc84d479bc1ef", "exercise_name": "qualifJO", "embeddingX": "66.06577", "embeddingY": "-13.045634"},{"extension": "py", "date": "2020-03-12 21:50:43", "correct": "0", "upload": "def maximum(liste):\n  if liste==0:\n    res=None\n  else:\n    res=0\n    for i in range (len,liste):\n      if liste[i]>res:\n        res=liste[i]\n  return res", "user": "userdId_25", "attemptID": 760, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "3.5595763", "embeddingY": "-50.109634"},{"extension": "py", "date": "2020-03-20 00:08:11", "correct": "0", "upload": "def permutationChaine(s):\n  res=\"\"\n  for i in range(0,len(s),2):\n    if s[i+1]==\"\":\n      res=res+s[i+1]+s[i]\n    if len(s)%2!=0:\n      res=res+s[-1]\n  return res\n\n", "user": "userdId_13", "attemptID": 761, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-31.99761", "embeddingY": "-60.342804"},{"extension": "py", "date": "2020-03-31 03:59:09", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n  cpt=0\n  i=0\n  while i<len(l):\n    if l[i]==x:\n      cpt+=1\n      i+=1\n    else:\n      i+=1\n  if cpt!=n:\n    res=None\n  else:\n    res=cpt\n  \n  return res", "user": "userdId_13", "attemptID": 762, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-10.25501", "embeddingY": "71.839966"},{"extension": "py", "date": "2020-03-17 06:20:36", "correct": "0", "upload": "def permutationChaine(s):\n  res=''\n  for i in range(0,len(s)+1,2):\n    res=res+s[n+i]+s[i]\n  if len(s)%2!=0:\n    res=res+s[i]\n  return res", "user": "userdId_25", "attemptID": 763, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-48.54548", "embeddingY": "-47.034798"},{"extension": "py", "date": "2020-03-10 04:12:18", "correct": "1", "upload": "def sommeNbPairs(liste):\n  if len(liste)==0:\n    res=0\n  else:\n    res=0\n    for i in range(len(liste)):\n      if liste[i]%2==0:\n        res=res+liste[i]\n  return res\n      \n      \n  ", "user": "userdId_9", "attemptID": 764, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "-19.648888", "embeddingY": "-57.00613"},{"extension": "py", "date": "2020-03-29 23:59:00", "correct": "0", "upload": "def distribution(liste,n):\n  res=[0]*n\n  for i in liste:\n    res[i]+=1\n  return res", "user": "userdId_6", "attemptID": 765, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-65.272446", "embeddingY": "-12.284354"},{"extension": "py", "date": "2020-03-13 00:55:30", "correct": "1", "upload": "def sommeNPremiersEntiers(n):\n  res=0\n  for elem in range(1,n+1):\n    res=res+elem\n  return res", "user": "userdId_1", "attemptID": 766, "exercise": "c315a540cf0bfb0182dc114c6f0eafd1", "exercise_name": "sommeNPremiersEntiers", "embeddingX": "-19.019331", "embeddingY": "13.729216"},{"extension": "py", "date": "2020-03-19 23:57:12", "correct": "0", "upload": "def reconstruireChainePartielle(o,n):\n  res=\"\"\n  for i in range(len(o),n):\n    res=res+l[i]\n  return res", "user": "userdId_20", "attemptID": 767, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-60.81913", "embeddingY": "-34.745094"},{"extension": "py", "date": "2020-04-17 00:17:09", "correct": "1", "upload": "def meilleurScoreJoueur(score,joueur,nom):\n  for i in range(len(joueur)):\n     if joueur[i]==nom:\n      return score[i]\n  return 0", "user": "userdId_5", "attemptID": 768, "exercise": "c96fadc94086276f98451a798b3bb730", "exercise_name": "meilleurScoreJoueur", "embeddingX": "-25.062593", "embeddingY": "-38.279236"},{"extension": "py", "date": "2020-04-03 00:23:08", "correct": "1", "upload": "def nbChiffres(nombre):\n  cpt=0\n  if nombre==0:\n    cpt=1\n  while nombre!=0:\n    nombre=nombre//10\n    cpt=cpt+1\n  return cpt", "user": "userdId_12", "attemptID": 769, "exercise": "3dcf332c003a1f3bf15df22ee17884a3", "exercise_name": "nbChiffres", "embeddingX": "31.98515", "embeddingY": "11.589587"},{"extension": "py", "date": "2020-04-12 07:33:09", "correct": "0", "upload": "def suiteAriGeo(liste):\n  i=0\n  while i<len(liste):\n    a=liste[1]-liste[0]\n    b=liste[1]-liste[0]  \n  ok=True\n  i=0\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste) and ok:\n    if liste[i+1]!=a*liste[i]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 770, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "15.130922", "embeddingY": "63.578876"},{"extension": "py", "date": "2020-04-07 22:07:44", "correct": "0", "upload": "def suiteGeo(liste):\n  ok=True\n  i=1\n  while i<len(liste) and ok:\n    q=liste[2]/liste[1]\n    if liste[i]==0:\n      ok=False\n    if liste[i]/liste[i-1]!=q:\n      ok=False\n    i=i+1\n  return ok\n    ", "user": "userdId_1", "attemptID": 771, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "26.442062", "embeddingY": "60.12626"},{"extension": "py", "date": "2020-03-30 22:43:42", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n  cpt=0\n  i=0\n  trouve=False\n  res=0\n  while i<len(l) and not trouve :\n    if l[i]==x :\n      cpt+=1\n      if cpt==n :\n        trouve=True\n        res=i\n    i+=1\n  \n  if (cpt<n) or (x not in l) :\n    res=None\n\n  return res", "user": "userdId_15", "attemptID": 772, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-1.338742", "embeddingY": "70.16019"},{"extension": "py", "date": "2020-03-31 06:38:28", "correct": "0", "upload": "def semestreValide(ue1,ue2):\n    res=False\n    if ue1>=10 and ue2>=10:\n      res=True\n    else:\n      res=False\n    if ue1>=10 and ue2<10:\n      res=True\n    else:\n      res=False\n    return res", "user": "userdId_11", "attemptID": 773, "exercise": "70ae7ad6cf504e0fa8cedebd8e8a825f", "exercise_name": "semestreValide", "embeddingX": "67.51531", "embeddingY": "-2.202286"},{"extension": "py", "date": "2020-03-06 00:53:08", "correct": "0", "upload": "def moyenne(liste):\n    y=0\n    x=0\n    for elem in liste : \n      y=y+1\n      x=x+elem\n      res=x/y\n    return res", "user": "userdId_24", "attemptID": 774, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-22.18207", "embeddingY": "0.6193607"},{"extension": "py", "date": "2020-03-27 06:37:50", "correct": "1", "upload": "def compare(chaine1,chaine2):\n  res=0\n  i=0\n  while i<len(chaine1) and i<len(chaine2) and res==0:\n    if chaine1[i]<chaine2[i]:\n      res=-1\n    if chaine1[i]>chaine2[i]:\n      res=1\n    if chaine1[i]==chaine2[i]:\n      res=0\n    i=i+1\n  if res==0:\n    if len(chaine1)>len(chaine2):\n      res=1\n    if len(chaine1)<len(chaine2):\n      res=-1\n  return res", "user": "userdId_19", "attemptID": 775, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-23.509619", "embeddingY": "61.402752"},{"extension": "py", "date": "2020-06-02 22:36:32", "correct": "1", "upload": "def somme(liste):\n  res=0\n  for i in range(len(liste)):\n    res+=liste[i]\n  return res", "user": "userdId_12", "attemptID": 776, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-50.63245", "embeddingY": "-38.90264"},{"extension": "py", "date": "2020-03-05 22:14:06", "correct": "0", "upload": "def prononcable(mot):\n  if len(mot)<4:\n    return True\n  else:\n    cpt=0\n    laLettrePrecedenteEstUneVoyelle = (mot[0] in 'aeiouy')\n    for i in mot :\n      if (i in 'aeiouy') == laLettrePrecedenteEstUneVoyelle:\n        cpt+=1\n        if cpt == 3:\n          return False\n      else:\n        cpt = 0\n        laLettrePrecedenteEstUneVoyelle = not laLettrePrecedenteEstUneVoyelle \n    return True", "user": "userdId_6", "attemptID": 777, "exercise": "6318b210c201fba050d60bc0913cb7ef", "exercise_name": "prononcable", "embeddingX": "16.140934", "embeddingY": "-14.961013"},{"extension": "py", "date": "2020-03-10 04:11:25", "correct": "0", "upload": "def sommeNPremiersEntiersPairs(n):\n    res=0\n    for i in range(1,n+1,2):\n      res=res+i\n    return res", "user": "userdId_18", "attemptID": 778, "exercise": "3030dc079e6607c253e89e8ef4784b74", "exercise_name": "sommeNPremiersEntiersPairs", "embeddingX": "-18.383778", "embeddingY": "12.696858"},{"extension": "py", "date": "2020-03-31 04:12:45", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n  i=0\n  cpt=0\n  trouve=False\n  while i<len(l) and not trouve:\n    if l[i]==x:\n      cpt+=1\n    if cpt==n:\n      trouve=True\n    i+=1\n  if trouve:\n    res=i-1\n  else:\n    res=None\n  return res\u00e8", "user": "userdId_8", "attemptID": 779, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-2.3139262", "embeddingY": "68.50121"},{"extension": "py", "date": "2020-03-07 00:05:54", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut1>=debut2:\n    if fin1<=fin2:\n      if debut1>=debut2:\n        res=True\n  if debut1<=debut2:\n    if fin1<=fin2:\n      if debut1>=debut2:\n        res=True\n  else:\n    res=False\n  return res", "user": "userdId_8", "attemptID": 780, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "51.693813", "embeddingY": "-20.783388"},{"extension": "py", "date": "2020-03-08 23:17:20", "correct": "0", "upload": "from math import *\n\ndef polynome(a,b,c):\n  d=b**2-(4*a*c)\n  if d<0:\n    return 'pas de solution'\n  elif d==0:\n    solution=-b/(2*a)\n    return solution\n  else:\n    if d>0:\n      solution1=(-b+sqrt(d))/(2*a)\n      solution2=(-b-sqrt(d))/(2*a)\n      return solution1 and solution2", "user": "userdId_1", "attemptID": 781, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-50.89093", "embeddingY": "9.380025"},{"extension": "py", "date": "2020-04-14 04:07:11", "correct": "0", "upload": "def meilleurClassementJoueur(scores,joueurs,nom):\n  i=0\n  while i<len(joueurs):\n    if nom==joueurs[i]:\n      return i\n    i=i+1\n  return -1", "user": "userdId_7", "attemptID": 782, "exercise": "be6ce0a06c5d396190024c7c681da95d", "exercise_name": "meilleurClassementJoueur", "embeddingX": "-12.214451", "embeddingY": "67.03399"},{"extension": "py", "date": "2020-03-07 00:51:30", "correct": "1", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1<annee2:\n    res=-1\n  elif annee1>annee2:\n    res=1\n  elif mois1<mois2:\n    res=-1\n  elif mois1>mois2:\n    res=1\n  elif jour1<jour2:\n    res=-1\n  elif jour1>jour2:\n    res=1\n  else:\n    res=0\n  return res", "user": "userdId_8", "attemptID": 783, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "82.13461", "embeddingY": "-32.97269"},{"extension": "py", "date": "2020-06-02 22:37:41", "correct": "0", "upload": "def somme(liste):\n  res=0\n  for elem in liste:\n    res=res+liste[elem]\n  return res", "user": "userdId_12", "attemptID": 784, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-54.353065", "embeddingY": "-12.915882"},{"extension": "py", "date": "2020-03-12 21:48:01", "correct": "0", "upload": "def nbVoyelles(mot):\n   for lettre in mot:\n      if lettre in 'aeiouy':\n         res=res+1\n   return res", "user": "userdId_14", "attemptID": 785, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "14.868381", "embeddingY": "-21.999214"},{"extension": "py", "date": "2020-03-12 22:03:47", "correct": "0", "upload": "def moyenne(liste):\n  if len (liste)==0:\n    res=None\n  else:\n    res=0\n    cpt=0\n    for elem in range(len(liste)):\n      res=res+elem\n      cpt=cpt+2\n      res=res%cpt\n  return res ", "user": "userdId_20", "attemptID": 786, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-6.530291", "embeddingY": "-2.8419206"},{"extension": "py", "date": "2020-03-17 06:21:47", "correct": "0", "upload": "def permutationListe(liste,permutation):\n  res=[0]*(len(permutation))\n  for i in range(len(liste)):\n    permutation[i]=liste[i] \n  return res", "user": "userdId_35", "attemptID": 787, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-52.00173", "embeddingY": "-31.419601"},{"extension": "py", "date": "2020-04-07 04:47:38", "correct": "1", "upload": "def elemGeo(n,u0,q):\n  res=u0*q**n\n  return res", "user": "userdId_26", "attemptID": 788, "exercise": "d7c83a7fb9b49e28804e55955ad06968", "exercise_name": "elemGeo", "embeddingX": "-39.09474", "embeddingY": "17.595278"},{"extension": "py", "date": "2020-04-08 02:34:07", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  res=True\n  while i<len(liste)-1 and res==True:\n    if liste[i]!=0:\n      q=liste[i+1]/liste[i]\n      if liste[i+1]/liste[i]==q:\n        res=True\n      else:\n        res=False\n    else:\n      res=False\n    i=i+1\n  return res", "user": "userdId_26", "attemptID": 789, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "29.486456", "embeddingY": "60.237762"},{"extension": "py", "date": "2020-03-09 08:17:54", "correct": "1", "upload": "def somme(liste):\n    res=0\n    for elem in liste:\n      res=res+elem\n    return res\n  ", "user": "userdId_11", "attemptID": 790, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-29.808727", "embeddingY": "3.7078094"},{"extension": "py", "date": "2020-03-06 00:18:30", "correct": "0", "upload": "def moyenne(liste):\n\tif len(liste) == 0:\n\t\tres= None\n\telse:\n\t\tnb = 0\n\t\tres = 0\n\t\tmoy = ''\n\t\tfor elem in liste:\n\t\t\tres = res + elem\n\t\t\tnb+=1\n\tmoy = res / nb\n\treturn moy", "user": "userdId_29", "attemptID": 791, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "0.04257788", "embeddingY": "-10.418758"},{"extension": "py", "date": "2020-03-10 10:13:13", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n    if len(mot)==0:\n      res=None\n    else:\n      res=0\n      for i in range(mot):\n        if lettre==mot[i]:\n          res=mot[i]\n        else:\n          if lettre!=mot[i]:\n            res=None\n    return res\n  \n      ", "user": "userdId_11", "attemptID": 792, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-18.686327", "embeddingY": "-34.520554"},{"extension": "py", "date": "2020-04-08 00:37:32", "correct": "0", "upload": "def suiteAriGeo(liste):\n  a=0\n  b=0\n  if len(liste)>1:\n    suite=liste[0]\n    i=1\n    res=True\n  while i<len(liste) and res==True:\n    suite=a*suite+b\n    if suite==liste[i]:\n      res=True\n    else:\n      res=False\n    i+=1\n  return res", "user": "userdId_34", "attemptID": 793, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "11.292173", "embeddingY": "64.22264"},{"extension": "py", "date": "2020-03-03 06:10:30", "correct": "0", "upload": "def polynome(a,b,c):\n  res= 0\n  delta= b**2-4*a*c\n  if delta > 0:\n    res= ((-b-delta**1/2)/2*a, (-b+delta**1/2)/2*a)\n  elif delta==0:\n    res= -b/2*a\n  else:\n    res= 'pas de solution'\n  return res", "user": "userdId_7", "attemptID": 794, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-51.86532", "embeddingY": "8.859591"},{"extension": "py", "date": "2020-03-09 21:54:00", "correct": "0", "upload": "def jourNuit(heure):\n    res = \"\"\n    if heure>24 :\n        res = \"l'heure saisie est invalide\" \n    return res\n    \njourNuit(28)   ", "user": "userdId_44", "attemptID": 795, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "65.46864", "embeddingY": "17.25719"},{"extension": "py", "date": "2020-03-17 06:29:24", "correct": "0", "upload": "def doubleLettre(mot):\n  c1=(0,len(mot),2)\n  c2=(1,len(mot),2)\n  if c1==c2:\n    res=True\n  else:\n    res=False\n  return res", "user": "userdId_8", "attemptID": 796, "exercise": "00da9cf1fa2b468d915724499459ed8f", "exercise_name": "doubleLettre", "embeddingX": "17.033863", "embeddingY": "-0.3990245"},{"extension": "py", "date": "2020-04-07 23:25:29", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  ok=True\n  i=0\n  while i<len(phrase)//2 and ok:\n    if l[i]!=l[-i-1]:\n      ok=False\n    i+=1\n  return ok", "user": "userdId_13", "attemptID": 797, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "31.312029", "embeddingY": "36.16007"},{"extension": "py", "date": "2020-04-11 00:46:21", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  c=True\n  if len(liste)==0:\n    c=True\n  elif 0 in liste:\n    c=False\n  else:\n    while i<(len(liste)-2) and c:\n      if liste[i+2]/liste[i+1]!=liste[i+1]/liste[i]:\n        c=False\n      i=i+1\n  return c", "user": "userdId_19", "attemptID": 798, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "28.728037", "embeddingY": "56.19608"},{"extension": "py", "date": "2020-04-11 07:35:43", "correct": "0", "upload": "def sousChaine(s1,s2):\n  res=True\n  i=0\n  j=0\n  while i!=j:\n    i+=1\n    j+=i  \n  while i<len(s1)==j<len(s2) and res:\n    res=True\n  else:\n    res=False\n  return res", "user": "userdId_8", "attemptID": 799, "exercise": "4bdf8c9c5d020593e1771e4d3ae1ae0d", "exercise_name": "sousChaine", "embeddingX": "-4.9150796", "embeddingY": "49.646477"},{"extension": "py", "date": "2020-03-03 23:46:23", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut2<fin1<fin2 or debut1<fin2<fin1:\n    return True\n  else:\n    return False\nassert rendezVous(6,20,12,15),\"t'as faux grosse mangue\"\n\n", "user": "userdId_19", "attemptID": 800, "exercise": "6fd66bb2393fbf3809f1c6d04f3831f7", "exercise_name": "rendezVous", "embeddingX": "60.264385", "embeddingY": "-27.30231"},{"extension": "py", "date": "2020-03-06 00:09:15", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    res=0\n  else:\n    for elem in mot:\n      res=0\n      if elem in a:\n        res=res+1\n  return res     ", "user": "userdId_14", "attemptID": 801, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "0.8175662", "embeddingY": "-36.970512"},{"extension": "py", "date": "2020-04-06 21:38:07", "correct": "0", "upload": "def sousChaine(s1,s2):\n  i=0\n  j=0\n  cpt=0\n  res=False\n  while i<len(s2) and j<len(s1) and cpt<len(s1):\n    if s2[i]==s1[j]:\n      res=True\n      cpt+=1\n      j+=1\n    else:\n      res=False\n    i+=1\n  return res", "user": "userdId_12", "attemptID": 802, "exercise": "a7cdd094daa2f0bfccc7a4ec419f7243", "exercise_name": "sousChaine", "embeddingX": "-5.2344503", "embeddingY": "61.788807"},{"extension": "py", "date": "2020-03-19 04:46:43", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut2>fin1 or debut1>fin2:\n    res=True\n  else:\n    res=False\n    return None", "user": "userdId_34", "attemptID": 803, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "63.920948", "embeddingY": "-23.151525"},{"extension": "py", "date": "2020-03-12 21:43:07", "correct": "0", "upload": "def nbVoyelles(mot):\n  cpt=0\n  for lettre in mot:\n    if lettre in 'aeiouy':\n      cpt=cpt+1\n    return cpt", "user": "userdId_23", "attemptID": 804, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "13.916252", "embeddingY": "-26.282372"},{"extension": "py", "date": "2020-04-11 08:09:08", "correct": "0", "upload": "def elemGeo(n,u0,q):\n  return u0*n**q", "user": "userdId_8", "attemptID": 805, "exercise": "d7c83a7fb9b49e28804e55955ad06968", "exercise_name": "elemGeo", "embeddingX": "-39.40457", "embeddingY": "20.48598"},{"extension": "py", "date": "2020-04-07 02:49:45", "correct": "0", "upload": "def fusion(liste1,liste2):\n  res=[]\n  i=0\n  j=0\n  while i<len(liste1) and i<len(liste2):\n    if liste1[i]<liste2[j]:\n      res.append(liste1[i])\n      j=i+1\n    else:\n      res.append(liste1[i])\n      i=i+1\n      while j<len(liste2):\n        res.append(liste2[j])\n        j=j+1\n      \n      while i<len(liste1):\n          res.append(liste1[i])\n          i=i+1\n    return res", "user": "userdId_36", "attemptID": 806, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-38.71773", "embeddingY": "48.5198"},{"extension": "py", "date": "2020-04-07 03:48:28", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  \n  if len(liste)==1 and liste[0]!=0:\n    res=True\n  elif len(liste)>=1 and liste[0]==0:\n    res=False\n  elif len(liste)==0:\n    res=True\n  else:\n    end=False\n    while i<len(liste)-1 and end==False:\n      r=liste[0]/liste[1]\n      if liste[i]/liste[i+1]==r:\n        res=True\n      else:\n        res=False\n        end=True\n      i+=1\n  return res\n  ", "user": "userdId_26", "attemptID": 807, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "38.98327", "embeddingY": "58.784077"},{"extension": "py", "date": "2020-03-13 00:59:02", "correct": "0", "upload": "def sommeNPremiersEntiersPairs(n):\n  somme=0\n  if elem%2==0:\n    for elem in range(1,n+1):\n      somme=somme+i\n  return somme\n    ", "user": "userdId_13", "attemptID": 808, "exercise": "3030dc079e6607c253e89e8ef4784b74", "exercise_name": "sommeNPremiersEntiersPairs", "embeddingX": "28.52567", "embeddingY": "-22.58"},{"extension": "py", "date": "2020-03-09 06:26:13", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  \n  res=0\n  \n  for elem in jour1,mois1,annee1,jour2,mois2,annee2:\n    \n    if ('mois1' and 'annee1')<('mois2 and ''annee2'):\n       res=res-1\n      \n    if ('mois1' and 'annee1')==('mois2'and'annee2'):\n       res=res\n    \n    if ('mois'and 'annee1')<('mois2'and'annee2'):\n       res=res+1\n      \n  return res", "user": "userdId_23", "attemptID": 809, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "-13.455752", "embeddingY": "1.1673491"},{"extension": "py", "date": "2020-03-03 05:51:24", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(liste)==0:\n    res=None\n  else:\n    res=cpt\n    res=0\n    for elen in liste:\n      res=res+elem\n      cpt=cpt+1\n    res=res/cpt\n  return res", "user": "userdId_25", "attemptID": 810, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "20.351065", "embeddingY": "-38.53494"},{"extension": "py", "date": "2020-04-13 21:49:19", "correct": "0", "upload": "def listeDecroissante(scores):\n  ok=True\n  i=0\n  while i<len(scores)-1:\n    if scores[i]>scores[i+1]:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 811, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "16.043064", "embeddingY": "49.178738"},{"extension": "py", "date": "2020-03-02 07:36:52", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1<=annee2 and mois1<=mois2 and jour1<jour2:\n    return -1\n  elif annee1==annee2 and mois1==mois2 and jour1==jour2:\n    return 0\n  elif annee1>annee2 and mois1>mois2 and jour1>jour2:\n    return 1\n  \ncompareDates(10,1,2020,14,2,2020)\ncompareDates(14,2,2020,11,2,2020)\ncompareDates(10,1,2020,10,1,2020)", "user": "userdId_1", "attemptID": 812, "exercise": "af7c1467ef9f7684d9ff58734067ae98", "exercise_name": "compareDates", "embeddingX": "85.85096", "embeddingY": "-14.876473"},{"extension": "py", "date": "2020-03-14 21:39:35", "correct": "0", "upload": "def maximum(x,y,z):\n    if x>=y and x>=z:\n      maxi=x\n    if y>=x and y>=z:\n      maxi=y\n    if z>=x and z>=y:\n      maxi=z\n    return maxi", "user": "userdId_21", "attemptID": 813, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-78.236725", "embeddingY": "12.993042"},{"extension": "py", "date": "2020-03-17 06:18:01", "correct": "0", "upload": "def maximum(liste):\n    if len(liste)==0:\n      res=0\n    else:\n      res=liste[0]\n    for elem in liste:\n        res=elem\n    return res", "user": "userdId_22", "attemptID": 814, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "7.0377917", "embeddingY": "-39.40215"},{"extension": "py", "date": "2020-03-19 23:46:26", "correct": "1", "upload": "def sousChaine(s,debut,longueur):\n  res=''\n  if debut<0 or debut>len(s):\n    res=''\n  elif (debut+longueur)>len(s):\n    for i in range(debut,len(s)):\n      res=res+s[i]\n  else:\n    for i in range (debut,debut+longueur):\n      res=res+s[i]\n  return res\n    ", "user": "userdId_40", "attemptID": 815, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-85.76109", "embeddingY": "22.079073"},{"extension": "py", "date": "2020-03-06 00:09:28", "correct": "0", "upload": "def moyenne(liste):\n    if liste==[]:\n        return None\n    else:\n        somme=0\n        nbtermes=0\n        for elem in liste:\n          somme=somme+elem\n          nbtermes=nbtermes+1\n          moy=somme/nbtermes\n          return moy\n\nmoyenne([5,15])", "user": "userdId_2", "attemptID": 816, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-0.3466114", "embeddingY": "-5.7168517"},{"extension": "py", "date": "2020-03-16 04:15:19", "correct": "1", "upload": "def minimum(liste):\n    if liste==[]:\n      res=None\n    else:\n      res=min(liste)\n    return res", "user": "userdId_18", "attemptID": 817, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "-16.302505", "embeddingY": "-16.921919"},{"extension": "py", "date": "2020-03-30 22:20:30", "correct": "0", "upload": "def doubleChiffre(nombre):\n  temp = str(nombre)\n  for i in range (len(temp)-1):\n    if temp[i]==temp[i+1]:\n      return True\n  return False", "user": "userdId_6", "attemptID": 818, "exercise": "7f84d207313ad3dc0f4fef3d72d72abb", "exercise_name": "doubleChiffre", "embeddingX": "-15.685911", "embeddingY": "-62.944027"},{"extension": "py", "date": "2020-03-30 21:45:23", "correct": "0", "upload": "def fusion(liste1,liste2):\n  i=0\n  j=0\n  listefusion=[]\n  if len(liste1)==0:\n    listefusion=liste2\n  elif len(liste2)==0:\n    listefusion=liste1\n  \n  while i<len(liste1) and j<len(liste2):\n    if liste1[i]>liste2[j]:\n      listefusion.append(liste2[j])\n      j=j+1\n    else:\n      listefusion.append(liste1[i])\n      i=i+1\n  \n  if len(liste1)>0 and len(liste2)>0:\n    if max(liste1)>max(liste2):\n      for ind in range (i+1,len(liste1)):\n        listefusion.append(liste1[ind])\n\n    if max(liste2)>max(liste1):\n      for ind in range (j+1,len(liste2)):\n        listefusion.append(liste2[ind])\n\n  return listefusion\n  \n", "user": "userdId_19", "attemptID": 819, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-33.654484", "embeddingY": "50.95668"},{"extension": "py", "date": "2020-04-07 23:18:09", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  res=False\n  prec=None\n  while nombre!=0 and not res:\n    numero=nombre%10\n    nombre=nombre//10\n    if chiffre==prec:\n      cpt=cpt+1\n    prec=numero\n  return cpt ", "user": "userdId_13", "attemptID": 820, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "9.150787", "embeddingY": "23.783417"},{"extension": "py", "date": "2020-03-09 08:38:59", "correct": "1", "upload": "def minimum(liste):\n    if len(liste)==0:\n      min=None\n    else:\n      min=liste[0]\n      for i in range(1, len(liste)):\n        if liste[i]<min:\n          min=liste[i]\n    return min\n  ", "user": "userdId_11", "attemptID": 821, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "18.864105", "embeddingY": "-78.90203"},{"extension": "py", "date": "2020-03-24 06:23:29", "correct": "0", "upload": "def fusion(liste1,liste2):\n  liste3=liste1.append(liste2)\n  liste3.sort()\n  return liste3", "user": "userdId_13", "attemptID": 822, "exercise": "6613efb6c873b142dc2b6040c14eb616", "exercise_name": "fusion", "embeddingX": "-40.602547", "embeddingY": "-8.749571"},{"extension": "py", "date": "2020-03-22 12:11:13", "correct": "0", "upload": "def maximum(liste):\n  max=liste[1]\n  for i in len(liste): \n    if liste[i]>max:\n      max=liste[i]\t\n  return max", "user": "userdId_21", "attemptID": 823, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-51.08593", "embeddingY": "-20.984598"},{"extension": "py", "date": "2020-04-13 22:40:57", "correct": "0", "upload": "def nbOccurrencesJoueur(joueurs,nom):\n  i=0\n  cpt=0\n  while i<len(joueur):\n    if nom==joueur[i]:\n      cpt=cpt+1\n    i=i+1\n  return cpt", "user": "userdId_1", "attemptID": 824, "exercise": "00ee5faf82e54951fbdb2ba2656f7ae7", "exercise_name": "nbOccurrencesJoueur", "embeddingX": "-5.0691953", "embeddingY": "41.630787"},{"extension": "py", "date": "2020-04-12 07:58:38", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n    cpt=0\n    decomp=nombre\n    x=nombre%10\n    while decomp!=0:\n      decomp=nombre//10\n      x=nombre%10\n      if x!=chiffre:\n        decomp=decomp//10\n        x=decomp%10\n      else:\n        cpt+=1\n    return cpt", "user": "userdId_11", "attemptID": 825, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "4.9631567", "embeddingY": "15.570497"},{"extension": "py", "date": "2020-03-24 06:02:08", "correct": "0", "upload": "def compare(chaine1,chaine2):\n    if chaine1=='':\n      res=-1\n    elif chaine2=='':\n      res=1\n    else:\n      res=0\n      i=0\n      while i<len(chaine1) and i<len(chaine2) and res==0:\n        if chaine1[i]<chaine2[i]:\n          res=-1\n        elif chaine1[i]>chaine2[i]:\n          res=1\n        i=i+1\n      mmlttr=0\n      if res==0:\n        for i in range(len(chaine1)):\n          if chaine1[i]==chaine2[i]:\n            mmlttr=mmlttr+1\n      if len(chaine1)>len(chaine2):\n        if len(chaine2)==mmlttr:\n          res=1\n      elif len(chaine1)<len(chaine2):\n        if len(chaine1)==mmlttr:\n          res=-1\n    return res", "user": "userdId_18", "attemptID": 826, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-29.489763", "embeddingY": "62.793926"},{"extension": "py", "date": "2020-03-17 05:52:24", "correct": "1", "upload": "def permutationChaine(s):\n  res=\"\"\n  for i in range(0,len(s)-1,2):\n    res=res+s[1+i]+s[i]\n  if len(s)%2!=0:\n    res=res+s[len(s)-1]\n  return res", "user": "userdId_8", "attemptID": 827, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-36.596184", "embeddingY": "-59.144924"},{"extension": "py", "date": "2020-04-07 03:20:41", "correct": "1", "upload": "def motPalindrome(mot):\n  res=True\n  i=0\n  while i<len(mot):\n    if mot[i]!=mot[-i-1]:\n      res=False\n    i=i+1\n  return res", "user": "userdId_7", "attemptID": 828, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "22.732733", "embeddingY": "49.444855"},{"extension": "py", "date": "2020-03-10 21:41:45", "correct": "0", "upload": "def ecart(liste):\n  res1=liste[0]\n  res2=liste[0]\n  for i in range(0,len(liste)):\n    if liste[i]>res1:\n      res1=liste[i]\n    if liste[i]<res2:\n      res2=liste[i]\n  res=res1-res2\n  return res", "user": "userdId_14", "attemptID": 829, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "0.68781596", "embeddingY": "-82.53048"},{"extension": "py", "date": "2020-06-02 22:57:47", "correct": "1", "upload": "def ecart(liste):\n  if len(liste)!=0:\n    max=liste[0]\n    min=liste[0]\n    for elem in liste:\n      if elem>max:\n        max=elem\n      if elem<min:\n        min=elem\n    res=max-min\n    return res\n    ", "user": "userdId_12", "attemptID": 830, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "14.429726", "embeddingY": "-77.22351"},{"extension": "py", "date": "2020-03-07 00:40:51", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1<annee2:\n    res=-1\n  if annee1>annee2:\n    res=1\n  elif mois1<mois2:\n      res=-1\n      if mois1>mois2:\n        res=1\n      elif jour1<jour2:\n        res=-1\n        if jour1>jour2:\n          res=1\n  else:\n    res=0\n  return res", "user": "userdId_8", "attemptID": 831, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "80.85907", "embeddingY": "-33.083008"},{"extension": "py", "date": "2020-03-09 21:48:01", "correct": "0", "upload": "def jourNuit(heure):\n  print(heure)", "user": "userdId_44", "attemptID": 832, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "-60.05048", "embeddingY": "10.649846"},{"extension": "py", "date": "2020-03-12 09:31:25", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    return 0\n  cpt=0\n  for lettre in mot:\n    if elem in'aeiouy':\n      cpt=cpt+1\n  return cpt", "user": "userdId_1", "attemptID": 833, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "1.203335", "embeddingY": "-36.889675"},{"extension": "py", "date": "2020-03-03 05:45:18", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    for i in range(len(liste)):\n      res=range[0]\n      if liste[i]>res:\n        res=liste[i]\n  return res", "user": "userdId_8", "attemptID": 834, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "4.9376416", "embeddingY": "-51.1126"},{"extension": "py", "date": "2020-03-14 00:33:59", "correct": "0", "upload": "def ecart(liste):\n   res=0\n   if len(liste)==0:\n      res=None\n   if len(liste)==1:\n      res=0\n   else:\n      max=liste[0]\n      min=max\n      for i in range(len(liste)):\n         if liste[i]>max:\n            max=liste[i]\n      for i in range(len(liste)):\n         if liste[i]<min:\n            min=liste[i]\n   res=(max-min)\n   return res", "user": "userdId_14", "attemptID": 835, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "14.184058", "embeddingY": "-86.129524"},{"extension": "py", "date": "2020-04-12 04:33:26", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=False\n  c=[]\n  for i in range(len(liste)):\n    c=a*[liste[i]]+b\n    if c==liste:\n      res=True\n  return res", "user": "userdId_8", "attemptID": 836, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-82.178406", "embeddingY": "25.86138"},{"extension": "py", "date": "2020-03-23 00:41:09", "correct": "0", "upload": "def reconstruireChainePartielle(s,n):\n    res = \"\"\n    for i in s :\n      res = res + [i]\n    return res", "user": "userdId_24", "attemptID": 837, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-34.586205", "embeddingY": "2.2199423"},{"extension": "py", "date": "2020-04-17 01:03:51", "correct": "0", "upload": "def nbOccurrencesJoueur(joueurs,nom):\n  cpt=0\n  for i in range(len(joueurs)):\n    if joueurs[i]==nom:\n      cpt=cpt+1\n    return cpt", "user": "userdId_5", "attemptID": 838, "exercise": "00ee5faf82e54951fbdb2ba2656f7ae7", "exercise_name": "nbOccurrencesJoueur", "embeddingX": "-21.646013", "embeddingY": "-41.250008"},{"extension": "py", "date": "2020-04-08 00:52:01", "correct": "0", "upload": "def suiteAriGeo(liste):\n  ok=True\n  i=0\n  j=0\n  R=0\n  if len(liste)<=2 :\n    ok=True\n  else :\n    for elem in (liste) :\n      if liste[0]==0 :\n        Q=1\n      else :\n        Q=(liste[1]/liste[0])\n        R=(liste[1]-liste[0])\n    while j<(len(liste)-1) :\n      if liste[j+1]==Q*liste[j] :\n        R=0\n      elif liste[j+1]==liste[j]+R :\n        Q=1\n      j+=1\n      \n    while i<(len(liste)-1) and ok :\n      if liste[i+1]!=Q*liste[i]+R :\n        ok=False\n      i+=1\n  return ok", "user": "userdId_15", "attemptID": 839, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "43.932026", "embeddingY": "56.14802"},{"extension": "py", "date": "2020-04-06 02:17:12", "correct": "0", "upload": "def produitScalaire(vec1,vec2):\n  if vec1 == []:\n    coordvec1 = [0,0]\n  if vec2 == []:\n    coordvec2 = [0,0]\n  else :\n    coordvec1 = [vec1[0]-vec1[1],vec1[2]-vec1[3]]\n    coordvec2 = [vec2[0]-vec2[1],vec2[2]-vec2[3]]\n  res = coordvec1[0]*coordvec2[0]+coordvec1[1]*coordvec2[1]\n  return res", "user": "userdId_17", "attemptID": 840, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-21.048893", "embeddingY": "-16.356745"},{"extension": "py", "date": "2020-04-08 00:07:55", "correct": "0", "upload": "def suiteGeo(liste):\n  ok=True\n  i=0\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[0]==0:\n      ok=False\n    if liste[i]!=0:\n      q=liste[1]/liste[0]\n    if liste[i]!=0:\n      if liste[i+1]/liste[i]!=q:\n        ok=False\n    if liste[i]==0:\n      ok=True\n    i=i+1\n  return ok\n", "user": "userdId_1", "attemptID": 841, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "33.3873", "embeddingY": "64.18851"},{"extension": "py", "date": "2020-04-07 03:17:18", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  res=True\n  while i<len(liste):\n    r=liste[0]/liste[1]\n    if liste[i]/liste[i+1]==r:\n      res=True\n    else:\n      res=False\n    i+=1\n  return res\n  ", "user": "userdId_26", "attemptID": 842, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "34.319847", "embeddingY": "55.316067"},{"extension": "py", "date": "2020-03-03 00:00:51", "correct": "1", "upload": "def nombrePair(n):\n    if n%2 == 0:\n        return True\n    else:\n        return False\t", "user": "userdId_42", "attemptID": 843, "exercise": "864911b08708fc8bae69311a8ddd3da7", "exercise_name": "nombrePair", "embeddingX": "50.603695", "embeddingY": "-2.471864"},{"extension": "py", "date": "2020-03-05 22:20:18", "correct": "0", "upload": "def maximum(liste):\n    max = liste[0]\n    for i in range(0,len(liste)):\n      if liste[i] > max:\n        max = liste[i]\n    if len(liste) == 0:\n      max = None\n    return max", "user": "userdId_29", "attemptID": 844, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "11.167437", "embeddingY": "-71.29416"},{"extension": "py", "date": "2020-03-19 23:51:02", "correct": "0", "upload": "def reconstruireChainePartielle(s,n):\n  res=''\n  if s=='':\n    res=None\n  else :\n    for i in range (0,len(s),n):\n      res=res + s[i]\n  \n  return res\n\n", "user": "userdId_15", "attemptID": 845, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-58.03942", "embeddingY": "-40.14473"},{"extension": "py", "date": "2020-04-07 03:35:47", "correct": "0", "upload": "def sAG(liste):\n  if len(liste)<3:\n    ok=True\n  else:\n    ok=True\n    ecart1=liste[1]-liste[0]\n    ecart2=liste[2]-liste[1]\n    if ecart1==0 or ecart2==0:\n      a=1\n    else:\n      a=ecart2/ecart1\n    b=-a*liste[0]+liste[1]\n    i=1\n    while i<len(liste)-1 and ok:\n      if a*liste[i]+b!=liste[i+1]:\n        ok=False\n      i+=1\n  return ok", "user": "userdId_32", "attemptID": 846, "exercise": "4c9665daf155b115fe13218141fa1aff", "exercise_name": "suiteAriGeo", "embeddingX": "33.71411", "embeddingY": "79.98259"},{"extension": "py", "date": "2020-04-09 11:25:19", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  ok=True\n  if 0 in liste:\n    ok=False\n  elif len(liste)>1:\n    raison=liste[-1]/liste[-2]\n    while i<len(liste)-1:\n      if liste[i+1]!=liste[i]*raison:\n        ok=False\n      i+=1\n  elif liste==[0]:\n    ok=True\n  return ok", "user": "userdId_12", "attemptID": 847, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "23.565208", "embeddingY": "74.48586"},{"extension": "py", "date": "2020-03-30 21:59:54", "correct": "0", "upload": "def listeSymetrique(l):\n  i=0\n  while i<len(l):\n    if l[i]!=l[-(1+i)]:\n      return False\n    i+=1\n    return True", "user": "userdId_6", "attemptID": 848, "exercise": "8eb27aeda471a467e2223abebeca886e", "exercise_name": "listeSymetrique", "embeddingX": "18.178137", "embeddingY": "42.76759"},{"extension": "py", "date": "2020-03-09 05:29:10", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  \n  res=0\n  for elem in jour1,mois1,annee1,jour2,mois2,annee2 :\n    \n    if (jour1,mois1,annee1<jour2,mois2,annee2):\n      res=res-1\n      \n    elif (jour1,mois1,annee1==jour2,mois2,annee2):\n      res=res\n      \n    elif (jour1,mois1,annee1<jour2,mois2,annee2):\n      res=res+1\n      \n  return res", "user": "userdId_23", "attemptID": 849, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "-20.340097", "embeddingY": "-8.253264"},{"extension": "py", "date": "2020-03-15 01:20:04", "correct": "0", "upload": "def qualifJO(sexe,record,nbvictoires,champion):\n  if champion==True:\n    res=True\n  else:#False continuer la fonction \n    if sexe==M and record<12 and nbvictoires>=3:\n      res=True\n    if sexe==F and record<15 and nbvictoires>=3:\n      res=True\n    else:\n      res=False\n  return res", "user": "userdId_8", "attemptID": 850, "exercise": "78ec7738f3a7f3553d4a5c653534c32d", "exercise_name": "qualifJO", "embeddingX": "61.820145", "embeddingY": "-11.723373"},{"extension": "py", "date": "2020-03-20 00:42:53", "correct": "1", "upload": "def reconstruireChainePartielle(s,n):\n  res=\"\"\n  for i in range(0,len(s),n):\n     res=res+s[i]\n  return res", "user": "userdId_20", "attemptID": 851, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-60.279984", "embeddingY": "-41.153557"},{"extension": "py", "date": "2020-04-13 21:15:27", "correct": "1", "upload": "def meilleurScoreJoueur(scores,joueurs,nom):\n  cpt = 0\n  while cpt<len(joueurs):\n    if joueurs[cpt]==nom:\n      return scores[cpt]\n    cpt+=1\n  return 0", "user": "userdId_6", "attemptID": 852, "exercise": "c96fadc94086276f98451a798b3bb730", "exercise_name": "meilleurScoreJoueur", "embeddingX": "-12.84784", "embeddingY": "67.982864"},{"extension": "py", "date": "2020-03-23 00:46:47", "correct": "0", "upload": "def reconstruireChainePartielle(s,n):\n    res = \"\"\n    for i in range (len(s),n) :\n      res = res + s[i]\n    return res", "user": "userdId_24", "attemptID": 853, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-59.16739", "embeddingY": "-35.992104"},{"extension": "py", "date": "2020-04-12 11:08:44", "correct": "0", "upload": "def phrasePalindrome(phrase):\n    if len(phrase)==0:\n      res=True\n    else:\n      res=True\n      i=0\n      x=''\n      while i<len(phrase)//2 and res:\n        if phrase[i]==x:\n          phrase=phrase-phrase[i]\n          i+=1\n        else:\n          if phrase[i]!=phrase[-(i+1)]:\n            res=False\n          i+=1\n    return res", "user": "userdId_11", "attemptID": 854, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "33.92527", "embeddingY": "35.356533"},{"extension": "py", "date": "2020-04-11 06:25:50", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  res=True\n  i=''\n  while i<len(phrase) and res:\n    if phrase[i]!=phrase[-i-1]:\n      res=False\n    else:\n      if len(phrase)%2=='abcdefghijklmnopqrstuvwxyz':\n        res=True\n  return res", "user": "userdId_8", "attemptID": 855, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "-1.1747876", "embeddingY": "39.627064"},{"extension": "py", "date": "2020-06-02 22:53:20", "correct": "1", "upload": "def minimum(liste):\n  if len(liste)!=0:\n    min=liste[0]\n    for elem in liste:\n      if elem<min:\n        min=elem\n    return min", "user": "userdId_12", "attemptID": 856, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "15.087738", "embeddingY": "-77.175095"},{"extension": "py", "date": "2020-04-08 01:03:56", "correct": "1", "upload": "def elemGeo(n,u0,q):\n  res=q**n*u0\n  return res", "user": "userdId_19", "attemptID": 857, "exercise": "d7c83a7fb9b49e28804e55955ad06968", "exercise_name": "elemGeo", "embeddingX": "-38.911526", "embeddingY": "17.610706"},{"extension": "py", "date": "2020-04-12 06:08:44", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=False\n  c=[]\n  e=[]\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n    e.extend(c)\n  return c", "user": "userdId_8", "attemptID": 858, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-72.011116", "embeddingY": "29.38663"},{"extension": "py", "date": "2020-04-12 07:07:36", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  if liste==[]:\n    res=True\n  c=[]\n  res=False\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n    c=[liste[0]]+c\n  return c", "user": "userdId_8", "attemptID": 859, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-72.39786", "embeddingY": "11.898431"},{"extension": "py", "date": "2020-03-17 06:06:47", "correct": "0", "upload": "def permutationListe(liste,permutation):\n  res=[0]\n  for i in liste:\n    res[i]=liste[i] \n  return res", "user": "userdId_35", "attemptID": 860, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-51.57597", "embeddingY": "-17.462687"},{"extension": "py", "date": "2020-03-18 04:04:20", "correct": "1", "upload": "def distribution(liste,n):\n  res = [0]*(n+1)\n  for elem in liste :\n    res[elem] = res[elem]+1\n  return res", "user": "userdId_17", "attemptID": 861, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-59.331673", "embeddingY": "-15.420768"},{"extension": "py", "date": "2020-04-07 03:33:52", "correct": "1", "upload": "def suiteAriGeo(liste):\n  if len(liste)<3:\n    ok=True\n  else:\n    ok=True\n    ecart1=liste[1]-liste[0]\n    ecart2=liste[2]-liste[1]\n    if ecart1==0 or ecart2==0:\n      a=1\n    else:\n      a=ecart2/ecart1\n    b=-a*liste[0]+liste[1]\n    if a*liste[2]+b!=liste[3]:\n      ok=False\n  return ok", "user": "userdId_32", "attemptID": 862, "exercise": "4c9665daf155b115fe13218141fa1aff", "exercise_name": "suiteAriGeo", "embeddingX": "36.986122", "embeddingY": "76.04395"},{"extension": "py", "date": "2020-04-05 23:58:34", "correct": "1", "upload": "def verifSuiteAriGeo(liste,a,b):\n    if liste==[]:\n      ok=True\n    else:\n      ok=True\n      i=1\n      while i<len(liste) and ok:\n        if a*liste[i-1]+b!=liste[i]:\n          ok=False\n        i+=1\n    return ok", "user": "userdId_18", "attemptID": 863, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-72.14828", "embeddingY": "12.384233"},{"extension": "py", "date": "2020-03-20 00:07:52", "correct": "0", "upload": "def permutationListe(liste,permutation):\n  for i in range(len(liste)):\n    liste[i]=permutation[i]\n  return liste", "user": "userdId_12", "attemptID": 864, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-53.369186", "embeddingY": "-29.669819"},{"extension": "py", "date": "2020-03-17 05:45:57", "correct": "0", "upload": "def permutationChaine(s):\n  res=\"\"\n  for i in range(0,len(s)-1,2):\n    res=res+s[1+i]+s[i]\n  if len(s)%2!=0:\n    res=res+s[i-1]\n  return res", "user": "userdId_8", "attemptID": 865, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-36.501556", "embeddingY": "-58.88675"},{"extension": "py", "date": "2020-03-27 06:44:41", "correct": "0", "upload": "def compare (chaine1,chaine2):\n  i = 0\n  res = 0\n  while i < len(chaine1) and i < len(chaine2) and res == 0 :\n    if chaine1[i] < chaine2[i]:\n      res = -1\n    elif chaine1[i] > chaine2[i]:\n      res = 1\n    else :\n      res = 0\n    i = i + 1\n  if len(chaine1) < len(chaine2):\n    res = -1\n  elif len(chaine1) > len (chaine2):\n    res = 1\n  else :\n    res = 0\n  return res", "user": "userdId_17", "attemptID": 866, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-24.414654", "embeddingY": "62.064926"},{"extension": "py", "date": "2020-03-12 22:03:19", "correct": "0", "upload": "def maximum(liste):\n  res=-50\n  for i in range(len(liste)):\n    if(liste[i])>res:\n      res=(liste[i])\n    if(liste[0]):\n      res=None\n  return res", "user": "userdId_32", "attemptID": 867, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-1.159105", "embeddingY": "-57.590706"},{"extension": "py", "date": "2020-03-12 06:40:11", "correct": "0", "upload": "def maximum(liste):\n  res=(liste[0])\n  for i in liste:\n     if res<liste:\n        res=max\n  return res ", "user": "userdId_20", "attemptID": 868, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "39.42328", "embeddingY": "-59.15716"},{"extension": "py", "date": "2020-03-06 00:48:17", "correct": "1", "upload": "def maximum(liste):\n    if len(liste)==0:\n        res=None\n    else:\n        res=liste[0]\n    for elem in liste:\n        if elem>res:\n          res=elem\n    return res", "user": "userdId_49", "attemptID": 869, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "9.486299", "embeddingY": "-61.469646"},{"extension": "py", "date": "2020-05-04 21:34:57", "correct": "1", "upload": "def somme(liste):\n  res=0\n  for elem in liste:\n    res+=elem\n  return res", "user": "userdId_26", "attemptID": 870, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-25.944334", "embeddingY": "-1.6033294"},{"extension": "py", "date": "2020-03-23 01:12:43", "correct": "0", "upload": "def prononcable(mot):\n  if mot=='':\n    res=True\n  else:\n    res=True\n    aux=''\n    for c in mot:\n      if c==aux:\n        res=False\n      aux=c\n  return res", "user": "userdId_27", "attemptID": 871, "exercise": "6318b210c201fba050d60bc0913cb7ef", "exercise_name": "prononcable", "embeddingX": "17.053955", "embeddingY": "-5.223744"},{"extension": "py", "date": "2020-03-03 05:57:15", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if fin1>=debut2:\n    if fin2>=debut1:\n      res=True\n    else:\n      res=True\n  else:\n    res=False\n  return res", "user": "userdId_30", "attemptID": 872, "exercise": "6fd66bb2393fbf3809f1c6d04f3831f7", "exercise_name": "rendezVous", "embeddingX": "52.320824", "embeddingY": "-19.560026"},{"extension": "py", "date": "2020-03-08 23:11:34", "correct": "0", "upload": "from math import sqrt \n\ndef polynome(a,b,c):\n  d=b**2-(4*a*c)\n  if d<0:\n    return 'pas de solution'\n  elif d==0:\n    solution=-b/(2*a)\n    return solution\n  else:\n    if d>0:\n      solution1=[-b-(sqrt(d))]/2*a\n      solution2=[-b+(sqrt(d))]/2*a\n      return solution1 and solution2", "user": "userdId_1", "attemptID": 873, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-57.530514", "embeddingY": "7.610842"},{"extension": "py", "date": "2020-03-12 07:55:17", "correct": "1", "upload": "def semestreValide(ue1,ue2):\n  if ue1==10 and ue2==10:\n    return True\n  if ue1>ue2 and ue1-ue2>=0:\n    return True\n  if ue1>=10 and ue2>ue1:\n    return True\n  else:\n    return False", "user": "userdId_1", "attemptID": 874, "exercise": "70ae7ad6cf504e0fa8cedebd8e8a825f", "exercise_name": "semestreValide", "embeddingX": "75.14997", "embeddingY": "-5.033139"},{"extension": "py", "date": "2020-04-08 00:20:29", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  res=[]\n  cpt=0\n  if nombre==0:\n    res.append(0)\n  while nombre!=0:\n    res.append(nombre%10)\n    nombre=nombre//10\n  for i in range(len(res)):\n    if i==chiffre:\n      cpt=cpt+1\n  return cpt", "user": "userdId_14", "attemptID": 875, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-0.5017158", "embeddingY": "7.373383"},{"extension": "py", "date": "2020-03-09 05:43:02", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  \n  res=0\n  for elem in jour1,mois1,annee1,jour2,mois2,annee2:\n    \n    if (jour1,mois1,annee1)<(jour2,mois2,annee2):\n       res=res-1\n      \n    if (jour1,mois1,annee1)==(jour2,mois2,annee2):\n       res=res\n    \n    if (jour1,mois1,annee1)<(jour2,mois2,annee2):\n       res=res+1\n      \n  return res", "user": "userdId_23", "attemptID": 876, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "-14.907305", "embeddingY": "0.18617457"},{"extension": "py", "date": "2020-03-06 00:38:40", "correct": "1", "upload": "def nbOccurrencesLettre(lettre,mot):\n  if len(mot)==0:\n    return 0\n  else:\n    cpt=0\n    for elem in mot:\n      if lettre==elem:\n        cpt=cpt+1\n    return cpt\n\n    ", "user": "userdId_2", "attemptID": 877, "exercise": "2864c9e5861229d2ff32570f6bc944fb", "exercise_name": "nbOccurrencesLettre", "embeddingX": "-11.461415", "embeddingY": "-30.168648"},{"extension": "py", "date": "2020-03-27 06:39:37", "correct": "0", "upload": "def compare(chaine1,chaine2):\n  i=0\n  res=0\n  while i<len(chaine1) and i<len(chaine2):\n    if chaine1[i]<chaine2[i]:\n      res=-1\n    elif chaine1[i]>chaine2[i]:\n      res=1\n    i=i+1\n  if res==0 and len(chaine1)!=len(chaine2):\n    if len(chaine1)>len(chaine2):\n      res=1\n    elif len(chaine2)>len(chaine1):\n      res=-1\n  return res", "user": "userdId_12", "attemptID": 878, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-25.588919", "embeddingY": "64.212746"},{"extension": "py", "date": "2020-04-06 04:35:18", "correct": "1", "upload": "def elemAri(n,u0,r):\n  res=u0+r*n\n  return res", "user": "userdId_26", "attemptID": 879, "exercise": "f239498950e974e29e01472749d9a09d", "exercise_name": "elemAri", "embeddingX": "-35.651237", "embeddingY": "18.822878"},{"extension": "py", "date": "2020-03-23 01:15:41", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    return None\n  compteur=0\n  for element in mot:\n    if element in'aeiouy':\n      compteur=compteur+1\n  return compteur", "user": "userdId_34", "attemptID": 880, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "7.1256294", "embeddingY": "-29.038082"},{"extension": "py", "date": "2020-03-06 00:21:33", "correct": "0", "upload": "def maximum(liste):\n res=liste[0]\n for elem in liste:\n    if elem>res:\n      res=elem\n return res\n    ", "user": "userdId_33", "attemptID": 881, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "32.008175", "embeddingY": "-46.59843"},{"extension": "py", "date": "2020-04-12 07:02:57", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  if liste==[]:\n    res=True\n  c=[]\n  res=False\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n    c=[liste[0]]+c\n  return c", "user": "userdId_8", "attemptID": 882, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-77.90014", "embeddingY": "20.114094"},{"extension": "py", "date": "2020-03-10 02:02:18", "correct": "0", "upload": "def ecart(liste):\n    if len(liste)==0:\n      res=None\n    else:\n      res=liste[0]\n      max=liste[1]\n      min=liste[1]\n      for i in range(1,len(liste)):\n        if liste[i]<res:\n          min=liste[i]\n        if liste[i]>res:\n          max=liste[i]\n          res=max-min\n    return res\n      \n      ", "user": "userdId_9", "attemptID": 883, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "13.807129", "embeddingY": "-83.36187"},{"extension": "py", "date": "2020-04-06 04:07:22", "correct": "0", "upload": "def suiteAri(liste):\n    if liste==[]:\n      ok1=True\n    else:\n      ok1=True\n      ctePrec=liste[1]-liste[0]\n      cteAct=None\n      i=2\n      while i<len(liste) and ok:\n        cteAct=liste[i]-liste[i-1]\n        if cteAct!=ctePrec:\n          ok1=False\n        ctePrec=cteAct\n        i+=1\n\ndef suiteGeo(liste):\n    if liste==[] or len(liste)==1:\n      ok2=True\n    elif 0 in liste:\n      ok2=False\n    else:\n      ok2=True\n      i=1\n      while i<len(liste) and ok:\n        cte=liste[i]/liste[i-1]\n        if liste[0]*cte**i!=liste[i]:\n          ok2=False\n        i+=1\n\ndef suiteAriGeo(liste):\n    if liste==[]:\n      ok1=True\n    else:\n      ok1=True\n      ctePrec=liste[1]-liste[0]\n      cteAct=None\n      i=2\n      while i<len(liste) and ok:\n        cteAct=liste[i]-liste[i-1]\n        if cteAct!=ctePrec:\n          ok1=False\n        ctePrec=cteAct\n        i+=1\n    if liste==[] or len(liste)==1:\n      ok2=True\n    elif 0 in liste:\n      ok2=False\n    else:\n      ok2=True\n      i=1\n      while i<len(liste) and ok:\n        cte=liste[i]/liste[i-1]\n        if liste[0]*cte**i!=liste[i]:\n          ok2=False\n        i+=1\n    ok=(ok1 or ok2)\n    return ok", "user": "userdId_18", "attemptID": 884, "exercise": "4c9665daf155b115fe13218141fa1aff", "exercise_name": "suiteAriGeo", "embeddingX": "-61.87487", "embeddingY": "7.7961087"},{"extension": "py", "date": "2020-03-16 04:44:32", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n    if lettre=='' or mot=='':\n      res=None\n    else:\n      res=None\n      for c in range(-1,-len(mot)-1,-1):\n        if lettre==c:\n          res=mot[c]\n    return res", "user": "userdId_18", "attemptID": 885, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-11.551738", "embeddingY": "-37.46022"},{"extension": "py", "date": "2020-03-12 21:40:37", "correct": "0", "upload": "def nbVoyelles(mot):\n  cpt=0\n  for letrre in mot:\n    if lettre in 'aeiouy':\n      cpt=cpt+1\n  return cpt", "user": "userdId_25", "attemptID": 886, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "15.606362", "embeddingY": "-28.339315"},{"extension": "py", "date": "2020-04-02 23:21:30", "correct": "1", "upload": "def listeSymetrique(l):\n  i=0\n  j=-1\n  res=True\n  while i<(len(l))/2 and j<(len(l))/2 and res==True:\n    if l[i]!=l[j]:\n      res=False\n    i=i+1\n    j=j-1\n  return res", "user": "userdId_12", "attemptID": 887, "exercise": "8eb27aeda471a467e2223abebeca886e", "exercise_name": "listeSymetrique", "embeddingX": "26.284466", "embeddingY": "62.35083"},{"extension": "py", "date": "2020-03-23 00:22:08", "correct": "0", "upload": "def maximum(liste):\n  if len(list)==0:\n    res=None\n  res=[]\n  for i in range(len(liste)):\n    if liste[i+1]>liste[i]:\n      res=liste[i+1]\n  return res", "user": "userdId_8", "attemptID": 888, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "19.00701", "embeddingY": "-40.806778"},{"extension": "py", "date": "2020-04-07 04:04:01", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  i=0\n  l=[]\n  while nombre!=0:\n    nombre=nombre//10\n    l.append(nombre)\n  while i<len(l):\n    if l[i]==chiffre:\n      cpt=cpt+1\n  return cpt", "user": "userdId_50", "attemptID": 889, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-8.709048", "embeddingY": "55.6772"},{"extension": "py", "date": "2020-04-16 23:50:04", "correct": "0", "upload": "def indiceInsertion(sc,scores):\n  for i in range(len(scores)):\n    if sc>scores[i]:\n      return i+1", "user": "userdId_1", "attemptID": 890, "exercise": "f8a820b2bd54d18d36716e3d703858f7", "exercise_name": "indiceInsertion", "embeddingX": "-18.34092", "embeddingY": "-46.57534"},{"extension": "py", "date": "2020-04-06 08:17:26", "correct": "0", "upload": "def nextConway(s):\n    liste=[]\n    while s!=0:\n      liste.append(s%10)\n      s//=10\n    nliste=[0]\n    for i in range(len(liste)):\n      nliste=[liste[i]]+nliste\n    cw=[]\n    cpt=1\n    for i in range(len(nliste)-1):\n      if nliste[i]==nliste[i+1]:\n        cpt+=1\n      else:\n        cw+=[cpt]\n        cw+=[nliste[i]]\n        cpt=1\n    res=0\n    for i in range(len(cw)):\n      res+=cw[-i-1]*10**abs(-i)\n    return res", "user": "userdId_18", "attemptID": 891, "exercise": "a580c32690609356dae4401b3c89a3b8", "exercise_name": "nextConway", "embeddingX": "44.31926", "embeddingY": "17.190905"},{"extension": "py", "date": "2020-03-10 21:17:17", "correct": "1", "upload": "def ecart(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    if len(liste)==1:\n      res=0\n    else:\n      res=0\n      max=0\n      min=0\n      for i in range(len(liste)):\n        if liste[i]<res:\n          min=liste[i]\n        if liste[i]>res:\n          max=liste[i]\n          res=max-min\n    return res", "user": "userdId_9", "attemptID": 892, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "13.348536", "embeddingY": "-83.225685"},{"extension": "py", "date": "2020-03-17 06:27:56", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n  res=0\n  for elem in mot:\n    if elem==lettre:\n      res=mot[i]\n  return res", "user": "userdId_7", "attemptID": 893, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-14.385189", "embeddingY": "-28.268456"},{"extension": "py", "date": "2020-04-11 08:08:33", "correct": "0", "upload": "def elemGeo(n,u0,q):\n  return u0*n**q", "user": "userdId_8", "attemptID": 894, "exercise": "d7c83a7fb9b49e28804e55955ad06968", "exercise_name": "elemGeo", "embeddingX": "-39.394478", "embeddingY": "20.516878"},{"extension": "py", "date": "2020-03-09 21:41:44", "correct": "1", "upload": "def somme(liste):\n  if liste == []:\n    return 0\n  else:\n    res = liste[0]\n    for i in range(1,len(liste)):\n      res += liste[i]\n    return res", "user": "userdId_42", "attemptID": 895, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-10.744195", "embeddingY": "-61.318134"},{"extension": "py", "date": "2020-04-08 01:25:46", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  end=False\n  if len(liste)==0:\n    res=True\n  else:\n    while i<len(liste)-1 and res==True and end==False:\n      if liste[i]==0:\n        res=False\n      elif len(liste)==1 and liste[i]>=1:\n        end=True\n        res=True\n      else:\n        q=liste[1]/liste[0]\n        if liste[i+1]/liste[i]==q:\n          res=True\n        else:\n          res=False\n      i+=1\n  return res", "user": "userdId_26", "attemptID": 896, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "7.2751055", "embeddingY": "54.06676"},{"extension": "py", "date": "2020-03-22 23:20:35", "correct": "1", "upload": "def somme(liste):\n  res=0\n  for element in liste:\n    res=res+element\n  return res", "user": "userdId_34", "attemptID": 897, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-29.436451", "embeddingY": "2.307895"},{"extension": "py", "date": "2020-03-22 09:39:43", "correct": "0", "upload": "def minimum(liste):\n  if liste==():\n    res=None\n  else:\n      res=liste[0]\n      for i in range(len(liste)):\n        if res>liste[i]:\n          res=liste[i]\n  return res", "user": "userdId_16", "attemptID": 898, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "1.6741174", "embeddingY": "-66.565926"},{"extension": "py", "date": "2020-03-31 06:44:30", "correct": "0", "upload": "def doubleChiffre(nombre):\n  res=False\n  trouve=False\n  prec=0\n  while nombre!=0 and trouve==False:\n    com1=nombre%10\n    nombre=nombre//10\n    if com1==prec:\n      res=True\n      trouve=True\n    prec=com1  \n  return res", "user": "userdId_13", "attemptID": 899, "exercise": "c83ea6acd3e9f6f5543e87d515e8a44a", "exercise_name": "doubleChiffre", "embeddingX": "11.198857", "embeddingY": "19.075315"},{"extension": "py", "date": "2020-03-12 23:55:30", "correct": "0", "upload": "def jourNuit(heure):\n  if heure>24 or heure<0:\n    afficher=\"l'heure saisie est invalide\"\n  else:\n    if 0<=heure<=5 or 5<=heure<=12:\n      afficher=\"on est le matin et il fait nuit\"\n    if 21<=heure<=24 and 0<=heure<=5:\n      afficher=\"on est la nuit et il fait nuit\"\n    if 12<=heure<=17 or 6<=heure<=18:\n      afficher=\"on est l'apres-midi et il fait jour\"\n    if 17<=heure<=21 or 6<=heure<=18:\n      afficher=\"on est le soir et il fait jour\"\n     \n  return afficher", "user": "userdId_38", "attemptID": 900, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "72.59663", "embeddingY": "23.114693"},{"extension": "py", "date": "2020-04-07 02:12:05", "correct": "1", "upload": "def phrasePalindrome(phrase):\n  ok=True\n  i=0\n  fin=False\n  while i<len(phrase) and fin==False:\n    if phrase[i]=='':\n      fin==True\n    elif phrase[i]==phrase[-i-1]:\n      ok=True\n    elif phrase[i]=='':\n      if phrase[i]==phrase[-i-2]:\n        ok=True\n    else:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 901, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "34.148468", "embeddingY": "41.34454"},{"extension": "py", "date": "2020-03-01 12:12:46", "correct": "1", "upload": "def compareDates(jour1, mois1, annee1, jour2, mois2, annee2):\n    if (jour1 < jour2) or (mois1 < mois2) or (annee1 < annee2) and not((jour1 > jour2) or (mois1 > mois2) or (annee1 > annee2)):\n        res = -1\n    if (jour1 == jour2) and (mois1 == mois2) and (annee1 == annee2):\n        res = 0\n    if (jour1 > jour2) or (mois1 > mois2) or (annee1 > annee2) and not((jour1 < jour2) or (mois1 < mois2) or (annee1 < annee2)):\n        res = 1\n    return res\n", "user": "userdId_42", "attemptID": 902, "exercise": "af7c1467ef9f7684d9ff58734067ae98", "exercise_name": "compareDates", "embeddingX": "81.5426", "embeddingY": "-26.070917"},{"extension": "py", "date": "2020-04-12 07:54:53", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n    cpt=0\n    decomp=nombre\n    x=nombre%10\n    while decomp!=0:\n      if x!=chiffre:\n        decomp=decomp//10\n        x=decomp%10\n      else:\n        cpt+=1\n    return cpt", "user": "userdId_11", "attemptID": 903, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "6.102966", "embeddingY": "13.445872"},{"extension": "py", "date": "2020-03-12 21:50:38", "correct": "0", "upload": "def minimum(liste):\n  res=l([0])\n  for elem in liste:\n    if l[0]<elem:\n      res=elem\n  return res", "user": "userdId_23", "attemptID": 904, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "-50.522663", "embeddingY": "-0.8323634"},{"extension": "py", "date": "2020-03-05 23:41:25", "correct": "0", "upload": "def nbVoyelles(mot):\n  res=0\n  for i in range(len(mot)):\n    if mot[i]=='aeyuio':\n      res=res+1\n  return res", "user": "userdId_30", "attemptID": 905, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-8.886163", "embeddingY": "-52.07268"},{"extension": "py", "date": "2020-04-17 00:32:31", "correct": "0", "upload": "def listeDecroissante(scores):\n  ok=True\n  i=0\n  while i<len(lscore)-1 and ok:\n    if lscore[i]<=lscore[i+1]:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_43", "attemptID": 906, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "-3.656456", "embeddingY": "43.08188"},{"extension": "py", "date": "2020-03-06 00:42:33", "correct": "0", "upload": "def ecart(liste):\n  if len(liste)==0:\n    return None\n  max=liste[0]\n  for i in range (1,len(liste)):\n    if liste[i]>max:\n        max=liste[i]\n  min=liste[0]\n  for i in range(1,len(liste)):\n    if liste[i]<min:\n        min=liste[i]\n    ecart=max-min\n  return ecart\n  \n    ", "user": "userdId_1", "attemptID": 907, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "14.256644", "embeddingY": "-84.36714"},{"extension": "py", "date": "2020-03-08 21:24:37", "correct": "1", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if fin1>=debut2 and debut1<=fin2:\n    return True\n  else:\n    return False", "user": "userdId_1", "attemptID": 908, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "56.084015", "embeddingY": "-26.05581"},{"extension": "py", "date": "2020-06-02 22:37:00", "correct": "0", "upload": "def somme(liste):\n  res=0\n  for i in liste:\n    res+=liste[i]\n  return res", "user": "userdId_12", "attemptID": 909, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-66.51164", "embeddingY": "-12.335438"},{"extension": "py", "date": "2020-03-30 22:05:17", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n  i=0\n  j=0\n  res = -1\n  while j <3:\n    print(l[i] , x,i)\n    if l[i] == x:\n      j+=1\n      if j == 3:\n        res = l[i+1]\n    i+=1\n  return(res)", "user": "userdId_4", "attemptID": 910, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-8.397862", "embeddingY": "70.412865"},{"extension": "py", "date": "2020-04-16 23:48:02", "correct": "0", "upload": "def indiceInsertion(sc,scores):\n  for i in range(len(scores)):\n    if sc>scores[i]:\n      return i", "user": "userdId_1", "attemptID": 911, "exercise": "f8a820b2bd54d18d36716e3d703858f7", "exercise_name": "indiceInsertion", "embeddingX": "-18.181736", "embeddingY": "-46.277958"},{"extension": "py", "date": "2020-04-08 00:02:17", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  P=[]\n  i=0\n  c=True\n  for lettre in phrase:\n    if 'a'>=lettre>='z':\n      P.append(lettre)\n    \n  while i<(len(P)/2) and c:\n    \n    if P[i]==P[len(P)-i-1]:\n      c=True\n    else:\n      c=False\n    i=i+1\n  if c==True:\n    return True\n  else:\n    return False", "user": "userdId_19", "attemptID": 912, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "10.371645", "embeddingY": "-3.825969"},{"extension": "py", "date": "2020-03-13 00:49:15", "correct": "1", "upload": "def sommeNbPairs(liste):\n  res=0\n  for i in range(len(liste)):\n      if liste[i]%2==0:\n        res=res+liste[i]\n  return res\n", "user": "userdId_12", "attemptID": 913, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "-19.303818", "embeddingY": "-56.70182"},{"extension": "py", "date": "2020-04-12 08:46:32", "correct": "0", "upload": "def suiteAriGeo(liste):\n  i=0\n  while i<len(liste)-1:\n    a=liste[0]\n    b=liste[0]\n    if liste[0]==i and liste[i+1]==i:\n      a=1\n      b=0\n    if liste[i+1]==liste[i]+(liste[1]-liste[0]):\n      b=liste[1]-liste[0]\n    if liste[0]!=0:                        \n      if liste[i+1]==liste[i]*liste[1]/liste[0]:\n        a=liste[1]/liste[0]\n        b=0\n    if liste[i+1]==liste[i]*(liste[1]-liste[0])+(liste[i]-(liste[i-1]*(liste[1]-liste[0]))):\n      a=liste[1]-liste[0]\n      b=liste[i]-(liste[i-1]*a)\n    i=i+1\n  ok=True\n  i=0\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=a*liste[i]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 914, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "33.320564", "embeddingY": "85.63068"},{"extension": "py", "date": "2020-04-14 04:11:01", "correct": "1", "upload": "def listeDecroissante(scores):\n  i=0\n  ok=True\n  while i<len(scores)-1 and ok:\n    if scores[i]<scores[i+1]:\n      ok=False\n    i+=1\n  return ok", "user": "userdId_21", "attemptID": 915, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "20.386269", "embeddingY": "45.707306"},{"extension": "py", "date": "2020-03-24 05:39:29", "correct": "0", "upload": "def compare(chaine1,chaine2):\n    if chaine1=='':\n      res=-1\n    elif chaine2=='':\n      res=1\n    else:\n      res=0\n      i=0\n      mmlttr=0\n      while i<len(chaine1) and i<len(chaine2):\n        if chaine1[i]>chaine2[i]:\n          res=-1\n        elif chaine1[i]<chaine2[i]:\n          res=1\n        else:\n          mmlttr=mmlttr+1\n        i=i+1\n      if len(chaine1)>len(chaine2):\n        if len(chaine2)==mmlttr:\n          res=1\n      elif len(chaine1)<len(chaine2):\n        if len(chaine1)==mmlttr:\n          res=-1\n    return res", "user": "userdId_18", "attemptID": 916, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-30.462282", "embeddingY": "63.523014"},{"extension": "py", "date": "2020-03-12 21:43:37", "correct": "1", "upload": "def nbVoyelles(mot):\n  cpt=0\n  for lettre in mot:\n    if lettre in 'aeiouy':\n      cpt=cpt+1\n  return cpt", "user": "userdId_23", "attemptID": 917, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "16.0925", "embeddingY": "-24.226803"},{"extension": "py", "date": "2020-03-05 23:47:41", "correct": "0", "upload": "def maximum(liste):\n  res=0\n  for elem in liste:\n    if res>elem:\n      res=elem\n  return res", "user": "userdId_23", "attemptID": 918, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "30.860004", "embeddingY": "-43.07007"},{"extension": "py", "date": "2020-03-13 00:50:39", "correct": "1", "upload": "def sommeNPremiersEntiersPairs(n):\n  res=0\n  for i in range(n+1):\n    if i%2==0:\n      res=res+i\n  return res", "user": "userdId_2", "attemptID": 919, "exercise": "3030dc079e6607c253e89e8ef4784b74", "exercise_name": "sommeNPremiersEntiersPairs", "embeddingX": "29.68227", "embeddingY": "-11.912729"},{"extension": "py", "date": "2020-04-14 04:29:24", "correct": "0", "upload": "def indiceInsertion(sc,scores):\n  i=0\n  res=0\n  while i<len(scores):\n    if sc>=scores[i]:\n      res=i\n    i=i+1\n  return res", "user": "userdId_7", "attemptID": 920, "exercise": "f8a820b2bd54d18d36716e3d703858f7", "exercise_name": "indiceInsertion", "embeddingX": "-17.557678", "embeddingY": "61.9807"},{"extension": "py", "date": "2020-04-06 01:00:59", "correct": "1", "upload": "def elemGeo(n,u0,q):\n  res=u0*(q**n)\n  return res", "user": "userdId_15", "attemptID": 921, "exercise": "d7c83a7fb9b49e28804e55955ad06968", "exercise_name": "elemGeo", "embeddingX": "-39.083954", "embeddingY": "17.63285"},{"extension": "py", "date": "2020-04-12 07:51:36", "correct": "0", "upload": "def suiteAriGeo(liste):\n  i=0\n  while i<len(liste)-1:\n    a=liste[i]-liste[i-1]\n    b=liste[i]-liste[i-1]\n    if liste[i+1]==liste[i]+b:\n      a=1\n    if liste[0]!=0:\n      if liste[i+1]==liste[1]/liste[0]:\n        a=liste[1]/liste[0]\n        b=0\n    i=i+1\n  ok=True\n  i=0\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=a*liste[i]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 922, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "35.614883", "embeddingY": "80.45785"},{"extension": "py", "date": "2020-03-03 06:21:07", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut1 or fin1 in debut2 and fin2:\n    return True\n  else:\n    return False", "user": "userdId_8", "attemptID": 923, "exercise": "6fd66bb2393fbf3809f1c6d04f3831f7", "exercise_name": "rendezVous", "embeddingX": "58.085796", "embeddingY": "-28.641363"},{"extension": "py", "date": "2020-03-06 00:24:32", "correct": "0", "upload": "def maximum(liste):\n  res=liste[0]\n  for elem in liste:\n     if res<elem:\n        res=elem\n  return res", "user": "userdId_23", "attemptID": 924, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "42.23571", "embeddingY": "-57.85847"},{"extension": "py", "date": "2020-03-06 00:04:26", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    res=0\n  else:\n    for elem in mot:\n      res=0\n      if elem=='a,e,i,o,u,y':\n        res=res+1\n  return res     ", "user": "userdId_14", "attemptID": 925, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "2.560579", "embeddingY": "-26.768064"},{"extension": "py", "date": "2020-04-12 10:32:25", "correct": "0", "upload": "def phrasePalindrome(phrase):\n    if len(phrase)==0:\n      res=True\n    else:\n      res=True\n      i=0\n      x=''\n      while i<len(phrase)//2 and res:\n        if phrase[i]!=phrase[-(i+1)]:\n          res=False\n          i+=1\n        if (phrase[i]==x)!=phrase[-(i+1)]:\n          res=False\n        i+=1\n    return res", "user": "userdId_11", "attemptID": 926, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "33.20388", "embeddingY": "35.299"},{"extension": "py", "date": "2020-04-07 20:40:37", "correct": "0", "upload": "def suiteAri(liste):\n  res=0\n  for i in liste:\n    if liste[i+1]%liste[i]==0:\n      res=False\n    elif liste[i]%liste[i+1]!=liste[i+1]%liste[i+2]:\n      res=False\n    else:\n      res=True\n  return res", "user": "userdId_3", "attemptID": 927, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "34.18356", "embeddingY": "-24.21426"},{"extension": "py", "date": "2020-03-04 05:03:44", "correct": "0", "upload": "def maximum(liste):\n    if len(liste)==0:\n      res=None\n    else:\n      res=liste[0]\n      for i in range(len(1,liste)):\n        if liste[i]>res:\n          res=i\n    return res", "user": "userdId_18", "attemptID": 928, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "1.3428707", "embeddingY": "-55.312813"},{"extension": "py", "date": "2020-04-06 21:25:30", "correct": "0", "upload": "def produitScalaire(vec1,vec2):\n    if len(vec1)==0 or len(vec2)==0:\n      res=0\n    else:\n      res=0\n      for i in range(len(vec1)) and i in range(len(vec2)):\n        res=res+vec1[i]*vec2[i]\n    return res ", "user": "userdId_11", "attemptID": 929, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-31.72741", "embeddingY": "-40.920784"},{"extension": "py", "date": "2020-03-16 01:44:45", "correct": "1", "upload": "def nombrePair(n):\n  if n%2==0:\n    res=True\n  else:\n    res=False\n  return res", "user": "userdId_16", "attemptID": 930, "exercise": "3001254263845e9a478696f81a704d33", "exercise_name": "nombrePair", "embeddingX": "43.741154", "embeddingY": "-4.4556675"},{"extension": "py", "date": "2020-03-03 06:32:41", "correct": "0", "upload": "def bissextile(annee):\n  if annee%400 == 0:\n    res= False\n  else:\n    res= True\n      \n  return res", "user": "userdId_7", "attemptID": 931, "exercise": "a7d37636649c0ada991520788deeb2d0", "exercise_name": "bissextile", "embeddingX": "44.371212", "embeddingY": "-4.0243034"},{"extension": "py", "date": "2020-03-24 04:50:18", "correct": "0", "upload": "def quatrePlus100(liste):\n  i=0\n  res=[]\n  while i<len(liste) and i>100:\n    res.append(l[i])\n    i=i+1\n  return res", "user": "userdId_13", "attemptID": 932, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-19.670675", "embeddingY": "43.84644"},{"extension": "py", "date": "2020-03-23 00:41:26", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=[]\n    for i in range(len(liste)):\n      res=liste[i]>res\n  return res", "user": "userdId_8", "attemptID": 933, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-6.499282", "embeddingY": "-61.505688"},{"extension": "py", "date": "2020-03-06 00:38:55", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n  if len(mot)==0:\n    pos=None\n  else:\n    for elem in mot:\n      if lettre==elem:\n        pos=elem\n      else:\n        pos=None\n        \n  return pos", "user": "userdId_15", "attemptID": 934, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-13.000457", "embeddingY": "-32.98974"},{"extension": "py", "date": "2020-03-12 21:54:58", "correct": "0", "upload": "def minimum(liste):\n  res=len([0])\n  for elem in liste:\n    if res>elem:\n      res=elem\n  return res", "user": "userdId_23", "attemptID": 935, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "30.080948", "embeddingY": "-44.235874"},{"extension": "py", "date": "2020-03-08 23:15:14", "correct": "0", "upload": "from math import sqrt \n\ndef polynome(a,b,c):\n  d=b**2-(4*a*c)\n  if d<0:\n    return 'pas de solution'\n  elif d==0:\n    solution=-b/(2*a)\n    return solution\n  else:\n    if d>0:\n      solution1=((-b+sqrt(d))/(2*a))\n      solution2=((-b-sqrt(d))/(2*a))\n      return solution1 and solution2", "user": "userdId_1", "attemptID": 936, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-53.753036", "embeddingY": "7.4022264"},{"extension": "py", "date": "2020-03-05 21:37:31", "correct": "1", "upload": "def somme(liste):\n  res=0\n  for i in range(len(liste)): \n    res=res+liste[i]\n  return res", "user": "userdId_21", "attemptID": 937, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-45.17496", "embeddingY": "-36.125843"},{"extension": "py", "date": "2020-03-12 21:47:28", "correct": "1", "upload": "def nbVoyelles(mot):\n  cpt=0\n  for l in mot:\n    if l in 'aeiouy':\n      cpt=cpt+1\n  return cpt", "user": "userdId_32", "attemptID": 938, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "15.628637", "embeddingY": "-24.333853"},{"extension": "py", "date": "2020-03-05 23:42:37", "correct": "1", "upload": "def somme(liste):\n  res=0\n  for i in range (len(liste)):\n    res=res+liste[i]\n  return res", "user": "userdId_45", "attemptID": 939, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-44.216644", "embeddingY": "-36.37774"},{"extension": "py", "date": "2020-03-06 23:48:08", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  res=True or False\n  if debut1>=debut2 or fin1<=fin2:\n    if fin1>=debut2:\n      res=True\n  else:\n    res=False\n  return res", "user": "userdId_8", "attemptID": 940, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "55.19171", "embeddingY": "-20.73219"},{"extension": "py", "date": "2020-03-06 00:47:03", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    res=0\n  else:\n      i=\"a,e,i,o,u,y\"\n      if i in mot:\n        res=res+1\n  return res             \n\n      \n    ", "user": "userdId_33", "attemptID": 941, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "4.9973774", "embeddingY": "-33.12113"},{"extension": "py", "date": "2020-04-06 06:32:58", "correct": "0", "upload": "def produitScalaire(vec1,vec2):\n  res=0\n  i=0\n  j=0\n  while i<len(vec1) and j<len(vec2):\n    res=(i*j)+res\n    i=i+1\n    j=j+1\n  return res", "user": "userdId_3", "attemptID": 942, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-12.785396", "embeddingY": "50.229633"},{"extension": "py", "date": "2020-03-05 21:32:56", "correct": "0", "upload": "def somme(liste):\n    res=0\n    for i in range (len(liste)):\n      res=res+liste[i]\n    return None", "user": "userdId_49", "attemptID": 943, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-40.93074", "embeddingY": "-36.102444"},{"extension": "py", "date": "2020-04-08 00:18:07", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  res=0\n  if nombre==0:\n    res=0\n  else:\n    while nombre!=0:\n      chiffre2=nombre%10\n      if chiffre2==chiffre:\n        res=res+1\n      nombre=nombre//10\n  return res", "user": "userdId_2", "attemptID": 944, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "15.692913", "embeddingY": "12.403504"},{"extension": "py", "date": "2020-03-12 21:51:07", "correct": "0", "upload": "def nbVoyelles(mot):\n  cpt=0\n  for i in range(len(mot)):\n    if mot[i] in 'aeiouy':\n     cpt=+3\n  return cpt", "user": "userdId_51", "attemptID": 945, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-9.909641", "embeddingY": "-55.384617"},{"extension": "py", "date": "2020-03-10 04:25:35", "correct": "1", "upload": "def sommeNPremiersEntiersPairs(n):\n  res= 0\n  if n < 0:\n    res=0\n  else:\n    for i in range(n+1):\n      if i%2 == 0:\n        res= res + i\n  return res", "user": "userdId_7", "attemptID": 946, "exercise": "3030dc079e6607c253e89e8ef4784b74", "exercise_name": "sommeNPremiersEntiersPairs", "embeddingX": "28.892897", "embeddingY": "-12.804346"},{"extension": "py", "date": "2020-03-17 05:51:47", "correct": "0", "upload": "def permutationListe(liste,permutation):\n  res=0\n  for elem in liste:\n    res=elem+res\n  return res", "user": "userdId_25", "attemptID": 947, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-32.31389", "embeddingY": "4.628681"},{"extension": "py", "date": "2020-04-12 05:58:01", "correct": "0", "upload": "def suiteGeo(liste):\n    if len(liste)==0:\n      res=True\n    else:\n      res=True\n      for i in range(1,len(liste)):\n        x=liste[1]//liste[0]\n        if liste[i]==0:\n          res=False\n        else:         \n          if liste[i]==liste[i-1]*x:\n            res=True\n          else:\n            res=False\n    return res", "user": "userdId_11", "attemptID": 948, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "-13.861695", "embeddingY": "-81.63465"},{"extension": "py", "date": "2020-03-27 06:18:10", "correct": "0", "upload": "def compare (chaine1,chaine2):\n  i = 0\n  res = 0\n  while i < len(chaine1) and res == 0 :\n    if chaine1[i] < chaine2[i]:\n      res = -1\n    elif chaine1[i] > chaine2[i]:\n      res = 1\n    else :\n      res = 0\n    i = i + 1\n  if len(chaine1) > len(chaine2):\n    res =  1\n  elif len(chaine1) < len(chaine2): \n    res = -1\n  else :\n    res = 0\n  return res ", "user": "userdId_17", "attemptID": 949, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-25.604784", "embeddingY": "59.96808"},{"extension": "py", "date": "2020-03-23 02:13:09", "correct": "0", "upload": "def sommeNbPairs(liste):\n    res=0\n    for i in range (len(liste)):\n      if i%2==0 :\n        res= res+i\n    return res", "user": "userdId_24", "attemptID": 950, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "-19.263268", "embeddingY": "-55.02951"},{"extension": "py", "date": "2020-03-05 22:09:43", "correct": "0", "upload": "def maximum(liste):\n    res=0\n    for elen in liste:\n     \tif elen>0:\n        \tres=elen\n    return res\n  \n  ", "user": "userdId_49", "attemptID": 951, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "30.653925", "embeddingY": "-42.18315"},{"extension": "py", "date": "2020-04-06 15:15:25", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  i=0\n  for i in range(nombre):\n    if 'nombre[i]'=='chiffre':\n      cpt=cpt+1\n    i=i+1\n  return cpt", "user": "userdId_3", "attemptID": 952, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-18.343159", "embeddingY": "-22.35539"},{"extension": "py", "date": "2020-04-03 00:12:48", "correct": "0", "upload": "def stockerChiffres(nombre):\n  res=[]\n  while nombre!=0:\n    res.append(nombre%10)\n    nombre=nombre//10\n  return res", "user": "userdId_12", "attemptID": 953, "exercise": "49a87f644f84a443327fb4315b47f249", "exercise_name": "stockerChiffres", "embeddingX": "44.137188", "embeddingY": "14.94573"},{"extension": "py", "date": "2020-03-29 23:51:42", "correct": "0", "upload": "def permutationListe(liste,permutation):\n  res = liste\n  for i in range(len(liste)) :\n    res[permutation[i]] = liste[i]\n    print (res)\n  return res", "user": "userdId_6", "attemptID": 954, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-49.40145", "embeddingY": "-31.315693"},{"extension": "py", "date": "2020-03-03 05:08:35", "correct": "0", "upload": "def nbVoyelles(mot):\n  res = 0\n  for elem in mot :\n    if elem in [\"aeiouy\"]:\n      res = res + 1\n  return None", "user": "userdId_17", "attemptID": 955, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "14.296306", "embeddingY": "-33.547012"},{"extension": "py", "date": "2020-03-07 00:47:17", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1<annee2:\n    res=-1\n  elif annee1>annee2:\n      res=1\n  elif mois1<mois2:\n      res=-1\n      if mois1>mois2:\n        res=1\n      elif jour1<jour2:\n        res=-1\n        if jour1>jour2:\n          res=1\n  else:\n    res=0\n  return res", "user": "userdId_8", "attemptID": 956, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "80.76691", "embeddingY": "-33.51645"},{"extension": "py", "date": "2020-03-06 00:16:33", "correct": "0", "upload": "def nbVoyelles(mot):\n  voyel='aeiouy'\n  if len(mot)==0:\n    voy=None\n  else:\n    voy=0\n    for i in range(len(mot)):\n      if voyel[i] == mot[i]:\n        voy=voy+1\n  return voy", "user": "userdId_13", "attemptID": 957, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-2.5738256", "embeddingY": "-44.66426"},{"extension": "py", "date": "2020-03-06 00:22:19", "correct": "0", "upload": "def maximum(liste):\n  res= -12\n  for elem in liste:\n    if  res < elem:\n      res=elem\n  return res", "user": "userdId_20", "attemptID": 958, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "43.812607", "embeddingY": "-53.392254"},{"extension": "py", "date": "2020-03-02 07:57:33", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1<=annee2 and mois1<=annee2 and jour1<jour2:\n    return -1\n  elif annee1==annee2 and mois1==mois2 and jour1==jour2:\n    return 0\n  else:\n    return 1\n  \ncompareDates(10,1,2020,14,2,2020)\ncompareDates(14,2,2020,11,2,2020)\ncompareDates(10,1,2020,10,1,2020)", "user": "userdId_1", "attemptID": 959, "exercise": "af7c1467ef9f7684d9ff58734067ae98", "exercise_name": "compareDates", "embeddingX": "89.64046", "embeddingY": "-12.464051"},{"extension": "py", "date": "2020-04-10 00:20:29", "correct": "0", "upload": "def suiteAriGeo(liste):\n  i=0\n  while i<len(liste)-1:\n    a=liste[1]-liste[0]\n    b=liste[1]-liste[0]\n    if liste[i+1]==liste[i]*a:\n        b=0 and a==liste[1]/liste[0]\n    if liste[i+1]==liste[i]+b:\n      a=1 and b==liste[1]-liste[0]\n    i=i+1\n  \ndef verifSuiteAriGeo(liste,a,b):\n  ok=True\n  i=0\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=a*liste[i]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 960, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "30.66238", "embeddingY": "78.76747"},{"extension": "py", "date": "2020-06-02 07:22:59", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n\tres=False\n\tif debut2<=debut1:\n\t\tif fin2>=debut1:\n\t\t\tres=True\n\tif debut2<=fin1:\n\t\tif fin2>=fin1:\n\t\t\tres=True\n\tif debut1==None or debut2==None or fin1==None or fin2==None:\n\t\tres=False\n\treturn res", "user": "userdId_3", "attemptID": 961, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "55.45153", "embeddingY": "-22.687954"},{"extension": "py", "date": "2020-03-31 04:05:54", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n  trouve=False\n  i=0\n  cpt=0\n  while i<len(l) and not trouve:\n    if l[i]==x:\n      cpt=cpt+1\n    if cpt==n:\n     trouve=True\n    i=i+1\n  res=i-1\n  return res", "user": "userdId_50", "attemptID": 962, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-0.78770185", "embeddingY": "72.99187"},{"extension": "py", "date": "2020-03-31 05:28:28", "correct": "0", "upload": "def nbChiffres(nombre):\n  res=nombre\n  cpt=0\n  while res>0:\n    res=res//10\n    cpt=cpt+1\n  res=cpt\n  return res", "user": "userdId_7", "attemptID": 963, "exercise": "3dcf332c003a1f3bf15df22ee17884a3", "exercise_name": "nbChiffres", "embeddingX": "0.9210932", "embeddingY": "22.649763"},{"extension": "py", "date": "2020-04-09 08:58:16", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n    cpt=0\n    decomp=nombre%10\n    while reste!=1:\n      decomp=decomp%10\n      if decomp==chiffre:\n        cpt+=1\n    if cpt==0:\n      cpt=1\n    return cpt\n    ", "user": "userdId_11", "attemptID": 964, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "1.9990146", "embeddingY": "14.654702"},{"extension": "py", "date": "2020-03-23 00:28:03", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=[]\n    for i in range(len(liste)):\n      if liste[i]+1>liste[i]:\n        res=liste[i]+1\n  return res", "user": "userdId_8", "attemptID": 965, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-8.847053", "embeddingY": "-62.650208"},{"extension": "py", "date": "2020-03-10 03:16:55", "correct": "1", "upload": "def jourNuit(heure):\n  if (heure<0 or heure>24) :\n    res=\"l'heure saisie est invalide\"\n  else :\n    if (heure<5 or heure>=21) :\n      res=\"on est la nuit\"\n    elif (heure<12) :\n        res=\"on est le matin\"\n    elif (heure<17) :\n      \tres=\"on est l'apr\u00e8s-midi\"\n    else :\n        res=\"on est le soir\"\n    if (heure<6 or heure>=18) :\n        res=res+\" et il fait nuit\"\n    else :\n      \tres=res+\" et il fait jour\"\n  return res", "user": "userdId_27", "attemptID": 966, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "72.45472", "embeddingY": "14.379118"},{"extension": "py", "date": "2020-03-29 09:31:59", "correct": "1", "upload": "def sousChaine(s,debut,longueur):\n  res=''\n  fin=debut+longueur\n  if fin>len(s):\n    fin=len(s)\n  for i in range(debut,fin):\n    res=res+s[i]\n  return res", "user": "userdId_12", "attemptID": 967, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-76.66706", "embeddingY": "14.463915"},{"extension": "py", "date": "2020-04-06 09:34:45", "correct": "0", "upload": "def suiteGeo(liste):\n    if liste==[] or len(liste)==1:\n      ok=True\n    elif 0 in liste:\n      while 0 in liste:\n        liste.remove(0)\n      if liste==[] or len(liste)==1:\n        ok=True\n      else:\n        ok=False\n    else:\n      ok=True\n      i=1\n      while i<len(liste) and ok:\n        cte=liste[i]/liste[i-1]\n        if liste[0]*cte**i!=liste[i]:\n          ok=False\n        i+=1\n    return ok", "user": "userdId_18", "attemptID": 968, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "41.298546", "embeddingY": "67.57239"},{"extension": "py", "date": "2020-04-05 07:01:07", "correct": "0", "upload": "def prononcable(mot):\n    ok=True\n    voy=0\n    csn=0\n    i=0\n    while i<len(mot) and voy<4 and csn<4:\n      if mot[i] in 'aeiouy':\n        voy+=1\n        csn=0\n      else:\n        csn+=1\n        voy=0\n    if voy>3 or csn>3:\n      ok=False\n    return ok", "user": "userdId_18", "attemptID": 969, "exercise": "6318b210c201fba050d60bc0913cb7ef", "exercise_name": "prononcable", "embeddingX": "12.269057", "embeddingY": "39.364494"},{"extension": "py", "date": "2020-04-06 08:12:28", "correct": "0", "upload": "def nextConway(s):\n    liste=[]\n    while s!=0:\n      liste.append(s%10)\n      s//=10\n    if len(liste)==1:\n      cw=[1,1]\n    elif len(liste)==2:\n      cw=[2,1]\n    else:\n      nliste=[0]\n      for i in range(len(liste)):\n        nliste=[liste[i]]+nliste\n      cw=[]\n      cpt=1\n      for i in range(len(nliste)-1):\n        if nliste[i]==nliste[i+1]:\n          cpt+=1\n        else:\n          cw+=[cpt]\n          cw+=[nliste[i]]\n          cpt=1\n    res=0\n    for i in range(len(cw)):\n      res+=cw[-i-1]*10**abs(-i)\n    return res", "user": "userdId_18", "attemptID": 970, "exercise": "a580c32690609356dae4401b3c89a3b8", "exercise_name": "nextConway", "embeddingX": "44.308464", "embeddingY": "17.221783"},{"extension": "py", "date": "2020-03-12 07:43:24", "correct": "0", "upload": "def bissextile(annee):\n  if annee%4==0 and annee%100!=0 and annee%400==0:\n      return True\n  else:\n    return False", "user": "userdId_1", "attemptID": 971, "exercise": "a7d37636649c0ada991520788deeb2d0", "exercise_name": "bissextile", "embeddingX": "51.007027", "embeddingY": "-1.0078328"},{"extension": "py", "date": "2020-04-06 16:21:10", "correct": "0", "upload": "def suiteGeo(liste):\n    if 0 not in liste:\n        if len(liste) == 0 or len(liste) == 1:\n            res = True\n        else:\n            test = liste[1]/liste[0]\n            if len(liste) >= 3:\n                for i in range(2,len(liste)):\n                    if liste[i]/liste[i-1] == test:\n                        res = True\n                    else:\n                        res = False\n            else:\n                res = True\n    return res", "user": "userdId_42", "attemptID": 972, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "-17.433865", "embeddingY": "-82.81325"},{"extension": "py", "date": "2020-03-09 05:39:53", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  \n  res=0\n  for elem in jour1,mois1,annee1,jour2,mois2,annee2:\n    \n    if (jour1,mois1,annee1<jour2,mois2,annee2):\n       res=res-1\n      \n    if (jour1,mois1,annee1==jour2,mois2,annee2):\n       res=res\n    \n    if (jour1,mois1,annee1<jour2,mois2,annee2):\n       res=res+1\n      \n  return res", "user": "userdId_23", "attemptID": 973, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "-20.495415", "embeddingY": "-7.688527"},{"extension": "py", "date": "2020-04-03 00:33:10", "correct": "0", "upload": "def doubleChiffre(nombre):\n  res=False\n  compare=nombre%10\n  while nombre!=0 and res==False:\n    nombre=nombre//10\n    if nombre%10==compare:\n      res=True\n    prec=nombre%10\n  return res", "user": "userdId_12", "attemptID": 974, "exercise": "c83ea6acd3e9f6f5543e87d515e8a44a", "exercise_name": "doubleChiffre", "embeddingX": "11.999761", "embeddingY": "20.195604"},{"extension": "py", "date": "2020-04-13 20:41:26", "correct": "1", "upload": "def phrasePalindrome(phrase):\n  res=True\n  i=0\n  j=len(phrase)-1\n  while i<j and res:\n    if phrase[i]==' ':\n      i+=1\n    elif phrase[j]==' ':\n      j-=1\n    elif phrase[i]!=phrase[j]:\n      res=False\n    else:\n      i+=1\n      j-=1\n  return res", "user": "userdId_8", "attemptID": 975, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "37.733875", "embeddingY": "42.002544"},{"extension": "py", "date": "2020-03-06 00:21:35", "correct": "0", "upload": "def maximum(liste):\n  res=(liste)\n  for elem in liste:\n     if res<elem:\n        res=elem\n  return res", "user": "userdId_23", "attemptID": 976, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "41.240437", "embeddingY": "-55.11338"},{"extension": "py", "date": "2020-03-13 00:42:28", "correct": "1", "upload": "def sommeNPremiersEntiersPairs(n):\n  if n<0 :\n    res=0\n  else:\n    res=0\n    for i in range(n+1):\n      if i%2==0 :\n        res=res+i\n  \n  return res", "user": "userdId_15", "attemptID": 977, "exercise": "3030dc079e6607c253e89e8ef4784b74", "exercise_name": "sommeNPremiersEntiersPairs", "embeddingX": "28.897018", "embeddingY": "-12.791451"},{"extension": "py", "date": "2020-03-31 04:09:33", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n  i=0\n  cpt=0\n  trouve=False\n  if l==[]:\n    res=None\n  else:\n    while i<len(l) and not trouve:\n      if x==l[i]:\n        cpt+=1  \n      if n==cpt:\n        trouve=True    \n      i+=1\n      res=i-1\n    if n>cpt:\n      res=None\n    elif cpt==0:\n      res=None\n  return res", "user": "userdId_27", "attemptID": 978, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-0.48213738", "embeddingY": "67.72613"},{"extension": "py", "date": "2020-05-11 00:25:56", "correct": "0", "upload": "def listeDecroissante(scores):\n  ok=True\n  i=0\n  while i<len(scores)-1:\n    if scores[i]>scores[i+1]:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_12", "attemptID": 979, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "16.040983", "embeddingY": "49.18053"},{"extension": "py", "date": "2020-03-22 08:24:39", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n    if fin2>=debut1 and fin1>=debut2:\n      res=True\n    else:\n      res=False ", "user": "userdId_47", "attemptID": 980, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "50.15711", "embeddingY": "-25.080631"},{"extension": "py", "date": "2020-04-08 00:08:10", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  ok=False\n  i=0\n  j=0\n  while i<len(phrase)//2 and j<len(phrase)//2:\n    if phrase[i]==\" \":\n      i+=1\n      if phrase[i]!=phrase[-j-1]:\n        ok=False\n      else:\n        ok=True\n    elif phrase[-j]==\" \":\n      j+=1\n      if phrase[i]!=phrase[-j-1]:\n        ok=False\n      else:\n        ok=True\n    elif phrase[i]!=phrase[-j-1]:\n      ok=False\n    else:\n      ok=True\n    i+=1\n    j+=1\n  if phrase==\"\":\n    ok=True\n  return ok", "user": "userdId_13", "attemptID": 981, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "36.792187", "embeddingY": "33.90505"},{"extension": "py", "date": "2020-04-06 22:35:36", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n    res=0\n    nb=nombre\n    while nb//10!=0:\n      if nb%10==chiffre:\n        res=res+1\n      nb=nb//10\n      \n      ", "user": "userdId_28", "attemptID": 982, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "14.6315365", "embeddingY": "12.313628"},{"extension": "py", "date": "2020-03-23 01:00:10", "correct": "0", "upload": "def prononcable(mot):\n  res=True\n  aux=''\n  for c in mot:\n    if c!=aux:\n      res=False\n    aux=c\n  return res", "user": "userdId_27", "attemptID": 983, "exercise": "6318b210c201fba050d60bc0913cb7ef", "exercise_name": "prononcable", "embeddingX": "19.123854", "embeddingY": "-4.623145"},{"extension": "py", "date": "2020-03-30 21:33:52", "correct": "0", "upload": "def fusion(liste1,liste2):\n  i=0\n  j=0\n  listefusion=[]\n  while i<len(liste1) and j<len(liste2):\n    if liste1[i]>liste2[j]:\n      listefusion.append(liste2[j])\n      j=j+1\n    else:\n      listefusion.append(liste1[i])\n      i=i+1\n\n  if len(liste1)>len(liste2):\n    for ind in range (i,len(liste1)):\n      listefusion.append(liste1[ind])\n\n  if len(liste2)>len(liste1):\n    for ind in range (j,len(liste2)):\n      listefusion.append(liste2[ind])\n  return listefusion\n", "user": "userdId_19", "attemptID": 984, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-34.212452", "embeddingY": "49.27065"},{"extension": "py", "date": "2020-03-17 06:40:16", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n  res=0\n  for i in range(0,len(mot)):\n    if mot[i]==lettre:\n      res=i\n  return res", "user": "userdId_7", "attemptID": 985, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-20.454193", "embeddingY": "-39.829536"},{"extension": "py", "date": "2020-04-06 22:25:37", "correct": "0", "upload": "def motPalindrome(mot):\n    if len(mot)==0:\n      res=True\n    else:\n      res=True\n      i=0\n      while i<len(mot) and res==True:\n        if mot[i]==mot[-i]:\n          res=True\n          i+=1\n        else:\n          res=False\n    return res\n", "user": "userdId_11", "attemptID": 986, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "26.60177", "embeddingY": "43.96838"},{"extension": "py", "date": "2020-03-31 05:26:13", "correct": "0", "upload": "def nbChiffres(nombre):\n  while nombre//10>0:\n    nombre=nombre//10\n  return res", "user": "userdId_13", "attemptID": 987, "exercise": "3dcf332c003a1f3bf15df22ee17884a3", "exercise_name": "nbChiffres", "embeddingX": "35.850677", "embeddingY": "9.86284"},{"extension": "py", "date": "2020-04-09 04:01:45", "correct": "1", "upload": "def suiteGeo(liste):\n  ok=True\n  i=0\n  if len(liste)<=1 :\n    ok=True\n  else :\n    if liste[0]==0 :\n      Q=0\n    else :\n      Q=(liste[1]/liste[0])\n    while i<(len(liste)-1) and ok :\n      if liste[i+1]!=(Q*liste[i]):\n        ok=False\n      i+=1\n  return ok ", "user": "userdId_15", "attemptID": 988, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "25.5707", "embeddingY": "69.49595"},{"extension": "py", "date": "2020-04-07 23:26:15", "correct": "0", "upload": "def motPalindrome(mot):\n  c=True\n  while i<(len(mot)/2) and c:\n    if mot[i]==mot[len(mot)-i]:\n      c=True\n    else:\n      c=False\n  if c==True:\n    return True\n  else:\n    return False\n    \n    \n\n", "user": "userdId_19", "attemptID": 989, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "-2.6455045", "embeddingY": "41.297142"},{"extension": "py", "date": "2020-03-20 00:32:59", "correct": "0", "upload": "def reconstruireChainePartielle(o,n):\n  res=\"\"\n  for i in range(o,len(s),n):\n     res=res+s[i]\n  return res", "user": "userdId_20", "attemptID": 990, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-44.867294", "embeddingY": "-22.766989"},{"extension": "py", "date": "2020-04-06 09:03:02", "correct": "1", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=True\n  i=1\n  while i<len(liste):\n    if liste[i]!=a*liste[i-1]+b:\n      res=False\n    i+=1\n  return res\ndef suiteGeo(liste):\n  cpt=0\n  i=1\n  a=1\n  b=0\n  while i<len(liste) and cpt!=2:\n    if liste[i-1]==0:\n      i+=1\n    else:\n      if liste[i]!=liste[i-1]:\n        a=liste[i]/liste[i-1]\n        cpt+=1\n    i+=1 \n  return verifSuiteAriGeo(liste,a,b)", "user": "userdId_27", "attemptID": 991, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "12.544767", "embeddingY": "77.765564"},{"extension": "py", "date": "2020-04-17 03:20:25", "correct": "0", "upload": "def minimum(liste):\n  min=liste[0]\n  for i in liste: \n    if i<min:\n      min=i\n  return min", "user": "userdId_21", "attemptID": 992, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "35.458538", "embeddingY": "-57.49209"},{"extension": "py", "date": "2020-03-09 21:56:04", "correct": "0", "upload": "def qualifJO(sexe,record,nbvictoires,champion):\n  if champion:\n    return True\n  elif nbVictoires <3:\n    return False\n  else:\n    if sexe=='M':\n      if record<12:\n        return True\n    else:\n      if record<15:\n        return True\n    return False", "user": "userdId_6", "attemptID": 993, "exercise": "78ec7738f3a7f3553d4a5c653534c32d", "exercise_name": "qualifJO", "embeddingX": "61.10991", "embeddingY": "-12.626912"},{"extension": "py", "date": "2020-04-03 00:45:22", "correct": "0", "upload": "def stockerChiffres(nombre):\n  res=[]\n  if nombre==0:\n    res=[0]\n  while nombre!=0:\n    res.append(n%10)\n    nombre=nombre//10\n  return res", "user": "userdId_1", "attemptID": 994, "exercise": "49a87f644f84a443327fb4315b47f249", "exercise_name": "stockerChiffres", "embeddingX": "39.69737", "embeddingY": "13.906712"},{"extension": "py", "date": "2020-04-10 00:53:47", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  ok=False\n  i=0\n  j=0\n  while i<len(phrase)//2 and j<len(phrase)//2:\n    if phrase[i]==\" \":\n      i=i+1\n    elif phrase[-j]==\" \":\n      j=j-1\n    elif phrase[i]!=phrase[-j-1]:\n      ok=False\n    i=i+1\n    j=j-1\n  if phrase==\"\":\n    ok=True\n  return ok", "user": "userdId_3", "attemptID": 995, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "43.298965", "embeddingY": "43.431965"},{"extension": "py", "date": "2020-04-07 23:12:36", "correct": "0", "upload": "def suiteGeo(liste):\n  ok=True\n  i=0\n  if len(liste)<=1 :\n    ok=True\n  else :\n    while i<(len(liste)-1) and ok :\n      if (liste[i]*liste[i+1])==0 :\n        ok=False\n      elif liste[i]!=(liste[0]*(liste[i+1]//liste[i])**i):\n        ok=False\n      i+=1\n  return ok", "user": "userdId_15", "attemptID": 996, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "51.167324", "embeddingY": "46.080036"},{"extension": "py", "date": "2020-03-02 02:51:40", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if jour1<jour2 and mois1<=mois2 and annee1<=annee2:\n    return -1\n  elif jour1!=jour2 and mois1!=mois2 and annee1!=annee2:\n    return 0\n  else:\n    return 1\n  \ncompareDates(10,1,2020,14,2,2020)\ncompareDates(14,2,2020,11,2,2020)\ncompareDates(10,1,2020,10,1,2020)", "user": "userdId_1", "attemptID": 997, "exercise": "af7c1467ef9f7684d9ff58734067ae98", "exercise_name": "compareDates", "embeddingX": "88.369156", "embeddingY": "-17.196804"},{"extension": "py", "date": "2020-03-17 06:26:46", "correct": "0", "upload": "def distribution(liste,n):\n    res=[0]*(n+1)\n    for i in range(len(liste)):\n      for i in range(n+1):\n        if liste[i]==n:\n          res[i]=res[n]+1\n    return res\n\n\n  \n  \n", "user": "userdId_28", "attemptID": 998, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-23.599724", "embeddingY": "-41.241814"},{"extension": "py", "date": "2020-03-17 06:39:46", "correct": "0", "upload": "def doubleLettre(mot):\n  c1=(0,len(mot),2)\n  c2=(1,len(mot),2)\n  for elem in mot:\n    if c1==c2:\n      res=True\n    else:\n      res=False\n  return res", "user": "userdId_8", "attemptID": 999, "exercise": "00da9cf1fa2b468d915724499459ed8f", "exercise_name": "doubleLettre", "embeddingX": "16.93312", "embeddingY": "-2.2455645"},{"extension": "py", "date": "2020-04-07 23:47:11", "correct": "0", "upload": "def suiteGeo(liste):\n  ok=True\n  i=0\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i]!=0:\n      q=liste[1]/liste[0]\n    if liste[i]!=0:\n      if liste[i+1]/liste[i]!=q:\n        ok=False\n    i=i+1\n  return ok\n\n", "user": "userdId_1", "attemptID": 1000, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "31.70754", "embeddingY": "63.744606"},{"extension": "py", "date": "2020-04-07 23:28:37", "correct": "0", "upload": "def suiteGeo(liste):\n  ok=True\n  i=0\n  if liste[i]==0:\n    ok=False\n  q=liste[0]*liste[1]\n  while i<len(liste)-1 and ok:\n    if liste[i]!=0:\n      if liste[i+1]/liste[i]!=q:\n        ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 1001, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "28.662508", "embeddingY": "67.51232"},{"extension": "py", "date": "2020-04-12 08:49:15", "correct": "0", "upload": "def suiteAriGeo(liste):\n  i=0\n  while i<len(liste)-1:\n    a=liste[0]\n    b=liste[0]\n    if liste[i]==liste[i+1]:\n      a=0\n      b=liste[i+1]\n    if liste[i+1]==liste[i]+(liste[1]-liste[0]):\n      b=liste[1]-liste[0]\n    if liste[0]!=0:                        \n      if liste[i+1]==liste[i]*liste[1]/liste[0]:\n        a=liste[1]/liste[0]\n        b=0\n    if liste[i+1]==liste[i]*(liste[1]-liste[0])+(liste[i]-(liste[i-1]*(liste[1]-liste[0]))):\n      a=liste[1]-liste[0]\n      b=liste[i]-(liste[i-1]*a)\n    i=i+1\n  ok=True\n  i=0\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=a*liste[i]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 1002, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "35.26503", "embeddingY": "85.18608"},{"extension": "py", "date": "2020-03-16 23:44:16", "correct": "1", "upload": "def sommeNbPairs(liste):\n  res=0\n  for elem in liste:\n    if elem%2==0:\n      res=res+elem\n  return res", "user": "userdId_12", "attemptID": 1003, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "29.704504", "embeddingY": "-18.684698"},{"extension": "py", "date": "2020-04-08 00:42:42", "correct": "1", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  if nombre==0:\n    cpt=cpt+1\n  while nombre!=0:\n    val=nombre%10\n    nombre=nombre//10\n    if val==chiffre:\n      cpt=cpt+1\n  \n  return cpt", "user": "userdId_5", "attemptID": 1004, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "15.714255", "embeddingY": "12.386271"},{"extension": "py", "date": "2020-04-08 00:08:02", "correct": "1", "upload": "def suiteGeo(liste):\n  ok=True\n  i=0\n  if len(liste)<=1 :\n    ok=True\n  else :\n    for elem in (liste) :\n      if liste[0]==0 :\n        Q=0\n      else :\n        Q=(liste[1]/liste[0])\n    while i<(len(liste)-1) and ok :\n      if liste[i+1]!=(Q*liste[i]):\n        ok=False\n      i+=1\n  return ok", "user": "userdId_15", "attemptID": 1005, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "45.04045", "embeddingY": "54.793453"},{"extension": "py", "date": "2020-04-12 08:23:25", "correct": "0", "upload": "def suiteAriGeo(liste):\n  i=0\n  while i<len(liste)-1:\n    a=liste[0]\n    b=liste[0]\n    if liste[i+1]==liste[i]+(liste[1]-liste[0]):\n      b=liste[1]-liste[0]\n    if liste[0]!=0:                        \n      if liste[i+1]==liste[i]*liste[1]/liste[0]:\n        a=liste[1]/liste[0]\n        b=0\n    if liste[i+1]==(liste[1]-liste[0])+liste[0]:\n      b=liste[0]\n    i=i+1\n  ok=True\n  i=0\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=a*liste[i]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 1006, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "36.057007", "embeddingY": "83.68816"},{"extension": "py", "date": "2020-03-08 23:24:07", "correct": "0", "upload": "from math import sqrt\n\ndef polynome(a,b,c):\n  d=b**2-(4*a*c)\n  if d<0:\n    return 'pas de solution'\n  elif d==0:\n    solution=-b/(2*a)\n    return solution\n  else:\n    if d>0:\n      solution1=(-b-sqrt(d))/(2*a)\n      solution2=(-b+sqrt(d))/(2*a)\n      return [solution1,solution2]", "user": "userdId_1", "attemptID": 1007, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-47.96524", "embeddingY": "9.979326"},{"extension": "py", "date": "2020-04-16 23:48:38", "correct": "0", "upload": "def meilleurScoreJoueur(score,joueur,nom):\n  nom=\"\"\n  i=0\n  if nom not in joueur:\n    return 0\n  else:\n    while i<len(joueur)-1:\n      if score[i+1]>score[i]:\n        return joueur[i+1]\n    i=i+1\n  return joueur\n", "user": "userdId_5", "attemptID": 1008, "exercise": "c96fadc94086276f98451a798b3bb730", "exercise_name": "meilleurScoreJoueur", "embeddingX": "50.891903", "embeddingY": "-10.959995"},{"extension": "py", "date": "2020-03-31 05:29:32", "correct": "1", "upload": "def nbChiffres(nombre):\n  res=nombre\n  cpt=0\n  while res>0:\n    res=res//10\n    cpt=cpt+1\n  res=cpt\n  if res==0:\n    res=1\n  return res", "user": "userdId_7", "attemptID": 1009, "exercise": "3dcf332c003a1f3bf15df22ee17884a3", "exercise_name": "nbChiffres", "embeddingX": "0.95049936", "embeddingY": "22.685724"},{"extension": "py", "date": "2020-04-05 23:57:05", "correct": "1", "upload": "def phrasePalindrome(phrase):\n    if phrase=='':\n      ok=True\n    else:\n      liste=[]\n      for c in phrase:\n        liste.append(c)\n      palindrome=[]\n      for c in liste:\n        if c!=' ':\n          palindrome.append(c)\n      ok=True\n      i=0\n      while i<len(palindrome) and ok:\n        if palindrome[i]!=palindrome[-i-1]:\n          ok=False\n        i+=1\n    return ok", "user": "userdId_18", "attemptID": 1010, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "45.039314", "embeddingY": "34.68887"},{"extension": "py", "date": "2020-04-13 21:17:10", "correct": "0", "upload": "def suiteAri(liste):\n  res=True\n  if len(liste)>1:\n    r=liste[1]-liste[0]\n    res=verifSuiteAriGeo(liste,1,r)\n  return res", "user": "userdId_8", "attemptID": 1011, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "-5.5956683", "embeddingY": "-73.17187"},{"extension": "py", "date": "2020-03-12 21:57:57", "correct": "0", "upload": "def maximum(liste):\n  res=liste[0]\n  for c in liste:\n    if i>=res:\n      res=c\n  return res", "user": "userdId_35", "attemptID": 1012, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "36.22405", "embeddingY": "-48.994335"},{"extension": "py", "date": "2020-04-07 03:22:09", "correct": "1", "upload": "def nextConway(s):\n    s=int(s)\n    liste=[]\n    while s!=0:\n      liste.append(s%10)\n      s//=10\n    nliste=[0]\n    for i in range(len(liste)):\n      nliste=[liste[i]]+nliste\n    cw=[]\n    cpt=1\n    for i in range(len(nliste)-1):\n      if nliste[i]==nliste[i+1]:\n        cpt+=1\n      else:\n        cw+=[cpt]\n        cw+=[nliste[i]]\n        cpt=1\n    res=0\n    for i in range(len(cw)):\n      res+=cw[-i-1]*10**abs(-i)\n    res=str(res)\n    return res", "user": "userdId_18", "attemptID": 1013, "exercise": "a580c32690609356dae4401b3c89a3b8", "exercise_name": "nextConway", "embeddingX": "-29.844967", "embeddingY": "-52.786613"},{"extension": "py", "date": "2020-04-06 03:42:46", "correct": "1", "upload": "def produitScalaire(vec1,vec2):\n  res=0\n  for i in range(len(vec1)):\n    res+=vec1[i]*vec2[i]\n  return res", "user": "userdId_6", "attemptID": 1014, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-52.130955", "embeddingY": "-37.05239"},{"extension": "py", "date": "2020-03-13 00:35:56", "correct": "0", "upload": "def sommeNbPairs(liste):\n  if liste==0:\n    res=0\n  else:\n    for n in (liste):\n      if liste[i]%2==0:\n        res=res+liste[i]\n    return res", "user": "userdId_5", "attemptID": 1015, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "31.08156", "embeddingY": "-23.414762"},{"extension": "py", "date": "2020-03-21 06:09:41", "correct": "1", "upload": "def sommeNbPairs(liste):\n  res=0\n  for i in range(len(liste)):\n    if liste[i]%2==0:\n      res=res+liste[i]\n  return res", "user": "userdId_9", "attemptID": 1016, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "-19.792099", "embeddingY": "-56.922756"},{"extension": "py", "date": "2020-03-13 23:34:52", "correct": "0", "upload": "def jourNuit(heure):\n  if heure<0 or heure>24:\n    res =\"l'heure saisi est invalide\"\n  else:\n    if heure<5 or heure>=21:\n      res=\"on est la nuit\"\n    elif heure<12:\n      res=\"on est le matin\"\n    elif heure<17:\n      res=\"on est l'apr\u00e8s-midi\"\n    else:\n      res=\"on est le soir\"\n    if heure<5 or heure>=18:\n      res=res+\" et il fait nuit\"\n    else:\n      res=res+\" et il fait jour\"\n  return res", "user": "userdId_14", "attemptID": 1017, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "72.97209", "embeddingY": "14.987829"},{"extension": "py", "date": "2020-03-12 21:45:00", "correct": "1", "upload": "def nbVoyelles(mot):\n  cpt=0\n  for lettre in mot:\n    if lettre in 'aeiouy':\n      cpt=cpt+1\n  return cpt", "user": "userdId_23", "attemptID": 1018, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "15.031899", "embeddingY": "-24.40045"},{"extension": "py", "date": "2020-03-03 00:08:59", "correct": "1", "upload": "def bissextile(annee):\n    if (annee%4 == 0 and annee%100 != 0) or annee%400 == 0:\n        return True\n    else:\n        return False", "user": "userdId_42", "attemptID": 1019, "exercise": "a7d37636649c0ada991520788deeb2d0", "exercise_name": "bissextile", "embeddingX": "51.062454", "embeddingY": "-0.116644554"},{"extension": "py", "date": "2020-03-24 05:50:36", "correct": "0", "upload": "def compare(chaine1,chaine2):\n  i=0\n  res=0\n  while i<len(chaine1) and i<len(chaine2) and res==0:\n    if chaine1[i]<chaine2[i]:\n      res=-1\n    elif chaine1[i]>chaine2[i]:\n      res=1\n    i=i+1\n  if len(chaine1)<len(chaine2) and len(chaine1)>len(chaine2):\n    res=-1\n  else:\n    res=1\n  return res\n\n", "user": "userdId_13", "attemptID": 1020, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-24.973991", "embeddingY": "61.707752"},{"extension": "py", "date": "2020-04-07 23:50:38", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  P=[]\n  i=0\n  c=True\n  if 'a'>=phrase[i]>='z':\n    P.append(phrase[i])\n  \n  while i<(len(P)/2) and c:\n    \n    if P[i]==P[len(P)-i-1]:\n        c=True\n    else:\n        c=False\n    i=i+1\n  if c==True:\n    return True\n  else:\n    return False", "user": "userdId_19", "attemptID": 1021, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "35.022717", "embeddingY": "42.238724"},{"extension": "py", "date": "2020-04-11 08:01:21", "correct": "0", "upload": "def sousChaine(s1,s2):\n  res=False\n  i=0\n  j=0\n  while i<len(s1) and j<len(s2) and s1[i]!=s2[j]:\n    j+=1\n  else:\n    while i<len(s1) and j<len(s2) and s1[i]==s2[j]:\n      if s1[i]==s2[j]:\n        res=True\n      i+=1\n      j+=1  \n  return res", "user": "userdId_8", "attemptID": 1022, "exercise": "4bdf8c9c5d020593e1771e4d3ae1ae0d", "exercise_name": "sousChaine", "embeddingX": "-4.8208013", "embeddingY": "58.759144"},{"extension": "py", "date": "2020-03-31 06:40:20", "correct": "0", "upload": "def doubleChiffre(nombre):\n  res=False\n  trouve=False\n  prec=0\n  while nombre!=0 and trouve==False:\n    com1=nombre%10\n    nombre=nombre//10\n    if com1==prec:\n      res=True\n      trouve=True\n    prec=com1  \n  return res", "user": "userdId_13", "attemptID": 1023, "exercise": "c83ea6acd3e9f6f5543e87d515e8a44a", "exercise_name": "doubleChiffre", "embeddingX": "11.194287", "embeddingY": "19.063454"},{"extension": "py", "date": "2020-04-07 22:16:47", "correct": "0", "upload": "def suiteGeo(liste):\n  ok=True\n  i=0\n  while i<len(liste)-1 and ok:\n    if liste[i]==0:\n      ok=False\n    if liste[i]!=0:\n      q=liste[0]*liste[1]\n    if liste[i]!=0:\n      if liste[i+1]/liste[i]!=q:\n        ok=False\n    i=i+1\n  return ok\n    ", "user": "userdId_1", "attemptID": 1024, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "29.059498", "embeddingY": "68.01132"},{"extension": "py", "date": "2020-05-04 22:45:50", "correct": "0", "upload": "def prononcable(mot):\n  res=True\n  cpt=0\n  i=0\n  while i<len(mot) and res:\n    if mot[i] not in 'aeiouy':\n      cpt+=1\n    elif mot[i] in 'aeiouy':\n      cpt=0\n    if cpt>=3:\n      res=False\n    i+=1\n  return res", "user": "userdId_26", "attemptID": 1025, "exercise": "6318b210c201fba050d60bc0913cb7ef", "exercise_name": "prononcable", "embeddingX": "14.456838", "embeddingY": "38.097916"},{"extension": "py", "date": "2020-04-06 06:31:33", "correct": "0", "upload": "def sousChaine(s1,s2):\n  res=True\n  i=0\n  j=0\n  while i<len(s1) and j<len(s2):\n    if s2[j]==' ':\n      j+=1\n    if s1[i]==s2[j]:\n      i+=1\n    j+=1\n  if i!=len(s1):\n    res=False\n  return res", "user": "userdId_27", "attemptID": 1026, "exercise": "a7cdd094daa2f0bfccc7a4ec419f7243", "exercise_name": "sousChaine", "embeddingX": "-5.028759", "embeddingY": "57.6714"},{"extension": "py", "date": "2020-03-08 22:11:52", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1==annee2 and mois1==mois2 and jour1==jour2:\n    return 0\n  elif annee1<=annee2 and mois1<=mois2 and jour1<jour2:\n    return -1\n  elif annee1<annee2 and mois1>=mois2 and jour1>=jour2:\n    return -1\n  elif annee1<annee2 and mois1>=mois2 and jour1<=jour2:\n    return -1\n  elif annee1<=annee2 and mois1<=mois2 and jour1>jour2:\n    return -1\n  else:\n    return 1", "user": "userdId_1", "attemptID": 1027, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "83.44635", "embeddingY": "-13.9395275"},{"extension": "py", "date": "2020-03-10 21:41:27", "correct": "0", "upload": "def ecart(liste):\n  res1=liste[0]\n  res2=liste[0]\n  for i in range(1,len(liste)):\n    if liste[i]>res1:\n      res1=liste[i]\n    if liste[i]<res2:\n      res2=liste[i]\n  res=res1-res2\n  return res", "user": "userdId_14", "attemptID": 1028, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "0.67465216", "embeddingY": "-82.534195"},{"extension": "py", "date": "2020-03-19 23:24:36", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  res=\"\"\n  for i in range(debut,longeur):\n    res=res+s[i]\n  return res", "user": "userdId_13", "attemptID": 1029, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-78.60144", "embeddingY": "12.207197"},{"extension": "py", "date": "2020-03-31 04:28:20", "correct": "1", "upload": "def indiceOccurrence(n,x,l):\n  cpt=0\n  trouve=False\n  i=0\n  while i<len(l) and trouve==False:\n    if l[i]==x:\n      cpt+=1\n    if cpt==n:\n      trouve=True\n    i+=1\n  if trouve:\n    res=i-1\n  else:\n    res=None\n  return res", "user": "userdId_13", "attemptID": 1030, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-0.61770266", "embeddingY": "69.46642"},{"extension": "py", "date": "2020-03-23 21:56:26", "correct": "0", "upload": "def quatrePlus100(liste):\n  res=[]\n  x=0\n  while len(res)<4 :\n    if liste[x]>100 :\n      res=res+liste[x]\n      x=x+1\n  return res\n\n      \n    ", "user": "userdId_28", "attemptID": 1031, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-24.83827", "embeddingY": "33.164494"},{"extension": "py", "date": "2020-03-31 04:02:35", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n  cpt=0\n  i=0\n  while i<len(l) and cpt<n:\n    if l[i]==x:\n       cpt=cpt+1\n    i=i+1\n  if cpt==0:\n    res=None\n  else:\n    res=[cpt]\n  return res", "user": "userdId_12", "attemptID": 1032, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-6.622837", "embeddingY": "77.610886"},{"extension": "py", "date": "2020-03-09 06:24:35", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  \n  res=0\n  \n  for elem in jour1,mois1,annee1,jour2,mois2,annee2:\n    \n    if ('jour1','mois1','annee1')<('jour2','mois2,''annee2'):\n       res=res-1\n      \n    if ('jour1','mois1','annee1')==('jour2','mois2','annee2'):\n       res=res\n    \n    if ('jour1','mois','annee1')<('jour2','mois2','annee2'):\n       res=res+1\n      \n  return res", "user": "userdId_23", "attemptID": 1033, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "-14.847285", "embeddingY": "0.2710827"},{"extension": "py", "date": "2020-03-23 01:07:19", "correct": "0", "upload": "def prononcable(mot):\n  if mot=='':\n    res=True\n  else:\n    res=True\n    aux=''\n    for c in mot:\n      if c==aux:\n        res=False\n      aux=c\n  return res", "user": "userdId_27", "attemptID": 1034, "exercise": "6318b210c201fba050d60bc0913cb7ef", "exercise_name": "prononcable", "embeddingX": "17.00656", "embeddingY": "-5.217703"},{"extension": "py", "date": "2020-03-02 02:31:32", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if fin1>debut2:\n    print(\"True\")\n  else:\n    print(\"False\")\n  \nrendezVous(1,10,7,20)\nrendezVous(1,7,10,20)", "user": "userdId_1", "attemptID": 1035, "exercise": "6fd66bb2393fbf3809f1c6d04f3831f7", "exercise_name": "rendezVous", "embeddingX": "64.51442", "embeddingY": "-23.967394"},{"extension": "py", "date": "2020-06-02 21:28:06", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  return debut1>fin2 or debut2>fin1", "user": "userdId_12", "attemptID": 1036, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "63.11083", "embeddingY": "-24.819637"},{"extension": "py", "date": "2020-03-31 00:46:35", "correct": "0", "upload": "def nombreSymetrique(nombre):\n  l = []\n  for nb in str(nombre):\n    l.append(int(nb))\n  \n  return listeSymetrique(res)", "user": "userdId_4", "attemptID": 1037, "exercise": "fae4d6a34289cf5bf06f9d6d17e8547e", "exercise_name": "nombreSymetrique", "embeddingX": "-38.570385", "embeddingY": "2.344184"},{"extension": "py", "date": "2020-03-23 00:33:40", "correct": "0", "upload": "def reconstruireChainePartielle(s,n):\n    res = \"\"\n    for i in range (s,n) :\n      res = res + n\n    return res", "user": "userdId_24", "attemptID": 1038, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-44.021717", "embeddingY": "-21.228882"},{"extension": "py", "date": "2020-04-08 07:43:53", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n    cpt=0\n    decomp=nombre%10\n    if decomp==chiffre:\n      cpt+=1\n    return cpt\n  ", "user": "userdId_11", "attemptID": 1039, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "41.016487", "embeddingY": "-5.309919"},{"extension": "py", "date": "2020-03-17 06:01:57", "correct": "0", "upload": "def maximum(liste):\n    if len (liste)==0:\n      res=0\n    else:\n         res=liste[0]\n         for elem in liste:\n            res=elem\n    return res", "user": "userdId_22", "attemptID": 1040, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "7.046712", "embeddingY": "-39.407257"},{"extension": "py", "date": "2020-03-06 00:41:16", "correct": "1", "upload": "def nbOccurrencesLettre(lettre,mot):\n  cpt=0\n  for elem in mot:\n    if lettre==elem:\n      cpt=cpt+1\n  res=cpt\n  return res\n\n    ", "user": "userdId_2", "attemptID": 1041, "exercise": "2864c9e5861229d2ff32570f6bc944fb", "exercise_name": "nbOccurrencesLettre", "embeddingX": "-12.433251", "embeddingY": "-25.975653"},{"extension": "py", "date": "2020-03-13 01:02:08", "correct": "1", "upload": "def doubleLettre(mot):\n\tres=0\n\tfor i in range(len(mot)):\n\t\tif mot[i]==mot[i-1]:\n\t\t\tres=1\n\tif res==1:\n\t\treturn True\n\tif res==0:\n\t\treturn False\n\t\t\t\n", "user": "userdId_19", "attemptID": 1042, "exercise": "00da9cf1fa2b468d915724499459ed8f", "exercise_name": "doubleLettre", "embeddingX": "-2.0435283", "embeddingY": "-60.744007"},{"extension": "py", "date": "2020-04-06 15:09:38", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  i=0\n  for i in range(nombre):\n    if chiffre==[nombre[i]]:\n      cpt=cpt+1\n    i=i+1\n  return cpt", "user": "userdId_3", "attemptID": 1043, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-20.78173", "embeddingY": "-29.793127"},{"extension": "py", "date": "2020-03-23 01:21:53", "correct": "0", "upload": "def moyenne(liste):\n    if liste==[]:\n      res=None\n    else:\n      x=0\n      cpt=0\n      for i in range(len(liste)): \n        x=x+i\n        cpt=cpt+1\n       \tres=x/cpt\n      return res", "user": "userdId_10", "attemptID": 1044, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "0.10597807", "embeddingY": "-7.120476"},{"extension": "py", "date": "2020-04-07 23:27:16", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  ok=False\n  i=0\n  while i<len(phrase)//2 and not ok:\n    if phrase[i]!=phrase[-i-1]:\n      ok=True\n    i+=1\n  if phrase==\"\":\n    ok=True\n  return ok", "user": "userdId_13", "attemptID": 1045, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "27.056713", "embeddingY": "37.900196"},{"extension": "py", "date": "2020-04-08 00:45:07", "correct": "1", "upload": "def compteChiffre(chiffre,nombre):\n    res=False \n    cpt=0\n    prec=None\n    while nombre!=0 and not res:\n      nb=nombre%10\n      nombre=nombre//10\n      if chiffre==prec:\n        cpt=cpt+1\n      prec=nb\n    if chiffre==0 and nombre==0:\n      cpt=1\n    return cpt\n    ", "user": "userdId_9", "attemptID": 1046, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "9.179648", "embeddingY": "23.801285"},{"extension": "py", "date": "2020-03-14 03:47:55", "correct": "1", "upload": "def nombrePair(n):\n    elem=n\n    if elem%2==0:\n      res=True\n    else:\n      res=False\n    return res", "user": "userdId_14", "attemptID": 1047, "exercise": "3001254263845e9a478696f81a704d33", "exercise_name": "nombrePair", "embeddingX": "41.706398", "embeddingY": "-5.1257405"},{"extension": "py", "date": "2020-04-12 05:34:35", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n    if len(liste)==0:\n      res=True\n    else:\n      res=False\n      i=1\n      while i<len(liste) and res:\n        if liste[i]==a*liste[i-1]+b:\n          res=True\n      return res\n    ", "user": "userdId_11", "attemptID": 1048, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-79.67638", "embeddingY": "25.787548"},{"extension": "py", "date": "2020-04-12 05:25:13", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=False\n  c=[]\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    d[0]+c.append(d)\n  return c", "user": "userdId_8", "attemptID": 1049, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-71.27188", "embeddingY": "9.667201"},{"extension": "py", "date": "2020-03-03 06:09:36", "correct": "0", "upload": "def polynome(a,b,c):\n  res= 0\n  delta= b**2-4*a*c\n  if delta > 0:\n    res= ((-b-delta**1/2)/2*a, (-b+delta**1/2)/2*a)\n  elif delta==0:\n    res= (-b)/2*a\n  else:\n    res= None\n  return res", "user": "userdId_7", "attemptID": 1050, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-51.60069", "embeddingY": "8.637756"},{"extension": "py", "date": "2020-03-23 00:46:26", "correct": "0", "upload": "def reconstruireChainePartielle(s,n):\n    res = \"\"\n    for i in range (len(s),n) :\n      res = res + i\n    return res", "user": "userdId_24", "attemptID": 1051, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-61.062325", "embeddingY": "-35.56178"},{"extension": "py", "date": "2020-04-10 00:42:55", "correct": "0", "upload": "def suiteAriGeo(liste):\n  i=0\n  while i<len(liste)-1:\n    a=liste[1]-liste[0]\n    b=liste[i+1]-(a*liste[i])\n    if liste[0]!=0:\n      a=liste[1]/liste[0]\n      if liste[i+1]==liste[i]*a:\n          b=0\n    if liste[i+1]==liste[i]+b:\n      a=1\n    i=i+1\n  i=0\n  ok=True\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=a*liste[i]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 1052, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "33.365963", "embeddingY": "81.25888"},{"extension": "py", "date": "2020-03-20 00:03:36", "correct": "0", "upload": "def permutationChaine(s):\n  res=''\n  for i in range(0,len(s)-1):\n    res=res+s[i+1]\n    res=res+s[i]\n  res=res+s[len(s)-1]\n  return res", "user": "userdId_40", "attemptID": 1053, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-44.858177", "embeddingY": "-50.058487"},{"extension": "py", "date": "2020-03-14 22:14:55", "correct": "0", "upload": "def maximum(liste):\n    n = len(liste)\n    maxi = liste[0]\n    for i in range(1,n):\n      if liste[i] >= maxi:\n    \t  maxi = liste[i]\n    return maxi", "user": "userdId_21", "attemptID": 1054, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-5.273001", "embeddingY": "-55.96069"},{"extension": "py", "date": "2020-04-06 03:43:39", "correct": "1", "upload": "def phrasePalindrome(phrase):\n  ok=True\n  i=0\n  j=len(phrase)-1\n  while i<j and ok:\n    if phrase[i]==' ':\n      i+=1\n    elif phrase[j]==' ':\n      j-=1\n    elif phrase[i]!=phrase[j]:\n      ok=False\n    else:\n      i+=1\n      j-=1\n  return ok", "user": "userdId_6", "attemptID": 1055, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "37.72667", "embeddingY": "42.009205"},{"extension": "py", "date": "2020-04-05 08:59:39", "correct": "0", "upload": "def produitScalaire(vec1,vec2):\n  res=0\n  for i in range(3):\n    v1=vec1[i]\n    v2=vec2[i]\n    res=res+e1*e2\n  return res", "user": "userdId_26", "attemptID": 1056, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-65.00113", "embeddingY": "-18.406925"},{"extension": "py", "date": "2020-04-07 10:21:17", "correct": "0", "upload": "def suiteAri(liste):\n  ok=True\n  if len(liste)==0:\n    ok=True\ndef elemAri(n,u0,r):\n  i=0\n  while i<n and ok:\n    cpt=cpt+r\n    if liste[i+1]!=cpt:\n      ok=False\n    i=i+1\n  return ok\n    \n    ", "user": "userdId_1", "attemptID": 1057, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "16.813555", "embeddingY": "-49.323334"},{"extension": "py", "date": "2020-03-06 00:07:45", "correct": "0", "upload": "def maximum(liste):\n  res=0\n  for i in range(len(liste)):\n      res=res+liste[i]\n  return res", "user": "userdId_41", "attemptID": 1058, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-43.134884", "embeddingY": "-36.91545"},{"extension": "py", "date": "2020-03-24 03:32:46", "correct": "0", "upload": "def quatrePlus100(liste):\n  res=[]\n  i=0\n  while i<len(liste) and len(res)<4:\n    if liste[i]>100:\n      res=res+[liste[i]]\n    i=i+1\n  return None", "user": "userdId_21", "attemptID": 1059, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-26.375517", "embeddingY": "43.32563"},{"extension": "py", "date": "2020-03-06 00:43:16", "correct": "0", "upload": "def moyenne(liste):\n  res=0\n  cpt=0\n  if len(liste)==0:\n    moy=0\n  else:\n     for i in liste:\n       res=res+i\n       cpt=cpt+1\n  moy=res*cpt\n  return moy", "user": "userdId_14", "attemptID": 1060, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "2.9410157", "embeddingY": "-7.822799"},{"extension": "py", "date": "2020-04-11 07:02:59", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  res=True\n  i=0\n  while i<len(phrase) and res:\n    if phrase[i]==' ':\n      i+=1\n    elif phrase[i]!=phrase[-i-1]:\n      res=False\n    i+=1\n  return res", "user": "userdId_8", "attemptID": 1061, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "28.799417", "embeddingY": "39.77798"},{"extension": "py", "date": "2020-03-19 23:48:14", "correct": "0", "upload": "def reconstruireChainePartielle(s,n):\n  res=''\n  for lettre in (len(s),n):\n    res=res+'lettre'\n  return res", "user": "userdId_2", "attemptID": 1062, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-38.78671", "embeddingY": "-4.5969644"},{"extension": "py", "date": "2020-03-15 03:41:00", "correct": "0", "upload": "def polynome(a,b,c):\n    res=0\n    det=b**2-4*a*c\n    if det>0:\n      x1=-b-det**0,5/2*a\n      x2=-b+det**0,5/2*a\n      res=x1,x2\n    elif det<0:\n      res=0\n    else:\n      res=-b/2*a\n    return res\n      \n \n\n ", "user": "userdId_21", "attemptID": 1063, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-49.896896", "embeddingY": "6.2576623"},{"extension": "py", "date": "2020-04-08 00:25:14", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  res=True\n  if len(liste)==0:\n    res=True\n  while i<len(liste)-1 and res==True:\n    if liste[i]==0:\n      res=True\n    if liste[i]!=0:\n      q=liste[1]/liste[0]\n    if liste[i]!=0:\n      if liste[i+1]/liste[i]!=q:\n        res=False\n    i+=1\n  return res\n", "user": "userdId_34", "attemptID": 1064, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "34.778934", "embeddingY": "59.211082"},{"extension": "py", "date": "2020-04-07 01:01:05", "correct": "0", "upload": "def prononcable(mot):\n  cpt=0\n  res=True\n  for i in range(len(mot)):\n    if mot[i] in ('a','e','i','o','u','y'):\n      cpt+=1\n    if cpt>3:\n      res=False\n  return res", "user": "userdId_16", "attemptID": 1065, "exercise": "6318b210c201fba050d60bc0913cb7ef", "exercise_name": "prononcable", "embeddingX": "-4.6429396", "embeddingY": "-59.043797"},{"extension": "py", "date": "2020-03-06 00:57:00", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    res=None\n  else:\n    res=0\n    if elem in'aeiouy':\n      res=res+1\n        \n     \n  return res", "user": "userdId_5", "attemptID": 1066, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "4.354781", "embeddingY": "-34.82954"},{"extension": "py", "date": "2020-03-10 04:41:00", "correct": "0", "upload": "def nbSyllabes(mot):\n  if mot=='':\n    res=0\n  else:\n    res=0\n    Voyelles=['aeiouy']\n    ch=\"\"\n    for i in range(1,len(mot)):\n      if mot[i-1] not in Voyelles and mot[i] in Voyelles:\n        res=res+1\n    if mot[0] in Voyelles :\n      res=res+1\n    elif mot[-1] not in Voyelles:\n      res=res-1\n    else:\n      if res==0:\n        res=res+1\n  return res", "user": "userdId_15", "attemptID": 1067, "exercise": "1c86bec0f4df503e23db53994f3d2991", "exercise_name": "nbSyllabes", "embeddingX": "-19.98393", "embeddingY": "-73.15768"},{"extension": "py", "date": "2020-03-31 04:23:07", "correct": "0", "upload": "def indiceOccurence(n,x,l):\n  res=\"\"\n  cpt=0\n  trouve=False\n  i=0\n  while i<len(l) and trouve==False:\n    if l[i]==x:\n      cpt=cpt+1\n    if cpt==n:\n      trouve=True\n    i=i+1\n  if cpt==False:\n    res=None\n  else:\n    res=i\n\n  return res", "user": "userdId_5", "attemptID": 1068, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "1.7042142", "embeddingY": "73.35628"},{"extension": "py", "date": "2020-03-17 05:04:58", "correct": "0", "upload": "def reconstruireChainePartielle(s,n):\n  res=\"\"\n  for i in range(0,len(s),n):\n    res=res+[i]\n  return res", "user": "userdId_8", "attemptID": 1069, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-61.54638", "embeddingY": "-37.11858"},{"extension": "py", "date": "2020-03-24 05:49:11", "correct": "0", "upload": "def compare(chaine1,chaine2):\n  i=0\n  res=0\n  while i<len(chaine1) and i<len(chaine2) and res==0:\n    if chaine1[i]<chaine2[i]:\n      res=-1\n    if chaine1[i]>chaine2[i]:\n      res=1\n    i=i+1\n  if len(chaine1)<len(chaine2):\n    res=-1\n  else:\n    res=1\n  return res\n\n", "user": "userdId_13", "attemptID": 1070, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-24.783138", "embeddingY": "61.81173"},{"extension": "py", "date": "2020-03-02 08:06:18", "correct": "1", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1<=annee2 and mois1<=mois2 and jour1<jour2:\n    return -1\n  elif annee1==annee2 and mois1==mois2 and jour1==jour2:\n    return 0\n  elif annee1<annee2 and mois1<=mois2 and jour1<=jour2:\n    return -1\n  elif annee1<=annee2 and mois1<mois2 and jour1<=jour2:\n    return -1\n  else :\n    return 1\n  \n  \ncompareDates(10,1,2020,14,2,2020)\ncompareDates(14,2,2020,11,2,2020)\ncompareDates(10,1,2020,10,1,2020)", "user": "userdId_1", "attemptID": 1071, "exercise": "af7c1467ef9f7684d9ff58734067ae98", "exercise_name": "compareDates", "embeddingX": "87.396576", "embeddingY": "-13.19561"},{"extension": "py", "date": "2020-04-11 08:04:48", "correct": "0", "upload": "def sousChaine(s1,s2):\n  res=False\n  i=0\n  j=0\n  while i<len(s1) and j<len(s2) and s1[i]!=s2[j]:\n    j+=1\n  else:\n    while i<len(s1) and j<len(s2) and s1[i]==s2[j]:\n      if s1[i]==s2[j]:\n        res=True\n      i+=1\n      j+=1  \n  return res", "user": "userdId_8", "attemptID": 1072, "exercise": "4bdf8c9c5d020593e1771e4d3ae1ae0d", "exercise_name": "sousChaine", "embeddingX": "-4.8352547", "embeddingY": "58.806488"},{"extension": "py", "date": "2020-03-31 05:54:39", "correct": "1", "upload": "def nbChiffres(nombre):\n  cpt=0\n  while nombre!=0:\n    nombre=nombre//10\n    cpt+=1\n  if cpt==0:\n    cpt=1\n  return cpt", "user": "userdId_27", "attemptID": 1073, "exercise": "3dcf332c003a1f3bf15df22ee17884a3", "exercise_name": "nbChiffres", "embeddingX": "31.744896", "embeddingY": "13.730955"},{"extension": "py", "date": "2020-04-07 05:38:46", "correct": "0", "upload": "def suiteAri(liste):\n  ok=True\n  i=0\n  if len(liste)==0:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=liste[i]+(liste[i+1]-liste[i]):\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 1074, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "20.341805", "embeddingY": "52.595078"},{"extension": "py", "date": "2020-04-12 10:06:01", "correct": "0", "upload": "def phrasePalindrome(phrase):\n    if len(phrase)==0:\n      res=True\n    else:\n      res=True\n      i=0\n      x=''\n      while i<len(phrase)//2 and res:\n        if phrase[i]!=phrase[-(i+1)]:\n          res=False\n        i+=1\n        if x in phrase:\n          res=True\n    return res", "user": "userdId_11", "attemptID": 1075, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "33.274933", "embeddingY": "33.110775"},{"extension": "py", "date": "2020-03-30 00:07:28", "correct": "0", "upload": "def permutationChaine(s):\n  res=''\n  for i in range(0,len(s)-1,2):\n    res+=s[i+1]\n    res+=s[i]\n  return res", "user": "userdId_6", "attemptID": 1076, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-42.012615", "embeddingY": "-51.206642"},{"extension": "py", "date": "2020-03-17 05:53:17", "correct": "1", "upload": "def permutationChaine(s):\n  res=\"\"\n  for i in range(0,len(s)-1,2):\n    res=res+s[1+i]+s[i]\n  if len(s)%2!=0:\n    res=res+s[-1]\n  return res", "user": "userdId_8", "attemptID": 1077, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-36.1933", "embeddingY": "-59.62304"},{"extension": "py", "date": "2020-04-14 04:08:01", "correct": "1", "upload": "def meilleurScoreJoueur(scores,joueurs,nom):\n  i=0\n  res=0\n  while i<len(joueurs):\n    if nom==joueurs[i]:\n      if res<scores[i]:\n        res=scores[i]\n    i+=1\n  return res", "user": "userdId_27", "attemptID": 1078, "exercise": "c96fadc94086276f98451a798b3bb730", "exercise_name": "meilleurScoreJoueur", "embeddingX": "-12.645188", "embeddingY": "69.149315"},{"extension": "py", "date": "2020-04-06 01:58:26", "correct": "0", "upload": "def produitScalaire(vec1,vec2):\n    res=0\n    for i in range(4):\n      p1=vec1(i)\n      p2=vec2(i)\n      res=res+p1*p2\n    return ", "user": "userdId_26", "attemptID": 1079, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-31.4105", "embeddingY": "-15.523818"},{"extension": "py", "date": "2020-04-16 23:54:43", "correct": "0", "upload": "def meilleurScoreJoueur(scores,joueurs,nom):\n  i=0\n  while i<len(score):\n    if nom==joueur[i]:\n      return score[i]\n    i+=1\n  return 0", "user": "userdId_34", "attemptID": 1080, "exercise": "c96fadc94086276f98451a798b3bb730", "exercise_name": "meilleurScoreJoueur", "embeddingX": "-5.080077", "embeddingY": "41.447334"},{"extension": "py", "date": "2020-03-06 00:15:54", "correct": "1", "upload": "def somme(liste):\n  res=0\n  for elem in liste:\n    res=res+elem\n  return res", "user": "userdId_41", "attemptID": 1081, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-28.427618", "embeddingY": "1.3320951"},{"extension": "py", "date": "2020-04-16 23:53:46", "correct": "0", "upload": "def listedecroissante(scores):\n  i=0\n  while i<len(scores)-1:\n    if scores[i]<scores[i+1]:\n      return False\n    i+=1\n  return True", "user": "userdId_34", "attemptID": 1082, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "17.944883", "embeddingY": "44.426018"},{"extension": "py", "date": "2020-04-17 00:18:32", "correct": "0", "upload": "def indiceInsertion(sc,scores):\n  i=0\n  trouve=False\n  while i<len(scores) and not trouve:\n    trouve=scores[i]<sc\n    i+=1\n  return i", "user": "userdId_12", "attemptID": 1083, "exercise": "f8a820b2bd54d18d36716e3d703858f7", "exercise_name": "indiceInsertion", "embeddingX": "-9.34351", "embeddingY": "51.55046"},{"extension": "py", "date": "2020-03-04 10:27:13", "correct": "1", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  res=0\n  if annee1<annee2 :\n    res=-1\n  elif annee1>annee2 :\n    res=1\n  else :\n    if mois1<mois2 :\n      res=-1\n    elif mois1>mois2 :\n      res=1\n    else :\n      if jour1<jour2 :\n        res=-1\n      elif jour1>jour2 :\n        res=1\n      else :\n        res=0\n  return res\n", "user": "userdId_28", "attemptID": 1084, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "82.37429", "embeddingY": "-33.67813"},{"extension": "py", "date": "2020-03-05 22:17:52", "correct": "0", "upload": "def maximum(liste):\n    max = -999\n    for i in range(0,len(liste)):\n      if liste[i] > max:\n        max = liste[i]\n    return max", "user": "userdId_29", "attemptID": 1085, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "11.630027", "embeddingY": "-73.12354"},{"extension": "py", "date": "2020-03-20 00:15:55", "correct": "1", "upload": "def distribution(liste,n):\n  cpt=[0]*(n+1)\n  for elem in liste:\n    cpt[elem]=cpt[elem]+1\n  return cpt\n", "user": "userdId_13", "attemptID": 1086, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-58.895798", "embeddingY": "-15.02644"},{"extension": "py", "date": "2020-03-12 09:32:06", "correct": "1", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    return 0\n  cpt=0\n  for lettre in mot:\n    if lettre in 'aeiouy':\n      cpt=cpt+1\n  return cpt", "user": "userdId_1", "attemptID": 1087, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "6.3870764", "embeddingY": "-29.486897"},{"extension": "py", "date": "2020-04-12 05:55:22", "correct": "0", "upload": "def suiteGeo(liste):\n    if len(liste)==0:\n      res=True\n    else:\n      res=True\n      for i in range(1,len(liste)):\n        x=liste[1]/liste[0]\n        if liste[i]==liste[i-1]*x:\n          res=True\n        else:\n          res=False\n    return res", "user": "userdId_11", "attemptID": 1088, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "-15.233571", "embeddingY": "-82.338264"},{"extension": "py", "date": "2020-04-05 02:55:05", "correct": "1", "upload": "def bissextile(annee):\n  if annee%4==0 and annee%100!=0 or annee%400==0:\n    res=True\n  else:\n    res=False\n  return res", "user": "userdId_26", "attemptID": 1089, "exercise": "a7d37636649c0ada991520788deeb2d0", "exercise_name": "bissextile", "embeddingX": "47.772163", "embeddingY": "1.8099595"},{"extension": "py", "date": "2020-03-31 03:19:00", "correct": "0", "upload": "def indiceOccurrence(n,x,liste):\n  cpt = 0\n  find = False\n  i = 0\n  while i<len(liste) and find == False :\n    if liste[i]==x:\n      cpt = cpt + 1\n    if cpt == n : \n      find = True\n    i = i + 1\n  if find == True :\n    return i-1\n  else :\n    return find", "user": "userdId_52", "attemptID": 1090, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-1.7087818", "embeddingY": "75.317"},{"extension": "py", "date": "2020-03-09 05:37:07", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  \n  res=0\n  for elem in jour1,mois1,annee1,jour2,mois2,annee2 :\n    \n    if (jour1,mois1,annee1<jour2,mois2,annee2):\n      \n       res=res-1\n      \n    if (jour1,mois1,annee1==jour2,mois2,annee2):\n      \n       res=res\n      \n    if (jour1,mois1,annee1<jour2,mois2,annee2):\n      \n       res=res+1\n      \n  return res", "user": "userdId_23", "attemptID": 1091, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "-20.406013", "embeddingY": "-7.4925785"},{"extension": "py", "date": "2020-04-06 05:30:52", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  i=0\n  mot=[]\n  phrs=[]\n  mts=True\n  res=True\n  while i<len(phrase):\n    if phrase[i]!=\" \" and mts==True:\n      mot+=phrase[i]\n    elif phrase[i]==\" \":\n      mts=False\n    elif phrase[i]!=\" \":\n      phrs+=phrase[i]\n    i+=1\n  while i<len(mot) and not res:\n    if mot[i]==phrs[-i-1]:\n      res=True\n    else:\n      res=False\n  return res", "user": "userdId_26", "attemptID": 1092, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "40.962223", "embeddingY": "35.04754"},{"extension": "py", "date": "2020-03-30 21:48:11", "correct": "1", "upload": "def fusion(liste1,liste2):\n    i=0\n    j=0\n    res=[]\n\n    while (i < len(liste1)) and (j < len(liste2)):\n\n        if liste1[i] < liste2[j]:\n            res.append(liste1[i])\n            i+=1\n        else:\n            res.append(liste2[j])\n            j+=1\n    \n    if (i < len(liste1)):\n        res.extend(liste1[i:])\n        \n    elif (j < len(liste2)):\n        res.extend(liste2[j:])\n\n    else:\n        pass  \n\n\n    return res", "user": "userdId_4", "attemptID": 1093, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-41.866547", "embeddingY": "54.027107"},{"extension": "py", "date": "2020-03-02 23:38:32", "correct": "0", "upload": "def semestreValide(ue1,ue2):\n  if ue1 < 10 :\n    if ue2 >= 10 :\n    \tres = True\n    else :\n    \tres = False \n  else :\n    if ue2 >= 10 :\n    \tres = True\n      \n    return res", "user": "userdId_17", "attemptID": 1094, "exercise": "70ae7ad6cf504e0fa8cedebd8e8a825f", "exercise_name": "semestreValide", "embeddingX": "66.35868", "embeddingY": "-2.1199925"},{"extension": "py", "date": "2020-03-17 05:55:10", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  res=''\n  if debut+longueur>len(s):\n    res=debut+longueur\n  else:\n    if debut+longueur<len(s):\n      fin=debut+longueur\n  for i in range(debut,debut+longueur): \n    res=len(s)\n  return res", "user": "userdId_25", "attemptID": 1095, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-72.48427", "embeddingY": "27.372803"},{"extension": "py", "date": "2020-05-04 21:51:43", "correct": "0", "upload": "def minimum(liste):\n  if liste==[]:\n    res=None\n  else:\n    res=liste[0]\n    for i in range(1,len(liste)):\n      if liste[i]>liste[i+1]:\n        res=liste[i]\n  return res", "user": "userdId_8", "attemptID": 1096, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "-5.27634", "embeddingY": "-64.16176"},{"extension": "py", "date": "2020-04-11 05:15:44", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  while nombre!=0:\n    if chiffre==nombre%10:\n      cpt+=1\n    nombre-=nombre//10\n  return cpt", "user": "userdId_8", "attemptID": 1097, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "24.127695", "embeddingY": "12.17651"},{"extension": "py", "date": "2020-04-06 22:23:56", "correct": "1", "upload": "def sousChaine(s1,s2):\n  i=0\n  j=0\n  cpt=0\n  while i<len(s2) and j<len(s1): \n    if s2[i]==s1[j]:\n      cpt+=1 \n      j+=1\n    else:\n      cpt=0\n      j=0\n    i+=1\n  return cpt==len(s1)", "user": "userdId_12", "attemptID": 1098, "exercise": "a7cdd094daa2f0bfccc7a4ec419f7243", "exercise_name": "sousChaine", "embeddingX": "-7.4290166", "embeddingY": "61.46504"},{"extension": "py", "date": "2020-04-10 00:52:20", "correct": "0", "upload": "def suiteAriGeo(liste):\n  i=0\n  while i<len(liste)-1:\n    a=liste[1]-liste[0]\n    b=liste[i+1]-liste[i]*a\n    if liste[0]!=0:\n      a=liste[1]/liste[0]\n      if liste[i+1]==liste[i]*a:\n          b=0\n    if liste[i+1]==liste[i]+b:\n      a=1\n    i=i+1\n  i=0\n  ok=True\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=a*liste[i]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 1099, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "33.364784", "embeddingY": "81.308846"},{"extension": "py", "date": "2020-03-19 23:49:18", "correct": "0", "upload": "def reconstruireChainePartielle(s,n):\n  res=''\n  for i in (len(s),n):\n    res=res+i \n  return res", "user": "userdId_2", "attemptID": 1100, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-39.010994", "embeddingY": "-4.900132"},{"extension": "py", "date": "2020-03-03 05:05:10", "correct": "0", "upload": "def somme(liste):\n  res=0 \n  for i in range(liste):\n  \tres=res+i\n  return res", "user": "userdId_30", "attemptID": 1101, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-40.81529", "embeddingY": "-21.395597"},{"extension": "py", "date": "2020-03-17 06:13:02", "correct": "0", "upload": "def distribution(liste,n):\n    res=[0]*(n+1)\n    for i in range(len(liste)):\n        if liste[i]==0:\n            res[0]=res[0]+1\n        elif liste[i]==1:\n            res[1]=res[1]+1\n        elif liste[i]==2:\n            res[2]=res[2]+1\n        elif liste[i]==3:\n            res[3]=res[3]+1\n    return res\n\n\n  \n  \n", "user": "userdId_28", "attemptID": 1102, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-16.820822", "embeddingY": "-58.186337"},{"extension": "py", "date": "2020-03-23 02:02:52", "correct": "0", "upload": "def minimum(liste): \n    res=1000\n    for i in range (len(liste)) :\n      if liste [i] < res :\n        res= liste[i]\n    return res", "user": "userdId_24", "attemptID": 1103, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "29.301094", "embeddingY": "-70.02869"},{"extension": "py", "date": "2020-04-08 04:29:25", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n    cpt=0\n    i=0\n    while i<len(nombre):\n      if nombre[i]==chiffre:\n        cpt+=1\n      i+=1\n    return cpt", "user": "userdId_11", "attemptID": 1104, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-14.735693", "embeddingY": "44.217915"},{"extension": "py", "date": "2020-03-31 07:03:05", "correct": "0", "upload": "def nombreSymetrique(nombre):\n  res=[]\n  if nombre==0:\n    res=[0]\n  while nombre!=0:\n    res.append(nombre%10)\n    nombre=nombre//10\n  return res\n  res=True\n  i=0\n  while i<len(l)//2 and res:\n    if l[i]!=l[-i-1]:\n      res=False\n    i+=1\n  return res", "user": "userdId_8", "attemptID": 1105, "exercise": "fae4d6a34289cf5bf06f9d6d17e8547e", "exercise_name": "nombreSymetrique", "embeddingX": "42.476463", "embeddingY": "14.493475"},{"extension": "py", "date": "2020-03-03 05:31:37", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    for i in range(len(liste)):\n      if liste[i]>res:\n        res=liste[i]\n  return res", "user": "userdId_8", "attemptID": 1106, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "5.146552", "embeddingY": "-62.060192"},{"extension": "py", "date": "2020-03-19 23:47:53", "correct": "0", "upload": "def reconstruireChainePartielle(s,n):\n  res=''\n  for lettre in (len(s),n):\n    res=res+lettre\n  return res", "user": "userdId_2", "attemptID": 1107, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-39.031036", "embeddingY": "-4.904748"},{"extension": "py", "date": "2020-03-06 00:06:54", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    res=0\n  else:\n    for elem in mot:\n      res=0\n      if elem in 'a' or 'e' or 'i' or 'o' or 'u' or 'y':\n        res=res+1\n  return res     ", "user": "userdId_14", "attemptID": 1108, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "5.094096", "embeddingY": "-26.012775"},{"extension": "py", "date": "2020-03-06 00:10:38", "correct": "0", "upload": "def ecart(liste):\n\tif len(liste)==1:\n\t\tres=1\n\tif len(liste)==0:\n\t\tres=0\n\tma=max(liste)\n\tmi=min(liste)\n\tres=ma-mi\n\treturn res\n\n    ", "user": "userdId_19", "attemptID": 1109, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "11.390898", "embeddingY": "-44.47439"},{"extension": "py", "date": "2020-04-09 10:29:51", "correct": "0", "upload": "def phrasePalindrome(phrase):\n    if len(phrase)==0:\n      res=True\n    else:\n      res=True\n      i=0\n      while i<len(phrase)//2 and res:\n        if phrase[i]!=phrase[-(i+1)]:\n          res=False\n        i+=1\n    return res\n      ", "user": "userdId_11", "attemptID": 1110, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "25.536215", "embeddingY": "36.28363"},{"extension": "py", "date": "2020-04-08 00:20:20", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  res=[]\n  cpt=0\n  if nombre==0:\n    res.append[0]\n  while nombre!=0:\n    res.append(nombre%10)\n    nombre=nombre//10\n  for i in range(len(res)):\n    if i==chiffre:\n      cpt=cpt+1\n  return cpt", "user": "userdId_14", "attemptID": 1111, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-0.5071264", "embeddingY": "7.371241"},{"extension": "py", "date": "2020-05-04 21:34:26", "correct": "1", "upload": "def somme(liste):\n  res=0\n  for elem in liste:\n    res+=elem\n  return res", "user": "userdId_8", "attemptID": 1112, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-25.944265", "embeddingY": "-1.6024997"},{"extension": "py", "date": "2020-03-06 00:47:33", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    res=None\n  else:\n    res=0\n    for mot in \"a,e,i,o,u,y\":\n      res=res+1\n  \n  return res", "user": "userdId_5", "attemptID": 1113, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "0.048895177", "embeddingY": "-29.732624"},{"extension": "py", "date": "2020-03-17 06:39:02", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n  res=[]\n  for i in range(0,len(mot)):\n    if mot[i]==lettre:\n      res=res+mot[i]\n  return res", "user": "userdId_7", "attemptID": 1114, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-22.473974", "embeddingY": "-40.335255"},{"extension": "py", "date": "2020-03-23 01:10:52", "correct": "0", "upload": "def prononcable(mot):\n  if mot=='':\n    res=True\n  else:\n    res=True\n    aux=''\n    for c in mot:\n      if c==aux:\n        res=False\n      aux=c\n  return res", "user": "userdId_27", "attemptID": 1115, "exercise": "6318b210c201fba050d60bc0913cb7ef", "exercise_name": "prononcable", "embeddingX": "17.410524", "embeddingY": "-5.550614"},{"extension": "py", "date": "2020-04-12 07:49:41", "correct": "0", "upload": "def suiteAriGeo(liste):\n  i=0\n  while i<len(liste):\n    a=liste[1]-liste[0]\n    b=liste[1]-liste[0]\n    if liste[i+1]==liste[i]+b:\n      a=1\n    if liste[0]!=0:\n      if liste[i+1]==liste[1]/liste[0]:\n        b=0\n    i=i+1\n  ok=True\n  i=0\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=a*liste[i]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 1116, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "36.63608", "embeddingY": "80.90586"},{"extension": "py", "date": "2020-04-05 10:59:21", "correct": "1", "upload": "def suiteAri(liste):\n    res=True\n    if len(liste) > 1:\n        r,n = liste[1]-liste[0],1\n        while n<len(liste) and res:\n            if liste[n]!=liste[n-1]+r:res=False\n            n+=1\n    return res\n", "user": "userdId_4", "attemptID": 1117, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "18.45509", "embeddingY": "60.66685"},{"extension": "py", "date": "2020-03-12 09:31:35", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    return 0\n  cpt=0\n  for lettre in mot:\n    if elem in'aeiouy':\n      cpt=cpt+1\n  return cpt", "user": "userdId_1", "attemptID": 1118, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "1.206642", "embeddingY": "-36.870834"},{"extension": "py", "date": "2020-03-27 06:19:09", "correct": "1", "upload": "def quatrePlus100(liste):\n    res=[]\n    i=0\n    while i<len(liste) and len(res)<4:\n      if liste[i]>100:\n        res=res+[liste[i]]\n      i=i+1\n    return res", "user": "userdId_14", "attemptID": 1119, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-27.004229", "embeddingY": "43.004765"},{"extension": "py", "date": "2020-03-10 04:28:14", "correct": "0", "upload": "def sommeNPremiersEntiersPairs(n):\n  res=0\n  for i in range(n,2):\n    if liste[i]:\n      res=res+liste[i]\n  return res", "user": "userdId_8", "attemptID": 1120, "exercise": "3030dc079e6607c253e89e8ef4784b74", "exercise_name": "sommeNPremiersEntiersPairs", "embeddingX": "-6.6888742", "embeddingY": "-40.241096"},{"extension": "py", "date": "2020-03-07 02:54:55", "correct": "0", "upload": "def nbSyllabes(mot):\n  if len(mot)==0:\n    return 0\n  else:\n    if (mot[0] in 'aeiouy'):\n      cpt = 0\n    else:\n      cpt = 1\n    for i in range (0, len(mot)-1):\n      if (mot[i] in 'aeiouy') and not(mot[i+1] in 'aeiouy'):\n        cpt+=1\n    return cpt\n        ", "user": "userdId_6", "attemptID": 1121, "exercise": "1c86bec0f4df503e23db53994f3d2991", "exercise_name": "nbSyllabes", "embeddingX": "-29.221321", "embeddingY": "-69.81031"},{"extension": "py", "date": "2020-03-06 23:47:48", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  res=0\n  if debut1>=debut2 or fin1<=fin2:\n    if fin1>=debut2:\n      res=True\n  else:\n    res=False\n  return res", "user": "userdId_8", "attemptID": 1122, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "55.62159", "embeddingY": "-21.860954"},{"extension": "py", "date": "2020-03-31 00:37:27", "correct": "0", "upload": "def stockerChiffres(nombre):\n  res = []\n  for nb in nombre:\n    res.append(nb)\n  res.reverse()\n  return res ", "user": "userdId_4", "attemptID": 1123, "exercise": "49a87f644f84a443327fb4315b47f249", "exercise_name": "stockerChiffres", "embeddingX": "-43.68915", "embeddingY": "-17.222368"},{"extension": "py", "date": "2020-04-12 04:26:45", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=False\n  c=[]\n  for i in range(len(liste)):\n    c=a*liste[i]+b\n    if c==liste:\n      res=True\n  return res", "user": "userdId_8", "attemptID": 1124, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-72.8242", "embeddingY": "10.64893"},{"extension": "py", "date": "2020-04-06 21:51:13", "correct": "0", "upload": "def sousChaine(s1,s2):\n  i=0\n  j=0\n  cpt=0\n  res=False\n  while i<len(s2) and j<len(s1) and cpt<len(s1):\n    if s2[i]==s1[j]:\n      cpt=cpt+1\n      j+=1\n    else:\n      cpt=0\n    i+=1\n  if cpt==len(s1):\n    res=True\n  return res", "user": "userdId_12", "attemptID": 1125, "exercise": "a7cdd094daa2f0bfccc7a4ec419f7243", "exercise_name": "sousChaine", "embeddingX": "-5.327447", "embeddingY": "62.09865"},{"extension": "py", "date": "2020-03-12 08:35:00", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    return 0\n  cpt=0\n  for lettre in mot:\n    if lettre in mot=='aeiouy':\n      cpt=cpt+1\n  return cpt\n  ", "user": "userdId_1", "attemptID": 1126, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "7.599051", "embeddingY": "-32.100723"},{"extension": "py", "date": "2020-04-12 04:23:38", "correct": "1", "upload": "def elemAri(n,u0,r):\n  res=u0+n*r\n  return res", "user": "userdId_16", "attemptID": 1127, "exercise": "f239498950e974e29e01472749d9a09d", "exercise_name": "elemAri", "embeddingX": "-35.619873", "embeddingY": "18.660149"},{"extension": "py", "date": "2020-03-02 07:33:32", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1<=annee2 and mois1<=annee2 and jour1<jour2:\n    return -1\n  elif annee1==annee2 and mois1==mois2 and jour1==jour2:\n    return 0\n  elif annee1>=annee2 and mois1>mois2 and jour1>=jour2:\n    return 1\n  \ncompareDates(10,1,2020,14,2,2020)\ncompareDates(14,2,2020,11,2,2020)\ncompareDates(10,1,2020,10,1,2020)", "user": "userdId_1", "attemptID": 1128, "exercise": "af7c1467ef9f7684d9ff58734067ae98", "exercise_name": "compareDates", "embeddingX": "82.43132", "embeddingY": "-13.224171"},{"extension": "py", "date": "2020-03-06 00:25:39", "correct": "0", "upload": "def minimum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=liste[0]\n    for elem in liste:\n      if elem<liste[0]:\n        res=liste[0]\n  return res", "user": "userdId_14", "attemptID": 1129, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "29.871864", "embeddingY": "-62.430668"},{"extension": "py", "date": "2020-03-27 06:59:52", "correct": "0", "upload": "def compare(chaine1,chaine2):\n  i=0\n  res=0\n  while i<len(chaine1) and i<len(chaine2) and res==0:\n    if chaine1[i]>chaine2[i]:\n      res=1\n    elif chaine1==chaine2:\n      res=0\n    else:\n      res=-1\n    i=i+1\n  if res==0:\n    if len(chaine1)>len(chaine2):\n      res=1\n    elif len(chaine1)<len(chaine2):\n      res=-1\n  return res", "user": "userdId_1", "attemptID": 1130, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-24.201347", "embeddingY": "62.844055"},{"extension": "py", "date": "2020-03-06 00:27:51", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n  if len(mot)==0:\n    pos=None\n  else:\n    for elem in mot:\n      if lettre==elem:\n        pos=elem\n      else:\n        pos=None\n        \n  return pos", "user": "userdId_15", "attemptID": 1131, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-12.988192", "embeddingY": "-32.983906"},{"extension": "py", "date": "2020-03-20 00:00:57", "correct": "1", "upload": "def sousChaine(s,debut,longueur):\n  fin=0\n  res=\"\"\n  if (longueur+debut)>len(s):\n    fin=len(s)\n  else:\n    fin=longueur+debut\n  for i in range(debut,fin):\n    res=res+s[i]\n  return res\n\n\n", "user": "userdId_13", "attemptID": 1132, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-76.38184", "embeddingY": "24.368809"},{"extension": "py", "date": "2020-03-27 06:16:03", "correct": "0", "upload": "def compare(chaine1,chaine2):\n  i=0\n  res=0\n  while res==0 and i<len(chaine1) and i<len(chaine2):\n    if chaine1[i]<chaine2[i]:\n      res=-1\n    elif chaine1[i]>chaine2[i]:\n      res=1\n    else:\n      res=0\n    i=i+1\n  return res", "user": "userdId_12", "attemptID": 1133, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-24.587809", "embeddingY": "61.170994"},{"extension": "py", "date": "2020-03-03 05:45:30", "correct": "1", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None \n  else :\n    res=liste [0]\n    for i in range (1,len(liste)):\n      if liste [i]>res:\n        res=liste [i]\n  return res", "user": "userdId_25", "attemptID": 1134, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-0.6000284", "embeddingY": "-60.85711"},{"extension": "py", "date": "2020-03-12 23:59:02", "correct": "0", "upload": "def jourNuit(heure):\n\tif heure<0 or heure>24:\n\t\tn=\"l'heure saisie est invalide\"\n\tif 6<=heure<=18:\n\t\tn='et il fait jour'\n\t\tif 6<=heure<=12:\n\t\t\tn='on est le matin '+n\n\t\tif 13<=heure<=16:\n\t\t\tn=\"on est l'apr\u00e8s-midi \"+n\n\t\telse:\n\t\t\tn='on est le soir '+n\n\tif heure<=5 or heure>=19:\n\t\tn='et il fait nuit'\n\t\tif heure<=4:\n\t\t\tn='on est la nuit '+n\n\t\tif heure==5:\n\t\t\tn='on est le matin '+n\n\t\tif 19<=heure<=21:\n\t\t\tn='on est le soir '+n\n\t\tif heure>=22:\n\t\t\tn='on est la nuit '+n\n\treturn n\n\t\n\t\t\n", "user": "userdId_19", "attemptID": 1135, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "69.81476", "embeddingY": "19.919382"},{"extension": "py", "date": "2020-04-07 03:00:18", "correct": "0", "upload": "def motPalindrome(mot):\n  res=0\n  ok=True\n  while i<len(mot) and ok:\n    if mot[i]!=mot[-i-1]:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_50", "attemptID": 1136, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "-5.1108427", "embeddingY": "45.193512"},{"extension": "py", "date": "2020-04-06 03:44:55", "correct": "1", "upload": "def suiteAri(liste):\n  res=True\n  if len(liste)>1:\n    r=liste[1]-liste[0]\n    res=verifSuiteAriGeo(liste,1,r)\n  return res\n\ndef verifSuiteAriGeo(liste,a,b):\n  ok=True\n  n=1\n  while n<len(liste) and ok:\n    if liste[n]!=liste[n-1]*a+b:\n      ok=False\n    n+=1\n  return ok", "user": "userdId_6", "attemptID": 1137, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "13.773044", "embeddingY": "72.28566"},{"extension": "py", "date": "2020-03-06 00:37:55", "correct": "0", "upload": "def nbOccurrencesLettre(lettre,mot):\n  if len(mot)==0:\n    return None\n  else:\n    cpt=0\n    for elem in mot:\n      if lettre==elem:\n        cpt=cpt+1\n      return cpt\n\n    ", "user": "userdId_2", "attemptID": 1138, "exercise": "2864c9e5861229d2ff32570f6bc944fb", "exercise_name": "nbOccurrencesLettre", "embeddingX": "-12.0176935", "embeddingY": "-31.224192"},{"extension": "py", "date": "2020-03-31 06:59:38", "correct": "1", "upload": "def doubleChiffre(nombre):\n  res=False\n  prec=None\n  while nombre!=0 and not res:\n    chiffre=nombre%10\n    nombre=nombre//10\n    if chiffre==prec:\n      res=True\n    prec=chiffre\n  return res", "user": "userdId_9", "attemptID": 1139, "exercise": "c83ea6acd3e9f6f5543e87d515e8a44a", "exercise_name": "doubleChiffre", "embeddingX": "10.771033", "embeddingY": "21.39608"},{"extension": "py", "date": "2020-03-10 04:17:52", "correct": "1", "upload": "def sommeNbPairs(liste):\n    res=0\n    for x in liste :\n        if x%2==0:\n            res=res+x\n    return res", "user": "userdId_39", "attemptID": 1140, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "29.590794", "embeddingY": "-18.475613"},{"extension": "py", "date": "2020-04-06 04:07:34", "correct": "0", "upload": "def suiteAriGeo(liste):\n    if liste==[]:\n      ok1=True\n    else:\n      ok1=True\n      ctePrec=liste[1]-liste[0]\n      cteAct=None\n      i=2\n      while i<len(liste) and ok:\n        cteAct=liste[i]-liste[i-1]\n        if cteAct!=ctePrec:\n          ok1=False\n        ctePrec=cteAct\n        i+=1\n    if liste==[] or len(liste)==1:\n      ok2=True\n    elif 0 in liste:\n      ok2=False\n    else:\n      ok2=True\n      i=1\n      while i<len(liste) and ok:\n        cte=liste[i]/liste[i-1]\n        if liste[0]*cte**i!=liste[i]:\n          ok2=False\n        i+=1\n    ok=(ok1 or ok2)\n    return ok", "user": "userdId_18", "attemptID": 1141, "exercise": "4c9665daf155b115fe13218141fa1aff", "exercise_name": "suiteAriGeo", "embeddingX": "27.644117", "embeddingY": "83.00524"},{"extension": "py", "date": "2020-03-13 00:36:41", "correct": "1", "upload": "def sommeNbPairs(l):\n  res=0\n  for x in l:\n    if x%2==0:\n      res=res+x\n      \n  return res", "user": "userdId_38", "attemptID": 1142, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "28.992554", "embeddingY": "-19.036251"},{"extension": "py", "date": "2020-03-17 05:00:27", "correct": "1", "upload": "def reconstruireChainePartielle(s,n):\n  res=''\n  for i in range(0,len(s),n):\n    res=res+s[i]\n  return res", "user": "userdId_23", "attemptID": 1143, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-60.33599", "embeddingY": "-41.026524"},{"extension": "py", "date": "2020-04-05 07:16:39", "correct": "0", "upload": "def nbSyllabes(mot):\n    cpt=0\n    i=0\n    if mot[i] in 'aeiouy':\n      cpt+=1\n    for i in range(1,len(mot)):\n      if mot[i] in 'aeiouy' and mot[i-1] not in 'aeiouy':\n        cpt+=1\n    if mot[-1]=='e':\n      cpt-=1\n    if cpt==0:\n      cpt+=1\n    if mot=='':\n      cpt=0\n    return cpt", "user": "userdId_18", "attemptID": 1144, "exercise": "1c86bec0f4df503e23db53994f3d2991", "exercise_name": "nbSyllabes", "embeddingX": "-24.621008", "embeddingY": "-69.84981"},{"extension": "py", "date": "2020-03-05 23:39:35", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=liste[0]\n    for i in range (1,len(liste)):\n      if liste[i]>res:\n        res=liste[i]\n  return max", "user": "userdId_13", "attemptID": 1145, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "7.290785", "embeddingY": "-67.09831"},{"extension": "py", "date": "2020-03-23 21:06:44", "correct": "0", "upload": "def quatrePlus100(l):\n  res=[]\n  if (l[0]==None):\n    res=None\n  else:\n    for i in l:\n      if (i>100):\n        res=res+l[i]\n  return res", "user": "userdId_48", "attemptID": 1146, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "27.481844", "embeddingY": "-43.335804"},{"extension": "py", "date": "2020-06-02 07:29:06", "correct": "0", "upload": "def bissextile(annee):\n\tif annee%4==0 and annee%100!=0:\n\t\tif annee%400==0:\n\t\t\tres=True\n\t\telse:\n\t\t\tres=False\n\telse:\n\t\tres=False\n\treturn res", "user": "userdId_3", "attemptID": 1147, "exercise": "a7d37636649c0ada991520788deeb2d0", "exercise_name": "bissextile", "embeddingX": "46.712193", "embeddingY": "2.7139006"},{"extension": "py", "date": "2020-04-08 00:20:04", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  res=[]\n  cpt=0\n  if nombre==0:\n    res.append [0]\n  while nombre!=0:\n    res.append(nombre%10)\n    nombre=nombre//10\n  for i in range(len(res)):\n    if i==chiffre:\n      cpt=cpt+1\n  return cpt", "user": "userdId_14", "attemptID": 1148, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-0.52864116", "embeddingY": "7.3912745"},{"extension": "py", "date": "2020-04-06 03:45:29", "correct": "0", "upload": "def suiteGeo(liste):\n    if liste==[] or len(liste)==1:\n      ok=True\n    elif 0 in liste:\n      ok=False\n    else:\n      ok=True\n      ctePrec=liste[1]/liste[0]\n      cteAct=None\n      i=2\n      while i<len(liste) and ok:\n        cteAct=liste[i]/liste[i-1]\n        if cteAct!=ctePrec:\n          ok=False\n        ctePrec=cteAct\n        i+=1\n    return ok", "user": "userdId_18", "attemptID": 1149, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "41.500595", "embeddingY": "63.51467"},{"extension": "py", "date": "2020-04-06 02:29:32", "correct": "0", "upload": "def suiteGeo(liste):\n  ok=True\n  i=0\n  if len(liste)<=1 :\n    ok=True\n  else :\n    while i<(len(liste)-1) and ok :\n      if (liste[i]*liste[i+1])==0 :\n        ok=False\n      elif liste[i+1]!=(liste[i+1]//liste[i])*liste[i]:\n        ok=False\n      i+=1\n  return ok", "user": "userdId_15", "attemptID": 1150, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "50.275387", "embeddingY": "45.69774"},{"extension": "py", "date": "2020-03-02 21:34:17", "correct": "0", "upload": "def bissextile(annee):\n  if annee%400 != 0 :\n    res = False\n  else :\n    res = True\n  return res", "user": "userdId_17", "attemptID": 1151, "exercise": "a7d37636649c0ada991520788deeb2d0", "exercise_name": "bissextile", "embeddingX": "45.962833", "embeddingY": "-4.3275657"},{"extension": "py", "date": "2020-03-17 05:36:33", "correct": "0", "upload": "def permutationChaine(s):\n    res=''\n    for i in range(0,len(s)-1,2):\n        res=res+s[i+1]+s[i]\n    if res%2!= 0:\n        res=res+s[-1]\n    return res", "user": "userdId_39", "attemptID": 1152, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-38.551823", "embeddingY": "-62.64123"},{"extension": "py", "date": "2020-03-31 03:35:49", "correct": "1", "upload": "def fusion(liste1,liste2):\n  res=[]\n  i=0\n  j=0\n  while i<len(liste1) and j<len(liste2):\n    if liste1[i]<liste2[j]:\n      res=res+[liste1[i]]\n      i=i+1\n    elif liste2[j]<liste1[i]:\n      res=res+[liste2[j]]\n      j=j+1\n    else:\n      res=res+[liste1[i]]\n      res=res+[liste2[j]]\n      i=i+1\n      j=j+1\n\n  if i<len(liste1):\n    while i<len(liste1):\n      res=res+[liste1[i]]\n      i=i+1\n  else:\n    while j<len(liste2):\n      res=res+[liste2[j]]\n      j=j+1\n  return res", "user": "userdId_7", "attemptID": 1153, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-37.76292", "embeddingY": "53.863865"},{"extension": "py", "date": "2020-03-05 23:47:52", "correct": "0", "upload": "def nbVoyelles(mot):\n  Voyelles=[a,e,i,o,u,y]\n  res=0\n  for l in mot:\n    if i in Voyelles:\n      res=res+1\n  return res", "user": "userdId_15", "attemptID": 1154, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-49.174614", "embeddingY": "-4.516784"},{"extension": "py", "date": "2020-05-04 22:29:55", "correct": "1", "upload": "def premiereOccurrenceLettre(lettre,mot):\n    res=None\n    i=0\n    while i<len(mot) and res==None:\n      if lettre==mot[i]:\n        res=i\n      i+=1\n    return res", "user": "userdId_26", "attemptID": 1155, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-20.131237", "embeddingY": "69.08762"},{"extension": "py", "date": "2020-03-22 05:10:05", "correct": "0", "upload": "def bissextile(annee):\n  res=False\n  if (annee%4==0 and annee%4!=0) or annee%400==0:\n    res=True\n  return res", "user": "userdId_12", "attemptID": 1156, "exercise": "a7d37636649c0ada991520788deeb2d0", "exercise_name": "bissextile", "embeddingX": "48.31357", "embeddingY": "1.4662429"},{"extension": "py", "date": "2020-03-05 23:41:47", "correct": "1", "upload": "def maximum(liste):\n    if len (liste)==0:\n      res=None\n    else:\n      res=liste[0]\n      for i in range (1,len(liste)):\n        if liste[i]>res:\n          res=liste[i]\n    return res\n        \n    ", "user": "userdId_9", "attemptID": 1157, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-0.17734966", "embeddingY": "-60.8532"},{"extension": "py", "date": "2020-04-07 23:57:56", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  ok=False\n  i=0\n  j=0\n  while i<len(phrase)//2 and j<len(phrase)//2:\n    if phrase[i]==\" \":\n      i+=1\n    elif phrase[-j]==\" \":\n      j+=1\n    elif phrase[i]!=phrase[-j-1]:\n      ok=False\n    else:\n      ok=True\n  i+=1\n  j+=1\n  if phrase==\"\":\n    ok=True\n  return ok", "user": "userdId_13", "attemptID": 1158, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "37.33024", "embeddingY": "32.841957"},{"extension": "py", "date": "2020-03-06 00:23:07", "correct": "0", "upload": "def minimum(liste):\n    if len(liste)==0:\n      return None\n    min=0\n    for i in range(1,len(liste)):\n      if liste[i]<min:\n        min=liste[i]\n    return min", "user": "userdId_1", "attemptID": 1159, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "18.836271", "embeddingY": "-78.92054"},{"extension": "py", "date": "2020-03-23 00:58:23", "correct": "0", "upload": "def nbVoyelles(mot):\n    res=0\n    for i in range (mot) :\n      if liste[i] =='a,e,i,o,u,y' :\n        res=res+1\n    return res", "user": "userdId_24", "attemptID": 1160, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-40.504364", "embeddingY": "-20.95662"},{"extension": "py", "date": "2020-03-17 06:34:10", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n  res=0\n  for i in range(0,len(mot)):\n    if mot[i]==lettre:\n      res=res+mot[i]\n  return res", "user": "userdId_7", "attemptID": 1161, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-21.668447", "embeddingY": "-40.3016"},{"extension": "py", "date": "2020-03-02 07:48:18", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1<=annee2 and mois1<=mois2 and jour1<jour2:\n    return -1\n  elif annee1==annee2 and mois1==mois2 and jour1==jour2:\n    return 0\n  elif annee1>=annee2 and mois1>=mois2 and jour1>jour2:\n    return 1\n  \ncompareDates(10,1,2020,14,2,2020)\ncompareDates(14,2,2020,11,2,2020)\ncompareDates(10,1,2020,10,1,2020)", "user": "userdId_1", "attemptID": 1162, "exercise": "af7c1467ef9f7684d9ff58734067ae98", "exercise_name": "compareDates", "embeddingX": "83.026375", "embeddingY": "-14.458089"},{"extension": "py", "date": "2020-03-17 06:40:00", "correct": "0", "upload": "def doubleLettre(mot):\n  c1=(0,len(mot),2)\n  c2=(1,len(mot),2)\n  for elem in mot:\n    if c1==c2:\n      res=True\n  else:\n    res=False\n  return res", "user": "userdId_8", "attemptID": 1163, "exercise": "00da9cf1fa2b468d915724499459ed8f", "exercise_name": "doubleLettre", "embeddingX": "16.957994", "embeddingY": "-2.2784069"},{"extension": "py", "date": "2020-03-06 00:51:19", "correct": "0", "upload": "def nbOccurrencesLettre(lettre,mot):\n  res=0\n  for i in range(len(mot)):\n    if lettre in mot:\n      res=res+1\n  return res", "user": "userdId_12", "attemptID": 1164, "exercise": "2864c9e5861229d2ff32570f6bc944fb", "exercise_name": "nbOccurrencesLettre", "embeddingX": "-12.76316", "embeddingY": "-43.510395"},{"extension": "py", "date": "2020-03-10 04:13:30", "correct": "1", "upload": "def sommeNbPairs(liste):\n  if len(liste)==0:\n    res=0\n  else:\n    res=0\n    for i in range(len(liste)):\n      if liste[i]%2==0:\n        res=res+liste[i]\n  return res\n      \n      \n  ", "user": "userdId_9", "attemptID": 1165, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "-19.558184", "embeddingY": "-56.998558"},{"extension": "py", "date": "2020-04-07 03:08:13", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  trouve=False\n  i=0\n  cpt=0\n  res=None\n  while i<len(l) and not trouve:\n    if l[i]==x:\n      cpt=cpt+1\n    if cpt==n:\n      trouve=True\n      res=i\n    i=i+1\n  return res", "user": "userdId_50", "attemptID": 1166, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "4.0353966", "embeddingY": "68.66393"},{"extension": "py", "date": "2020-04-07 03:49:43", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  \n  if len(liste)==1 and liste[0]!=0:\n    res=True\n  if len(liste)>=1 and liste[0]==0:\n    res=False\n  if len(liste)==0:\n    res=True\n  else:\n    end=False\n    while i<len(liste)-1 and end==False:\n      r=liste[0]/liste[1]\n      if liste[i]/liste[i+1]==r:\n        res=True\n      else:\n        res=False\n        end=True\n      i+=1\n  return res\n  ", "user": "userdId_26", "attemptID": 1167, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "38.97089", "embeddingY": "58.766964"},{"extension": "py", "date": "2020-03-23 00:11:24", "correct": "1", "upload": "def somme(liste):\n  res=0\n  for i in range(len(liste)):\n    res+=liste[i]\n  return res", "user": "userdId_8", "attemptID": 1168, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-50.626232", "embeddingY": "-38.891876"},{"extension": "py", "date": "2020-04-13 22:51:55", "correct": "0", "upload": "def listeDecroissante(scores):\n  res=False\n  if scores==[]:\n    res=True\n  for i in range(len(scores)):\n    if scores[i]>scores[1+i]:\n      res=True\n  return res", "user": "userdId_8", "attemptID": 1169, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "-2.5399258", "embeddingY": "-68.77078"},{"extension": "py", "date": "2020-04-01 05:25:45", "correct": "1", "upload": "def quatrePlus100(liste):\n  i=0\n  res=[]\n  while i<len(liste) and len(res)<4:\n    if liste[i]>100:\n      res.append(liste[i])\n    i=i+1\n  return res", "user": "userdId_12", "attemptID": 1170, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-25.701265", "embeddingY": "40.491142"},{"extension": "py", "date": "2020-04-12 04:10:20", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=[]\n  for elem in liste:\n    res=a*elem+b\n  return res", "user": "userdId_8", "attemptID": 1171, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-64.69078", "embeddingY": "21.694609"},{"extension": "py", "date": "2020-04-06 04:05:14", "correct": "0", "upload": "def suiteAri(liste):\n    if liste==[]:\n      ok1=True\n    else:\n      ok1=True\n      ctePrec=liste[1]-liste[0]\n      cteAct=None\n      i=2\n      while i<len(liste) and ok:\n        cteAct=liste[i]-liste[i-1]\n        if cteAct!=ctePrec:\n          ok1=False\n        ctePrec=cteAct\n        i+=1\n    return ok1\n\ndef suiteGeo(liste):\n    if liste==[] or len(liste)==1:\n      ok2=True\n    elif 0 in liste:\n      ok2=False\n    else:\n      ok2=True\n      i=1\n      while i<len(liste) and ok:\n        cte=liste[i]/liste[i-1]\n        if liste[0]*cte**i!=liste[i]:\n          ok2=False\n        i+=1\n    return ok2\n\ndef suiteAriGeo(liste):\n    suiteAri(liste)\n    suiteGeo(liste)\n    return ok1 or ok2", "user": "userdId_18", "attemptID": 1172, "exercise": "4c9665daf155b115fe13218141fa1aff", "exercise_name": "suiteAriGeo", "embeddingX": "18.13987", "embeddingY": "65.097275"},{"extension": "py", "date": "2020-03-12 09:43:13", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n  if len(mot)==0:\n    return None\n  cpt=0\n  for i in range (len(mot)):\n    if lettre in mot:\n      cpt=mot[i]\n  return cpt", "user": "userdId_1", "attemptID": 1173, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-14.918669", "embeddingY": "-42.270954"},{"extension": "py", "date": "2020-03-06 00:48:30", "correct": "0", "upload": "def ecart(liste):\n  if len(liste)==2:\n    res=0\n  if len(liste)==0:\n    res=None\n  return res", "user": "userdId_14", "attemptID": 1174, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "12.783347", "embeddingY": "-50.36259"},{"extension": "py", "date": "2020-03-02 07:29:17", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1<=annee2 and mois1<=annee2 and jour1<=jour2:\n    return -1\n  elif annee1==annee2 or mois1==mois2 and jour1==jour2:\n    return 0\n  else:\n    return 1\n  \ncompareDates(10,1,2020,14,2,2020)\ncompareDates(14,2,2020,11,2,2020)\ncompareDates(10,1,2020,10,1,2020)", "user": "userdId_1", "attemptID": 1175, "exercise": "af7c1467ef9f7684d9ff58734067ae98", "exercise_name": "compareDates", "embeddingX": "88.76162", "embeddingY": "-10.690834"},{"extension": "py", "date": "2020-04-10 00:59:44", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  res=True\n  if len(liste)==0 or len(liste)==1:\n    res=True\n  while i<len(liste)-1 and res:\n    if liste[0]==0:\n      res=False\n    if liste[i]!=0:\n      q=liste[1]/liste[0]\n    if liste[i]!=0:\n      if liste[i+1]/liste[0]!=q:\n        res=False\n    if liste[i] and liste[i+1]==0:\n      res=True\n    if liste[i]==0 and liste[i+1]==0:\n      res=True\n    i+=1\n  return res", "user": "userdId_26", "attemptID": 1176, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "35.222694", "embeddingY": "62.27705"},{"extension": "py", "date": "2020-03-12 23:45:15", "correct": "0", "upload": "def jourNuit(heure):\n  if heure<0 or heure>24:\n    res=\"l'heure saisie est invalide\"\n  if 6<=heure<=18:\n    if 5<=heure<=12:\n      res=\"on est le matin et il fait jour\"\n    if 12<=heure<=17:\n      res=\"on est l'apr\u00e8s-midi et il fait jour\"\n    if 17<=heure<=18:\n      res=\"on est le soir et il fait jour\"\n  if 1<=heure<=5 or 19<=heure<=24:\n    if 1<=heure<=4:\n      res=\"on est la nuit et il fait nuit\"\n    if 21<=heure<=24:\n      res=\"on est la nuit et il fait nuit\"\n    if 19<=heure<=20:\n      res=\"on est le soir et il fait nuit\"\n    return res", "user": "userdId_13", "attemptID": 1177, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "69.47074", "embeddingY": "24.019646"},{"extension": "py", "date": "2020-03-14 22:21:30", "correct": "0", "upload": "def maximum(liste):\n  maxi=0\n  for i in range (1,len(liste)):\n    if list[i]>res:\n      res=list[i]\n    return maxi", "user": "userdId_21", "attemptID": 1178, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-4.856795", "embeddingY": "-57.41122"},{"extension": "py", "date": "2020-04-07 02:47:51", "correct": "0", "upload": "def qualifJO(sexe,record,nbvictoires,champion):\n  res=False\n  if sexe==M and champion:\n    res=True\n  elif record<12.0 and nbvictoires>=3:\n    res=True\n  if sexe==F and champion:\n    res=True\n  elif record<15 and nbvictoires>=3:\n    res=True\n  return res", "user": "userdId_16", "attemptID": 1179, "exercise": "891e7b0ed5fbddb755edc84d479bc1ef", "exercise_name": "qualifJO", "embeddingX": "59.929073", "embeddingY": "-10.986809"},{"extension": "py", "date": "2020-03-12 23:57:31", "correct": "0", "upload": "def jourNuit(heure):\n  res=[]\n  if heure==5:\n    res=\"on est le matin et il fait nuit\"\n  if heure<0:\n    res=\"l'heure saisie est invalide\"\n  if heure>24:\n    res=\"l'heure saisie est invalide\"\n  if 6<=heure<=18:\n    if 5<heure<=12:\n      res=\"on est le matin et il fait jour\"\n    elif 12<=heure<17:\n      res=\"on est l'apr\u00e8s-midi et il fait jour\"\n    elif 17<=heure<=18:\n      res=\"on est le soir et il fait jour\"\n  if 1<=heure<=5 or 19<=heure<=24:\n    if 1<=heure<=4:\n      res=\"on est la nuit et il fait nuit\"\n    elif 21<=heure<=24:\n      res=\"on est la nuit et il fait nuit\"\n    elif 19<=heure<=20:\n      res=\"on est le soir et il fait nuit\"\n  return res", "user": "userdId_13", "attemptID": 1180, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "68.6688", "embeddingY": "22.74417"},{"extension": "py", "date": "2020-04-07 23:29:28", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  ok=False\n  i=0\n  while i<len(phrase)//2 and not ok:\n    if phrase[i]!=phrase[-i-1]:\n      ok=True\n    else:\n      ok=False\n    i+=1\n  if phrase==\"\":\n    ok=True\n  return ok", "user": "userdId_13", "attemptID": 1181, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "27.025587", "embeddingY": "37.90109"},{"extension": "py", "date": "2020-03-27 05:48:12", "correct": "1", "upload": "def quatrePlus100(liste):\n  i=0\n  res=[]\n  while i<len(liste) and len(res)<4:\n    if liste[i]>100:\n      res.append(liste[i])\n    i=i+1\n  return res", "user": "userdId_12", "attemptID": 1182, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-25.840286", "embeddingY": "40.413403"},{"extension": "py", "date": "2020-03-02 09:36:54", "correct": "1", "upload": "def sommeNbPairs(liste):\n    res = 0\n    for i in liste:\n      if i%2 == 0:\n        res += i\n    \n    return res", "user": "userdId_4", "attemptID": 1183, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "32.890324", "embeddingY": "-19.433006"},{"extension": "py", "date": "2020-03-31 06:39:27", "correct": "0", "upload": "def semestreValide(ue1,ue2):\n    res=False\n    if ue1>=10.0 and ue2>=10.0:\n      res=True\n    if ue1>=10.0 and ue2<10.0:\n      res=True\n    else:\n      res=False\n    return res", "user": "userdId_11", "attemptID": 1184, "exercise": "70ae7ad6cf504e0fa8cedebd8e8a825f", "exercise_name": "semestreValide", "embeddingX": "56.612144", "embeddingY": "-12.767554"},{"extension": "py", "date": "2020-03-06 00:43:46", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n  if len(mot)==0:\n    res=0\n  if len(lettre)==1:\n    res=0\n  else:\n    res=0\n    for i in range(len(mot)):\n      if lettre in len(mot):\n        if lettre==mot[i]:\n          res=res+1\n      else:\n        res=None\n  return res", "user": "userdId_30", "attemptID": 1185, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "11.209553", "embeddingY": "-48.25198"},{"extension": "py", "date": "2020-04-07 03:45:06", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  \n  if len(liste)==1 and liste[0]!=0:\n    res=True\n  elif len(liste)>=1 and liste[0]==0:\n    res=False\n  elif len(liste)==0:\n    res=True\n  else:\n    end=False\n    while i<len(liste)-1 and end==False:\n      r=liste[0]/liste[1]\n      if liste[i]/liste[i+1]==r:\n        res=True\n      else:\n        res=False\n        end=True\n      i+=1\n  return res\n  ", "user": "userdId_26", "attemptID": 1186, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "38.9683", "embeddingY": "58.78716"},{"extension": "py", "date": "2020-03-10 04:30:01", "correct": "1", "upload": "def sommeNPremiersEntiersPairs(n):\n  res=0\n  for x in range(1,n+1):\n    if x%2==0:\n      res=res+x\n  return res", "user": "userdId_8", "attemptID": 1187, "exercise": "3030dc079e6607c253e89e8ef4784b74", "exercise_name": "sommeNPremiersEntiersPairs", "embeddingX": "29.866526", "embeddingY": "-11.589103"},{"extension": "py", "date": "2020-03-04 03:42:25", "correct": "0", "upload": "def moyenne(liste):\n  if len(liste) == 0 :\n    res = None\n  res = 0\n  for elem in liste :\n    res = res + elem\n    res = res/len(liste)  \n  return res", "user": "userdId_17", "attemptID": 1188, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-0.77143437", "embeddingY": "-17.213799"},{"extension": "py", "date": "2020-03-08 23:11:53", "correct": "0", "upload": "from math import sqrt \n\ndef polynome(a,b,c):\n  d=b**2-(4*a*c)\n  if d<0:\n    return 'pas de solution'\n  elif d==0:\n    solution=-b/(2*a)\n    return solution\n  else:\n    if d>0:\n      solution1=(-b-(sqrt(d)))/2*a\n      solution2=(-b+(sqrt(d)))/2*a\n      return solution1 and solution2", "user": "userdId_1", "attemptID": 1189, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-54.773808", "embeddingY": "4.4338717"},{"extension": "py", "date": "2020-03-31 03:17:15", "correct": "0", "upload": "def fusion(liste1,liste2):\n  res=[]\n  i=0\n  j=0\n  while i<len(liste1) and i<len(liste2):\n    if liste1[i]>liste2[j]:\n      res.append(liste2[j])\n      j=i+1\n    else:\n      res.append(liste1[i])\n      i=i+1\n  \n  return res", "user": "userdId_36", "attemptID": 1190, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-38.534786", "embeddingY": "47.60686"},{"extension": "py", "date": "2020-04-05 08:59:56", "correct": "0", "upload": "def phrasePalindrome(phrase):\n    if phrase=='':\n      ok=True\n    else:\n      ok=True\n      i=0\n      j=-1\n      while i<len(phrase) and j<len(phrase) and ok:\n        if phrase[i]!=phrase[j] and phrase[i]!='' and phrase[j]!='':\n          ok=False\n        if phrase[i]!='':\n          i+=1\n        if phrase[j]!='':\n          j-=1\n    return ok", "user": "userdId_18", "attemptID": 1191, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "37.70528", "embeddingY": "40.285892"},{"extension": "py", "date": "2020-03-12 21:51:33", "correct": "1", "upload": "def nbVoyelles(mot):\n  cpt=0\n  for i in range(len(mot)):\n    if mot[i] in 'aeiouy':\n      cpt=cpt+1\n  return cpt", "user": "userdId_46", "attemptID": 1192, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-24.397736", "embeddingY": "-64.65936"},{"extension": "py", "date": "2020-03-05 23:35:47", "correct": "1", "upload": "def somme(liste):\n  res=0\n  if len(liste)==0:\n    return 0\n  else:\n    for elem in liste:\n    \tres=res+elem\n  return res", "user": "userdId_14", "attemptID": 1193, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-0.081940636", "embeddingY": "-19.46854"},{"extension": "py", "date": "2020-03-13 23:35:39", "correct": "0", "upload": "def jourNuit(heure):\n  if heure<0 or heure>24:\n    res =\"l'heure saisie est invalide\"\n  else:\n    if heure<5 or heure>=21:\n      res=\"on est la nuit\"\n    elif heure<12:\n      res=\"on est le matin\"\n    elif heure<17:\n      res=\"on est l'apr\u00e8s-midi\"\n    else:\n      res=\"on est le soir\"\n    if heure<5 or heure>=18:\n      res=res+\" et il fait nuit\"\n    else:\n      res=res+\" et il fait jour\"\n  return res", "user": "userdId_14", "attemptID": 1194, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "71.86084", "embeddingY": "14.731884"},{"extension": "py", "date": "2020-04-13 21:22:10", "correct": "1", "upload": "def meilleurClassementJoueur(scores,joueurs,nom):\n  cpt = 0\n  while cpt<len(joueurs):\n    if joueurs[cpt]==nom:\n      return cpt+1\n    cpt+=1\n  return -1", "user": "userdId_6", "attemptID": 1195, "exercise": "be6ce0a06c5d396190024c7c681da95d", "exercise_name": "meilleurClassementJoueur", "embeddingX": "-12.163428", "embeddingY": "67.52115"},{"extension": "py", "date": "2020-03-13 00:51:18", "correct": "0", "upload": "def sommeNPremiersEntiers(n):\n  if n<0:\n    return 0\n  else:\n    res=0\n  for elem in liste:\n    res=res+n\n  return res\n      \n    ", "user": "userdId_1", "attemptID": 1196, "exercise": "c315a540cf0bfb0182dc114c6f0eafd1", "exercise_name": "sommeNPremiersEntiers", "embeddingX": "43.95717", "embeddingY": "-50.94773"},{"extension": "py", "date": "2020-04-06 16:17:30", "correct": "0", "upload": "def suiteGeo(liste):\n    if len(liste) == 0:\n        res = True\n    else:\n        test = liste[1]/liste[0]\n        if len(liste) >= 3:\n            for i in range(2,len(liste)):\n                if liste[i]/liste[i-1] == test:\n                    res = True\n                else:\n                    res = False\n        else:\n            res = True\n    return res", "user": "userdId_42", "attemptID": 1197, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "-16.480293", "embeddingY": "-82.21178"},{"extension": "py", "date": "2020-04-06 22:17:02", "correct": "0", "upload": "def motPalindrome(mot):\n    if len(mot)==0:\n      res=True\n    else:\n      res=True\n      i=0\n      while i<len(mot) and res:\n        res=mot[i]==mot[-1]\n        i+=1\n    return res\n", "user": "userdId_11", "attemptID": 1198, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "26.240723", "embeddingY": "44.03298"},{"extension": "py", "date": "2020-04-06 16:05:09", "correct": "1", "upload": "def verifSuiteAriGeo(liste,a,b):\n    if liste == [] or len(liste) == 1:\n        res = True\n    flag = True\n    i = 0\n    while flag == True and i < len(liste)-1:\n        if liste[i+1] == (a * liste[i]) + b:\n            flag = True\n        else:\n            flag = False\n        i += 1\n    res = flag\n    return res", "user": "userdId_42", "attemptID": 1199, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-79.28806", "embeddingY": "11.932304"},{"extension": "py", "date": "2020-04-09 03:52:20", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=True\n  i=1\n  while i<len(liste):\n    if liste[i]!=a*liste[i-1]+b:\n      res=False\n    i+=1\n  return res\ndef suiteAriGeo(liste):\n  i=1\n  res=True\n  if len(liste)>3:\n    ecart1=liste[1]-liste[0]\n    ecart2=liste[2]-liste[1]\n    if ecart1>0:\n      a=ecart2/ecart1\n      b=liste[1]-a*liste[0]\n    while i<len(liste):\n      if verifSuiteAriGeo(liste,a,b)!=True:\n        res=False\n      i+=1 \n  return res", "user": "userdId_32", "attemptID": 1200, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "16.201694", "embeddingY": "76.98945"},{"extension": "py", "date": "2020-03-31 00:26:24", "correct": "0", "upload": "def listeSymetrique(l):\n    trouve=True\n    i=0\n    j=-1\n    while i<len(l) and j<=-len(l) and trouve==True:\n      if l(i)!=l(j):\n        trouve=False\n      i=i+1\n      j=j-1\n    return trouve\n  \n      ", "user": "userdId_28", "attemptID": 1201, "exercise": "8eb27aeda471a467e2223abebeca886e", "exercise_name": "listeSymetrique", "embeddingX": "5.28036", "embeddingY": "44.564766"},{"extension": "py", "date": "2020-03-06 00:00:15", "correct": "0", "upload": "def nbVoyelles(mot):\n  cpt=0\n  if elem in liste =={a,e,i,o,u,y}:\n    cpt=cpt+1\n  return cpt", "user": "userdId_1", "attemptID": 1202, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "7.5673776", "embeddingY": "-15.69963"},{"extension": "py", "date": "2020-04-05 12:03:40", "correct": "1", "upload": "def suiteAri(liste):\n    if liste==[]:\n      ok=True\n    else:\n      ok=True\n      ctePrec=liste[1]-liste[0]\n      cteAct=None\n      i=2\n      while i<len(liste) and ok:\n        cteAct=liste[i]-liste[i-1]\n        if cteAct!=ctePrec:\n          ok=False\n        ctePrec=cteAct\n        i+=1\n    return ok", "user": "userdId_18", "attemptID": 1203, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "19.952757", "embeddingY": "66.846"},{"extension": "py", "date": "2020-03-09 05:50:10", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  \n  res=0\n  for elem in jour1,mois1,annee1,jour2,mois2,annee2:\n    \n    if ('jour1,mois1,annee1')<('jour2,mois2,annee2'):\n       res=res-1\n      \n    if ('jour1,mois1,annee1')==('jour2,mois2,annee2'):\n       res=res\n    \n    if ('jour1,mois1,annee1')<('jour2,mois2,annee2'):\n       res=res+1\n      \n  return res", "user": "userdId_23", "attemptID": 1204, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "-14.313091", "embeddingY": "1.1547661"},{"extension": "py", "date": "2020-03-22 23:25:11", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    return None\n  compteur=0\n  for element in mot:\n    if element in 'aeiouy':\n      compteur=compteur+1\n  return compteur", "user": "userdId_34", "attemptID": 1205, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "7.0751767", "embeddingY": "-29.067217"},{"extension": "py", "date": "2020-03-03 05:44:07", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    for i in range(len(liste)):\n      res=range[0]\n      if liste[i]>res:\n        res=liste[i]\n  return res", "user": "userdId_8", "attemptID": 1206, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "4.955511", "embeddingY": "-51.089058"},{"extension": "py", "date": "2020-03-09 23:23:36", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n    return None", "user": "userdId_32", "attemptID": 1207, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "-88.47712", "embeddingY": "3.8424046"},{"extension": "py", "date": "2020-04-12 10:59:05", "correct": "1", "upload": "def compteChiffre(chiffre,nombre):\n    if chiffre==nombre:\n      cpt=1\n    else:\n      cpt=0\n      x=nombre%10\n      decomp=nombre\n      while decomp!=0:\n        if x==chiffre:\n          cpt+=1\n          decomp=decomp//10\n          x=decomp%10\n        else:\n          decomp=decomp//10\n          x=decomp%10\n    return cpt", "user": "userdId_11", "attemptID": 1208, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "7.170047", "embeddingY": "15.419681"},{"extension": "py", "date": "2020-03-24 05:48:54", "correct": "0", "upload": "def compare(chaine1,chaine2):\n    if chaine1=='':\n      res=-1\n    elif chaine2=='':\n      res=1\n    else:\n      res=0\n      i=0\n      mmlttr=0\n      while i<len(chaine1) and i<len(chaine2):\n        if chaine1[i]>chaine2[i]:\n          res=-1\n        elif chaine1[i]<chaine2[i]:\n          res=1\n        else:\n          mmlttr=mmlttr+1\n        i=i+1\n      if len(chaine1)>len(chaine2):\n        if len(chaine2)==mmlttr:\n          res=1\n      elif len(chaine1)<len(chaine2):\n        if len(chaine1)==mmlttr:\n          res=-1\n    return res", "user": "userdId_18", "attemptID": 1209, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-30.45878", "embeddingY": "63.531666"},{"extension": "py", "date": "2020-04-13 22:13:45", "correct": "1", "upload": "def listeDecroissante(scores):\n  res=True\n  i=0\n  while i<len(scores)-1 and res:\n    if scores[i]<=scores[i+1]:\n      res=False\n    i=i+1\n  return res", "user": "userdId_32", "attemptID": 1210, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "18.558277", "embeddingY": "50.05957"},{"extension": "py", "date": "2020-03-03 06:17:50", "correct": "1", "upload": "def nbVoyelles(mot):\n  res=0\n  for c in mot:\n    if c in \"aeiouy\":\n      res=res+1\n  return res", "user": "userdId_35", "attemptID": 1211, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "15.830406", "embeddingY": "-23.805338"},{"extension": "py", "date": "2020-04-03 00:08:28", "correct": "1", "upload": "def nbChiffres(nombre):\n  cpt=0\n  if nombre==0:\n    cpt=1\n  else:\n    while nombre!=0:\n      nombre=nombre//10\n      cpt=cpt+1\n  return cpt", "user": "userdId_12", "attemptID": 1212, "exercise": "3dcf332c003a1f3bf15df22ee17884a3", "exercise_name": "nbChiffres", "embeddingX": "31.999836", "embeddingY": "11.588289"},{"extension": "py", "date": "2020-03-17 06:15:09", "correct": "0", "upload": "def distribution(liste,n):\n  res=liste[0]*n+1\n  for elem in liste:\n                 res[elem]+=1\n  return res", "user": "userdId_23", "attemptID": 1213, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-62.73941", "embeddingY": "-9.517968"},{"extension": "py", "date": "2020-03-06 00:36:35", "correct": "0", "upload": "def nbOccurrencesLettre(lettre,mot):\n  if len(mot)==0:\n    return None\n  else:\n    res=liste[0]\n    cpt=0\n    for elem in mot:\n      if lettre in mot:\n        cpt=cpt+1\n      return cpt\n\n    ", "user": "userdId_2", "attemptID": 1214, "exercise": "2864c9e5861229d2ff32570f6bc944fb", "exercise_name": "nbOccurrencesLettre", "embeddingX": "-17.15869", "embeddingY": "-36.318592"},{"extension": "py", "date": "2020-03-06 00:16:06", "correct": "0", "upload": "def nbVoyelles(mot):\n  voyel='aeiouy'\n  if len(mot)==0:\n    voy=None\n  else:\n    voy=0\n    for i in range(len(mot)):\n      if voyel[i]==liste[i]:\n        voy=voy+1\n  return voy", "user": "userdId_13", "attemptID": 1215, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-2.4475796", "embeddingY": "-43.35256"},{"extension": "py", "date": "2020-03-17 04:54:49", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  fin=debut+longueur\n  if longueur>len(s):\n    fin=len(s)\n  for i in range(debut,fin):\n    res=res+s[i]\n  return res", "user": "userdId_12", "attemptID": 1216, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-66.69198", "embeddingY": "22.572243"},{"extension": "py", "date": "2020-03-06 00:29:37", "correct": "0", "upload": "def moyenne(liste):\n    if len(liste) == 0:\n      moy = None\n    else:\n      res = 0\n      nb = 0\n      for nb in liste:\n        res = res + nb\n        nb+=1\n      moy = res/nb\n    return moy", "user": "userdId_29", "attemptID": 1217, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-2.5778823", "embeddingY": "-11.04507"},{"extension": "py", "date": "2020-04-11 06:37:26", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  res=True\n  i=0\n  while i<len(phrase) and res:\n    if phrase[i]!=phrase[-i-1]:\n      res=False\n    else:\n      if len(phrase)%2!=0:\n        res=True\n  return res", "user": "userdId_8", "attemptID": 1218, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "20.66655", "embeddingY": "39.912106"},{"extension": "py", "date": "2020-04-13 21:45:04", "correct": "0", "upload": "def meilleurScoreJoueur(scores,joueurs,nom):\n  res=0\n  for i in joueurs:\n    if nom==i:\n      if scores[i]>res:\n        res=scores[i]\n  return res", "user": "userdId_19", "attemptID": 1219, "exercise": "c96fadc94086276f98451a798b3bb730", "exercise_name": "meilleurScoreJoueur", "embeddingX": "-18.290356", "embeddingY": "-30.489016"},{"extension": "py", "date": "2020-04-12 07:34:48", "correct": "0", "upload": "def suiteAriGeo(liste):\n  i=1\n  while i<len(liste):\n    a=liste[1]-liste[0]\n    b=liste[1]-liste[0]\n  i=i+1\n  ok=True\n  i=0\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=a*liste[i]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 1220, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "15.14803", "embeddingY": "63.545235"},{"extension": "py", "date": "2020-03-12 10:15:23", "correct": "0", "upload": "def jourNuit(heure):\n  0<=heure<=24\n  if 6<=heure<=18 :\n    temps='il fait jour'\n  else :\n    temps='il fait nuit'\n  if 0<=heure<=5 and 21<=heure<=24 :\n    soleil='on est la nuit'\n  if 5<=heure<=12 :\n    soleil='on est le matin'\n  if 12<=heure<=17 :\n    soleil=\"on est l'apr\u00e8s-midi\"\n  if 17<=heure<=21 :\n    soleil=\"on est le soir\"\n  heure=soleil+temps\n  return heure", "user": "userdId_24", "attemptID": 1221, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "72.01913", "embeddingY": "30.248074"},{"extension": "py", "date": "2020-04-12 05:36:04", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n    if len(liste)==0:\n      res=True\n    else:\n      res=True\n      i=0\n      while i<len(liste) and res:\n        if liste[i+1]!=a*liste[i]+b:\n          res=False\n      return res\n    ", "user": "userdId_11", "attemptID": 1222, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-76.22726", "embeddingY": "21.98356"},{"extension": "py", "date": "2020-03-06 00:22:07", "correct": "0", "upload": "def maximum(liste):\n    res=0\n    for elem in liste:\n        if elem>res:\n        \tres=elem\n    res=liste[0]\n    for elem in liste:\n      \tif elem>res:\n        \tres>elem\n    return res", "user": "userdId_49", "attemptID": 1223, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "31.454136", "embeddingY": "-44.84925"},{"extension": "py", "date": "2020-04-12 05:20:10", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=False\n  c=[]\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n  return c", "user": "userdId_8", "attemptID": 1224, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-75.623184", "embeddingY": "22.641518"},{"extension": "py", "date": "2020-04-07 04:12:17", "correct": "0", "upload": "def suiteGeo(liste):\n  if len(liste)==0:\n    res=True\n  elif len(liste)==1 and liste[0]!=0:\n    res=True\n  else:\n    if liste[0]==0:\n      res=False\n    else:\n      i=0\n      End=False\n      while i<len(liste)-1:\n        r=liste[1]/liste[0]\n        if liste[i+1]/liste[i]==r and End==False:\n          res=True\n        else:\n          res=False\n          End=True\n        i+=1\n  return res", "user": "userdId_26", "attemptID": 1225, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "39.502914", "embeddingY": "59.25194"},{"extension": "py", "date": "2020-05-11 00:25:47", "correct": "0", "upload": "def listeDecroissante(scores):\n  ok=True\n  i=0\n  while i<len(scores)-1:\n    if scores[i]>score[i+1]:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_12", "attemptID": 1226, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "14.453306", "embeddingY": "50.166725"},{"extension": "py", "date": "2020-03-29 22:02:21", "correct": "0", "upload": "def quatrePlus100(liste):\n  res = []\n  cpt=0\n  for i in liste:\n    if i>=100 and cpt!=4:\n      res.append(i)\n      cpt+=1\n  return res\n", "user": "userdId_6", "attemptID": 1227, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "27.222004", "embeddingY": "-38.782505"},{"extension": "py", "date": "2020-03-15 03:21:25", "correct": "0", "upload": "def polynome(a,b,c):\n    delta=(b**2)-(4*a*c)\n    if delta<0:\n      return(\"pas de solution\")\n    x=(-b-sqrt(delta))/(2*a)\n    y=(-b+sqrt(delta))/(2*a)\n    if delta>0:\n      return(x,y)\n    if delta==0:\n      return(x)\n \n\n ", "user": "userdId_21", "attemptID": 1228, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-51.596455", "embeddingY": "11.808755"},{"extension": "py", "date": "2020-04-06 04:01:26", "correct": "0", "upload": "def motPalindrom(mot):\n  i=0\n  if len(mot)==0:\n    res=True\n  else:\n    while i<len(mot):\n      pl=mot[i]\n      dl=mot[i-1]\n      if pl==dl:\n        res=True\n      else:\n        res=False\n      i+=1\n  return res", "user": "userdId_26", "attemptID": 1229, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "9.11392", "embeddingY": "61.034023"},{"extension": "py", "date": "2020-04-03 00:44:02", "correct": "0", "upload": "def stockerChiffres(nombre):\n  i=0\n  res=[]\n  if nombre==0:\n    res=[0]\n  while nombre!=0:\n    n=nombre//10\n    res.append(n%10)\n    i+=1\n  return res", "user": "userdId_1", "attemptID": 1230, "exercise": "49a87f644f84a443327fb4315b47f249", "exercise_name": "stockerChiffres", "embeddingX": "46.245064", "embeddingY": "16.090612"},{"extension": "py", "date": "2020-04-12 08:40:40", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n    cpt=0\n    x=nombre%10\n    decomp=nombre\n    while decomp!=0:\n      if x==chiffre:\n        cpt+=1\n        decomp=decomp//10\n        x=decomp%10\n      else:\n        decomp=decomp//10\n        x=decomp%10\n    if x==0:\n      cpt=1\n    return cpt", "user": "userdId_11", "attemptID": 1231, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "6.9799385", "embeddingY": "15.344434"},{"extension": "py", "date": "2020-04-09 03:53:11", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  calc=0\n  i=0\n  lres=[]\n  ok=None\n  while i<len(liste):\n    calc=a*calc+b\n    lres.append(calc)\n    i+=1\n  if lres in liste:\n    ok=True\n  else:\n    ok=False\n  return ok", "user": "userdId_13", "attemptID": 1232, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-78.18696", "embeddingY": "16.086678"},{"extension": "py", "date": "2020-03-13 01:00:16", "correct": "1", "upload": "def doubleLettre(mot):\n  res=False\n  bib=''\n  for l in mot:\n    if l==bib:\n      res= True\n    bib=l\n  return res\n      \n    \n\t", "user": "userdId_2", "attemptID": 1233, "exercise": "00da9cf1fa2b468d915724499459ed8f", "exercise_name": "doubleLettre", "embeddingX": "17.011467", "embeddingY": "-5.964306"},{"extension": "py", "date": "2020-03-23 23:09:22", "correct": "0", "upload": "def quatrePlus100(liste):\n  if len(liste)==0:\n    res=[]\n  else:\n    res=[]\n    for i in range(len(liste)):\n      if 100<liste[i]:\n        res=res+liste[i]\n    return res", "user": "userdId_9", "attemptID": 1234, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "25.102167", "embeddingY": "-72.01191"},{"extension": "py", "date": "2020-03-02 09:35:52", "correct": "0", "upload": "def xqualifJO(sexe,record,nbvictoires,champion):\n    res = False\n    types = [int,float]\n    if type(sexe) == str and type(record) in types and type(nbvictoires) in types:\n        if (sexe == \"F\" or sexe == \"M\") and record > 0 and nbvictoires > 0 and type(champion) == bool:\n            if sexe == \"F\" and record < 15 or sexe == \"M\" and record < 12 and nbvictoires >= 3 or champion == True:\n                res = True\n    \n        \n    return res\n", "user": "userdId_4", "attemptID": 1235, "exercise": "78ec7738f3a7f3553d4a5c653534c32d", "exercise_name": "qualifJO", "embeddingX": "-47.06338", "embeddingY": "-7.7058353"},{"extension": "py", "date": "2020-03-02 09:09:31", "correct": "0", "upload": "def qualifJO(sexe,record,nbvictoires,champion):\n    res = False\n\n    if sexe == \"F\" and record < 15 or sexe == \"M\" and record < 12 and nbvictoires >= 3 or champion == True:\n         res = True\n        \n    \n    return res", "user": "userdId_4", "attemptID": 1236, "exercise": "78ec7738f3a7f3553d4a5c653534c32d", "exercise_name": "qualifJO", "embeddingX": "65.49034", "embeddingY": "-11.64924"},{"extension": "py", "date": "2020-04-12 07:55:43", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n    cpt=0\n    decomp=nombre\n    x=nombre%10\n    while decomp!=0:\n      decomp=decomp//10\n      if x!=chiffre:\n        decomp=decomp//10\n        x=decomp%10\n      else:\n        cpt+=1\n    return cpt", "user": "userdId_11", "attemptID": 1237, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "5.7373457", "embeddingY": "14.829982"},{"extension": "py", "date": "2020-04-12 04:44:22", "correct": "0", "upload": "def elemAri(n,u0,r):\n    res=0\n    x=0\n    while x!=n:\n      res=u0+n*r\n      x+=1\n    return res\n      ", "user": "userdId_11", "attemptID": 1238, "exercise": "f239498950e974e29e01472749d9a09d", "exercise_name": "elemAri", "embeddingX": "-7.8672733", "embeddingY": "23.026346"},{"extension": "py", "date": "2020-04-07 03:24:36", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  res=True\n  if liste[0]==0:\n    res=False\n  while i<len(liste)-1 and res==True:\n    r=liste[0]/liste[1]\n    if liste[i]/liste[i+1]==r:\n      res=True\n    else:\n      res=False\n    i+=1\n  return res\n  ", "user": "userdId_26", "attemptID": 1239, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "35.08704", "embeddingY": "54.561626"},{"extension": "py", "date": "2020-04-17 03:06:14", "correct": "0", "upload": "def nbVoyelles(mot):\n  cpt=0\n  for i in mot: \n    if i=='aeiouy':\n      cpt=cpt+1\n  return cpt", "user": "userdId_21", "attemptID": 1240, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "1.1705761", "embeddingY": "-24.488234"},{"extension": "py", "date": "2020-03-03 05:04:33", "correct": "1", "upload": "def maximum(liste):\n  if len(liste) == 0 :\n    res = None\n  else :\n    res = liste[0]\n    for i in range (1,len(liste)) :\n    \tif liste[i] > res :\n        \tres = liste[i] \n        \n    return res", "user": "userdId_17", "attemptID": 1241, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "0.26672453", "embeddingY": "-60.494553"},{"extension": "py", "date": "2020-03-24 04:45:19", "correct": "0", "upload": "def quatrePlus100(liste):\n  res=[]\n  while i<len(liste) and i>100:\n    res.append(l[i])\n  return res", "user": "userdId_13", "attemptID": 1242, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-19.965687", "embeddingY": "43.048748"},{"extension": "py", "date": "2020-03-10 03:17:22", "correct": "0", "upload": "def jourNuit(heure):\n    if heure<0 or heure>24:\n      res=\"l'heure saisie est invalide\"\n    else:\n      if heure<5 or heure>21:\n        res=\"on est la nuit\"\n      elif heure<12:\n        res=\"on est le matin\"\n      elif heure<17:\n        res=\"on est l'apres-midi\"\n      else:\n        res=\"on est la nuit\"\n      if heure<6 or heure>=18:\n        res=res+\" et il fait nuit\"\n      else:\n        res=res+\" et il fait jour\"\n    return res", "user": "userdId_9", "attemptID": 1243, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "71.501114", "embeddingY": "13.090662"},{"extension": "py", "date": "2020-04-14 00:24:36", "correct": "1", "upload": "def indiceInsertion(sc,scores):\n  res=0\n  for elem in scores:\n    if elem>=sc:\n      res+=1\n  return res", "user": "userdId_8", "attemptID": 1244, "exercise": "f8a820b2bd54d18d36716e3d703858f7", "exercise_name": "indiceInsertion", "embeddingX": "-7.0216546", "embeddingY": "-26.593874"},{"extension": "py", "date": "2020-04-07 05:36:02", "correct": "0", "upload": "def suiteAri(liste):\n  ok=True\n  i=0\n  if len(liste)==0:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=liste[0]+(liste[i+1]-liste[i]):\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 1245, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "20.337591", "embeddingY": "52.749928"},{"extension": "py", "date": "2020-04-10 00:30:36", "correct": "0", "upload": "def suiteAriGeo(liste):\n  i=0\n  while i<len(liste)-1:\n    a=liste[1]-liste[0]\n    b=liste[1]-liste[0]\n    if liste[i+1]==liste[i]*a:\n        b=0\n        a=liste[1]/liste[0]\n    if liste[i+1]==liste[i]+b:\n      a=1\n      b=liste[1]-liste[0]\n    i=i+1\n  i=0\n  ok=True\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=a*liste[i]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 1246, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "31.812279", "embeddingY": "80.76748"},{"extension": "py", "date": "2020-03-09 05:35:47", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  \n  res=0\n  for elem in jour1,mois1,annee1,jour2,mois2,annee2 :\n    \n    if (jour1,mois1,annee1<jour2,mois2,annee2):\n      res=res-1\n      \n    if (jour1,mois1,annee1==jour2,mois2,annee2):\n      res=res\n      \n    if (jour1,mois1,annee1<jour2,mois2,annee2):\n      res=res+1\n      \n  return res", "user": "userdId_23", "attemptID": 1247, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "-20.490412", "embeddingY": "-7.6835237"},{"extension": "py", "date": "2020-04-06 05:28:57", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  i=0\n  mot=[]\n  phrs=[]\n  mts=True\n  faute==False\n  while i<len(phrase):\n    if phrase[i]!=\" \" and mts==True:\n      mot+=phrase[i]\n    elif phrase[i]==\" \":\n      mts=False\n    elif phrase[i]!=\" \":\n      phrs+=phrase[i]\n    i+=1\n  while i<len(mot) and faute==False:\n    if mot[i]==phrs[-i-1]:\n      res=True\n    else:\n      res=False\n      faute==True\n  return res", "user": "userdId_26", "attemptID": 1248, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "0.93078256", "embeddingY": "43.78822"},{"extension": "py", "date": "2020-04-21 04:08:02", "correct": "0", "upload": "def listeMatchs(liste):\n  lmatchs=[]\n  i=0\n  j=i+1\n  while i<len(liste)-1:\n    lmatchs+=[(liste[i],liste[i+1])]\n    j+=1\n    if j>=len(liste):\n      i+=1\n      j=i+1\n  return lmatchs", "user": "userdId_18", "attemptID": 1249, "exercise": "7425aa41502a932ef1011f8e2538120a", "exercise_name": "listeMatchs", "embeddingX": "-22.754261", "embeddingY": "25.033438"},{"extension": "py", "date": "2020-03-05 22:18:17", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    return None", "user": "userdId_14", "attemptID": 1250, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "13.770453", "embeddingY": "-48.48202"},{"extension": "py", "date": "2020-03-17 05:30:22", "correct": "0", "upload": "def distribution(liste,n):\n  cpt=[0]*4\n  for elem in liste:\n    cpt[elem]+=1\n  return cpt[elem] ", "user": "userdId_35", "attemptID": 1251, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-65.666954", "embeddingY": "-12.253653"},{"extension": "py", "date": "2020-03-17 06:14:13", "correct": "0", "upload": "def maximum(liste):\n    if len(liste)==0:\n      res=none\n    else:\n      res=liste[0]\n      for elem in liste:\n        res=elem\n    return res", "user": "userdId_22", "attemptID": 1252, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-3.0362587", "embeddingY": "-35.977146"},{"extension": "py", "date": "2020-03-30 22:06:53", "correct": "1", "upload": "def stockerChiffres(nombre):\n  temp = str(nombre)\n  res = [0]*len(temp)\n  for i in range(len(temp)):\n    res[-(1+i)]=int(temp[i])\n  return res", "user": "userdId_6", "attemptID": 1253, "exercise": "49a87f644f84a443327fb4315b47f249", "exercise_name": "stockerChiffres", "embeddingX": "-43.26116", "embeddingY": "17.369152"},{"extension": "py", "date": "2020-03-09 22:39:22", "correct": "1", "upload": "def nbVoyelles(mot):\n  res=0\n  for lettre in mot:\n    if lettre in 'aeiouy':\n      res=res+1\n  return res", "user": "userdId_12", "attemptID": 1254, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "15.308515", "embeddingY": "-24.921848"},{"extension": "py", "date": "2020-04-14 04:06:02", "correct": "1", "upload": "def listeDecroissante(scores):\n  res=True\n  for i in range(len(scores)-1):\n    if scores[i]<scores[i+1]:\n      res= False\n  return res", "user": "userdId_31", "attemptID": 1255, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "20.922014", "embeddingY": "-70.30846"},{"extension": "py", "date": "2020-03-06 00:44:01", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0 :\n    res=0\n  else:\n    for elem in mot :\n      if mot in 'aeiouy' :\n        res=res+1\n  return res", "user": "userdId_24", "attemptID": 1256, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "8.518601", "embeddingY": "-31.837982"},{"extension": "py", "date": "2020-04-02 23:42:19", "correct": "0", "upload": "def listeSymetrique(l):\n    i=0\n    ok=True\n    while i<len(liste) and ok==True:\n      if liste[i]!=liste[-i-1]:\n        ok=False\n      i=i+1\n    return ok ", "user": "userdId_5", "attemptID": 1257, "exercise": "8eb27aeda471a467e2223abebeca886e", "exercise_name": "listeSymetrique", "embeddingX": "-3.5170085", "embeddingY": "43.214687"},{"extension": "py", "date": "2020-03-06 00:30:49", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    voy=None\n  else:\n    voy=0\n    for i in mot:\n      if mot in \"aeiouy\":\n        voy=voy+1\n  return voy", "user": "userdId_13", "attemptID": 1258, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "7.6625338", "embeddingY": "-31.17049"},{"extension": "py", "date": "2020-03-07 00:59:40", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut1>=debut2:\n    res=True\n  if fin1<=fin2:\n    res=True\n  else:\n    res=False\n  return res", "user": "userdId_8", "attemptID": 1259, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "52.259983", "embeddingY": "-20.494938"},{"extension": "py", "date": "2020-03-12 21:51:21", "correct": "0", "upload": "def minimum(liste):\n  res=0\n  for elem in liste:\n    if res>elem:\n      res=elem\n  return res", "user": "userdId_23", "attemptID": 1260, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "31.157206", "embeddingY": "-43.35215"},{"extension": "py", "date": "2020-03-17 05:31:05", "correct": "1", "upload": "def distribution(liste,n):\n  cpt=[0]*(n+1)\n  for elem in liste:\n    cpt[elem]+=1\n  return cpt ", "user": "userdId_35", "attemptID": 1261, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-64.99534", "embeddingY": "-12.099228"},{"extension": "py", "date": "2020-03-20 00:19:52", "correct": "0", "upload": "def permutationListe(liste,permutation):\n  for i in range(len(liste)):\n    liste[permutation[i]]=liste[i]\n  return liste", "user": "userdId_12", "attemptID": 1262, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-53.319756", "embeddingY": "-29.440844"},{"extension": "py", "date": "2020-03-17 08:42:31", "correct": "0", "upload": "def reconstruireChainePartielle(s,n):\n    res=\"\"\n    for i in range (n):\n      res=res+s[i]\n    return res", "user": "userdId_24", "attemptID": 1263, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-58.47189", "embeddingY": "-36.241215"},{"extension": "py", "date": "2020-04-07 23:13:50", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  res=False\n  prec=None\n  while nombre!=0 and not res:\n    numero=nombre%10\n    nombre=nombre//10\n    if chiffre==prec:\n      res=True\n    prec=numero\n  return res", "user": "userdId_13", "attemptID": 1264, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "9.089636", "embeddingY": "23.760284"},{"extension": "py", "date": "2020-03-12 21:57:17", "correct": "0", "upload": "def maximum(liste):\n   if len(liste)==0:\n      res=None\n   else:\n      res=liste[0]\n      for i in liste:\n         if liste[i]>res:\n            res=liste[i]\n   return res", "user": "userdId_14", "attemptID": 1265, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "7.88498", "embeddingY": "-61.342037"},{"extension": "py", "date": "2020-03-03 05:07:57", "correct": "1", "upload": "def somme(liste):\n  res=0\n  for elem in liste:\n    res=res+elem\n  return res", "user": "userdId_25", "attemptID": 1266, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-29.329828", "embeddingY": "1.4753605"},{"extension": "py", "date": "2020-03-31 05:12:29", "correct": "0", "upload": "def listeSymetrique(l):\n  ok=True\n  i=0\n  while i<len(l) and ok:\n    if l[i]!=l[i-1]:\n      ok=False\n    i=i+1\n  return res", "user": "userdId_9", "attemptID": 1267, "exercise": "8eb27aeda471a467e2223abebeca886e", "exercise_name": "listeSymetrique", "embeddingX": "20.063978", "embeddingY": "57.36112"},{"extension": "py", "date": "2020-04-07 01:59:55", "correct": "1", "upload": "def elemGeo(n,u0,q):\n  res = u0\n  for i in range (n):\n    res = res * q\n  return res", "user": "userdId_17", "attemptID": 1268, "exercise": "d7c83a7fb9b49e28804e55955ad06968", "exercise_name": "elemGeo", "embeddingX": "-27.327616", "embeddingY": "15.770007"},{"extension": "py", "date": "2020-03-30 21:43:33", "correct": "0", "upload": "def fusion(liste1,liste2):\n  i=0\n  j=0\n  listefusion=[]\n  if len(liste1)==0:\n    listefusion=liste2\n  elif len(liste2)==0:\n    listefusion=liste1\n  while i<len(liste1) and j<len(liste2):\n    if liste1[i]>liste2[j]:\n      listefusion.append(liste2[j])\n      j=j+1\n    else:\n      listefusion.append(liste1[i])\n      i=i+1\n  if len(liste1)>0 and len(liste2)>0:\n    if max(liste1)>max(liste2):\n      for ind in range (i,len(liste1)):\n        listefusion.append(liste1[ind])\n\n    if max(liste2)>max(liste1):\n      for ind in range (j,len(liste2)):\n        listefusion.append(liste2[ind])\n\n  return listefusion\n  \n", "user": "userdId_19", "attemptID": 1269, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-33.66654", "embeddingY": "50.946156"},{"extension": "py", "date": "2020-04-06 09:36:43", "correct": "0", "upload": "def suiteGeo(liste):\n    if liste==[] or len(liste)==1:\n      ok=True\n    elif 0 in liste:\n      ok=False\n    else:\n      ok=True\n      i=1\n      while i<len(liste) and ok:\n        cte=liste[i]/liste[i-1]\n        if liste[0]*cte**i!=liste[i]:\n          ok=False\n        i+=1\n    return ok", "user": "userdId_18", "attemptID": 1270, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "40.74028", "embeddingY": "65.983826"},{"extension": "py", "date": "2020-04-07 10:46:36", "correct": "0", "upload": "def nextConWay(s):\n  res=''\n  cpt=1\n  for i in range(len(s)):\n    if i==len(s)-1 or s[i+1]!=s[i]:\n      res+=str(cpt)+s[i]\n      cpt=1\n    else:\n      cpt+=1\n  return int(res)", "user": "userdId_27", "attemptID": 1271, "exercise": "a580c32690609356dae4401b3c89a3b8", "exercise_name": "nextConway", "embeddingX": "-29.35257", "embeddingY": "-57.814457"},{"extension": "py", "date": "2020-03-31 05:59:30", "correct": "0", "upload": "def stockerChiffres(nombre):\n  res=[]\n  chiffre=0\n  nb=nombre\n  while nb:\n    chiffre=nb%10\n    res=res+[chiffre]\n    nb=nb//10\n  if nb==0:\n    res=[0]\n  return res", "user": "userdId_7", "attemptID": 1272, "exercise": "49a87f644f84a443327fb4315b47f249", "exercise_name": "stockerChiffres", "embeddingX": "-2.0197685", "embeddingY": "14.842833"},{"extension": "py", "date": "2020-04-13 21:17:01", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  ok=True\n  n=1\n  while n<len(liste) and res:\n    if liste[n]!=liste[n-1]*a+b:\n      ok=False\n    n+=1\n  return ok", "user": "userdId_8", "attemptID": 1273, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-70.6085", "embeddingY": "21.535297"},{"extension": "py", "date": "2020-04-05 03:47:43", "correct": "1", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n    if annee1<annee2 :\n        res=-1\n    elif annee1>annee2 :\n        res=1\n    elif mois1<mois2:\n        res=-1\n    elif mois1>mois2:\n        res=1\n    elif jour1<jour2:\n        res=-1\n    elif jour1>jour2:\n        res=1\n    else: #annee1=annee2 et mois1=mois2 et jour1=jour2\n        res=0\n    return res", "user": "userdId_32", "attemptID": 1274, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "81.58845", "embeddingY": "-32.93918"},{"extension": "py", "date": "2020-03-23 00:49:00", "correct": "0", "upload": "def reconstruireChainePartielle(s,n):\n    res = \" \"\n    for i in range (len(s),n) :\n      res = res + s[n]\n    return res", "user": "userdId_24", "attemptID": 1275, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-59.222443", "embeddingY": "-35.970894"},{"extension": "py", "date": "2020-04-12 10:20:43", "correct": "1", "upload": "def produitScalaire(vec1,vec2):\n  res=0\n  for i in range(len(vec1) and len(vec2)):\n    res=res+vec1[i]*vec2[i]\n  return res", "user": "userdId_38", "attemptID": 1276, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-34.011642", "embeddingY": "-42.118378"},{"extension": "py", "date": "2020-03-03 05:57:51", "correct": "0", "upload": "def polynome(a,b,c):\n  delta=b**2-4*a*c\n  if delta<0:\n    res=\"pas de solution\"\n  if delta==0:\n    sol1=str(b/2*a)\n    res=\"la solution est \"+sol1\n  if delta>0:\n    sol1=str((b*sqrt(delta))/2)\n    sol2=str(b*(sqrt(delta)/2))\n    res=\"les solutions sont \"+sol1+\" et \"+sol2\n  return None", "user": "userdId_53", "attemptID": 1277, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-56.77828", "embeddingY": "2.9944708"},{"extension": "py", "date": "2020-04-06 03:44:09", "correct": "0", "upload": "def suiteGeo(liste):\n  ok=True\n  i=0\n  if len(liste)<=1 :\n    ok=True\n  else :\n    while i<(len(liste)-1) and ok :\n      if liste[i]==0 :\n        ok=False\n      elif liste[i]!=(liste[0]*(liste[i+1]//liste[i])**i):\n        ok=False\n      i+=1\n  return ok", "user": "userdId_15", "attemptID": 1278, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "51.52011", "embeddingY": "46.0373"},{"extension": "py", "date": "2020-04-05 03:48:36", "correct": "0", "upload": "def moyenne(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    s=0\n    for elem in liste:\n      s+=elem\n    res=s//len(liste)\n  return res", "user": "userdId_26", "attemptID": 1279, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-8.329106", "embeddingY": "-15.856637"},{"extension": "py", "date": "2020-04-03 00:46:34", "correct": "1", "upload": "def stockerChiffres(nombre):\n  res=[]\n  if nombre==0:\n    res.append(nombre)\n  while nombre!=0:\n    res.append(nombre%10)\n    nombre=nombre//10\n  return res", "user": "userdId_14", "attemptID": 1280, "exercise": "49a87f644f84a443327fb4315b47f249", "exercise_name": "stockerChiffres", "embeddingX": "42.288578", "embeddingY": "14.507654"},{"extension": "py", "date": "2020-03-10 03:05:09", "correct": "0", "upload": "def jourNuit(heure):\n  temp='il fait nuit le reste du temps'\n  if heure_debut>=6<=18:\n    return temp", "user": "userdId_36", "attemptID": 1281, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "10.129122", "embeddingY": "-18.27914"},{"extension": "py", "date": "2020-04-12 06:46:09", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  if liste==[]:\n    res=True\n  c=[]\n  res=False\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n    c=[liste[0]]+c\n  if c==liste:\n    res=True\n  return res", "user": "userdId_8", "attemptID": 1282, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-79.68203", "embeddingY": "25.609735"},{"extension": "py", "date": "2020-03-17 05:33:07", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  res=''\n  if debut+longueur>len(s):\n    res=debut+longueur\n  else:\n    for i in range(debut,debut+longueur): \n      res=res+s[i]\n  return res", "user": "userdId_25", "attemptID": 1283, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-74.95408", "embeddingY": "22.204378"},{"extension": "py", "date": "2020-04-07 04:04:32", "correct": "0", "upload": "def elemAri(n,u0,r):\n  cpt=0\n  i=0\n  while i<n:\n    cpt=cpt+u0+r-1\n    i=i+1\n  return cpt\n  ", "user": "userdId_1", "attemptID": 1284, "exercise": "f239498950e974e29e01472749d9a09d", "exercise_name": "elemAri", "embeddingX": "-8.570516", "embeddingY": "26.512226"},{"extension": "py", "date": "2020-03-20 00:52:00", "correct": "0", "upload": "def permutationChaine(s):\n  res=\"\"\n  for i in range(0,len(s)-1,2):\n    res=res+s[i+1]+s[i]\n  if (len(s)%2!=0):\n    res=res+s[-i]\n  return res", "user": "userdId_20", "attemptID": 1285, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-35.781082", "embeddingY": "-59.975277"},{"extension": "py", "date": "2020-03-22 06:13:28", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n  for i in range(mot):\n    if mot[i]==lettre:\n      res=i\n    else:\n      res=None\n  return res", "user": "userdId_12", "attemptID": 1286, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-41.86384", "embeddingY": "-16.338917"},{"extension": "py", "date": "2020-04-12 10:30:51", "correct": "0", "upload": "def phrasePalindrome(phrase):\n    if len(phrase)==0:\n      res=True\n    else:\n      res=True\n      i=0\n      x=''\n      while i<len(phrase)//2 and res:\n        if (phrase[i]==x)!=phrase[-(i+1)]:\n          res=True\n          i+=1\n        if phrase[i]!=phrase[-(i+1)]:\n          res=False\n        i+=1\n    return res", "user": "userdId_11", "attemptID": 1287, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "33.324196", "embeddingY": "35.505035"},{"extension": "py", "date": "2020-04-07 23:33:45", "correct": "1", "upload": "def produitScalaire(vec1,vec2):\n  res=0\n  produit=0\n  i=0\n  while i<len(vec1):\n    produit=vec1[i]*vec2[i]\n    res=res+produit\n    i=i+1\n  return res", "user": "userdId_5", "attemptID": 1288, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-15.349991", "embeddingY": "51.679825"},{"extension": "py", "date": "2020-03-05 22:18:59", "correct": "0", "upload": "def prononcable(mot):\n  if len(mot)<4:\n    return True\n  else:\n    cpt=0\n    laLettrePrecedenteEstUneVoyelle = (mot[0] in 'aeiouy')\n    for i in mot :\n      if (i in 'aeiouy') == laLettrePrecedenteEstUneVoyelle:\n        cpt+=1\n        if cpt == 4:\n          return False\n      else:\n        cpt = 0\n        laLettrePrecedenteEstUneVoyelle = not laLettrePrecedenteEstUneVoyelle \n    return True", "user": "userdId_6", "attemptID": 1289, "exercise": "6318b210c201fba050d60bc0913cb7ef", "exercise_name": "prononcable", "embeddingX": "16.130629", "embeddingY": "-14.956208"},{"extension": "py", "date": "2020-05-04 22:00:21", "correct": "1", "upload": "def moyenne(liste):\n  if liste==[]:\n    res=None\n  else:\n    res=0\n    for elem in liste:\n      res+=elem\n    res/=len(liste)\n  return res", "user": "userdId_8", "attemptID": 1290, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-4.825566", "embeddingY": "-19.743153"},{"extension": "py", "date": "2020-04-12 11:08:41", "correct": "0", "upload": "def phrasePalindrome(phrase):\n    if len(phrase)==0:\n      res=True\n    else:\n      res=True\n      i=0\n      x=''\n      while i<len(phrase)//2 and res:\n        if phrase[i]==x:\n          phrase=phrase-phrase[i]\n          i+=1\n        else:\n          if phrase[i]!=phrase[-(i+1)]:\n            res=False\n          i+=1\n    return res", "user": "userdId_11", "attemptID": 1291, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "34.111008", "embeddingY": "35.060646"},{"extension": "py", "date": "2020-04-05 09:22:38", "correct": "1", "upload": "def motPalindrome(mot):\n  ok=True\n  i=0\n  while i<len(mot) and ok:\n    ok=mot[i]==mot[-1-i]\n    i+=1\n  return ok   ", "user": "userdId_12", "attemptID": 1292, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "24.971624", "embeddingY": "44.90761"},{"extension": "py", "date": "2020-03-08 21:58:22", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1==annee2 and mois1==mois2 and jour1==jour2:\n    return 0\n  elif annee1<=annee2 and mois1<mois2 and jour1<jour2:\n    return -1\n  elif annee1<=annee2 and mois1>mois2 and jour1>jour2:\n    return -1\n  elif annee1<=annee2 and mois1>mois2 and jour1<jour2:\n    return -1\n  elif annee1<=annee2 and mois1<mois2 and jour1>jour2:\n    return-1\n  else:\n    return 1", "user": "userdId_1", "attemptID": 1293, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "86.11158", "embeddingY": "-14.666485"},{"extension": "py", "date": "2020-03-05 23:50:56", "correct": "1", "upload": "def minimum(liste):\n  if liste==[]:\n    return None\n  else :\n    res=liste[0]\n    for i in range(1,len(liste)):\n      if res>liste[i]:\n        res=liste[i]\n  return res", "user": "userdId_15", "attemptID": 1294, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "-6.6577134", "embeddingY": "-63.972088"},{"extension": "py", "date": "2020-04-05 09:07:37", "correct": "0", "upload": "def phrasePalindrome(phrase):\n    if phrase=='':\n      ok=True\n    else:\n      ok=True\n      i=0\n      j=-1\n      while i<len(phrase) and j>(-len(phrase)-1) and ok:\n        if phrase[i]!=phrase[j] and phrase[i]!='' and phrase[j]!='':\n          ok=False\n        if phrase[i]=='' and phrase[j]!='':\n          i+=1\n        if phrase[j]=='' and phrase[i]!='':\n          j-=1\n    return ok", "user": "userdId_18", "attemptID": 1295, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "38.386703", "embeddingY": "38.707016"},{"extension": "py", "date": "2020-03-06 00:08:00", "correct": "0", "upload": "def maximum(liste):\n  res=-12\n  for elem in liste:\n    if res<elem:\n      res=elem\n    if elem in liste==0:\n      res=None\n  return res", "user": "userdId_23", "attemptID": 1296, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "44.721275", "embeddingY": "-53.100037"},{"extension": "py", "date": "2020-03-12 22:13:56", "correct": "0", "upload": "def maximum(liste):\n    res=0\n    for elem in(liste):\n        if res>elem:\n           res=elem\n    return res", "user": "userdId_22", "attemptID": 1297, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "31.204298", "embeddingY": "-42.564323"},{"extension": "py", "date": "2020-03-24 04:28:22", "correct": "0", "upload": "def compare(chaine1,chaine2):\n    if chaine1=='':\n      res=-1\n    elif chaine2=='':\n      res=1\n    else:\n      res=0\n      i=0\n      while i<len(chaine1) and i<len(chaine2):\n        if chaine1[i]>chaine2[i]:\n          res=-1\n        elif chaine1[i]<chaine2[i]:\n          res=1\n        i=i+1\n    return res", "user": "userdId_18", "attemptID": 1298, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-27.977587", "embeddingY": "60.858646"},{"extension": "py", "date": "2020-03-31 04:28:25", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n  cpt=0\n  trouve=0\n  i=0  \n  while i<len(l) and trouve==False:\n    if l[i]==x:\n      cpt=cpt+1\n    if cpt==n:\n      trouve=True\n  i=i+1    \n#post-traitement\n  if trouve:\n    res=i-1\n  else:\n    res=None  \n  return res      \n", "user": "userdId_39", "attemptID": 1299, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-0.7276136", "embeddingY": "75.54008"},{"extension": "py", "date": "2020-03-05 21:44:42", "correct": "1", "upload": "def somme(liste):\n  res=0\n  for i in range (len(liste)):\n    res=res+liste[i]\n  return res", "user": "userdId_25", "attemptID": 1300, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-44.0948", "embeddingY": "-36.077145"},{"extension": "py", "date": "2020-03-02 07:45:46", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1>=annee2 and mois1<=mois2 and jour1<jour2:\n    return -1\n  elif annee1==annee2 and mois1==mois2 and jour1==jour2:\n    return 0\n  elif annee1>=annee2 and mois1>=mois2 and jour1>jour2:\n    return 1\n  \ncompareDates(10,1,2020,14,2,2020)\ncompareDates(14,2,2020,11,2,2020)\ncompareDates(10,1,2020,10,1,2020)", "user": "userdId_1", "attemptID": 1301, "exercise": "af7c1467ef9f7684d9ff58734067ae98", "exercise_name": "compareDates", "embeddingX": "82.828156", "embeddingY": "-14.280391"},{"extension": "py", "date": "2020-04-11 03:52:49", "correct": "1", "upload": "def produitScalaire(vec1,vec2):\n  res=0\n  for i in range(len(vec1)):\n     res+=vec1[i]*vec2[i]\n  return res", "user": "userdId_8", "attemptID": 1302, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-52.114803", "embeddingY": "-37.052883"},{"extension": "py", "date": "2020-03-22 11:47:36", "correct": "0", "upload": "def maximum(l):\n  max=l[0]\n  for x in l: \n    if x>max:\n      max=x\n    return max", "user": "userdId_21", "attemptID": 1303, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "32.327305", "embeddingY": "-52.997288"},{"extension": "py", "date": "2020-03-10 04:28:17", "correct": "0", "upload": "def sommeNPremiersEntiersPairs(n):\n    res=0\n    for x in range(1,n+1,2):\n        if x%2==0:\n            res=res+x\n        else:\n            res=res-1  \n    return None", "user": "userdId_39", "attemptID": 1304, "exercise": "3030dc079e6607c253e89e8ef4784b74", "exercise_name": "sommeNPremiersEntiersPairs", "embeddingX": "31.327923", "embeddingY": "-13.487691"},{"extension": "py", "date": "2020-04-12 07:17:05", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  if liste==[]:\n    res=True\n  c=[]\n  f=[]\n  res=False\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n  e=liste[0]\n  f.append(e)\n  f.extend(c)\n  return f", "user": "userdId_8", "attemptID": 1305, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-75.27724", "embeddingY": "27.719585"},{"extension": "py", "date": "2020-04-07 23:52:51", "correct": "1", "upload": "def motPalindrome(mot):\n  res=False\n  if mot=='':\n    res=True\n  else:\n    mot2=''\n    for i in mot:\n      mot2=i+mot2\n    if mot==mot2:\n      res=True\n  return res\n  ", "user": "userdId_2", "attemptID": 1306, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "15.588676", "embeddingY": "-4.406017"},{"extension": "py", "date": "2020-06-02 22:01:03", "correct": "1", "upload": "def nombrePair(n):\n  if n%2==0:\n    return True\n  else:\n    return False", "user": "userdId_12", "attemptID": 1307, "exercise": "3001254263845e9a478696f81a704d33", "exercise_name": "nombrePair", "embeddingX": "50.5978", "embeddingY": "-2.4796014"},{"extension": "py", "date": "2020-03-09 23:51:40", "correct": "0", "upload": "def ecart(liste):\n    if len(liste)==0:\n      res=None\n    else:\n      res=liste[0]\n      max=[]\n      min=[]\n      for i in range(1,len(liste)):\n        if liste[i]<res:\n          min=liste[i]\n        if liste[i]>res:\n          max=liste[i]\n          res=max-min\n    return res\n      \n      ", "user": "userdId_9", "attemptID": 1308, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "11.134515", "embeddingY": "-82.74431"},{"extension": "py", "date": "2020-04-06 00:54:03", "correct": "0", "upload": "def sousChaine(s1,s2):\n  trouve=False\n  if s1=='':\n    trouve=True\n  else :\n    if s1 in s2:\n      trouve=True\n      ", "user": "userdId_15", "attemptID": 1309, "exercise": "a7cdd094daa2f0bfccc7a4ec419f7243", "exercise_name": "sousChaine", "embeddingX": "44.618137", "embeddingY": "-15.853454"},{"extension": "py", "date": "2020-03-09 05:27:55", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  \n  res=0\n  for elem in jour1,mois1,annee1,jour2,mois2,annee2 :\n    \n    if (jour1,mois1,annee1<jour2,mois2,annee2):\n      res=-1\n      \n    elif (jour1,mois1,annee1==jour2,mois2,annee2):\n      res=0\n      \n    elif (jour1,mois1,annee1<jour2,mois2,annee2):\n      res=1\n      \n  return res", "user": "userdId_23", "attemptID": 1310, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "-22.33342", "embeddingY": "-8.8877945"},{"extension": "py", "date": "2020-03-05 23:49:30", "correct": "0", "upload": "def somme(liste):\n  res=0\n  for elem in list:\n      res=res+elem\n  return res", "user": "userdId_20", "attemptID": 1311, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-31.709925", "embeddingY": "-13.199104"},{"extension": "py", "date": "2020-04-06 11:46:21", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=True\n  i=1\n  while i<len(liste):\n    if liste[i]!=a*liste[i-1]+b:\n      res=False\n    i+=1\n  return res\ndef suiteAri(liste):\n  cpt=0\n  i=1\n  a=1\n  b=0\n  while i<len(liste) and cpt!=3:\n    if liste[i]!=liste[i-1]:\n      b=liste[i]-liste[i-1]\n      cpt+=1\n    i+=1 \n  return verifSuiteAriGeo(liste,a,b)\ndef suiteGeo(liste):\n  cpt=0\n  i=1\n  a=1\n  b=0\n  while i<len(liste) and cpt!=2:\n    if liste[i-1]==0:\n      i+=1\n    else:\n      if liste[i]!=liste[i-1]:\n        a=liste[i]/liste[i-1]\n        cpt+=1\n    i+=1 \n  return verifSuiteAriGeo(liste,a,b)\ndef suiteAriGeo(liste):\n  res=True\n  if not suiteAri(liste) and not suiteGeo(liste):\n    res=False\n  return res", "user": "userdId_27", "attemptID": 1312, "exercise": "4c9665daf155b115fe13218141fa1aff", "exercise_name": "suiteAriGeo", "embeddingX": "12.499866", "embeddingY": "77.22251"},{"extension": "py", "date": "2020-04-13 22:55:43", "correct": "0", "upload": "def listeDecroissante(scores):\n  res=False\n  if scores==[]:\n    res=True\n  for i in range(len(scores)-1):\n    if scores[i]>scores[1+i]:\n      res=False\n  return res", "user": "userdId_8", "attemptID": 1313, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "-8.128617", "embeddingY": "-68.992775"},{"extension": "py", "date": "2020-03-12 23:50:06", "correct": "0", "upload": "def jourNuit(heure):\n  res=[]\n  if heure<0:\n    res=\"l'heure saisie est invalide\"\n  if heure>24:\n    res=\"l'heure saisie est invalide\"\n  if 6<=heure<=18:\n    if 5<heure<=12:\n      res=\"on est le matin et il fait jour\"\n    if 12<=heure<=17:\n      res=\"on est l'apr\u00e8s-midi et il fait jour\"\n    if 17<=heure<=18:\n      res=\"on est le soir et il fait jour\"\n  if 1<=heure<=5 or 19<=heure<=24:\n    if 1<=heure<=4:\n      res=\"on est la nuit et il fait nuit\"\n    if 21<=heure<=24:\n      res=\"on est la nuit et il fait nuit\"\n    if 19<=heure<=20:\n      res=\"on est le soir et il fait nuit\"\n  if heure==5:\n      res='on est le matin et il fait nuit'\n  return res", "user": "userdId_13", "attemptID": 1314, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "68.74958", "embeddingY": "22.823483"},{"extension": "py", "date": "2020-03-06 00:13:29", "correct": "0", "upload": "def maximum(liste):\n    res=0\n    for elem in liste:\n        if elem>res:\n        \tres=elem\n    for elem in liste:\n        if elem<0:\n            res=elem\n    return res", "user": "userdId_49", "attemptID": 1315, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "42.232788", "embeddingY": "-50.81266"},{"extension": "py", "date": "2020-03-06 00:13:43", "correct": "0", "upload": "def nbOccurrencesLettre(lettre,mot):\n\tres=0\n\tfor lettre in mot:\n\t\tres=res+1\n\treturn res", "user": "userdId_19", "attemptID": 1316, "exercise": "2864c9e5861229d2ff32570f6bc944fb", "exercise_name": "nbOccurrencesLettre", "embeddingX": "-32.353947", "embeddingY": "-2.896204"},{"extension": "py", "date": "2020-04-07 23:38:14", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  res=True\n  if liste[i]==0:\n    res=False\n  while i<len(liste)-1 and res==True:\n    q=liste[i+1]/liste[i]\n    if liste[i+1]/liste[i]==q:\n      res=True\n    else:\n      res=False\n    i+=1\n  return res", "user": "userdId_32", "attemptID": 1317, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "35.114525", "embeddingY": "54.590736"},{"extension": "py", "date": "2020-03-23 22:36:52", "correct": "0", "upload": "def quatrePlus100(liste):\n  res=[]\n  x=0\n  while len(res)<4 :\n    if [liste[x]]>100 :\n      res=res+[liste[x]]\n    x=x+1\n  return res", "user": "userdId_28", "attemptID": 1318, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-21.033796", "embeddingY": "39.30159"},{"extension": "py", "date": "2020-03-19 05:39:35", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if jour1<jour2 and mois1<mois2 and annee1<annee2:\n    res=-1\n  elif jour1>jour2 and mois1>mois2 and annee1>annee2:\n      res=0\n  else:\n    res=1\n  return res", "user": "userdId_34", "attemptID": 1319, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "80.89206", "embeddingY": "-27.418211"},{"extension": "py", "date": "2020-04-06 14:53:51", "correct": "1", "upload": "def motPalindrome(mot):\n  ok=True\n  i=0\n  j=len(mot)-1\n  while i<j and ok:\n    if mot[i]==mot[j]:\n      ok=True\n    else:\n      ok=False\n    i=i+1\n    j=j-1\n  return ok", "user": "userdId_3", "attemptID": 1320, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "23.234436", "embeddingY": "57.285614"},{"extension": "py", "date": "2020-03-07 00:49:12", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1<annee2:\n    res=-1\n  elif annee1>annee2:\n      res=1\n      if mois1<mois2:\n        res=-1\n        if mois1>mois2:\n          res=1\n          if jour1<jour2:\n            res=-1\n            if jour1>jour2:\n              res=1\n  else:\n    res=0\n  return res", "user": "userdId_8", "attemptID": 1321, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "79.59713", "embeddingY": "-33.514484"},{"extension": "py", "date": "2020-03-08 21:54:46", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1==annee2 and mois1==mois2 and jour1==jour2:\n    return 0\n  elif annee1<=annee2 and mois1<=mois2 and jour1<jour2:\n    return -1\n  elif annee1<=annee2 and mois1>=mois2 and jour1>jour2:\n    return -1\n  else:\n    return 1", "user": "userdId_1", "attemptID": 1322, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "83.80097", "embeddingY": "-14.517802"},{"extension": "py", "date": "2020-03-06 23:24:09", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut1>=debut2 or fin1<=fin2 and fin1<debut2:\n    res=True\n  else:\n    res=False\n  return res", "user": "userdId_8", "attemptID": 1323, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "54.29171", "embeddingY": "-23.675488"},{"extension": "py", "date": "2020-03-12 22:02:35", "correct": "0", "upload": "def moyenne(liste):\n  if len (liste)==0:\n    res=None\n  else:\n    res=0\n    cpt=0\n    for elem in liste:\n      res=res+elem\n      cpt=cpt+1\n      res=res%cpt\n  return res ", "user": "userdId_20", "attemptID": 1324, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-4.811642", "embeddingY": "-3.6639175"},{"extension": "py", "date": "2020-04-05 12:03:24", "correct": "0", "upload": "def suiteAri(liste):\n    if liste==[]:\n      ok=True\n    else:\n      ok=True\n      ctePrec=liste[1]-liste[0]\n      cteAct=None\n      i=2\n      while i<len(liste) and ok:\n        cteAct=liste[i]-liste[i-1]\n        if cteAct!=ctePrec:\n          ok=False\n        ctePrec=cteAct\n    return ok", "user": "userdId_18", "attemptID": 1325, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "19.915396", "embeddingY": "66.74596"},{"extension": "py", "date": "2020-04-07 11:09:12", "correct": "0", "upload": "def suiteGeo(liste):\n  ok=True\n  i=0\n  if len(liste)==0 and len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i]!=0:\n      q=liste[1]/liste[0]\n    if liste[i]!=0:\n      if liste[i+1]/liste[i]!=q:\n        ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 1326, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "29.304604", "embeddingY": "61.837154"},{"extension": "py", "date": "2020-04-12 04:54:21", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=False\n  c=[]\n  for i in range(len(liste)-1):\n    c=a*liste[i]+b\n    c=c.append(liste)\n    if c==liste:\n      res=True\n  return res", "user": "userdId_8", "attemptID": 1327, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-74.766396", "embeddingY": "29.095917"},{"extension": "py", "date": "2020-03-10 03:53:19", "correct": "0", "upload": "def nombrePair(n):\n  if n==0:\n    res=True\n  else:\n    if n%2==0:\n      res=True\n    else:\n      res=false\n  return res", "user": "userdId_5", "attemptID": 1328, "exercise": "3001254263845e9a478696f81a704d33", "exercise_name": "nombrePair", "embeddingX": "42.307827", "embeddingY": "-4.7453814"},{"extension": "py", "date": "2020-04-07 04:09:53", "correct": "0", "upload": "def produitScalaire(vec1,vec2):\n  i=0\n  ok=True\n  res=False\n  while i<len(mot)/2 and ok:\n    if mot[i]!=mot[-i-1]:\n      ok=False\n    i+=1\n  if ok: \n    res=True\n  return res", "user": "userdId_16", "attemptID": 1329, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-2.7743227", "embeddingY": "42.822414"},{"extension": "py", "date": "2020-03-23 01:19:17", "correct": "1", "upload": "def moyenne(liste):\n  res=0\n  compteur=0\n  for element in liste:\n    res=res+element\n    compteur=compteur+1\n  if compteur==0:\n    res=None\n  else:\n    res=res/compteur\n  return res", "user": "userdId_34", "attemptID": 1330, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-2.5358698", "embeddingY": "-7.0074034"},{"extension": "py", "date": "2020-03-07 02:41:34", "correct": "0", "upload": "def nbSyllabes(mot):\n  cpt=0\n  if not(mot[0] in 'aeiouy'):\n    cpt+=1\n  for i in range(0,len(mot)-1):\n    if (mot[i] in 'aeiouy') and not(mot[i+1] in 'aeiouy'):\n      cpt+=1\n  return cpt", "user": "userdId_6", "attemptID": 1331, "exercise": "1c86bec0f4df503e23db53994f3d2991", "exercise_name": "nbSyllabes", "embeddingX": "-29.894068", "embeddingY": "-69.60471"},{"extension": "py", "date": "2020-03-22 11:56:21", "correct": "0", "upload": "def maximum(liste):\n  res=liste[0]\n  for x in liste: \n    if x>res:\n      res=x\n  return res", "user": "userdId_21", "attemptID": 1332, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "31.997591", "embeddingY": "-46.58638"},{"extension": "py", "date": "2020-03-12 23:51:17", "correct": "0", "upload": "def jourNuit(heure):\n  res=[]\n  if heure<0:\n    res=\"l'heure saisie est invalide\"\n  if heure>24:\n    res=\"l'heure saisie est invalide\"\n  if 6<=heure<=18:\n    if 5<heure<=12:\n      res=\"on est le matin et il fait jour\"\n    elif 12<=heure<17:\n      res=\"on est l'apr\u00e8s-midi et il fait jour\"\n    elif 17<=heure<=18:\n      res=\"on est le soir et il fait jour\"\n  if 1<=heure<=5 or 19<=heure<=24:\n    if 1<=heure<=4:\n      res=\"on est la nuit et il fait nuit\"\n    elif 21<=heure<=24:\n      res=\"on est la nuit et il fait nuit\"\n    elif 19<=heure<=20:\n      res=\"on est le soir et il fait nuit\"\n  return res", "user": "userdId_13", "attemptID": 1333, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "70.71723", "embeddingY": "23.86055"},{"extension": "py", "date": "2020-04-07 20:14:35", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  chiffre=str(chiffre)\n  nombre=str(nombre)\n  for i in nombre:\n    if chiffre==nombre[i]:\n      cpt=cpt+1\n    i=i+1\n  return cpt", "user": "userdId_3", "attemptID": 1334, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-25.106512", "embeddingY": "-27.609125"},{"extension": "py", "date": "2020-04-06 02:41:55", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  res = 0\n  while nombre != 0 :\n    if nombre%10 == chiffre :\n      res = res + 1\n    nombre = nombre//10  \n  return res", "user": "userdId_17", "attemptID": 1335, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "21.783339", "embeddingY": "10.66826"},{"extension": "py", "date": "2020-03-05 22:14:09", "correct": "0", "upload": "def maximum(l):\n  if len(l)==0:\n    res=l[0]\n    for i in range(1,len(l)):\n      if res<i:\n        res=i\n  else:\n    res=None\n  return res", "user": "userdId_48", "attemptID": 1336, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "11.044146", "embeddingY": "-51.594074"},{"extension": "py", "date": "2020-03-09 23:53:12", "correct": "0", "upload": "def ecart(liste):\n    if len(liste)==0:\n      res=None\n    else:\n      res=liste[0]\n      maxi=[]\n      mini=[]\n      for i in range(1,len(liste)):\n        if liste[i]<res:\n          mini=liste[i]\n        if liste[i]>res:\n          maxi=liste[i]\n          res=maxi-mini\n    return res\n      \n      ", "user": "userdId_9", "attemptID": 1337, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "1.5642526", "embeddingY": "-85.47581"},{"extension": "py", "date": "2020-04-14 03:27:41", "correct": "1", "upload": "def listeDecroissante(scores):\n  ok=True\n  i=0\n  while i<len(scores)-1 and ok:\n    ok=scores[i]>scores[i+1]\n    i+=1\n  return ok", "user": "userdId_12", "attemptID": 1338, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "14.6786995", "embeddingY": "45.20113"},{"extension": "py", "date": "2020-03-02 09:44:36", "correct": "0", "upload": "def delta(a,b,c):\n  \n    return None", "user": "userdId_11", "attemptID": 1339, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-58.387783", "embeddingY": "7.0635014"},{"extension": "py", "date": "2020-04-05 11:45:42", "correct": "1", "upload": "def verifSuiteAriGeo(liste,a,b):\n    if liste==[]:\n      ok=True\n    else:\n      ok=True\n      i=1\n      while i<len(liste) and ok:\n        if a*liste[i-1]+b!=liste[i]:\n          ok=False\n        i+=1\n    return ok", "user": "userdId_18", "attemptID": 1340, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-78.48431", "embeddingY": "22.89887"},{"extension": "py", "date": "2020-03-20 00:45:05", "correct": "1", "upload": "def permutationChaine(s):\n  res=''\n  for i in range (0,len(s)-1,2):\n    res=res+s[i+1]+s[i]\n  if len(s)%2!=0:\n    res=res+s[-1]\n  return res", "user": "userdId_1", "attemptID": 1341, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-35.87737", "embeddingY": "-59.82838"},{"extension": "py", "date": "2020-03-17 06:26:34", "correct": "1", "upload": "def permutationListe(liste,permutation):\n  res=[0]*(len(permutation))\n  for i in range(len(liste)):\n    res[permutation[i]]=liste[i] \n  return res", "user": "userdId_35", "attemptID": 1342, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-50.710213", "embeddingY": "-30.53097"},{"extension": "py", "date": "2020-04-02 23:38:10", "correct": "1", "upload": "def nbChiffres (nombre):\n  if nombre == 0 :\n    res = 1\n  else :\n    res = 0\n    while nombre != 0 :\n      nombre = nombre//10  \n      res = res + 1\n  return res", "user": "userdId_17", "attemptID": 1343, "exercise": "3dcf332c003a1f3bf15df22ee17884a3", "exercise_name": "nbChiffres", "embeddingX": "31.968336", "embeddingY": "11.59596"},{"extension": "py", "date": "2020-03-22 11:56:42", "correct": "0", "upload": "def maximum(liste):\n  for x in liste: \n    if x>res:\n      res=x\n  return res", "user": "userdId_21", "attemptID": 1344, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "29.655912", "embeddingY": "-45.743923"},{"extension": "py", "date": "2020-03-06 00:33:56", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    res=0\n  else:\n    for lettre in [\"a\",\"e\",\"i\",\"o\",\"u\",\"y\"]:\n      res=1\n  return res\n  \n      \n  \n\n ", "user": "userdId_9", "attemptID": 1345, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "12.1930685", "embeddingY": "-36.934883"},{"extension": "py", "date": "2020-04-07 03:49:45", "correct": "0", "upload": "def motPalindrome(mot):\n  res=False\n  if mot[0]==mot[-1]:\n    res=True\n  return res", "user": "userdId_30", "attemptID": 1346, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "43.813812", "embeddingY": "-9.300116"},{"extension": "py", "date": "2020-03-07 03:27:17", "correct": "0", "upload": "def nbSyllabes(mot):\n  if len(mot)==0:\n    return 0\n  else:\n    if (mot[0] in 'aeiouy'):\n      cpt = 1\n    else:\n      cpt = 0\n    for i in range (0, len(mot)-1):\n      if not(mot[i] in 'aeiouy') and (mot[i+1] in 'aeiouy'):\n        cpt+=1\n    return cpt\n        ", "user": "userdId_6", "attemptID": 1347, "exercise": "1c86bec0f4df503e23db53994f3d2991", "exercise_name": "nbSyllabes", "embeddingX": "-29.188797", "embeddingY": "-69.84569"},{"extension": "py", "date": "2020-04-01 06:23:41", "correct": "1", "upload": "def nbOccurrencesLettre(lettre,mot):\n  res=0\n  for elem in mot:\n    if elem==lettre:\n      res+=1\n  return res", "user": "userdId_12", "attemptID": 1348, "exercise": "2864c9e5861229d2ff32570f6bc944fb", "exercise_name": "nbOccurrencesLettre", "embeddingX": "-10.319528", "embeddingY": "-27.497026"},{"extension": "py", "date": "2020-03-05 21:54:08", "correct": "0", "upload": "def somme(liste):\n    res=0\n    for elen in (liste):\n      res=res+elem\n    return res", "user": "userdId_49", "attemptID": 1349, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-29.258121", "embeddingY": "-3.860082"},{"extension": "py", "date": "2020-04-09 22:26:43", "correct": "0", "upload": "def suiteAriGeo(liste):\n  ok=True\n  i=0\n  j=0\n  R=0\n  Q=0\n  if len(liste)<=2 :\n    ok=True\n  else :\n    while j<(len(liste)-2):\n      if liste[0]==0 :\n        Q=1\n      elif (liste[j+1]-liste[j])==(liste[j+2]-liste[j+1]) :\n        Q=1\n        R=(liste[1]-liste[0])\n      elif (liste[j+1]/liste[j])==(liste[j+2]/liste[j+1]) :\n        Q=(liste[1]/liste[0])\n        R=0\n      else : \n        if (liste[1]/liste[0])<(liste[2]/liste[1]) :\n          Q=(liste[1]/liste[0])\n        else :\n          Q=liste[2]/liste[1]\n          R=liste[2]-(Q*liste[1])\n      j+=1\n      \n    while i<(len(liste)-1) and ok :\n      if liste[i+1]!=Q*liste[i]+R :\n        ok=False\n      i+=1\n  return ok", "user": "userdId_15", "attemptID": 1350, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "40.332016", "embeddingY": "55.406578"},{"extension": "py", "date": "2020-03-01 23:56:32", "correct": "1", "upload": "from math import *\ndef polynome(a,b,c):\n  D=(b*b)-4*a*c\n  if D>0 :\n    RacineD=sqrt(D)\n    x1=(-b+RacineD)/(2*a)\n    x2=(-b-RacineD)/(2*a)\n    res=(x1,x2)\n  elif D==0 :\n    x0=-b/(2*a)\n    res=x0\n  else :\n    res=\"pas de solution\"\n  \n  return res", "user": "userdId_15", "attemptID": 1351, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-55.06963", "embeddingY": "6.419483"},{"extension": "py", "date": "2020-04-07 11:02:44", "correct": "0", "upload": "def suiteGeo(liste):\n  ok=True\n  i=0\n  if len(liste)==0 and len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[0]==0:\n      ok=False\n    q=liste[1]/liste[0]\n    if liste[i+1]/liste[i]!=q:\n        ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 1352, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "29.194681", "embeddingY": "60.793793"},{"extension": "py", "date": "2020-04-17 00:19:03", "correct": "0", "upload": "def indiceInsertion(sc,scores):\n  i=0\n  trouve=False\n  while i<len(scores) and not trouve:\n    trouve=scores[i]<sc\n    i+=1\n  return i-1", "user": "userdId_12", "attemptID": 1353, "exercise": "f8a820b2bd54d18d36716e3d703858f7", "exercise_name": "indiceInsertion", "embeddingX": "-9.305404", "embeddingY": "51.55896"},{"extension": "py", "date": "2020-04-08 00:21:16", "correct": "0", "upload": "def suiteAriGeo(liste):\n  ok=True\n  i=0\n  R=0\n  if len(liste)<=1 :\n    ok=True\n  else :\n    for elem in (liste) :\n      if liste[0]==0 :\n        Q=0\n      else :\n        Q=(liste[1]/liste[0])\n        R=(liste[1]-liste[0])\n    while i<(len(liste)-1) and ok :\n      if liste[i+1]!=Q*liste[i]+R :\n        ok=False\n      i+=1\n  return ok", "user": "userdId_15", "attemptID": 1354, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "44.850002", "embeddingY": "55.095055"},{"extension": "py", "date": "2020-03-05 23:44:37", "correct": "0", "upload": "def nbVoyelles(mot):\n  res=0\n  for i in range(len(mot)):\n    if mot[i]==('aeyuio'):\n      res=res+1\n  return res", "user": "userdId_30", "attemptID": 1355, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-8.875675", "embeddingY": "-52.07498"},{"extension": "py", "date": "2020-03-17 05:57:18", "correct": "0", "upload": "def permutationListe(liste,permutation):\n  res=[]\n  for i in liste:\n    res[liste]=liste[i]\n  return res", "user": "userdId_35", "attemptID": 1356, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-51.56749", "embeddingY": "-16.203308"},{"extension": "py", "date": "2020-04-07 23:29:50", "correct": "0", "upload": "def suiteGeo(liste):\n  ok=True\n  i=0\n  q=liste[0]*liste[1]\n  while i<len(liste)-1 and ok:\n    if liste[i]!=0:\n      if liste[i+1]/liste[i]!=q:\n        ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 1357, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "27.684042", "embeddingY": "66.86532"},{"extension": "py", "date": "2020-03-31 04:30:46", "correct": "1", "upload": "def indiceOccurrence(n,x,l):\n  i=0\n  cpt=0\n  trouve=False\n  while i<len(l) and trouve==False:\n    if l[i]==x:\n      cpt=cpt+1\n    if cpt==n:\n      trouve=True\n    i=i+1\n  if trouve:\n    res=i-1\n  else:\n    res=None\n  return res", "user": "userdId_9", "attemptID": 1358, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-0.54769397", "embeddingY": "74.77114"},{"extension": "py", "date": "2020-03-06 00:21:04", "correct": "0", "upload": "def maximum(liste):\n  res=0\n  for elem in range(len(liste)):\n      res=res+liste[elem]\n  return res", "user": "userdId_41", "attemptID": 1359, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-44.021618", "embeddingY": "-37.921124"},{"extension": "py", "date": "2020-04-08 02:47:15", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  res=True\n  listetest=[]\n  while i<len(liste) and res==True:\n    if liste[i]!=0 and len(liste)>=2:\n      listetest=[liste[0]]\n      q=liste[1]/liste[0]\n      u=liste[0]*q**i\n      listetest.append(u)\n      if liste[i]==listetest[i]:\n        res=True\n      else:\n        res=False\n    else:\n      res=False\n    i=i+1\n  return res", "user": "userdId_26", "attemptID": 1360, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "34.447624", "embeddingY": "68.83362"},{"extension": "py", "date": "2020-04-07 03:19:06", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  res=True\n  if len(liste)>1:\n    while i<len(liste)-1:\n      r=liste[0]/liste[1]\n      if liste[i]/liste[i+1]==r:\n        res=True\n      else:\n        res=False\n        i+=1\n  return res\n  ", "user": "userdId_26", "attemptID": 1361, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "34.89054", "embeddingY": "56.04612"},{"extension": "py", "date": "2020-03-30 02:30:20", "correct": "1", "upload": "def compare(chaine1,chaine2):\n  res=0\n  i=0\n  while i<len(chaine1) and i<len(chaine2) and res==0 :\n    if chaine1[i]<chaine2[i] :\n      res=-1\n    elif chaine1[i]>chaine2[i] :\n      res=1\n    else :\n      res=0\n    i=i+1\n  \n  if res==0 :\n    if len(chaine1)>len(chaine2):\n      res=1\n    elif len(chaine1)<len(chaine2):\n      res=-1\n      \n  return res ", "user": "userdId_15", "attemptID": 1362, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-23.758244", "embeddingY": "61.572506"},{"extension": "py", "date": "2020-04-07 03:56:08", "correct": "0", "upload": "def elemAri(n,u0,r):\n  cpt=0\n  i=0\n  while i<n:\n    cpt=u0+r\n  i=i+1\n  return cpt\n  ", "user": "userdId_1", "attemptID": 1363, "exercise": "f239498950e974e29e01472749d9a09d", "exercise_name": "elemAri", "embeddingX": "-8.000304", "embeddingY": "26.095789"},{"extension": "py", "date": "2020-03-17 06:07:43", "correct": "0", "upload": "def permutationChaine(s):\n  cpt=''\n  for elem in s:\n    cpt[elem]=cpt[elem]+1\n  return cpt", "user": "userdId_25", "attemptID": 1364, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-53.517128", "embeddingY": "-12.123437"},{"extension": "py", "date": "2020-03-06 00:36:27", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    voy=0\n  else:\n    voy=0\n    for i in mot:\n      if mot in [\"a\",\"e\",\"i\",\"o\",\"u\",\"y\"]:\n        voy=voy+1\n  return voy", "user": "userdId_13", "attemptID": 1365, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "12.688333", "embeddingY": "-35.898502"},{"extension": "py", "date": "2020-03-16 23:43:48", "correct": "0", "upload": "def sommeNbPairs(liste):\n  for elem in liste:\n    if elem %2==0:\n      res=res+[i]\n  return res", "user": "userdId_12", "attemptID": 1366, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "28.779871", "embeddingY": "-21.55161"},{"extension": "py", "date": "2020-03-22 08:45:03", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n    if annee1<annee2:\n      res=-1\n    if annee1>annee2: \n      res=1\n    else:\n      if mois1<mois2:\n        res=-1\n      if mois1>mois2:\n        res=1\n      else:\n        if jour1<jour2:\n          res=-1\n        if jour1>jour2:\n          res=1\n        else:\n          res=0\n       \n      ", "user": "userdId_47", "attemptID": 1367, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "83.28723", "embeddingY": "-34.221455"},{"extension": "py", "date": "2020-04-05 06:59:49", "correct": "0", "upload": "def prononcable(mot):\n  ok=True\n  voy=0\n  csn=0\n  i=0\n  while i<len(mot) and voy<4 and csn<4:\n    if mot[i] in 'aeiouy':\n      voy+=1\n      csn=0\n    else:\n      csn+=1\n      voy=0\n  if voy>3 or csn>3:\n    ok=False\n  return ok", "user": "userdId_18", "attemptID": 1368, "exercise": "6318b210c201fba050d60bc0913cb7ef", "exercise_name": "prononcable", "embeddingX": "12.263358", "embeddingY": "39.36659"},{"extension": "py", "date": "2020-03-31 04:28:23", "correct": "0", "upload": "def stockerChiffres(nombre):\n  nombre = str(nombre)\n  i = len(nombre)\n  res = []\n  while i > 0:\n    res.append (int(nombre[i]))\n    i = i - 1 \n  return res", "user": "userdId_17", "attemptID": 1369, "exercise": "49a87f644f84a443327fb4315b47f249", "exercise_name": "stockerChiffres", "embeddingX": "-39.67607", "embeddingY": "41.12601"},{"extension": "py", "date": "2020-04-09 03:46:33", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  calc=0\n  i=0\n  lres=[]\n  ok=None\n  while i<len(liste):\n    calc=a*calc+b\n    lres.append(calc)\n    i+=1\n  return lres", "user": "userdId_13", "attemptID": 1370, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-65.20525", "embeddingY": "19.760088"},{"extension": "py", "date": "2020-03-20 01:04:09", "correct": "0", "upload": "def distribution(liste,n):\n  res=[]\n  for i in range(0,n):\n    b=1\n    res.append(0)\n    for a in liste:\n      if a==i:\n        res[i]=b\n        b=b+1\n    res=res+res[i]\n  return res", "user": "userdId_40", "attemptID": 1371, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "7.283445", "embeddingY": "-0.4893218"},{"extension": "py", "date": "2020-04-12 06:51:00", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  if liste==[]:\n    res=True\n  c=[]\n  res=False\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n    c=[liste[0]]+c\n  return c", "user": "userdId_8", "attemptID": 1372, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-69.52501", "embeddingY": "27.018564"},{"extension": "py", "date": "2020-04-21 02:34:37", "correct": "1", "upload": "def listeDecroissante(scores):\n    ok=True\n    i=0\n    while i<len(scores)-1 and ok:\n      if scores[i]<scores[i+1]:\n        ok=False\n      i+=1\n    return ok", "user": "userdId_11", "attemptID": 1373, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "20.419949", "embeddingY": "45.704212"},{"extension": "py", "date": "2020-03-17 06:46:24", "correct": "0", "upload": "def permutationListe(liste,permutation):\n  res=liste[0]\n  for elem in liste:\n    res[elem]=liste[0]\n  return res", "user": "userdId_25", "attemptID": 1374, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-50.20005", "embeddingY": "-15.7293005"},{"extension": "py", "date": "2020-03-31 04:06:23", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n  cpt=0\n  trouve=0\n  i=0  \n  while i<len(l) and trouve==False:\n    if l[i]==x:\n      cpt=cpt+1\n    if cpt==n:\n      trouve=True\n    i=i+1    \n#post-traitement\n  if trouve!=n:\n    i=none\n  return i    ", "user": "userdId_39", "attemptID": 1375, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-2.0772533", "embeddingY": "76.699"},{"extension": "py", "date": "2020-03-17 04:57:04", "correct": "0", "upload": "def reconstruireChainePartielle(s,n):\n    res=''\n    for i in range(0,len(s),n):\n      res=res+s[i]", "user": "userdId_9", "attemptID": 1376, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-61.006348", "embeddingY": "-42.739975"},{"extension": "py", "date": "2020-03-17 06:28:55", "correct": "0", "upload": "def doubleLettre(mot):\n  c1=''*(0,len(mot),2)\n  c2=''*(1,len(mot),2)\n  if c1==c2:\n    res=True\n  else:\n    res=False\n  return res", "user": "userdId_8", "attemptID": 1377, "exercise": "00da9cf1fa2b468d915724499459ed8f", "exercise_name": "doubleLettre", "embeddingX": "-39.309013", "embeddingY": "-5.1270604"},{"extension": "py", "date": "2020-03-31 07:02:06", "correct": "0", "upload": "def nombreSymetrique(nombre):\n  res=stockerChiffres(nombre)\n  trouve=listeSymetrique(res)\n  return trouve", "user": "userdId_9", "attemptID": 1378, "exercise": "fae4d6a34289cf5bf06f9d6d17e8547e", "exercise_name": "nombreSymetrique", "embeddingX": "-43.205276", "embeddingY": "15.824959"},{"extension": "py", "date": "2020-04-05 22:21:38", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  for elem in nombre:\n    if elem==chiffre:\n      cpt+=1\n  return cpt", "user": "userdId_1", "attemptID": 1379, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-35.963478", "embeddingY": "-12.97256"},{"extension": "py", "date": "2020-03-12 21:58:02", "correct": "0", "upload": "def maximum(liste):\n  res=liste[0]\n  for c in liste:\n    if c>=res:\n      res=c\n  return res", "user": "userdId_35", "attemptID": 1380, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "35.907032", "embeddingY": "-47.52992"},{"extension": "py", "date": "2020-03-22 05:51:34", "correct": "1", "upload": "def nbOccurrencesLettre(lettre,mot):\n  res=0\n  for elem in mot:\n    if elem==lettre:\n      res=res+1\n  return res", "user": "userdId_12", "attemptID": 1381, "exercise": "2864c9e5861229d2ff32570f6bc944fb", "exercise_name": "nbOccurrencesLettre", "embeddingX": "-12.380008", "embeddingY": "-27.881792"},{"extension": "py", "date": "2020-04-16 23:55:40", "correct": "1", "upload": "def meilleurScoreJoueur(scores,joueurs,nom):\n  i=0\n  while i<len(scores):\n    if nom==joueurs[i]:\n      return scores[i]\n    i+=1\n  return 0", "user": "userdId_34", "attemptID": 1382, "exercise": "c96fadc94086276f98451a798b3bb730", "exercise_name": "meilleurScoreJoueur", "embeddingX": "-13.370413", "embeddingY": "67.95197"},{"extension": "py", "date": "2020-03-20 00:47:21", "correct": "0", "upload": "def permutationListe(liste,permutation):\n    res = []\n    for i in range (len(liste)) :\n      for elem in permutation :\n        if elem == i :\n          res.append(liste[elem])\n    return res", "user": "userdId_17", "attemptID": 1383, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-27.21067", "embeddingY": "-33.267834"},{"extension": "py", "date": "2020-04-08 02:45:31", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  res=True\n  while i<len(liste) and res==True:\n    if liste[i]!=0 and len(liste)>=2:\n      listetest=[liste[0]]\n      q=liste[1]/liste[0]\n      u=liste[0]*q**i\n      listetest=listetest+u\n      if liste[i]==listetest[i]:\n        res=True\n      else:\n        res=False\n    else:\n      res=False\n    i=i+1\n  return res", "user": "userdId_26", "attemptID": 1384, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "35.245865", "embeddingY": "69.05241"},{"extension": "py", "date": "2020-04-07 23:32:21", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  ok=False\n  i=0\n  while i<len(phrase)//2:\n    if phrase[i]!=phrase[-i-1]:\n      ok=True\n    i+=1\n  if phrase==\"\":\n    ok=True\n  return ok", "user": "userdId_13", "attemptID": 1385, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "26.343517", "embeddingY": "33.70415"},{"extension": "py", "date": "2020-03-07 03:07:03", "correct": "0", "upload": "def nbSyllabes(mot):\n  if len(mot)==0:\n    return 0\n  else:\n    if (mot[0] in 'aeiouy'):\n      cpt = 1\n    else:\n      cpt = 1\n    for i in range (0, len(mot)-1):\n      if not(mot[i] in 'aeiouy') and (mot[i+1] in 'aeiouy'):\n        cpt+=1\n    return cpt\n        ", "user": "userdId_6", "attemptID": 1386, "exercise": "1c86bec0f4df503e23db53994f3d2991", "exercise_name": "nbSyllabes", "embeddingX": "-29.190119", "embeddingY": "-69.83603"},{"extension": "py", "date": "2020-04-07 04:09:01", "correct": "1", "upload": "def elemGeo(n,u0,q):\n  cpt=u0\n  i=0\n  while i<n:\n    cpt=cpt*q\n    i=i+1\n  return cpt", "user": "userdId_1", "attemptID": 1387, "exercise": "d7c83a7fb9b49e28804e55955ad06968", "exercise_name": "elemGeo", "embeddingX": "-10.026534", "embeddingY": "26.215406"},{"extension": "py", "date": "2020-03-17 05:10:14", "correct": "1", "upload": "def permutationChaine(s):\n  res=''\n  for i in range(0,len(s)-1,2):\n    res=res+s[i+1]+s[i]\n  if len(s)%2!=0:\n    res=res+s[-1]\n  return res", "user": "userdId_7", "attemptID": 1388, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-35.205933", "embeddingY": "-59.682102"},{"extension": "py", "date": "2020-03-12 23:54:29", "correct": "0", "upload": "def jourNuit(heure):\n  \n  if heure<0 or heure>24 :\n    res=\"l'heure saisie est invalide\"\n  else : \n    if heure>=6 and heure<18 :\n      res1=\"il fait jour\"\n    else :\n      res1=\"il fait nuit\"\n  \n  if heure>=5 and heure<12 :\n    res2=\"on est le matin\"\n  elif heure>=12 and heure<17 :\n    res2=\"on est l'apr\u00e8s-midi\"\n  elif heure>=17 and heure<21 :\n    res2=\"on est le soir\"\n  else :\n    res2=\"on est la nuit\"\n      \n  res=res1+\" et \"+res2\n  return res", "user": "userdId_15", "attemptID": 1389, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "81.70773", "embeddingY": "16.16439"},{"extension": "py", "date": "2020-03-05 21:34:30", "correct": "1", "upload": "def somme(liste):\n    res = 0\n    for i in range(0,len(liste),1):\n    \tres = res + liste[i]\n    return res", "user": "userdId_29", "attemptID": 1390, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-45.86225", "embeddingY": "-39.50971"},{"extension": "py", "date": "2020-04-05 11:37:35", "correct": "1", "upload": "def elemGeo(n,u0,q):\n    return u0*q**n", "user": "userdId_18", "attemptID": 1391, "exercise": "d7c83a7fb9b49e28804e55955ad06968", "exercise_name": "elemGeo", "embeddingX": "-39.868084", "embeddingY": "19.738445"},{"extension": "py", "date": "2020-03-23 01:39:25", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n  if len(mot)==0:\n    res=None \n  else:\n    res=None\n    for i in range (len(mot)): \n      if lettre==mot[i]:\n        res=[i]\n  return res", "user": "userdId_16", "attemptID": 1392, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-18.519575", "embeddingY": "-40.33872"},{"extension": "py", "date": "2020-03-31 07:04:40", "correct": "1", "upload": "def nombreSymetrique(nombre):\n  res=[]\n  if nombre==0:\n    res=[0]\n  while nombre!=0:\n    res.append(nombre%10)\n    nombre=nombre//10\n  ok=True\n  i=0\n  while i<len(res)//2 and ok:\n    if res[i]!=res[-i-1]:\n      ok=False\n    i+=1\n  return ok", "user": "userdId_8", "attemptID": 1393, "exercise": "fae4d6a34289cf5bf06f9d6d17e8547e", "exercise_name": "nombreSymetrique", "embeddingX": "32.817966", "embeddingY": "38.043995"},{"extension": "py", "date": "2020-04-06 06:31:54", "correct": "0", "upload": "def produitScalaire(vec1,vec2):\n  res=0\n  i=0\n  j=0\n  while i<len(vec1) and j<len(vec2):\n    res=i*j+res\n  return res", "user": "userdId_3", "attemptID": 1394, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-12.823669", "embeddingY": "50.277508"},{"extension": "py", "date": "2020-03-05 23:40:22", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=liste[0]\n    for i in range (1,len(liste)):\n      if liste[i]>res:\n        res=liste[i]\n  return max", "user": "userdId_13", "attemptID": 1395, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "7.2943726", "embeddingY": "-67.078896"},{"extension": "py", "date": "2020-03-16 05:48:16", "correct": "0", "upload": "def doubleLettre(mot):\n  res=0\n  dL=0\n  prec=''\n  for c in mot:\n    if prec==c:\n      dL=True\n    else:\n      dL=False\n    prec=c\n  if dL==True:\n    res=True\n  return res", "user": "userdId_18", "attemptID": 1396, "exercise": "00da9cf1fa2b468d915724499459ed8f", "exercise_name": "doubleLettre", "embeddingX": "11.566384", "embeddingY": "-5.6155195"},{"extension": "py", "date": "2020-03-09 21:19:30", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1==annee2:\n    if mois1==mois2:\n      if jour1==jour2:\n        res=0\n      if jour1<jour2:\n        res=-1\n      else:\n        res=1\n    if mois1<mois2:\n      res=-1\n    else:\n      res=1\n  if annee1<annee2:\n    res=-1\n  else:\n    res=1\n  return res", "user": "userdId_12", "attemptID": 1397, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "80.914795", "embeddingY": "-35.242645"},{"extension": "py", "date": "2020-04-09 11:24:52", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  ok=True\n  if 0 in liste:\n    ok=False\n  if liste==[0]:\n    ok=True\n  elif len(liste)>1:\n    raison=liste[-1]/liste[-2]\n    while i<len(liste)-1:\n      if liste[i+1]!=liste[i]*raison:\n        ok=False\n      i+=1\n  return ok", "user": "userdId_12", "attemptID": 1398, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "23.637846", "embeddingY": "74.59085"},{"extension": "py", "date": "2020-03-10 02:47:19", "correct": "0", "upload": "def nbOccurrencesLettre(lettre,mot):\n  if mot=='':\n    res=None\n  for i in range(len(mot)):\n    if mot[i]==lettre:\n      res=res+1\n  return res\n", "user": "userdId_15", "attemptID": 1399, "exercise": "2864c9e5861229d2ff32570f6bc944fb", "exercise_name": "nbOccurrencesLettre", "embeddingX": "-20.428387", "embeddingY": "-43.207573"},{"extension": "py", "date": "2020-03-06 00:52:19", "correct": "0", "upload": "def ecart(liste):\n   if len(liste)==0:\n      res=None\n   return res", "user": "userdId_14", "attemptID": 1400, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "12.89049", "embeddingY": "-50.61824"},{"extension": "py", "date": "2020-04-06 05:58:10", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  res=True\n  i=0\n  j=len(phrase)-1\n  while i<len(phrase):\n    if phrase[i]==' ':\n      i+=1\n    elif phrase[j]==' ':\n      j-=1\n    if phrase[i]!=phrase[j]:\n      res=False\n    i+=1\n    j-=1\n  return res", "user": "userdId_27", "attemptID": 1401, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "38.49392", "embeddingY": "43.07997"},{"extension": "py", "date": "2020-03-22 12:30:44", "correct": "0", "upload": "def maximum(liste):\n  maxVal=liste[0]\n  for i in range(0,len(liste)): \n    if liste[i]>maxVal:\n      maxVal=liste[i]\t\n  return maxVal", "user": "userdId_21", "attemptID": 1402, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-2.0503185", "embeddingY": "-64.10373"},{"extension": "py", "date": "2020-04-13 22:52:37", "correct": "0", "upload": "def listeDecroissante(scores):\n  res=False\n  if scores==[]:\n    res=True\n  for i in range(len(scores)-1):\n    if scores[i]>scores[1+i]:\n      res=True\n  return res", "user": "userdId_8", "attemptID": 1403, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "-8.147104", "embeddingY": "-69.022354"},{"extension": "py", "date": "2020-03-20 00:30:40", "correct": "0", "upload": "def sousChaine(s,d,l):\n  res=\"\"\n  for j in range(d,d+l,1):\n    res=res+s[j]\n\n  return res", "user": "userdId_5", "attemptID": 1404, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-75.71779", "embeddingY": "15.260282"},{"extension": "py", "date": "2020-04-07 03:17:32", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  res=True\n  while i<len(liste)-1:\n    r=liste[0]/liste[1]\n    if liste[i]/liste[i+1]==r:\n      res=True\n    else:\n      res=False\n    i+=1\n  return res\n  ", "user": "userdId_26", "attemptID": 1405, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "34.601566", "embeddingY": "55.381355"},{"extension": "py", "date": "2020-03-03 06:39:25", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1<annee2:\n    res=-1\n    if mois1<mois2:\n      res=-1\n    else:\n      if jour1<jour2:\n        res=-1\n  elif annee1>annee2:\n    res=1\n    if mois1>mois2:\n      res=1\n    else:\n      if jour1>jour2:\n        res=1\n  else:\n    if annee1==annee2:\n      res=0\n    else:\n      if mois1==mois2:\n        res=0\n      else:\n        if jour1==jour2:\n          res=0\n  return res", "user": "userdId_30", "attemptID": 1406, "exercise": "af7c1467ef9f7684d9ff58734067ae98", "exercise_name": "compareDates", "embeddingX": "79.51625", "embeddingY": "-35.725132"},{"extension": "py", "date": "2020-03-09 06:09:00", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  \n  res=0\n  \n  for elem in jour1,mois1,annee1,jour2,mois2,annee2:\n    \n    if ('jour1,mois1,annee1')<('jour2,mois2,annee2'):\n       res=res-1\n      \n    if ('jour1,mois1,annee1')==('jour2,mois2,annee2'):\n       res=res+1\n    \n    if ('jour1,mois1,annee1')<('jour2,mois2,annee2'):\n       res=res+1\n      \n  return res", "user": "userdId_23", "attemptID": 1407, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "-14.308751", "embeddingY": "1.1502681"},{"extension": "py", "date": "2020-03-04 05:09:14", "correct": "0", "upload": "def maximum(liste):\n    if len(liste)==0:\n      res=None\n    else:\n      res=liste[0]\n      for i in range(1,len(liste)):\n        if i>res:\n          res=(i)\n    return res", "user": "userdId_18", "attemptID": 1408, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "1.6188846", "embeddingY": "-59.861496"},{"extension": "py", "date": "2020-03-03 06:12:51", "correct": "0", "upload": "def polynome(a,b,c):\n  res= 0\n  delta= b**2-4*a*c\n  if delta > 0:\n    res= ((-b-delta**(1/2))/2*a, (-b+delta**(1/2))/2*a)\n  elif delta==0:\n    res= -b/2*a\n  else:\n    res= 'pas de solution'\n  return res", "user": "userdId_7", "attemptID": 1409, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-57.566406", "embeddingY": "9.8694"},{"extension": "py", "date": "2020-03-05 23:45:09", "correct": "0", "upload": "def maximum(liste):\n  res=0\n  for i in range(len(liste)) :\n    if elem>res :\n      res=res+elem\n    else :\n      res='None'\n  return res", "user": "userdId_24", "attemptID": 1410, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-5.511893", "embeddingY": "-43.148926"},{"extension": "py", "date": "2020-04-05 11:37:34", "correct": "1", "upload": "def verifSuiteAriGeo(liste,a,b):\n    res=True\n    n=1\n    while n<len(liste) and res:\n        if liste[n]!=liste[n-1]*a+b:\n            res=False\n        n+=1\n    return res\n\n\ndef suiteAriGeo(liste):\n  res = True\n  if len(liste) > 2:\n    if liste[1]-liste[0] == 0:\n        q = 0\n    else:\n        q = (liste[2]-liste[1])/(liste[1]-liste[0])\n        \n    r = liste[1] - (q*liste[0])\n    res=verifSuiteAriGeo(liste,q,r)\n    \n  return res", "user": "userdId_4", "attemptID": 1411, "exercise": "4c9665daf155b115fe13218141fa1aff", "exercise_name": "suiteAriGeo", "embeddingX": "16.331087", "embeddingY": "74.520966"},{"extension": "py", "date": "2020-03-22 05:01:08", "correct": "1", "upload": "def polynome(a,b,c):\n  delta=b**2-4*a*c\n  if delta>0:\n    x=(-b+(delta**0.5))/2*a,(-b-(delta**0.5))/2*a\n  elif delta==0:\n    x=-b/(2*a)\n  else:\n    x='pas de solution'\n  return x", "user": "userdId_12", "attemptID": 1412, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-52.686356", "embeddingY": "7.2433376"},{"extension": "py", "date": "2020-03-19 04:46:15", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut2>fin1 or debut1>fin2:\n    res=False\n  else:\n    res=True\n    return None", "user": "userdId_34", "attemptID": 1413, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "63.94879", "embeddingY": "-23.153301"},{"extension": "py", "date": "2020-04-07 03:21:52", "correct": "0", "upload": "def suiteGeo(liste):\n  i=-1\n  ok=True\n  if len(liste)>1:\n    while i>-len(liste):\n      if liste[i]%liste[i-1]!=0:\n        ok=False\n      i-=1\n  return ok", "user": "userdId_12", "attemptID": 1414, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "17.00496", "embeddingY": "30.766523"},{"extension": "py", "date": "2020-03-31 01:10:49", "correct": "1", "upload": "def listeSymetrique(l):\n  i=0\n  res = True\n  while res == True and i < len(l)-1:\n    i+=1\n    if l[i] != l[len(l)-i-1]:\n      res = False\n  return res\n\ndef nombreSymetrique(nombre):\n  l = []\n  for nb in str(nombre):\n    l.append(int(nb))\n \n  return listeSymetrique(l)", "user": "userdId_4", "attemptID": 1415, "exercise": "fae4d6a34289cf5bf06f9d6d17e8547e", "exercise_name": "nombreSymetrique", "embeddingX": "29.424871", "embeddingY": "43.991867"},{"extension": "py", "date": "2020-03-15 07:20:01", "correct": "0", "upload": "def jourNuit(heure):\n  if heure<0 and heure>24:\n    res=\"l'heure saisie est invalide\"\n  else:\n    if heure<5 or heure>=21:\n      res=\"on est la nuit\"\n    elif heure<12:\n      res=\"on est le matin\"\n    elif heure<17:\n      res=\"on est l'apr\u00e8s-midi\"\n    else:\n      res=\"on est le soir\"\n    if heure>=6 and heure<18:\n      res=res+' et il fait jour'\n    else:\n      res=res+' et il fait nuit'\n  return res", "user": "userdId_12", "attemptID": 1416, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "78.42487", "embeddingY": "19.486574"},{"extension": "py", "date": "2020-03-24 04:31:32", "correct": "1", "upload": "def compare(chaine1,chaine2):\n  res=0\n  cpt=0\n  i=0\n  while i<len(chaine1) and i<len(chaine2) and cpt!=2:\n    if chaine1[i]>chaine2[i]:\n      res=1\n      cpt=cpt+1\n    elif chaine1[i]<chaine2[i]:\n      res=-1\n      cpt=cpt+1\n    i=i+1\n  if res==0:\n    if len(chaine1)>len(chaine2):\n      res=1\n    elif len(chaine1)==len(chaine2):\n      res=0\n    else:\n      res=-1\n  return res", "user": "userdId_27", "attemptID": 1417, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-29.610434", "embeddingY": "66.259026"},{"extension": "py", "date": "2020-03-03 05:54:55", "correct": "0", "upload": "def nbVoyelles(mot):\n  res=0\n  if \"aeiouy\" in (mot):\n    res=mot(\"aeiouy\")\n    return res", "user": "userdId_8", "attemptID": 1418, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "12.233058", "embeddingY": "-20.471205"},{"extension": "py", "date": "2020-04-12 07:30:13", "correct": "1", "upload": "def produitScalaire(vec1,vec2):\n  \n  res = 0\n  \n  for i in range(len(vec1)):\n    \n    res+= vec1[i]*vec2[i]\n    \n  return res", "user": "userdId_54", "attemptID": 1419, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-52.127403", "embeddingY": "-37.058083"},{"extension": "py", "date": "2020-04-07 20:09:35", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  chiffre=int(chiffre)\n  nombre=int(nombre)\n  for i in range(nombre):\n    if nombre[i]==chiffre:\n      cpt=cpt+1\n    i=i+1\n  return cpt", "user": "userdId_3", "attemptID": 1420, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-24.667517", "embeddingY": "-28.401749"},{"extension": "py", "date": "2020-04-20 22:02:07", "correct": "0", "upload": "def rechercheDicho(liste,val):\n  min = 0\n  max = len(liste)\n  index = None\n  nbAcces=0\n  acces =(max+min)//2\n  found = False\n  while max!=acces and min!=acces and not found:\n    nbAcces+=1\n    print (nbAcces)\n    print(liste[acces])\n    if liste[acces]==val:\n      found = True\n    else:\n      if liste[acces]>val:\n        max = acces\n      else:\n        min = acces\n      acces = (max+min)//2\n  if found:\n    for i in range(len(liste)):\n      if liste[i] == val:\n        index = i\n  return (index,nbAcces)", "user": "userdId_6", "attemptID": 1421, "exercise": "434544c545ce211c7e57445707047bee", "exercise_name": "rechercheDicho", "embeddingX": "2.9734204", "embeddingY": "63.189503"},{"extension": "py", "date": "2020-03-05 23:45:49", "correct": "0", "upload": "def somme(liste):\n  res=0\n  for elem in list:\n     res=res+elem\n  return res", "user": "userdId_20", "attemptID": 1422, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-31.136387", "embeddingY": "-13.101071"},{"extension": "py", "date": "2020-03-24 05:56:22", "correct": "0", "upload": "def compare(chaine1,chaine2):\n    if chaine1=='':\n      res=-1\n    elif chaine2=='':\n      res=1\n    else:\n      res=0\n      i=0\n      mmlttr=0\n      while i<len(chaine1) and i<len(chaine2) and res==0:\n        if chaine1[i]<chaine2[i]:\n          res=-1\n        elif chaine1[i]>chaine2[i]:\n          res=1\n        else:\n          mmlttr=mmlttr+1\n        i=i+1\n      if len(chaine1)>len(chaine2):\n        if len(chaine2)==mmlttr:\n          res=1\n      elif len(chaine1)<len(chaine2):\n        if len(chaine1)==mmlttr:\n          res=-1\n    return res", "user": "userdId_18", "attemptID": 1423, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-30.408651", "embeddingY": "63.514236"},{"extension": "py", "date": "2020-03-18 03:57:41", "correct": "0", "upload": "def permutationChaine(s):\n  res = ''\n  for i in range (0,len(s)-1,2):\n    res = res + [i+1] + s[i]\n  if len(s)%2 != 0 :\n    res = res + s[-1]\n    return res", "user": "userdId_17", "attemptID": 1424, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-38.9147", "embeddingY": "-63.33051"},{"extension": "py", "date": "2020-03-12 22:14:05", "correct": "1", "upload": "def moyenne(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=0\n    cpt=0\n    for elem in liste:\n      res=res+elem\n      cpt=cpt+1\n    res=res/cpt\n  return res", "user": "userdId_25", "attemptID": 1425, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-3.7902424", "embeddingY": "-8.670959"},{"extension": "py", "date": "2020-03-05 21:44:05", "correct": "1", "upload": "def somme(liste):\n  res=0\n  for i in range(len(liste)):\n     res=res+liste[i]\n  return res", "user": "userdId_32", "attemptID": 1426, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-44.22576", "embeddingY": "-37.145588"},{"extension": "py", "date": "2020-04-12 07:03:20", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  if liste==[]:\n    res=True\n  c=[]\n  res=False\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n    c=[liste[0]]+2+c\n  return c", "user": "userdId_8", "attemptID": 1427, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-74.18895", "embeddingY": "20.4138"},{"extension": "py", "date": "2020-03-10 04:14:40", "correct": "0", "upload": "def sommeNPremiersEntiers(n):\n  res=0\n  if x in range(1,n,1):\n    res=res+x\n  return res", "user": "userdId_8", "attemptID": 1428, "exercise": "c315a540cf0bfb0182dc114c6f0eafd1", "exercise_name": "sommeNPremiersEntiers", "embeddingX": "7.205826", "embeddingY": "-19.014708"},{"extension": "py", "date": "2020-03-07 00:42:00", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1<annee2:\n    res=-1\n  elif annee1>annee2:\n    res=1\n  elif mois1<mois2:\n      res=-1\n      if mois1>mois2:\n        res=1\n      elif jour1<jour2:\n        res=-1\n        if jour1>jour2:\n          res=1\n  else:\n    res=0\n  return res", "user": "userdId_8", "attemptID": 1429, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "80.8311", "embeddingY": "-33.76689"},{"extension": "py", "date": "2020-03-31 06:04:47", "correct": "0", "upload": "def doubleChiffre(nombre):\n  res=True\n  cpt=nombre\n  ctp2=0\n  while res==True:\n    cpt2=cpt%10\n    cpt=cpt//10\n    if cpt==cpt2:\n      res=False\n  return res\n\n    ", "user": "userdId_28", "attemptID": 1430, "exercise": "c83ea6acd3e9f6f5543e87d515e8a44a", "exercise_name": "doubleChiffre", "embeddingX": "12.390339", "embeddingY": "16.737072"},{"extension": "py", "date": "2020-04-12 11:38:49", "correct": "0", "upload": "def phrasePalindrome(phrase):\n    if len(phrase)==0:\n      res=True\n    else:\n      res=True\n      i=0\n      x=''\n      while i<len(phrase)//2 and res:\n        if phrase[i]!=phrase[-(i+1)]:\n          res=False\n          i+=1\n        if phrase[i]==x:\n          res=False\n          i+=1\n        if phrase[-(i+1)]==x:\n          res=False\n          i+=1\n        else:\n          res=True\n    return res", "user": "userdId_11", "attemptID": 1431, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "38.77525", "embeddingY": "30.966866"},{"extension": "py", "date": "2020-03-05 21:36:54", "correct": "0", "upload": "def maximum(liste):\n  max = liste[0]\n  for i in range(1,len(liste)):\n    if liste[i]>max:\n      max = liste[i]\n  return max", "user": "userdId_6", "attemptID": 1432, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "10.359631", "embeddingY": "-72.11097"},{"extension": "py", "date": "2020-04-13 22:19:56", "correct": "0", "upload": "def meilleurClassementJoueur(scores,joueurs,nom):\n  c=True\n  if nom in joueurs:\n    while i< len(joueurs) and c:\n      if nom==joueurs[i]:\n        res=i+1\n        c=False\n  else:\n    res=-1\n  return res\n", "user": "userdId_19", "attemptID": 1433, "exercise": "be6ce0a06c5d396190024c7c681da95d", "exercise_name": "meilleurClassementJoueur", "embeddingX": "-3.0122294", "embeddingY": "52.552483"},{"extension": "py", "date": "2020-03-17 05:52:23", "correct": "0", "upload": "def permutationListe(liste,permutation):\n  res=0\n  for elem in liste:\n    res=elem\n  return res", "user": "userdId_25", "attemptID": 1434, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-31.583538", "embeddingY": "5.2849064"},{"extension": "py", "date": "2020-03-12 23:50:42", "correct": "1", "upload": "def jourNuit(heure):\n  if heure > 24 or heure < 0 :\n    res = \"l'heure saisie est invalide\"\n  else :\n    if heure < 5  or heure >= 21:\n      res = \"on est la nuit \"\n    elif heure < 12 :\n      res = \"on est le matin \"\n    elif heure < 17 :\n      res = \"on est l'apr\u00e8s-midi \"\n    else:\n      res = \"on est le soir \"\n    \n    if heure >= 6 and heure < 18 :\n      res = res + \"et il fait jour\"\n    else :\n      res = res + \"et il fait nuit\"\n  return res", "user": "userdId_17", "attemptID": 1435, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "78.94105", "embeddingY": "19.322472"},{"extension": "py", "date": "2020-03-31 04:06:02", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n  cpt=0\n  i=0\n  while i<len(l):\n    if l[i]==x:\n      cpt+=1\n    i+=1\n  if cpt!=n:\n    res=None\n  else:\n    res=cpt\n  return res", "user": "userdId_13", "attemptID": 1436, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-10.258032", "embeddingY": "71.84261"},{"extension": "py", "date": "2020-04-12 05:41:39", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=False\n  c=[]\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n    \n  return c", "user": "userdId_8", "attemptID": 1437, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-80.70282", "embeddingY": "12.9993725"},{"extension": "py", "date": "2020-05-04 22:10:48", "correct": "0", "upload": "def ecart(liste):\n  if liste==[]:\n    res=None\n  else:\n    maxi=liste[0]\n    mini=liste[0]\n    res=liste[0]\n    for i in range(1,len(liste)):\n      if liste[i]<mini:\n        mini=liste[i]\n      elif liste[i]>maxi:\n        maxi=liste[i]\n  return res", "user": "userdId_8", "attemptID": 1438, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "0.9607127", "embeddingY": "-84.43888"},{"extension": "py", "date": "2020-04-12 10:50:01", "correct": "0", "upload": "def phrasePalindrome(phrase):\n    if len(phrase)==0:\n      res=True\n    else:\n      res=True\n      i=0\n      x=''\n      while i<len(phrase)//2 and res:\n        if phrase[i]!=phrase[-(i+1)]:\n          res=False\n          i+=1\n    return res", "user": "userdId_11", "attemptID": 1439, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "23.282938", "embeddingY": "34.44563"},{"extension": "py", "date": "2020-03-03 05:51:04", "correct": "1", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=liste[0]\n    for i in range(len(liste)):\n      if liste[i]>res:\n        res=liste[i]\n  return res", "user": "userdId_8", "attemptID": 1440, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "0.72320276", "embeddingY": "-62.90045"},{"extension": "py", "date": "2020-03-11 03:17:46", "correct": "0", "upload": "def prononcable(mot):\n    listvoy = [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\",\"\"]\n    cons = 0\n    for lettre in mot:\n        if lettre not in listvoy:\n            cons += 1\n        elif cons >= 4:\n            return False\n        else:\n            cons = 0\n    return True", "user": "userdId_42", "attemptID": 1441, "exercise": "6318b210c201fba050d60bc0913cb7ef", "exercise_name": "prononcable", "embeddingX": "23.803965", "embeddingY": "-31.487555"},{"extension": "py", "date": "2020-04-21 02:43:08", "correct": "0", "upload": "def meilleurScoreJoueur(scores,joueurs,nom):\n    trouve=False\n    i=0\n    while i<len(joueurs) and trouve:\n      if joueurs[i]==nom:\n        trouve=True\n      i+=1\n    if trouve:\n      res=scores[i-1]\n    else:\n      res=0\n    return res", "user": "userdId_11", "attemptID": 1442, "exercise": "c96fadc94086276f98451a798b3bb730", "exercise_name": "meilleurScoreJoueur", "embeddingX": "-1.7073814", "embeddingY": "50.417576"},{"extension": "py", "date": "2020-03-23 00:30:04", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=[]\n    for i in range(len(liste)):\n      if liste[i+1]>liste[i]:\n        res=liste[i+1]\n  return res", "user": "userdId_8", "attemptID": 1443, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-5.136786", "embeddingY": "-64.184265"},{"extension": "py", "date": "2020-03-20 00:52:47", "correct": "0", "upload": "def permutationChaine(s):\n  res=\"\"\n  for i in range(0,len(s)-1,2):\n    res=res+s[i+1]+s[i]\n  if len(s)%2!=0:\n    res=res+s[-i]\n  return res", "user": "userdId_20", "attemptID": 1444, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-35.923943", "embeddingY": "-59.594032"},{"extension": "py", "date": "2020-03-27 05:38:36", "correct": "0", "upload": "def quatrePlus100(liste):\n  i=0\n  res=[]\n  while i<len(liste) and i<=4:\n    if l[i]>100:\n      res=res+l[i]\n    i=i+1\n  return res", "user": "userdId_1", "attemptID": 1445, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-29.10142", "embeddingY": "40.578667"},{"extension": "py", "date": "2020-03-31 06:27:36", "correct": "1", "upload": "def stockerChiffres(nombre):\n  cpt=0\n  res=[]\n  nb=nombre\n  while nb!=0:\n    res=res+[nb%10]\n    nb=nb//10\n  if res==[]:\n    res=[0]\n  return res\n    \ndef listeSymetrique(l):\n    trouve=True\n    i=0\n    j=-1\n    while i<len(l) and j>=-len(l) and trouve!=False:\n      if l[i]!=l[j]:\n        trouve=False\n      i=i+1\n      j=j-1\n    return trouve\n  \ndef nombreSymetrique(nombre):\n  l=stockerChiffres(nombre)\n  res=listeSymetrique(l)\n  return res\n  \n  ", "user": "userdId_28", "attemptID": 1446, "exercise": "fae4d6a34289cf5bf06f9d6d17e8547e", "exercise_name": "nombreSymetrique", "embeddingX": "-1.9298663", "embeddingY": "18.407545"},{"extension": "py", "date": "2020-03-24 03:58:24", "correct": "0", "upload": "def compare(chaine1,chaine2):\n  while i<len(chaine1) and i<len(chaine2) and res==0:\n    if chaine1[i]>chaine2[i]:\n      res=-1\n    elif chaine1[i]<chaine2[i]:\n      res=1\n    i=i+1\n  return res", "user": "userdId_26", "attemptID": 1447, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-10.79015", "embeddingY": "42.37831"},{"extension": "py", "date": "2020-04-14 03:51:20", "correct": "0", "upload": "def meilleurScoreJoueur(scores,joueurs,nom):\n  trouve=False\n  i=0\n  res=0\n  while i<len(joueurs) and i<len(scores) and trouve==False:\n    if nom==joueurs[i]:\n      trouve=True\n      res=scores[i]\n    else:\n      res=0\n      trouve=True\n    i=i+1\n  return res", "user": "userdId_7", "attemptID": 1448, "exercise": "c96fadc94086276f98451a798b3bb730", "exercise_name": "meilleurScoreJoueur", "embeddingX": "-2.208924", "embeddingY": "75.68244"},{"extension": "py", "date": "2020-03-06 00:06:21", "correct": "1", "upload": "def minimum(liste):\n  if len (liste)==0:\n    res=None\n  else:\n    res=liste[0]\n    for i in range (1,len(liste)):\n      if liste[i]<res:\n        res=liste[i]\n  return res", "user": "userdId_13", "attemptID": 1449, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "25.92955", "embeddingY": "-68.33458"},{"extension": "py", "date": "2020-03-05 23:44:19", "correct": "0", "upload": "def maximum(liste):\n  res=0\n  for i in range(len(liste)):\n      res=res+liste[i]\n  return res", "user": "userdId_41", "attemptID": 1450, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-45.00489", "embeddingY": "-36.237404"},{"extension": "py", "date": "2020-03-12 21:46:04", "correct": "1", "upload": "def somme(liste):\n  res=0\n  for elem in liste:\n    res= res+elem\n  return res ", "user": "userdId_20", "attemptID": 1451, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-28.901068", "embeddingY": "4.274326"},{"extension": "py", "date": "2020-03-27 06:31:45", "correct": "0", "upload": "def compare (chaine1,chaine2):\n  i = 0\n  if len(chaine1) > len(chaine2):\n    res =  1\n  elif len(chaine1) < len(chaine2): \n    res = -1\n  else :\n    res = 0\n  while i < len(chaine1) and res == 0 :\n    if chaine1[i] < chaine2[i]:\n      res = -1\n    elif chaine1[i] > chaine2[i]:\n      res = 1\n    else :\n      res = 0\n    i = i + 1\n\n  return res ", "user": "userdId_17", "attemptID": 1452, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-22.296944", "embeddingY": "61.330093"},{"extension": "py", "date": "2020-04-07 04:50:55", "correct": "0", "upload": "def suiteAri(liste):\n  ok=True\n  i=0\n  if len(liste)==0:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=liste[i]+liste[i+1]-liste[i]:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 1453, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "20.364338", "embeddingY": "52.647087"},{"extension": "py", "date": "2020-03-31 00:34:47", "correct": "0", "upload": "def stockerChiffres(nombre):\n    res = list(nombre)\n    res.reverse()\n    return res ", "user": "userdId_4", "attemptID": 1454, "exercise": "49a87f644f84a443327fb4315b47f249", "exercise_name": "stockerChiffres", "embeddingX": "-48.25233", "embeddingY": "2.8247042"},{"extension": "py", "date": "2020-03-05 21:40:15", "correct": "0", "upload": "def somme(liste):\n  res=0\n  for i in range (len(l)):\n   res=res+liste(i)\n  return None", "user": "userdId_23", "attemptID": 1455, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-31.923029", "embeddingY": "-16.401018"},{"extension": "py", "date": "2020-03-30 22:34:42", "correct": "0", "upload": "def indiceOccurence(n,x,l):\n  trouve=0\n  i=0\n  while i<len(l) and trouve!=n:\n    if x==l[i]:\n      trouve=trouve+1\n    i=i+1\n  return i", "user": "userdId_19", "attemptID": 1456, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-6.843936", "embeddingY": "79.85392"},{"extension": "py", "date": "2020-04-07 23:52:45", "correct": "0", "upload": "def suiteGeo(liste):\n  i = 0\n  j = 0\n  raison = None\n  if liste == [] or len(liste) == 1 :\n    res = True\n  else :\n    res = True \n  while raison == None and j < len(liste) - 1 :\n    if liste[j] != 0 :\n       raison = liste[j+1]/liste[j]\n    j = j + 1\n  while res and i < len(liste) - 1 :\n    if liste[i]*raison != liste[i+1]:\n      res = False\n    i = i + 1\n  return res\n", "user": "userdId_17", "attemptID": 1457, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "30.560196", "embeddingY": "73.49318"},{"extension": "py", "date": "2020-04-08 00:42:29", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res = True\n  i = 0\n  while res and i < len(liste)-1:\n    if liste[i+1] != (a*liste[i]+b) :\n      res = False\n    i = i + 1\n  return res\n\ndef suiteAriGeo(liste):\n  if len(liste) < 3 :\n    res = True\n  else :\n    ecart1 = liste[1]-liste[0]\n    ecart2 = liste[2]-liste[1]\n    a = ecart2/ecart1\n    b = liste[1]-a*liste[0]\n    res = verifSuiteAriGeo(liste,a,b)\n  return res\n", "user": "userdId_17", "attemptID": 1458, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "16.854935", "embeddingY": "72.674904"},{"extension": "py", "date": "2020-03-22 05:19:10", "correct": "1", "upload": "def semestreValide(ue1,ue2):\n  res=False\n  if (ue1>=10 and ue2>=10) or (ue1>=10 and (ue1+ue2)/2>=10):\n    res=True\n  return res", "user": "userdId_12", "attemptID": 1459, "exercise": "70ae7ad6cf504e0fa8cedebd8e8a825f", "exercise_name": "semestreValide", "embeddingX": "68.881294", "embeddingY": "-0.4911762"},{"extension": "py", "date": "2020-03-22 06:13:47", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n  for i in range(len(mot)):\n    if mot[i]==lettre:\n      res=i\n    else:\n      res=None\n  return res", "user": "userdId_12", "attemptID": 1460, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-17.52326", "embeddingY": "-41.131733"},{"extension": "py", "date": "2020-03-31 06:42:39", "correct": "1", "upload": "def doubleChiffre(nombre):\n  res=False\n  com1=None\n  while nombre!=0 and not res:\n    chiffre=nombre%10\n    nombre=nombre//10\n    if chiffre==com1:\n      res=True\n    com1=chiffre\n  return res", "user": "userdId_13", "attemptID": 1461, "exercise": "c83ea6acd3e9f6f5543e87d515e8a44a", "exercise_name": "doubleChiffre", "embeddingX": "10.770968", "embeddingY": "21.38941"},{"extension": "py", "date": "2020-03-17 05:55:15", "correct": "0", "upload": "def permutationListe(liste,permutation):\n  res=[0]\n  for i in range(permutation):\n    res=res[permutation]=liste[i]\n    return res", "user": "userdId_8", "attemptID": 1462, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-41.906937", "embeddingY": "-17.67005"},{"extension": "py", "date": "2020-04-13 22:02:13", "correct": "0", "upload": "scores=[352100,325410,312785,220199,127853]\njoueurs=['Batman','Robin','Batman','Jocker','Batman']\n\ndef listeDecroissante(scores):\n  res=True\n  i=0\n  while i<len(scores)-1 and res:\n    if scores[i]<=scores[i+1]:\n      res=False\n  return res\n    ", "user": "userdId_28", "attemptID": 1463, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "16.359007", "embeddingY": "56.52274"},{"extension": "py", "date": "2020-03-05 22:14:28", "correct": "0", "upload": "def maximum(liste):\n  liste:[12,1,25,7]\n  res=0\t\n  for i in range(len(liste)):\n    if res<len(liste):\n      res=len(liste)\n  \n    return res\n  ", "user": "userdId_23", "attemptID": 1464, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "31.45306", "embeddingY": "-69.39729"},{"extension": "py", "date": "2020-04-12 05:37:20", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n    if len(liste)==0:\n      res=True\n    else:\n      res=True\n      i=0\n      while i<len(liste):\n        if liste[i+1]==a*liste[i]+b:\n          res=True\n        else:\n          res=False\n    return res\n    ", "user": "userdId_11", "attemptID": 1465, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-85.44647", "embeddingY": "21.24392"},{"extension": "py", "date": "2020-04-08 06:51:09", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n    cpt=0\n    i=0\n    while i<len(nombre):\n      if chiffre==nombre[i]:\n        cpt+=1\n      i+=1\n    return cpt\n  \n      \n", "user": "userdId_11", "attemptID": 1466, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-14.7220545", "embeddingY": "44.21697"},{"extension": "py", "date": "2020-03-23 01:39:00", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n    fin=debut+longueur\n    if fin>len(s):\n      fin=len(s)\n    else:\n      res=''\n      for i in range(debut,fin):\n        res=res+s[i]\n    return res", "user": "userdId_11", "attemptID": 1467, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-76.14708", "embeddingY": "21.300072"},{"extension": "py", "date": "2020-03-17 05:39:27", "correct": "0", "upload": "def permutationChaine(s):\n  res=''\n  for i in range(0,len(s)-1,2):\n    res=res+s[i+1]+s[i]\n  return res", "user": "userdId_23", "attemptID": 1468, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-44.07839", "embeddingY": "-50.332066"},{"extension": "py", "date": "2020-03-23 01:47:31", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n  if len(mot)==0:\n    res=None \n  else:\n    res=None\n    for i in mot: \n      if lettre==mot[i]:\n        res=i\n  return res", "user": "userdId_16", "attemptID": 1469, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-15.744602", "embeddingY": "-34.225105"},{"extension": "py", "date": "2020-04-16 23:53:47", "correct": "0", "upload": "def listeDecroissante(scores):\n  res=True\n  x=scores[0]\n  for elem in scores:\n    if x<elem:\n      res=False\n    x=elem\n  return res", "user": "userdId_14", "attemptID": 1470, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "43.225933", "embeddingY": "-60.040512"},{"extension": "py", "date": "2020-03-14 22:01:06", "correct": "0", "upload": "def maximum(liste):\n  maxi=0\n  for v in range (liste):\n    if v>maxi:\n    \tmaxi=v\n    return maxi", "user": "userdId_21", "attemptID": 1471, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-40.753826", "embeddingY": "-21.452215"},{"extension": "py", "date": "2020-03-10 21:37:57", "correct": "0", "upload": "def ecart(liste):\n  res=0\n  if len(liste)==0:\n    res=None\n  if len(liste)==1:\n    res=0\n  x=liste[0]\n  y=liste[0]\n  for i in range(1,len(liste)):\n    if liste[i]>x:\n      x=liste[i]\n    if liste[i]<y:\n      y=liste[i]\n  res=x-y\n  return res", "user": "userdId_14", "attemptID": 1472, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "-0.6181319", "embeddingY": "-83.17483"},{"extension": "py", "date": "2020-04-07 20:33:09", "correct": "0", "upload": "def suiteAri(liste):\n  res=True\n  while i<len(liste) and res:\n    if liste[i]%liste[i+1]==0:\n      res=False\n    elif liste[i+1]%liste[i+2]!=liste[i]%liste[i+1]:\n      res=False\n    else:\n      res=True\n  return res", "user": "userdId_3", "attemptID": 1473, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "-1.4974108", "embeddingY": "40.27809"},{"extension": "py", "date": "2020-03-05 22:13:16", "correct": "0", "upload": "def maximum(liste):\n    max = liste[0]\n    for i in range(0,len(liste)):\n      if liste[i] > max:\n        max = liste[i]\n    return max", "user": "userdId_29", "attemptID": 1474, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "10.167689", "embeddingY": "-72.441414"},{"extension": "py", "date": "2020-03-05 23:42:55", "correct": "0", "upload": "def maximum(liste):\n    res = liste[1]\n    for i in range(0,len(liste)):\n      if liste[i] > res :\n        res = liste[i]\n    if len(liste) == 0:\n      res = None\n    return res", "user": "userdId_29", "attemptID": 1475, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-2.3703682", "embeddingY": "-62.243927"},{"extension": "py", "date": "2020-03-20 00:23:11", "correct": "0", "upload": "def permutationChaine(s):\n  res=''\n  if len(s)<1:\n  \tres=''\n  else:\n    for i in range(0,len(s)-1,2):\n      res=res+s[i+1]\n      res=res+s[i]\n    l=len(s)\n    res=res+s[l-1]\n  return res", "user": "userdId_40", "attemptID": 1476, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-40.1731", "embeddingY": "-55.015182"},{"extension": "py", "date": "2020-04-12 10:24:29", "correct": "1", "upload": "def elemAri(n,u0,r):\n  res=u0+n*r\n  return res", "user": "userdId_38", "attemptID": 1477, "exercise": "f239498950e974e29e01472749d9a09d", "exercise_name": "elemAri", "embeddingX": "-35.51764", "embeddingY": "18.77159"},{"extension": "py", "date": "2020-03-30 21:59:31", "correct": "0", "upload": "def listeSymetrique(l):\n  i=0\n  while i<len(l):\n    if l[i]!=l[-(1+i)]:\n      return False\n  return True", "user": "userdId_6", "attemptID": 1478, "exercise": "8eb27aeda471a467e2223abebeca886e", "exercise_name": "listeSymetrique", "embeddingX": "17.870405", "embeddingY": "42.08683"},{"extension": "py", "date": "2020-03-06 00:18:37", "correct": "0", "upload": "def nbVoyelles(mot):\n  voyel=\"aeiouy\"\n  if len(mot)==0:\n    voy=None\n  else:\n    voy=0\n    for i in range(mot[i]):\n      if voyel[i] == mot[i]:\n        voy=voy+1\n  return voy", "user": "userdId_13", "attemptID": 1479, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-1.837784", "embeddingY": "-44.04976"},{"extension": "py", "date": "2020-04-12 07:47:37", "correct": "0", "upload": "def suiteAriGeo(liste):\n  i=0\n  while i<len(liste):\n    a=liste[1]-liste[0]\n    b=liste[1]-liste[0]\n    if liste[i+1]==liste[i]+b:\n      a=1\n    if liste[i+1]==liste[1]/liste[0]:\n      b=0\n  ok=True\n  i=0\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=a*liste[i]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 1480, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "37.17786", "embeddingY": "80.88615"},{"extension": "py", "date": "2020-03-22 22:14:07", "correct": "0", "upload": "def permutationChaine(s):\n  res=\"\"\n  for i in range (0,len(s)-1,2):\n    res=res+5[1+i]+s[ i]\n    if len(s)%2!=0:\n      res=res+s[-1]\n  return res", "user": "userdId_36", "attemptID": 1481, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-43.31392", "embeddingY": "-49.13444"},{"extension": "py", "date": "2020-03-23 00:42:30", "correct": "0", "upload": "def ecart(liste):\n  if len(liste)==0:\n    res=None\n  if len(liste)==1:\n    res=0\n  else:\n      max=liste[0] \n      min=liste[0] \n      for i in range (len(liste)):\n        if max<liste[i]:\n          max=liste[i]\n        elif min>liste[i]:\n          min=liste[i]\n      res=max-min\n  return res", "user": "userdId_16", "attemptID": 1482, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "13.162534", "embeddingY": "-84.154205"},{"extension": "py", "date": "2020-04-11 08:05:55", "correct": "0", "upload": "def elemAri(n,u0,r):\n  u0+n*r\n  return res", "user": "userdId_8", "attemptID": 1483, "exercise": "f239498950e974e29e01472749d9a09d", "exercise_name": "elemAri", "embeddingX": "-34.18506", "embeddingY": "18.788828"},{"extension": "py", "date": "2020-04-07 10:54:12", "correct": "0", "upload": "def suiteGeo(liste):\n  ok=True\n  i=0\n  if len(liste)==0 and len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i]==0:\n      ok=False\n    q=liste[1]/liste[0]\n    if liste[i+1]/liste[i]!=q:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 1484, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "27.84371", "embeddingY": "60.682102"},{"extension": "py", "date": "2020-03-30 11:32:48", "correct": "1", "upload": "def nombreSymetrique(nombre):\n    decomp=stockerChiffres(nombre);\n    return listeSymetrique(decomp)\n\ndef listeSymetrique(l):\n    res=True\n    i=0\n    while i<len(l)//2 and res:\n        if l[i]!=l[-(i+1)]:\n            res=False\n        i+=1\n    return res\n\ndef stockerChiffres(nombre):\n    res=[]\n    decomp=nombre\n    while decomp!=0:\n        res+=[decomp%10]\n        decomp=decomp//10\n    if res==[]: #cas de 0\n        res=[0]\n    return res", "user": "userdId_32", "attemptID": 1485, "exercise": "fae4d6a34289cf5bf06f9d6d17e8547e", "exercise_name": "nombreSymetrique", "embeddingX": "23.408451", "embeddingY": "36.570347"},{"extension": "py", "date": "2020-03-17 05:08:44", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  res=''\n  for i in range(debut,debut+longeur):\n    res=res+s[i]\n  return res", "user": "userdId_25", "attemptID": 1486, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-72.6564", "embeddingY": "13.0352"},{"extension": "py", "date": "2020-03-10 06:02:24", "correct": "0", "upload": "def jourNuit(heure):\n    if heure>24:\n      res=\"l'heure saisie est invalide\"\n    else:\n      if 5<=heure<12:\n        res=\"on est le matin et il fait jour\"\n      else:\n        if 12<=heure<17:\n          res=\"on est l'apr\u00e8s-midi et il fait jour\"\n        else:\n          if 17<=heure<21:\n            res=\"on est le soir et il fait nuit\"\n          else:\n            if 21<=heure<24:\n              res=\"on est la nuit et il fait nuit\"\n    return res\n  ", "user": "userdId_11", "attemptID": 1487, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "72.67313", "embeddingY": "25.642742"},{"extension": "py", "date": "2020-03-16 04:49:49", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n    if lettre=='' or mot=='':\n      res=None\n    else:\n      res=None\n      for c in mot:\n        if lettre==c:\n          for i in range(-1,-len(mot)-1,-1):\n            res=len[i]\n    return res", "user": "userdId_18", "attemptID": 1488, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-11.620864", "embeddingY": "-37.455746"},{"extension": "py", "date": "2020-03-22 22:12:42", "correct": "0", "upload": "def permutationChaine(s):\n  res=\"\"\n  for i in range (0,len(s)-1,2):\n    res=res+5[1+i]+s[i]\n    if len(s)%2!=0:\n      res=res+s[-1]\n  return res", "user": "userdId_36", "attemptID": 1489, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-43.335423", "embeddingY": "-49.079224"},{"extension": "py", "date": "2020-03-09 23:50:40", "correct": "0", "upload": "def ecart(liste):\n    if len(liste)==0:\n      res=None\n    else:\n      res=liste[0]\n      max=''\n      min=''\n      for i in range(1,len(liste)):\n        if liste[i]<res:\n          min=liste[i]\n        if liste[i]>res:\n          max=liste[i]\n      res=max-min\n    return res\n      \n      ", "user": "userdId_9", "attemptID": 1490, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "15.262367", "embeddingY": "-83.19528"},{"extension": "py", "date": "2020-03-11 00:00:22", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut1>fin2 and debut2>fin1:\n    res=False \n  else:\n    res=True\n  return res\n", "user": "userdId_21", "attemptID": 1491, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "65.79552", "embeddingY": "-21.222097"},{"extension": "py", "date": "2020-03-03 05:34:23", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    for i in (liste):\n      if res<liste[i]:\n        res=liste[i]\n  return res", "user": "userdId_8", "attemptID": 1492, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "25.62381", "embeddingY": "-62.620472"},{"extension": "py", "date": "2020-03-10 04:11:04", "correct": "0", "upload": "def sommeNPremiersEntiersPairs(n):\n    res=0\n    for i in range(1,n,2):\n      res=res+i\n    return res", "user": "userdId_18", "attemptID": 1493, "exercise": "3030dc079e6607c253e89e8ef4784b74", "exercise_name": "sommeNPremiersEntiersPairs", "embeddingX": "-18.870132", "embeddingY": "12.334015"},{"extension": "py", "date": "2020-04-06 00:54:31", "correct": "1", "upload": "def sousChaine(s1,s2):\n  trouve=False\n  if s1=='':\n    trouve=True\n  else :\n    if s1 in s2:\n      trouve=True\n  return trouve\n      ", "user": "userdId_15", "attemptID": 1494, "exercise": "a7cdd094daa2f0bfccc7a4ec419f7243", "exercise_name": "sousChaine", "embeddingX": "44.851086", "embeddingY": "-15.881878"},{"extension": "py", "date": "2020-03-27 05:43:07", "correct": "0", "upload": "def quatrePlus100(liste):\n  res=''\n  i=0\n  while i>len(liste):\n    if l[i]>100:\n      res.append(l[i])\n      i=i+1\n  if len(res)<4:\n    res=i\n  return res", "user": "userdId_20", "attemptID": 1495, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-20.740503", "embeddingY": "35.72612"},{"extension": "py", "date": "2020-03-06 00:23:50", "correct": "0", "upload": "def ecart(liste):\n    if liste==[]:\n      return None\n    elif len(liste)==1:\n      return 0\n    else:\n      res=liste[0]\n      for i in range(1,len(liste)):\n        if res>liste[i]:\n          max=liste[i]\n      for i in range(1,len(liste)):\n        if res<liste[i]:\n          min=liste[i]\n      ecart=max-min\n      return ecart\n          \n      \n      \n      ", "user": "userdId_2", "attemptID": 1496, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "10.062224", "embeddingY": "-84.74487"},{"extension": "py", "date": "2020-03-12 07:48:03", "correct": "0", "upload": "def semestreValide(ue1,ue2):\n  if ue1==10 and ue2==10:\n    return True\n  if ue1>ue2 and ue1-ue2>=0:\n    return True\n  else:\n    return False", "user": "userdId_1", "attemptID": 1497, "exercise": "70ae7ad6cf504e0fa8cedebd8e8a825f", "exercise_name": "semestreValide", "embeddingX": "75.1701", "embeddingY": "-5.047869"},{"extension": "py", "date": "2020-03-22 08:34:10", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n    if annee1<annee and mois1<mois2 and jour1<jour2: \n      res=-1\n    if annee1==annee2 and  mois1==mois2 and jour1==jour2: \n       res=0\n    else : \n      res=1", "user": "userdId_47", "attemptID": 1498, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "75.03816", "embeddingY": "-28.227507"},{"extension": "py", "date": "2020-03-02 02:29:16", "correct": "0", "upload": "def nombrePair(n):\n  a=(n/2)\n  b=a\n  if type(b)==int :\n    res=True\n  else :\n    res=False\n  return res", "user": "userdId_15", "attemptID": 1499, "exercise": "864911b08708fc8bae69311a8ddd3da7", "exercise_name": "nombrePair", "embeddingX": "41.026028", "embeddingY": "51.3612"},{"extension": "py", "date": "2020-03-09 21:46:32", "correct": "0", "upload": "def polynome(a,b,c):\n  import math\n  delta=pow(b,2)-4*a*c\n  if delta>0:\n    res=((-b-math.sqrt(delta))/2*a,(-b+math.sqrt(delta))/2*a)\n  if delta==0:\n    res=-b/a\n  else:\n    res='pas de solution'\n  return res", "user": "userdId_12", "attemptID": 1500, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-49.306564", "embeddingY": "8.310732"},{"extension": "py", "date": "2020-04-20 21:09:47", "correct": "0", "upload": "def listeMatchs(liste):\n  res=[]\n  for i in range(len(liste)):\n    for j in range(i,len(liste)):\n      res.append((liste[i],liste[j]))\n  return res", "user": "userdId_6", "attemptID": 1501, "exercise": "7425aa41502a932ef1011f8e2538120a", "exercise_name": "listeMatchs", "embeddingX": "-36.673534", "embeddingY": "-30.144003"},{"extension": "py", "date": "2020-03-22 10:29:06", "correct": "0", "upload": "def bissextile(a):\n    if a%4==0: \n      res=True\n    elif a%400==0:\n      res=True\n    elif a%100!=0: \n      res=False\n    else: \n      \tres=False\n    return res", "user": "userdId_21", "attemptID": 1502, "exercise": "a7d37636649c0ada991520788deeb2d0", "exercise_name": "bissextile", "embeddingX": "45.421204", "embeddingY": "-3.823591"},{"extension": "py", "date": "2020-04-16 21:19:18", "correct": "1", "upload": "def indiceInsertion(sc,scores):\n  i=0\n  cpt=0\n  while i<len(scores):\n    if sc<scores[i]:\n      cpt=cpt+1\n    i=i+1\n  return cpt", "user": "userdId_1", "attemptID": 1503, "exercise": "f8a820b2bd54d18d36716e3d703858f7", "exercise_name": "indiceInsertion", "embeddingX": "-18.421251", "embeddingY": "61.19243"},{"extension": "py", "date": "2020-04-12 05:45:42", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=False\n  c=[]\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n    c=c[0]+d\n  return c", "user": "userdId_8", "attemptID": 1504, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-81.62578", "embeddingY": "15.204551"},{"extension": "py", "date": "2020-03-04 03:44:47", "correct": "1", "upload": "def moyenne(liste):\n  if len(liste) == 0 :\n    res = None\n  else :\n    res = 0\n    for elem in liste :\n    \tres = res + elem\n    res = res/len(liste)  \n  return res", "user": "userdId_17", "attemptID": 1505, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-0.7355205", "embeddingY": "-17.364857"},{"extension": "py", "date": "2020-03-03 06:39:19", "correct": "1", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut1>=debut2 and debut1<=fin2:\n    res=True\n  elif fin1>=debut2 and fin1<=fin2:\n    res=True\n  else:\n    res=False\n  return res", "user": "userdId_8", "attemptID": 1506, "exercise": "6fd66bb2393fbf3809f1c6d04f3831f7", "exercise_name": "rendezVous", "embeddingX": "52.037872", "embeddingY": "-24.14233"},{"extension": "py", "date": "2020-03-06 00:22:34", "correct": "0", "upload": "def maximum(liste):\n  res=(liste,[0])\n  for elem in liste:\n     if res<elem:\n        res=elem\n  return res", "user": "userdId_23", "attemptID": 1507, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "41.03037", "embeddingY": "-55.217854"},{"extension": "py", "date": "2020-03-06 00:28:00", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    voy=None\n  else:\n    voy=0\n    for i in range(len(mot)):\n      if mot in \"aeiouy\":\n        voy=voy+1\n  return voy", "user": "userdId_13", "attemptID": 1508, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "6.7058764", "embeddingY": "-34.692116"},{"extension": "py", "date": "2020-04-10 00:46:49", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  ok=True\n  while i<len(liste) and ok:\n    if liste[i]!=0:\n      q=liste[i]/liste[0]\n      if liste[i+1]/liste[i]!=q:\n        ok=False\n    i=i+1\n  return ok", "user": "userdId_3", "attemptID": 1509, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "24.623135", "embeddingY": "59.701916"},{"extension": "py", "date": "2020-03-06 00:10:51", "correct": "1", "upload": "def ecart(liste):\n  if len(liste)==0:\n    res=None\n  else :\n    max=liste[0]\n    min=liste[0]\n    for i in range(1,len(liste)):\n      if max<liste[i]:\n        max=liste[i]\n      elif min>liste[i]:\n        min=liste[i]\n    res=max-min\n  return res", "user": "userdId_15", "attemptID": 1510, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "13.297046", "embeddingY": "-83.955765"},{"extension": "py", "date": "2020-03-05 23:42:13", "correct": "0", "upload": "def maximum(liste):\n  if len (liste)==0:\n    res=None\n  else:\n    res=liste[0]\n    for i in range (1,len(liste)):\n      if liste[i]>res:\n        res=liste[i]\n  return max", "user": "userdId_13", "attemptID": 1511, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "7.2689753", "embeddingY": "-67.090225"},{"extension": "py", "date": "2020-04-05 08:58:48", "correct": "0", "upload": "def produitScalaire(vec1,vec2):\n  res=0\n  for i in range(3):\n    e1=vec1[i]\n    e2=vec2[i]\n    res=res+e1*e2\n  return res", "user": "userdId_26", "attemptID": 1512, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-64.58817", "embeddingY": "-18.453064"},{"extension": "py", "date": "2020-03-14 03:27:11", "correct": "0", "upload": "def moyenne(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=0\n    x=0\n    for i in range(len(liste)):\n      res=res+i\n      x=x+1\n  moy=x%res\n  return moy", "user": "userdId_14", "attemptID": 1513, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-6.379741", "embeddingY": "-1.755829"},{"extension": "py", "date": "2020-03-20 00:27:17", "correct": "0", "upload": "def permutationChaine(s):\n  res=''\n  if len(s)<1:\n  \tres=''\n  else:\n    for i in range(0,len(s)-1,2):\n      res=res+s[i+1]\n      res=res+s[i]\n    if ((len(s)-1)//2)==((len(s)-1)/2): \n      return res\n    else:\n      l=len(s)\n      res=res+s[l-1]\n      return res", "user": "userdId_40", "attemptID": 1514, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-40.94063", "embeddingY": "-56.870197"},{"extension": "py", "date": "2020-03-23 00:39:49", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=[]\n    for i in range(len(liste)):\n      if liste[i]>res:\n        res=liste[i]\n  return res", "user": "userdId_8", "attemptID": 1515, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-6.5380545", "embeddingY": "-61.51845"},{"extension": "py", "date": "2020-03-17 06:02:27", "correct": "1", "upload": "def sommeNbPairs(liste):\n    if len(liste)==0:\n      res=0\n    else:\n      res=0\n      for elem in liste:\n        if elem%2==0:\n          res=res+elem\n    return res", "user": "userdId_11", "attemptID": 1516, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "28.543968", "embeddingY": "-18.349476"},{"extension": "py", "date": "2020-04-14 06:40:15", "correct": "0", "upload": "def indiceInsertion(sc,scores):\n  res=0\n  i=0\n  while i<len(scores) and sc<scores[i]:\n    i=i+1 \n  return i-1", "user": "userdId_28", "attemptID": 1517, "exercise": "f8a820b2bd54d18d36716e3d703858f7", "exercise_name": "indiceInsertion", "embeddingX": "-16.838858", "embeddingY": "50.40917"},{"extension": "py", "date": "2020-04-13 21:26:36", "correct": "0", "upload": "def suiteAri(liste):\n  res=True\n  if len(liste)>1:\n    r=liste[1]-liste[0]\n    res=verifSuiteAriGeo(liste,1,r)\n  return res", "user": "userdId_8", "attemptID": 1518, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "-5.7687078", "embeddingY": "-72.77159"},{"extension": "py", "date": "2020-04-12 07:15:33", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  if liste==[]:\n    res=True\n  c=[]\n  f=[]\n  res=False\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n    e=liste[0]\n    f.append(e)\n    f.extend(c)\n  return f", "user": "userdId_8", "attemptID": 1519, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-81.62183", "embeddingY": "17.756235"},{"extension": "py", "date": "2020-04-06 16:18:56", "correct": "0", "upload": "def suiteGeo(liste):\n    if len(liste) == 0 or len(liste) == 1:\n        res = True\n    else:\n        test = liste[1]/liste[0]\n        if len(liste) >= 3:\n            for i in range(2,len(liste)):\n                if liste[i]/liste[i-1] == test:\n                    res = True\n                else:\n                    res = False\n        else:\n            res = True\n    return res", "user": "userdId_42", "attemptID": 1520, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "-16.650982", "embeddingY": "-82.5655"},{"extension": "py", "date": "2020-03-23 00:48:36", "correct": "0", "upload": "def reconstruireChainePartielle(s,n):\n    res = \" \"\n    for i in range (len(s),n) :\n      res = res + s[i]\n    return res", "user": "userdId_24", "attemptID": 1521, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-59.172638", "embeddingY": "-35.97843"},{"extension": "py", "date": "2020-03-20 00:20:46", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  res=\"\"\n  if debut+longueur>len(s):\n    fin=len(s)\n  for i in range(debut,debut+longueur):\n    res=res+s[i]\n  else:\n    fin=debut+longueur\n  return res\n    ", "user": "userdId_34", "attemptID": 1522, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-77.29703", "embeddingY": "18.04646"},{"extension": "py", "date": "2020-03-09 22:27:33", "correct": "0", "upload": "def semestreValide(ue1,ue2):\n  if ue1>10 and ue2>10:\n    res=True\n  else:\n    if ue1>ue2:\n      if ue1+ue2/2>10:\n        res=True\n      else:\n        res=False\n    else:\n      res=False\n  return res", "user": "userdId_12", "attemptID": 1523, "exercise": "70ae7ad6cf504e0fa8cedebd8e8a825f", "exercise_name": "semestreValide", "embeddingX": "68.0493", "embeddingY": "0.5861571"},{"extension": "py", "date": "2020-04-06 15:12:16", "correct": "1", "upload": "def sousChaine(s1,s2):\n    if s1 == '':\n        res = True\n    elif s1 in s2:\n        res = True\n    else:\n        res = False\n    return res", "user": "userdId_42", "attemptID": 1524, "exercise": "a7cdd094daa2f0bfccc7a4ec419f7243", "exercise_name": "sousChaine", "embeddingX": "44.878483", "embeddingY": "-15.886008"},{"extension": "py", "date": "2020-04-07 05:24:34", "correct": "0", "upload": "def suiteAri(liste):\n  ok=True\n  i=0\n  if len(liste)==0:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=liste[i]+(liste[i+1]-liste[i]):\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 1525, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "20.330738", "embeddingY": "52.59055"},{"extension": "py", "date": "2020-03-12 07:44:00", "correct": "1", "upload": "def bissextile(annee):\n  if annee%4==0 and annee%100!=0 or annee%400==0:\n      return True\n  else:\n    return False", "user": "userdId_1", "attemptID": 1526, "exercise": "a7d37636649c0ada991520788deeb2d0", "exercise_name": "bissextile", "embeddingX": "51.061405", "embeddingY": "-0.118044354"},{"extension": "py", "date": "2020-04-09 09:01:02", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n    cpt=0\n    decomp=nombre\n    while decomp!=0:\n      if decomp==chiffre:\n        cpt+=1\n      decomp=decomp%10\n    if cpt==0:\n      cpt=1\n    return cpt\n    ", "user": "userdId_11", "attemptID": 1527, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "11.309178", "embeddingY": "10.946883"},{"extension": "py", "date": "2020-04-07 22:42:30", "correct": "0", "upload": "def suiteAri(liste):\n  res = True\n  raison = liste[1]-liste[0]\n  while res and i < len(liste)-1 :\n    if liste[i]+raison != liste[i+1]:\n      res = False\n  return res", "user": "userdId_17", "attemptID": 1528, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "15.093232", "embeddingY": "60.28109"},{"extension": "py", "date": "2020-03-09 22:00:51", "correct": "1", "upload": "def jourNuit(heure):\n    \"\"\" Cette fonction renvoie une cha\u00eene d\u00e9crivant le moment de la journ\u00e9e en fonction de l'heure pass\u00e9e en param\u00e8tre\"\"\"\n    if heure>=0 and heure<=24:\n        res=\"\"\n        #on identifie la p\u00e9riode de la journ\u00e9e : matin, apr\u00e8s-midi, soir\u00e9e, nuit\n        if heure<5 or heure>=21:\n            res=\"on est la nuit\"\n        elif heure<12:\n            res=\"on est le matin\"\n        elif heure<17:\n            res=\"on est l'apr\u00e8s-midi\"\n        else:\n            res=\"on est le soir\"\n        #on identifie s'il fait jour ou nuit\n        if heure<6 or heure>=18:\n            res=res+\" et il fait nuit\"\n        else:\n            res=res+\" et il fait jour\"\n    else:\n        res=\"l'heure saisie est invalide\"\n    return res", "user": "userdId_55", "attemptID": 1529, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "80.39522", "embeddingY": "19.588972"},{"extension": "py", "date": "2020-04-06 22:35:59", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n    res=0\n    nb=nombre\n    while nb//10!=0:\n      if nb%10==chiffre:\n        res=res+1\n      nb=nb//10\n    return res\n      \n      ", "user": "userdId_28", "attemptID": 1530, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "14.776547", "embeddingY": "12.6926155"},{"extension": "py", "date": "2020-03-06 00:46:06", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    res=0\n  else:\n    for lettre in mot:\n      if lettre in [\"a\",\"e\",\"i\",\"o\",\"u\",\"y\"]:\n        res=res+1\n  return res\n  \n      \n  \n\n ", "user": "userdId_9", "attemptID": 1531, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "12.977402", "embeddingY": "-37.577637"},{"extension": "py", "date": "2020-03-16 23:42:41", "correct": "0", "upload": "def sommeNbPairs(liste):\n  for i in range(len(liste)):\n    if [i]%2==0:\n      res=res+[i]\n  return res", "user": "userdId_12", "attemptID": 1532, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "1.0186324", "embeddingY": "-47.789677"},{"extension": "py", "date": "2020-03-31 04:03:04", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n    if l==[] or x not in l:\n      cpt=None\n    else:\n      trouve=False\n      cpt=0\n      i=0\n      while i<len(l) and not trouve:\n        if x==l[i] and n!=0:\n          n-=1\n        if n==0:\n          trouve=True\n        cpt+=1\n        i+=1\n      if n!=0:\n        cpt=None\n    return cpt", "user": "userdId_18", "attemptID": 1533, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "2.483327", "embeddingY": "79.12259"},{"extension": "py", "date": "2020-03-06 00:17:52", "correct": "0", "upload": "def maximum(liste):\n  res=(liste[0])\n  for elem in liste:\n    if res<elem:\n      res=elem\n  return res", "user": "userdId_23", "attemptID": 1534, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "42.165485", "embeddingY": "-57.943283"},{"extension": "py", "date": "2020-04-07 10:33:26", "correct": "0", "upload": "def suiteAri(liste):\n  ok=True\n  i=0\n  r=liste[i+1]-liste[i]\n  while i<len(liste)-1 and ok:\n    if liste[i+1]-liste[i]!=r:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 1535, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "20.557802", "embeddingY": "59.493732"},{"extension": "py", "date": "2020-03-09 05:27:09", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  \n  res=0\n  for elem in jour1,mois1,annee1,jour2,mois2,annee2 :\n    \n    if (jour1,mois1,annee1<jour2,mois2,annee2):\n      res=-1\n      \n    elif (jour1,mois1,annee1==jour2,mois2,annee2):\n      res=0\n      \n    elif (jour1,mois1,annee1<jour2,mois2,annee2):\n      res=1\n      \n  return res", "user": "userdId_23", "attemptID": 1536, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "-22.331902", "embeddingY": "-8.886428"},{"extension": "py", "date": "2020-04-12 12:04:45", "correct": "0", "upload": "def suiteGeo(liste):\n    if len(liste)==0 or len(liste)==1:\n      res=True\n    else:\n      res=True\n      for i in range(1,len(liste)):\n        if liste[i-1]==0:\n          res=False\n        else:\n          x=liste[1]/liste[0]\n          if liste[i]==liste[i-1]*x:\n            res=True\n          else:\n            res=False\n    return res", "user": "userdId_11", "attemptID": 1537, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "-15.411496", "embeddingY": "-83.081894"},{"extension": "py", "date": "2020-03-06 00:24:33", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n\tres = 0\n\tfor l in range(0,len(mot)):\n\t\tres = l\n    \n\treturn res", "user": "userdId_29", "attemptID": 1538, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-35.93496", "embeddingY": "-18.799059"},{"extension": "py", "date": "2020-04-06 07:46:09", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  i=0\n  mot=[]\n  while i<len(phrase):\n    if phrase[i]==phrase[-i-1]:\n        res=True\n    else:\n        res=False\n    i+=1\n  return res", "user": "userdId_26", "attemptID": 1539, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "32.745056", "embeddingY": "42.22991"},{"extension": "py", "date": "2020-03-06 00:55:14", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    res=None\n  else:\n    res=0\n    for mot in ['a','e','i','o','u','y']:\n      res=res+1\n        \n     \n  return res", "user": "userdId_5", "attemptID": 1540, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "12.926446", "embeddingY": "-39.266674"},{"extension": "py", "date": "2020-04-10 01:04:09", "correct": "0", "upload": "def suiteAriGeo(liste):\n  i=0\n  while i<len(liste)-1:\n    if i!=0:\n      a=liste[1]/liste[0]\n      b=liste[i+1]-liste[i]*a\n    if liste[0]!=0:\n      a=liste[1]/liste[0]\n      if liste[i+1]==liste[i]*a:\n          b=0\n    if liste[i+1]==liste[i]+b:\n      a=1\n    i=i+1\n  i=0\n  ok=True\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=a*liste[i]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 1541, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "33.659832", "embeddingY": "82.63706"},{"extension": "py", "date": "2020-04-05 09:54:35", "correct": "1", "upload": "def produitScalaire(vec1,vec2):\n  res=0\n  for i in range(len(vec1)):\n    res+=vec1[i]*vec2[i]\n  return res", "user": "userdId_4", "attemptID": 1542, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-52.1426", "embeddingY": "-37.07427"},{"extension": "py", "date": "2020-04-11 08:40:58", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  c=[]\n  for elem in liste:\n    c+=a*elem+b\n    if c==liste[elem]:\n      res=True\n  return res", "user": "userdId_8", "attemptID": 1543, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-80.86228", "embeddingY": "9.930166"},{"extension": "py", "date": "2020-03-24 04:47:20", "correct": "0", "upload": "def quatrePlus100(liste):\n  i=[0]\n  res=[]\n  while i<len(liste) and i>100:\n    res.append(l[i])\n  return res", "user": "userdId_13", "attemptID": 1544, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-20.99053", "embeddingY": "42.65735"},{"extension": "py", "date": "2020-03-30 22:40:06", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n  cpt=0\n  i=0\n  trouve=False\n  res=0\n  while i<len(l) and not trouve :\n    if l[i]==x :\n      cpt+=1\n      if cpt==n :\n        trouve=True\n        res=i\n    i+=1\n  \n  if cpt<n :\n    res=None\n\n  return res", "user": "userdId_15", "attemptID": 1545, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-1.5007883", "embeddingY": "69.733086"},{"extension": "py", "date": "2020-03-20 00:58:48", "correct": "0", "upload": "def distribution(liste,n):\n  res=[n+1]\n  for i in range (liste):\n    if i==res[i]:\n      res[i]=res[i]+1\n  \n  return res\n\n", "user": "userdId_15", "attemptID": 1546, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-42.14933", "embeddingY": "-18.112333"},{"extension": "py", "date": "2020-03-12 21:59:39", "correct": "0", "upload": "def maximum(liste):\n  res=0\n  for i in range(len(liste)):\n    if(liste[i])>res:\n      res=(liste[i])\n  return res", "user": "userdId_32", "attemptID": 1547, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-1.2676077", "embeddingY": "-64.95453"},{"extension": "py", "date": "2020-03-23 22:29:40", "correct": "0", "upload": "def quatrePlus100(liste):\n  res=[]\n  x=0\n  while len(res)<4 :\n    if liste[x]>100 :\n      res=res+[liste[x]]\n    x=x+1\n  return res", "user": "userdId_28", "attemptID": 1548, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-28.178547", "embeddingY": "37.534504"},{"extension": "py", "date": "2020-04-08 00:51:40", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res = True\n  i = 0\n  while res and i < len(liste)-1:\n    if liste[i+1] != (a*liste[i]+b) :\n      res = False\n    i = i + 1\n  return res\n\ndef suiteAriGeo(liste):\n  if len(liste) < 3 :\n    res = True\n  else :\n    ecart1 = liste[1]-liste[0]\n    ecart2 = liste[2]-liste[1]\n    if ecart1 == 0 or ecart2 == 0 :\n      res = False\n    else :\n      a = ecart2/ecart1\n      b = liste[1]-a*liste[0]\n      res = verifSuiteAriGeo(liste,a,b)\n  return res\n", "user": "userdId_17", "attemptID": 1549, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "16.610022", "embeddingY": "71.00385"},{"extension": "py", "date": "2020-03-13 00:58:08", "correct": "0", "upload": "def sommeNPremiersEntiers(n):\n  if n<0:\n    res=0\n  else:\n    for i in range(n+1):\n      res=res+i\n  return res", "user": "userdId_12", "attemptID": 1550, "exercise": "c315a540cf0bfb0182dc114c6f0eafd1", "exercise_name": "sommeNPremiersEntiers", "embeddingX": "27.604445", "embeddingY": "-55.613"},{"extension": "py", "date": "2020-03-10 21:10:48", "correct": "0", "upload": "def ecart(liste):\n  res=0\n  if len(liste)==0:\n    res=None\n  if len(liste)==1:\n    res=0\n    return res", "user": "userdId_14", "attemptID": 1551, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "11.596603", "embeddingY": "-49.57589"},{"extension": "py", "date": "2020-04-06 22:16:00", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n    res=0\n    nb=[]\n    while nombre!=0:\n      nb=nb+nombre%10\n      nombre=nombre//10\n    for i in range(nb):\n      if nb[i]==chiffre:\n        res=res+1\n    return res", "user": "userdId_28", "attemptID": 1552, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "1.4851642", "embeddingY": "14.565354"},{"extension": "py", "date": "2020-03-13 00:51:35", "correct": "0", "upload": "def sommeNPremiersEntiers(n):\n  liste=(0,n+1)\n  somme=0\n  for i in liste:\n    somme=somme+i\n  return somme", "user": "userdId_13", "attemptID": 1553, "exercise": "c315a540cf0bfb0182dc114c6f0eafd1", "exercise_name": "sommeNPremiersEntiers", "embeddingX": "-29.90393", "embeddingY": "-8.603217"},{"extension": "py", "date": "2020-03-31 03:18:26", "correct": "0", "upload": "def fusion(liste1,liste2):\n  res=[]\n  i=0\n  j=0\n  while i<len(liste1) and j<len(liste2):\n    if liste1[i]<=liste2[j]:\n      res.append(liste1[i])\n      i+=1\n    else:\n      res.append(liste2[j])\n      j+=1\n    if len(liste1)<len(liste2):\n      res.append(liste2[j])\n      j+=1\n    else:\n      res.append(liste1[i])\n      i+=1\n  return res", "user": "userdId_8", "attemptID": 1554, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-43.22131", "embeddingY": "53.175858"},{"extension": "py", "date": "2020-03-31 03:18:52", "correct": "0", "upload": "def fusion(liste1,liste2):\n  res=[]\n  i=0\n  j=0\n  while i<len(liste1) and j<len(liste2):\n    if liste1[i]<=liste2[j]:\n      res.append(liste1[i])\n      i+=1\n    else:\n      res.append(liste2[j])\n      j+=1\n    if len(liste1)<len(liste2):\n      res.append(liste2[j])\n      j+=1\n    else:\n      i+=1\n  return res", "user": "userdId_8", "attemptID": 1555, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-43.154556", "embeddingY": "53.149914"},{"extension": "py", "date": "2020-03-31 04:23:33", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n  res=\"\"\n  cpt=0\n  trouve=False\n  i=0\n  while i<len(l) and trouve==False:\n    if l[i]==x:\n      cpt=cpt+1\n    if cpt==n:\n      trouve=True\n    i=i+1\n  if cpt==False:\n    res=None\n  else:\n    res=i\n\n  return res", "user": "userdId_5", "attemptID": 1556, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "0.98850095", "embeddingY": "74.3929"},{"extension": "py", "date": "2020-04-19 09:24:07", "correct": "0", "upload": "def stockerChiffres(nombre):\n    res=[]\n    decomp=nombre\n    while decomp!=0:\n      res=[decomp%10]+res\n      decomp=decomp//10\n    if res==[]:\n      res=res+[0]\n    return res", "user": "userdId_11", "attemptID": 1557, "exercise": "49a87f644f84a443327fb4315b47f249", "exercise_name": "stockerChiffres", "embeddingX": "-1.745868", "embeddingY": "19.752415"},{"extension": "py", "date": "2020-03-03 23:59:26", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  res=0\n  if annee1<annee2:\n    res=-1\n  if annee2>annee1:\n    res=1\n  if annee1==annee2:\n    if mois1<mois2:\n      res=-1\n    if mois1>mois2:\n      res=1\n    if mois1==mois2:\n      if jour1<jour2:\n        res=-1\n      if jour1>jour2:\n        res=1\n      if jour1==jour2:\n        res=0\n  return res\n    ", "user": "userdId_19", "attemptID": 1558, "exercise": "af7c1467ef9f7684d9ff58734067ae98", "exercise_name": "compareDates", "embeddingX": "82.14716", "embeddingY": "-35.33483"},{"extension": "py", "date": "2020-03-24 06:16:01", "correct": "0", "upload": "def fusion(liste1,liste2):\n  res=liste1 + liste2\n  res.sort()\n  return res", "user": "userdId_13", "attemptID": 1559, "exercise": "6613efb6c873b142dc2b6040c14eb616", "exercise_name": "fusion", "embeddingX": "-34.887997", "embeddingY": "16.45475"},{"extension": "py", "date": "2020-04-06 15:10:07", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  i=0\n  for i in range(nombre):\n    if chiffre==nombre[i]:\n      cpt=cpt+1\n    i=i+1\n  return cpt", "user": "userdId_3", "attemptID": 1560, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-20.58229", "embeddingY": "-31.588926"},{"extension": "py", "date": "2020-04-07 04:38:43", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  ok=True\n  i=0\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=a*liste[i-1]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 1561, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-79.92684", "embeddingY": "11.843429"},{"extension": "py", "date": "2020-04-06 15:08:26", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  for i in range(nombre):\n    if chiffre==nombre[i]:\n      cpt=cpt+1\n    i=i+1\n  return cpt", "user": "userdId_3", "attemptID": 1562, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-21.145306", "embeddingY": "-30.966375"},{"extension": "py", "date": "2020-03-27 05:35:09", "correct": "0", "upload": "def quatrePlus100(liste):\n  i=0\n  while i>len(liste):\n    res.append(liste[i])\n    i=i+1\n  if i<4:\n    res=i\n    return res", "user": "userdId_20", "attemptID": 1563, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-20.75057", "embeddingY": "35.500774"},{"extension": "py", "date": "2020-03-12 23:45:02", "correct": "0", "upload": "def jourNuit(heure):\n  Error=\"l'heure saisie est invalide\"\n  Time=\"on est\"\n  if heure<0 or heure>24:\n    res=Error\n  elif heure>=5 and heure<12:\n    res=Time+' le matin'\n    if heure>=6 and heure<=18:\n      res=res+' et il fait jour'\n    else:\n      res=res+' et il fait nuit'\n  elif heure>=12 and heure<17:\n    res=Time+\" l'apr\u00e8s-midi et il fait jour\"\n  elif heure>=17 and heure<21:\n    res=Time+' le soir'\n    if heure>=6 and heure<=18:\n      res=res+' et il fait jour'\n    else:\n      res=res+' et il fait nuit'\n  elif heure>=21 and heure<=24:\n    res=Time+' la nuit et il fait nuit'\n  elif heure>=0 and heure<5:\n    res=Time+' la nuit et il fait nuit'\n  else:\n    res=Error\n  return res\n    \n  \n    ", "user": "userdId_2", "attemptID": 1564, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "80.76015", "embeddingY": "15.265059"},{"extension": "py", "date": "2020-03-05 23:43:27", "correct": "0", "upload": "def maximum(liste):\n  res='None'\n  for elem in liste :\n    if elem>res :\n      res=res+elem\n  return res", "user": "userdId_24", "attemptID": 1565, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "33.1278", "embeddingY": "-42.787407"},{"extension": "py", "date": "2020-03-02 02:42:01", "correct": "1", "upload": "def nombrePair(n):\n  a=(n/2)\n  b=(n//2)\n  if a==b :\n    res=True\n  else :\n    res=False\n    \n  return res", "user": "userdId_15", "attemptID": 1566, "exercise": "864911b08708fc8bae69311a8ddd3da7", "exercise_name": "nombrePair", "embeddingX": "21.992645", "embeddingY": "24.002758"},{"extension": "py", "date": "2020-04-12 03:56:00", "correct": "0", "upload": "def elemGeo(n,u0,q):\n    return uo*q**n", "user": "userdId_8", "attemptID": 1567, "exercise": "d7c83a7fb9b49e28804e55955ad06968", "exercise_name": "elemGeo", "embeddingX": "-40.148693", "embeddingY": "21.05007"},{"extension": "py", "date": "2020-03-06 00:53:30", "correct": "0", "upload": "def ecart(liste):\n\tif len(liste) == 0:\n\t\tres = None\n\telse:\n\t\tma = liste[0]\n\t\tmi = liste[0]\n\t\tfor i in range(len(liste)):\n\t\t\tif liste[i] > ma and liste[i] > mi:\n\t\t\t\tma = liste[i]\n\t\t\telse:\n\t\t\t\tmi = liste[i]\n\t\tres = ma - mi\n\treturn res", "user": "userdId_29", "attemptID": 1568, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "-3.2877576", "embeddingY": "-84.94466"},{"extension": "py", "date": "2020-04-06 06:57:41", "correct": "1", "upload": "def produitScalaire(vec1,vec2):\n  if len(vec1)==[] and len(vec2)==[]:\n    res=0\n  else:\n    res=0\n    for i in range(len(vec1) and len(vec2)):\n      vec1[i]==vec2[i]\n      res=res+vec1[i]\n  return res", "user": "userdId_9", "attemptID": 1569, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-29.400938", "embeddingY": "-44.59848"},{"extension": "py", "date": "2020-03-31 06:21:20", "correct": "0", "upload": "def doubleChiffre(nombre):\n  res=False\n  com=[]\n  while nombre!=0:\n    com=nombre%10\n    nombre=nombre//10\n    if com in nombre:\n      res=True\n  return res\n", "user": "userdId_13", "attemptID": 1570, "exercise": "c83ea6acd3e9f6f5543e87d515e8a44a", "exercise_name": "doubleChiffre", "embeddingX": "15.3096285", "embeddingY": "6.341542"},{"extension": "py", "date": "2020-03-06 00:38:40", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0 :\n    res=0\n  else:\n    for elem in mot :\n      if mot ([a,e,i,o,u,y]) :\n        res=res+1\n    return res", "user": "userdId_24", "attemptID": 1571, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "6.673456", "embeddingY": "-42.83771"},{"extension": "py", "date": "2020-03-24 04:31:55", "correct": "1", "upload": "def compare(chaine1,chaine2):\n  res=0\n  cpt=0\n  i=0\n  while i<len(chaine1) and i<len(chaine2) and cpt!=2:\n    if chaine1[i]>chaine2[i]:\n      res=1\n      cpt=cpt+1\n    elif chaine1[i]<chaine2[i]:\n      res=-1\n      cpt=cpt+1\n    i=i+1\n  if res==0:\n    if len(chaine1)>len(chaine2):\n      res=1\n    elif len(chaine1)==len(chaine2):\n      res=0\n    else:\n      res=-1\n  return res", "user": "userdId_27", "attemptID": 1572, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-29.611954", "embeddingY": "66.25651"},{"extension": "py", "date": "2020-05-04 21:12:31", "correct": "0", "upload": "def nombrePair(n):\n  res=True\n  for elem in range(n):\n    if elem%2!=0:\n      res=False\n  return res", "user": "userdId_8", "attemptID": 1573, "exercise": "3001254263845e9a478696f81a704d33", "exercise_name": "nombrePair", "embeddingX": "31.596642", "embeddingY": "-5.61212"},{"extension": "py", "date": "2020-03-04 03:50:52", "correct": "0", "upload": "def ecart(liste):\n  if len(liste) == 0 :\n  \tres = None\n  else :\n    maxi = liste[0]\n    mini = liste[0]\n    for i in range (1,len(liste)):\n      if liste[i] > maxi : \n        maxi = liste[i]\n      elif mini[i] < mini :\n        mini = liste[i]\n    res = maxi - mini\n  return res", "user": "userdId_17", "attemptID": 1574, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "-0.5257317", "embeddingY": "-83.79365"},{"extension": "py", "date": "2020-04-12 07:30:14", "correct": "0", "upload": "def suiteAriGeo(liste):\n  i=0\n  while i<len(liste):\n    a=liste[1]-liste[0]\n    b=liste[1]-liste[0]  \n  ok=True\n  i=0\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste) and ok:\n    if liste[i+1]!=a*liste[i]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 1575, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "15.134488", "embeddingY": "63.571156"},{"extension": "py", "date": "2020-05-11 00:27:19", "correct": "0", "upload": "def listeDecroissante(scores):\n  ok=True\n  i=0\n  if len(scores)>1:\n    while i<len(scores)-1 and ok:\n      if scores[i]>scores[i+1]:\n        ok=False\n      i=i+1\n  return ok", "user": "userdId_12", "attemptID": 1576, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "16.75114", "embeddingY": "50.508976"},{"extension": "py", "date": "2020-03-23 01:57:37", "correct": "0", "upload": "def maximum(liste):\n    res=liste[0]\n    for i in range (len(liste)):\n      if liste[i]>res :\n        res=liste[i]\n    return res", "user": "userdId_24", "attemptID": 1577, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "0.6303002", "embeddingY": "-66.63296"},{"extension": "py", "date": "2020-03-10 04:19:08", "correct": "0", "upload": "def sommeNbPairs(liste):\n  res=0\n  for x in range (len(liste)):\n    res=x%2  \n  return res", "user": "userdId_25", "attemptID": 1578, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "-40.85077", "embeddingY": "-28.005264"},{"extension": "py", "date": "2020-03-20 00:55:40", "correct": "1", "upload": "def distribution(liste,n):\n  compte=[0]*(n+1)\n  for element in liste:\n    compte[element]=compte[element]+1\n  return compte\n    ", "user": "userdId_34", "attemptID": 1579, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-59.251686", "embeddingY": "-14.930562"},{"extension": "py", "date": "2020-03-14 10:16:52", "correct": "0", "upload": "def nbVoyelles(mot):\n    res=0\n    if lettre in 'aeiouy':\n      res=res+1\n    return res", "user": "userdId_21", "attemptID": 1580, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "9.304924", "embeddingY": "-18.444963"},{"extension": "py", "date": "2020-03-06 00:10:30", "correct": "0", "upload": "def maximum(liste):\n    res=0\n    for elem in liste:\n        if elem>res:\n        \tres=elem\n    return res", "user": "userdId_49", "attemptID": 1581, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "31.2375", "embeddingY": "-43.33795"},{"extension": "py", "date": "2020-04-09 11:35:49", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  ok=True\n  if len(liste)>1 and 0 in liste:\n    ok=False\n  elif len(liste)>1:\n    raison=liste[-1]/liste[-2]\n    while i<len(liste)-1:\n      if liste[i+1]!=liste[i]*raison:\n        ok=False\n      i+=1\n  return ok", "user": "userdId_12", "attemptID": 1582, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "23.06285", "embeddingY": "73.08582"},{"extension": "py", "date": "2020-04-14 04:16:07", "correct": "1", "upload": "def meilleurScoreJoueur(scores,joueurs,nom):\n  res=0\n  for i in range(len(joueurs)):\n    if joueurs[i]==nom:\n      return scores[i]\n  return res", "user": "userdId_12", "attemptID": 1583, "exercise": "c96fadc94086276f98451a798b3bb730", "exercise_name": "meilleurScoreJoueur", "embeddingX": "-23.669716", "embeddingY": "-36.736153"},{"extension": "py", "date": "2020-03-24 06:38:28", "correct": "0", "upload": "def fusion(liste1,liste2):\n  res=[]\n  i=0\n  while i<len(liste1)+len(liste2):\n    if liste1[i]>liste2[i]:\n      res+=[liste2[i]]\n    elif liste1[i]<liste2[i]:\n      res+=[liste1[i]]\n    else:\n      res+=[liste[i]]+[liste[i]]\n  return res", "user": "userdId_8", "attemptID": 1584, "exercise": "6613efb6c873b142dc2b6040c14eb616", "exercise_name": "fusion", "embeddingX": "-23.115728", "embeddingY": "55.15037"},{"extension": "py", "date": "2020-05-04 22:29:18", "correct": "1", "upload": "def premiereOccurrenceLettre(lettre,mot):\n    res=None\n    i=0\n    while i<len(mot) and res==None:\n      if lettre==mot[i]:\n        res=i\n      i+=1\n    return res", "user": "userdId_26", "attemptID": 1585, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-20.1323", "embeddingY": "69.08642"},{"extension": "py", "date": "2020-03-17 06:03:29", "correct": "0", "upload": "def distribution(liste,n):\n    res=[0]*n\n    for i in range(len(liste)):\n        if liste[i]==0:\n            res[0]=res[0]+1\n        elif liste[i]==1:\n            res[1]=res[1]+1\n        elif liste[i]==2:\n            res[2]=res[2]+1\n        else:\n            res[3]=res[3]+1\n    return res\n\n\n  \n  \n", "user": "userdId_28", "attemptID": 1586, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-16.834068", "embeddingY": "-58.20832"},{"extension": "py", "date": "2020-03-13 00:50:42", "correct": "0", "upload": "def sommeNPremiersEntiers(n):\n  if n<=0:\n    res=0\n  else:\n    for elem in n:\n      res=elem+n \n  return res", "user": "userdId_5", "attemptID": 1587, "exercise": "c315a540cf0bfb0182dc114c6f0eafd1", "exercise_name": "sommeNPremiersEntiers", "embeddingX": "31.481735", "embeddingY": "-36.9559"},{"extension": "py", "date": "2020-03-05 23:48:34", "correct": "0", "upload": "def maximum(liste):\n  if liste==[]:\n    return None\n  else:\n    res=liste[0]\n    for i in range (0,len(liste)):\n      if res<liste[i]:\n        res=liste[i]\n        return res\n  \n  ", "user": "userdId_2", "attemptID": 1588, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "25.485962", "embeddingY": "-71.02129"},{"extension": "py", "date": "2020-03-24 04:19:06", "correct": "0", "upload": "def compare(chaine1,chaine2):\n  res=0\n  i=0\n  while i<len(chaine1) and i<len(chaine2) and res==0:\n    if chaine1[i]>chaine2[i]:\n      res=-1\n    elif chaine1[i]<chaine2[i]:\n      res=1\n    i=i+1\n  return res\n  ", "user": "userdId_21", "attemptID": 1589, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-23.757895", "embeddingY": "60.560158"},{"extension": "py", "date": "2020-06-02 23:14:56", "correct": "0", "upload": "def prononcable(mot):\n  voyelle=0\n  consonne=0\n  for elem in mot:\n    if elem in 'aeiouy':\n      voyelle+=1\n    else:\n      consonne+=1\n    if voyelle==3 or consonne==3:\n      return False\n  return True", "user": "userdId_12", "attemptID": 1590, "exercise": "6318b210c201fba050d60bc0913cb7ef", "exercise_name": "prononcable", "embeddingX": "15.935012", "embeddingY": "-17.80936"},{"extension": "py", "date": "2020-04-06 14:50:59", "correct": "0", "upload": "def produitScalaire(vec1,vec2):\n  for i in range(len(vec1),len(vec2)):\n    res=res+(vec1[i]*vec2[i])\n  return res", "user": "userdId_3", "attemptID": 1591, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-46.160515", "embeddingY": "-28.610289"},{"extension": "py", "date": "2020-03-30 22:39:04", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n  trouve=0\n  i=0\n  while i<len(l) and trouve!=n:\n    if x==l[i]:\n      trouve=trouve+1\n    i=i+1\n  if trouve!=n:\n    i=None\n  return i", "user": "userdId_19", "attemptID": 1592, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-6.71329", "embeddingY": "79.85552"},{"extension": "py", "date": "2020-04-01 05:25:36", "correct": "1", "upload": "def quatrePlus100(liste):\n  i=0\n  res=[]\n  while i<len(liste) and len(res)<4:\n    if liste[i]>100:\n      res.append(liste[i])\n    i=i+1\n  return res", "user": "userdId_12", "attemptID": 1593, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-25.763235", "embeddingY": "40.45112"},{"extension": "py", "date": "2020-04-06 08:48:42", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=True\n  i=1\n  while i<len(liste):\n    if liste[i]!=a*liste[i-1]+b:\n      res=False\n    i+=1\n  return res\ndef suiteAri(liste):\n  cpt=0\n  i=1\n  a=1\n  while i<len(liste) and cpt!=3:\n    if liste[i]!=liste[i-1]:\n      b=liste[i]-liste[i-1]\n      cpt+=1\n    i+=1 \n  return verifSuiteAriGeo(liste,a,b)", "user": "userdId_27", "attemptID": 1594, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "12.480411", "embeddingY": "77.18144"},{"extension": "py", "date": "2020-03-06 00:10:42", "correct": "0", "upload": "def nbVoyelles(mot):\n  if mot==0:\n  \tres=0\n  for elem in mot:\n    if elem in 'aeiouy':\n      res=res+1\n  return res", "user": "userdId_12", "attemptID": 1595, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "14.635395", "embeddingY": "-21.67645"},{"extension": "py", "date": "2020-03-17 05:52:31", "correct": "0", "upload": "def distribution(liste,n):\n    cpt=0*n+1\n    for [elem] in liste:\n        cpt[elem]=cpt[elem]+1\n    return cpt", "user": "userdId_39", "attemptID": 1596, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-58.02991", "embeddingY": "-6.6277976"},{"extension": "py", "date": "2020-03-27 06:06:52", "correct": "0", "upload": "def compare(chaine1,chaine2):\n  res=0\n  i=0\n  while i<len(chaine1) and res==0:\n    if chaine1[i]<chaine2[i]:\n      res=-1\n    if chaine1[i]>chaine2[i]:\n      res=1\n    else:\n      res=0\n    i=i+1\n  return res\n", "user": "userdId_19", "attemptID": 1597, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-25.513758", "embeddingY": "59.45278"},{"extension": "py", "date": "2020-03-31 03:34:02", "correct": "0", "upload": "def fusion(liste1,liste2):\n  res=[]\n  i=0\n  j=0\n  while i<len(liste1) and j<len(liste2):\n    if liste1[i]<=liste2[j]:\n      res.append(liste1[i])\n      i=i+1\n    else:\n      res.append(liste2[j])\n      j=j+1\n  if j<len(liste2):\n    while j<len(liste2):\n      res.append(liste2[j])\n      j=j+1\n  else:\n    while i<len(liste1):\n      res.append(len(liste1))\n      i=i+1\n  return res", "user": "userdId_30", "attemptID": 1598, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-40.956223", "embeddingY": "49.794678"},{"extension": "py", "date": "2020-03-12 21:58:23", "correct": "0", "upload": "def minimum(liste):  \n  if len(liste)==0:\n    res=None\n  else:\n    res=0\n    res=liste[0]\n    for i in range(len(liste)):\n      if liste[i]<res:\n        res=liste[i]\n  return None", "user": "userdId_25", "attemptID": 1599, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "26.616375", "embeddingY": "-67.31184"},{"extension": "py", "date": "2020-03-10 21:12:39", "correct": "0", "upload": "def ecart(liste):\n  if len(liste)==0:\n    res=None\n  elif len(liste)==1:\n    res=0\n  else:\n    res=0\n    max=0\n    min=0\n    for i in range(len(liste)):\n      if liste[i]<res:\n        min=liste[i]\n      if liste[i]>res:\n        max=liste[i]\n        res=max-min\n    return res", "user": "userdId_9", "attemptID": 1600, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "13.284876", "embeddingY": "-83.28872"},{"extension": "py", "date": "2020-03-05 23:47:21", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    return 0\n  else:\n    for elem in mot:\n      res=0\n      if elem==mot[0] or mot[4] or mot[8] or mot[14] or mot[20] or mot[24]:\n        res=res+1\n        return res", "user": "userdId_14", "attemptID": 1601, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-15.493007", "embeddingY": "-54.70351"},{"extension": "py", "date": "2020-04-11 00:33:22", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  c=True\n  if len(liste)==0:\n    c=True\n  elif liste[0]==0:\n    c=False\n  else:\n    while i<(len(liste)-2) and c:\n      if liste[i]!=0 and liste[i+1]!=0:\n        if liste[i+2]/liste[i+1]!=liste[i+1]/liste[i]:\n          c=False\n      i=i+1\n  return c", "user": "userdId_19", "attemptID": 1602, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "27.279728", "embeddingY": "55.540783"},{"extension": "py", "date": "2020-03-27 05:54:17", "correct": "0", "upload": "def quatrePlus100(liste):\n  res=[]\n  i=0\n  while i>len(liste)and len(res)<4:\n    if l[i]>100:\n      res=res+[liste[i]]\n    i=i+1\n  return res", "user": "userdId_20", "attemptID": 1603, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-19.683037", "embeddingY": "43.733772"},{"extension": "py", "date": "2020-04-06 22:38:07", "correct": "0", "upload": "def elemGeo(n,u0,q):\n  return u0*q^(n-p)", "user": "userdId_12", "attemptID": 1604, "exercise": "d7c83a7fb9b49e28804e55955ad06968", "exercise_name": "elemGeo", "embeddingX": "-37.71981", "embeddingY": "19.717686"},{"extension": "py", "date": "2020-03-24 06:03:16", "correct": "1", "upload": "def compare(chaine1,chaine2):\n  res=0\n  i=0\n  while i<len(chaine1) and i<len(chaine2) and res==0:\n    if chaine1[i]>chaine2[i]:\n      res=1\n    elif chaine1[i]<chaine2[i]:\n      res=-1\n    i=i+1\n  if res==0:\n    if len(chaine1)<len(chaine2):\n      res=-1\n    elif len(chaine1)>len(chaine2):\n      res=1\n  return res", "user": "userdId_7", "attemptID": 1605, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-23.716492", "embeddingY": "61.16385"},{"extension": "py", "date": "2020-05-04 22:07:14", "correct": "1", "upload": "def ecart(liste):\n  if liste==[]:\n    res=None\n  else:\n    max0=liste[0]\n    min0=liste[0]\n    for i in range(1,len(liste)):\n      if max0<liste[i]:\n        max0=liste[i]\n      if min0>liste[i]:\n        min0=liste[i]\n    res=max0-min0\n  return res", "user": "userdId_26", "attemptID": 1606, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "0.753247", "embeddingY": "-84.67653"},{"extension": "py", "date": "2020-04-07 20:10:42", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  chiffre=int(chiffre)\n  nombre=int(nombre)\n  for i in nombre:\n    if nombre[i]==chiffre:\n      cpt=cpt+1\n    i=i+1\n  return cpt", "user": "userdId_3", "attemptID": 1607, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-26.824148", "embeddingY": "-26.556393"},{"extension": "py", "date": "2020-03-23 01:00:25", "correct": "0", "upload": "def nbOccurrencesLettre(lettre,mot):\n  for i in range(len(mot)):\n    if lettre in mot:\n      res=res+1\n    return res", "user": "userdId_16", "attemptID": 1608, "exercise": "2864c9e5861229d2ff32570f6bc944fb", "exercise_name": "nbOccurrencesLettre", "embeddingX": "-13.050034", "embeddingY": "-43.67605"},{"extension": "py", "date": "2020-03-16 23:44:02", "correct": "0", "upload": "def sommeNbPairs(liste):\n  res=0\n  for elem in liste:\n    if elem%2==0:\n      res=res+[i]\n  return res", "user": "userdId_12", "attemptID": 1609, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "27.734644", "embeddingY": "-20.54567"},{"extension": "py", "date": "2020-03-05 23:48:15", "correct": "0", "upload": "def maximum(liste):\n  res=-12\n  for elem in liste:\n    if res<elem:\n      res=elem\n  return res", "user": "userdId_23", "attemptID": 1610, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "43.772694", "embeddingY": "-53.37092"},{"extension": "py", "date": "2020-03-20 00:00:15", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  res=\"\"\n  fin=deb+long\n  if fin>len(s):\n    fin=len(s)\n  for i in range(debut,fin):\n    res=res+s[i]\n  return None", "user": "userdId_20", "attemptID": 1611, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-79.57455", "embeddingY": "22.60895"},{"extension": "py", "date": "2020-03-12 23:43:56", "correct": "0", "upload": "def jourNuit(heure):\n  if heure<0 or heure>24:\n    heure=\"l'heure saisie est invalide\"\n  if 6<= heure <=18:\n    if 5<= heure <=12:\n      heure=\"on est le matin et il fait jour\"\n    if 12<= heure <=17:\n      heure=\"on est l'apr\u00e8s-midi et il fait jour\"\n    if 17<= heure <=18:\n      heure=\"on est le soir et il fait jour\"\n  if 1<=heure<=5 or 19<=heure<=24:\n    if 1<=heure<=4:\n      heure=\"on est la nuit et il fait nuit\"\n    if 21<=heure<=24:\n      heure=\"on est la nuit et il fait nuit\"\n    if 19<=heure<=20:\n      heure=\"on est le soir et il fait nuit\"\n  return heure", "user": "userdId_13", "attemptID": 1612, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "69.770615", "embeddingY": "25.431952"},{"extension": "py", "date": "2020-03-05 23:41:08", "correct": "0", "upload": "def nbVoyelles(mot):\n  for i in range(len(mot)):\n    if mot[i]=='aeyuio':\n      res=res+1\n  return res", "user": "userdId_30", "attemptID": 1613, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-9.711509", "embeddingY": "-52.34478"},{"extension": "py", "date": "2020-03-24 04:53:02", "correct": "0", "upload": "def quatrePlus100(liste):\n  i=0\n  res=[]\n  while i<len(liste):\n    if i>100:\n      res.append(l[i])\n    i=i+1\n  return res\n", "user": "userdId_13", "attemptID": 1614, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-23.076939", "embeddingY": "35.47696"},{"extension": "py", "date": "2020-03-06 00:06:37", "correct": "0", "upload": "def maximum(liste):\n  res=0\n  for i in range(len(liste)):\n      res=res+liste[i] \n  return liste", "user": "userdId_41", "attemptID": 1615, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-43.300022", "embeddingY": "-35.692745"},{"extension": "py", "date": "2020-04-06 23:10:29", "correct": "1", "upload": "def compteChiffre(chiffre,nombre):\n  res=[]\n  cpt=0\n  if nombre==0:\n    cpt=1\n  while nombre!=0:\n    res.append(nombre%10)\n    nombre//=10\n  for i in range(len(res)):\n    if chiffre==res[i]:\n      cpt+=1\n  return cpt ", "user": "userdId_34", "attemptID": 1616, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "0.010168545", "embeddingY": "5.9450784"},{"extension": "py", "date": "2020-04-11 05:42:31", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  res=0\n  while nombre!=0:\n    res.append(nombre%10)\n    nombre=nombre//10\n    if nombre==chiffre:\n      res+=1\n  return res", "user": "userdId_8", "attemptID": 1617, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "12.176287", "embeddingY": "6.081398"},{"extension": "py", "date": "2020-03-13 00:37:43", "correct": "1", "upload": "def sommeNPremiersEntiersPairs(n):\n  res = 0\n  for i in range (n+1):\n    if i % 2 == 0:\n      res = res + i\n  return res", "user": "userdId_17", "attemptID": 1618, "exercise": "3030dc079e6607c253e89e8ef4784b74", "exercise_name": "sommeNPremiersEntiersPairs", "embeddingX": "29.809599", "embeddingY": "-12.116984"},{"extension": "py", "date": "2020-03-16 04:24:49", "correct": "0", "upload": "def ecart(liste):\n    if liste==[]:\n      res=None\n    else:\n      min=min(liste)\n      max=max(liste)\n      res=abs(max-min)\n    return res", "user": "userdId_18", "attemptID": 1619, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "-16.263668", "embeddingY": "-16.946884"},{"extension": "py", "date": "2020-03-10 09:57:54", "correct": "0", "upload": "def maximum(liste):\n    if len(liste)==0:\n      res=None\n    else:\n      max=liste[0]\n      for i in range(1,len(liste)):\n        if liste[i]>max:\n          res=liste[i]\n    return res", "user": "userdId_11", "attemptID": 1620, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "8.170507", "embeddingY": "-67.51418"},{"extension": "py", "date": "2020-03-10 03:31:05", "correct": "0", "upload": "def jourNuit(heure):\n  if heure>24 or heure<0:\n    res=\"l'heure saisie est invalide\"\n  else:\n    if heure <5 or heure>=21:\n       res=\"on est la nuit\"\n    elif heure<12:\n       res=\"on est le matin\"\n    elif heure <17:\n       res=\"on est l'apr\u00e8s-midi\"\n    else:\n       res=\"on est le soir \"\n    if heure<6 or heure>=18:\n       res=res+\"et il fait nuit\"\n    else:\n        res=res+\"et il fait jour\"\n  return res", "user": "userdId_25", "attemptID": 1621, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "72.61816", "embeddingY": "14.496738"},{"extension": "py", "date": "2020-03-30 02:06:01", "correct": "0", "upload": "def permutationChaine(s):\n    return s[::-1]", "user": "userdId_4", "attemptID": 1622, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-62.579376", "embeddingY": "10.257821"},{"extension": "py", "date": "2020-03-17 05:43:06", "correct": "0", "upload": "def permutationChaine(s):\n  res=\"\"\n  for i in range(0,len(s)-1,2):\n    res=res+s[1+i]+s[i]\n  if len(s)!=0:\n    res=res+s[i]%2\n    res=res+s[i-1]\n  return res", "user": "userdId_8", "attemptID": 1623, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-38.54795", "embeddingY": "-61.555355"},{"extension": "py", "date": "2020-03-08 21:52:56", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1==annee2 and mois1==mois2 and jour1==jour2:\n    return 0\n  elif annee1<annee2 and mois1<=mois2 and jour1<=jour2:\n    return -1\n  elif annee1<annee2 and mois1>mois2 and jour1>=jour2:\n    return -1\n  elif annee1<annee2 and mois1>=mois2 and jour1>jour2:\n    return -1\n  else:\n    return 1", "user": "userdId_1", "attemptID": 1624, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "83.64063", "embeddingY": "-14.197951"},{"extension": "py", "date": "2020-03-23 00:37:54", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    for i in range(len(liste)):\n      res=(res<liste[i])\n  return res", "user": "userdId_8", "attemptID": 1625, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "25.000767", "embeddingY": "-64.653275"},{"extension": "py", "date": "2020-03-04 10:14:37", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  res=0\n  if debut2<=fin1 and fin2>=debut1 :\n    res=true\n  else :\n    res=false\n  return res\n\n    \n    ", "user": "userdId_28", "attemptID": 1626, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "51.622765", "embeddingY": "-26.87316"},{"extension": "py", "date": "2020-04-12 09:56:13", "correct": "0", "upload": "def suiteAriGeo(liste):\n  i=0\n  while i<len(liste)-1:\n    a=liste[0]\n    b=liste[0]\n    if liste[i+1]==liste[i]+(liste[1]-liste[0]):\n      b=liste[1]-liste[0]\n    if liste[0]!=0:                        \n      if liste[i+1]==liste[i]*liste[1]/liste[0]:\n        a=liste[1]/liste[0]\n        b=0\n    if liste[i+1]==liste[i]*(liste[1]-liste[0])+(liste[i-1]-(liste[i]*(liste[1]-liste[0]))):\n      a=liste[1]-liste[0]\n      b=liste[i]-(liste[i-1]*a)\n    i=i+1\n  ok=True\n  i=0\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=a*liste[i]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 1627, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "35.194008", "embeddingY": "84.34112"},{"extension": "py", "date": "2020-04-07 03:29:27", "correct": "0", "upload": "def suiteGeo(liste):\n  i=-1\n  ok=True\n  if len(liste)>1:\n    while i>-len(liste):\n      if liste[i-1]!=0 and liste[i]%liste[i-1]!=0:\n        ok=False\n      i-=1\n  if 0 in liste:\n    ok=False\n  return ok", "user": "userdId_12", "attemptID": 1628, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "17.20208", "embeddingY": "31.210468"},{"extension": "py", "date": "2020-03-03 05:33:44", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    for i in (liste):\n      if res<liste[i]:\n        res=liste[i]\n  return res", "user": "userdId_8", "attemptID": 1629, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "25.65413", "embeddingY": "-62.616734"},{"extension": "py", "date": "2020-03-12 21:11:08", "correct": "1", "upload": "def compareDates(j1,m1,a1,j2,m2,a2):\n  if a1<a2:\n    res=-1\n  elif a1>a2:\n    res=1\n  elif m1<m2:\n    res=-1\n  elif m1>m2:\n    res=1\n  elif j1<j2:\n    res=-1\n  elif j1>j2:\n    res=1\n  else:\n    res=0\n  return res", "user": "userdId_21", "attemptID": 1630, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "81.7005", "embeddingY": "-33.367203"},{"extension": "py", "date": "2020-03-02 09:23:32", "correct": "0", "upload": "def qualifJO(sexe,record,nbvictoires,champion):\n    res = False\n    if (sexe == \"F\" or sexe == \"M\") and record > 0 and nbvictoires > 0 and type(champion) == bool:\n        \n        if champion == True: res = True\n\n        record_need = 12\n\n        if sexe == \"F\":\n            record_need = 15\n        print(record_need)\n        if record < record_need and nbvictoires >= 3:\n            res = True\n    else:\n        return \"Tricheur\"\n        \n    \n    return res", "user": "userdId_4", "attemptID": 1631, "exercise": "78ec7738f3a7f3553d4a5c653534c32d", "exercise_name": "qualifJO", "embeddingX": "67.51595", "embeddingY": "-11.59324"},{"extension": "py", "date": "2020-03-20 00:06:05", "correct": "0", "upload": "def reconstruireChainePartielle(s,o,n):\n  res=\"\"\n  for i in range(s,len(o),n):\n    res=res+s[i]\n  return res", "user": "userdId_20", "attemptID": 1632, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-52.184196", "embeddingY": "4.602961"},{"extension": "py", "date": "2020-03-09 06:27:13", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  \n  res==0\n  \n  for elem in jour1,mois1,annee1,jour2,mois2,annee2:\n    \n    if ('mois1' and 'annee1')<('mois2'and'annee2'):\n       res=res-1\n      \n    if ('mois1' and 'annee1')==('mois2'and'annee2'):\n       res=res\n    \n    if ('mois'and 'annee1')<('mois2'and'annee2'):\n       res=res+1\n      \n  return res", "user": "userdId_23", "attemptID": 1633, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "-10.168199", "embeddingY": "41.12545"},{"extension": "py", "date": "2020-03-23 21:11:41", "correct": "0", "upload": "def quatrePlus100(l):\n  res=[]\n  for i in l:\n    if (i>100):\n      res.append(i)\n  return res", "user": "userdId_48", "attemptID": 1634, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "29.479008", "embeddingY": "-42.01706"},{"extension": "py", "date": "2020-04-17 00:24:54", "correct": "1", "upload": "def indiceInsertion(sc,scores):\n  i=0\n  res=0\n  while i<len(scores):\n    if scores[i]<sc:\n      return i\n    i+=1\n  if res==0:\n    res=len(scores)\n  return res", "user": "userdId_12", "attemptID": 1635, "exercise": "f8a820b2bd54d18d36716e3d703858f7", "exercise_name": "indiceInsertion", "embeddingX": "-16.420921", "embeddingY": "65.281166"},{"extension": "py", "date": "2020-03-24 03:20:24", "correct": "1", "upload": "def quatrePlus100(liste):\n  res = []\n  c = 0\n  while c <len(liste) and len(res) < 4:\n    if liste[c] > 100 :\n      res = res + [liste[c]]\n    c=c+1\n  return res ", "user": "userdId_52", "attemptID": 1636, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-27.216097", "embeddingY": "43.198093"},{"extension": "py", "date": "2020-04-07 04:03:27", "correct": "0", "upload": "def elemAri(n,u0,r):\n  cpt=0\n  i=1\n  while i<=n:\n    cpt=u0+r\n    i=i+1\n  return cpt\n  ", "user": "userdId_1", "attemptID": 1637, "exercise": "f239498950e974e29e01472749d9a09d", "exercise_name": "elemAri", "embeddingX": "-8.446126", "embeddingY": "24.333254"},{"extension": "py", "date": "2020-03-30 21:53:38", "correct": "0", "upload": "def indiceOccurrence(n,x,l): #A faire plus tard ca m a soule\n  cpt=0\n  i=0\n  while i<len(l) and cpt<n:\n    if l[i] == x :\n      cpt+=1\n    i+=1   \n  if cpt < n:\n    return None\n  else: return i-1\n\n", "user": "userdId_6", "attemptID": 1638, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-10.158281", "embeddingY": "73.94692"},{"extension": "py", "date": "2020-03-02 02:55:59", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1<=annee2 and mois1<=mois2 and jour1<=jour2:\n    return -1\n  elif annee1==annee2 and mois1==mois2 and jour1==jour2:\n    return 0\n  else:\n    return 1\n  \ncompareDates(10,1,2020,14,2,2020)\ncompareDates(14,2,2020,11,2,2020)\ncompareDates(10,1,2020,10,1,2020)", "user": "userdId_1", "attemptID": 1639, "exercise": "af7c1467ef9f7684d9ff58734067ae98", "exercise_name": "compareDates", "embeddingX": "88.559166", "embeddingY": "-11.470121"},{"extension": "py", "date": "2020-03-05 23:46:11", "correct": "0", "upload": "def maximum(liste):\n  res=0\n  for i in range(len(liste)):\n    res=liste[i]\n    if res<i:\n      res=i\n    \n      \n    return res", "user": "userdId_5", "attemptID": 1640, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "29.418728", "embeddingY": "-69.81209"},{"extension": "py", "date": "2020-04-12 10:32:14", "correct": "0", "upload": "def phrasePalindrome(phrase):\n    if len(phrase)==0:\n      res=True\n    else:\n      res=True\n      i=0\n      x=''\n      while i<len(phrase)//2 and res:\n        if phrase[i]!=phrase[-(i+1)]:\n          res=False\n          i+=1\n        if (phrase[i]==x)!=phrase[-(i+1)]:\n          res=True\n        i+=1\n    return res", "user": "userdId_11", "attemptID": 1641, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "33.97475", "embeddingY": "35.963223"},{"extension": "py", "date": "2020-03-14 00:12:24", "correct": "1", "upload": "def somme(liste):\n  res=0\n  for elem in liste:\n    res=res+elem\n  return res", "user": "userdId_14", "attemptID": 1642, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-27.552118", "embeddingY": "0.9368715"},{"extension": "py", "date": "2020-04-10 06:33:48", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n    cpt=0\n    for x in nombre:\n      if x==chiffre:\n        cpt+=1\n    return cpt\n  ", "user": "userdId_11", "attemptID": 1643, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-35.881947", "embeddingY": "-13.458813"},{"extension": "py", "date": "2020-03-17 05:38:01", "correct": "0", "upload": "def permutationChaine(s):\n  res=\"\"\n  for i in range(0,len(s)-1,2):\n    res=res+s[1+i]+s[i]\n  if len(s)!=0:\n    res=res+i%2\n    res=res+s[i-1]\n  return res", "user": "userdId_8", "attemptID": 1644, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-38.409466", "embeddingY": "-61.54056"},{"extension": "py", "date": "2020-04-12 09:36:44", "correct": "0", "upload": "def suiteAriGeo(liste):\n  i=0\n  while i<len(liste)-1:\n    a=liste[0]\n    b=liste[0]\n    if liste[i+1]==liste[i]+(liste[1]-liste[0]):\n      b=liste[1]-liste[0]\n    if liste[0]!=0:                        \n      if liste[i+1]==liste[i]*liste[1]/liste[0]:\n        a=liste[1]/liste[0]\n        b=0\n    if liste[i+1]==liste[i]*(liste[1]-liste[0])+(liste[i]-(liste[i-1]*(liste[1]-liste[0]))):\n      a=liste[1]-liste[0]\n      b=liste[i]-(liste[i-1]*a)\n    i=i+1\n  ok=True\n  i=0\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=a*liste[i]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 1645, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "35.045284", "embeddingY": "84.159134"},{"extension": "py", "date": "2020-03-10 03:53:35", "correct": "1", "upload": "def nombrePair(n):\n  if n==0:\n    res=True\n  else:\n    if n%2==0:\n      res=True\n    else:\n      res=False\n  return res", "user": "userdId_5", "attemptID": 1646, "exercise": "3001254263845e9a478696f81a704d33", "exercise_name": "nombrePair", "embeddingX": "43.20454", "embeddingY": "-3.3740911"},{"extension": "py", "date": "2020-04-13 22:18:34", "correct": "0", "upload": "def meilleurClassementJoueur(scores,joueurs,nom):\n  c=True\n  if nom in joueurs:\n    while i<len(joueurs) and c:\n      if nom==joueurs[i]:\n        res=i+1\n  else:\n    res=-1\n  return res\n", "user": "userdId_19", "attemptID": 1647, "exercise": "be6ce0a06c5d396190024c7c681da95d", "exercise_name": "meilleurClassementJoueur", "embeddingX": "-3.0144894", "embeddingY": "52.552635"},{"extension": "py", "date": "2020-03-22 04:55:02", "correct": "0", "upload": "def polynome(a,b,c):\n  delta=b^2-4*a*c\n  if delta>0:\n    x=(-b-(delta**0.5)/2*a),(-b+(delta**0.5)/2*a)\n  elif delta==0:\n    x=-b/2*a\n  else:\n    x='pas de solution'\n  return x", "user": "userdId_12", "attemptID": 1648, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-55.750492", "embeddingY": "5.8725953"},{"extension": "py", "date": "2020-03-12 06:57:03", "correct": "0", "upload": "def maximum(liste):\n  res=liste[0]\n  for i in liste:\n    if res<liste[i]:\n      res=liste[i]\n    return res", "user": "userdId_20", "attemptID": 1649, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "41.09516", "embeddingY": "-58.679764"},{"extension": "py", "date": "2020-04-06 08:19:16", "correct": "1", "upload": "def moyenne(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=0\n    cpt=0\n    for i in range(len(liste)):\n      res=res+liste[i]\n      cpt+=1\n    res=res/cpt\n  return res", "user": "userdId_16", "attemptID": 1650, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-8.723674", "embeddingY": "-8.154369"},{"extension": "py", "date": "2020-03-07 00:25:57", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut1<debut2 and fin1>fin2:\n    res=False\n  else:\n    if fin1>=debut2:\n      res =True\n  return res", "user": "userdId_8", "attemptID": 1651, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "60.01215", "embeddingY": "-22.345018"},{"extension": "py", "date": "2020-04-13 21:54:41", "correct": "1", "upload": "def listeDecroissante(scores):\n  i=0\n  ok=True\n  while i<(len(scores)-1) :\n    if scores[i]<scores[i+1] :\n      ok=False\n    i+=1\n  return ok", "user": "userdId_15", "attemptID": 1652, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "19.010664", "embeddingY": "45.077496"},{"extension": "py", "date": "2020-04-06 22:23:48", "correct": "0", "upload": "def sousChaine2(s1,s2):\n  i=0\n  j=0\n  cpt=0\n  while i<len(s2) and j<len(s1): \n    if s2[i]==s1[j]:\n      cpt+=1 \n      j+=1\n    else:\n      cpt=0\n      j=0\n    i+=1\n  return cpt==len(s1)", "user": "userdId_12", "attemptID": 1653, "exercise": "a7cdd094daa2f0bfccc7a4ec419f7243", "exercise_name": "sousChaine", "embeddingX": "-71.527054", "embeddingY": "13.669591"},{"extension": "py", "date": "2020-03-24 03:18:18", "correct": "1", "upload": "def quatrePlus100(liste):\n    res=[]\n    i=0\n    nb=0\n    for i in range(len(liste)):\n      if liste[i]>100 and nb<4:\n        res=res+[liste[i]]\n        nb=nb+1\n      i=i+1\n    return res", "user": "userdId_18", "attemptID": 1654, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-29.942398", "embeddingY": "44.181625"},{"extension": "py", "date": "2020-03-06 00:00:07", "correct": "0", "upload": "def moyenne(liste):\n  if liste==[]:\n    return None\n  else:\n    S=0\n    nbNotes=0\n    for i in liste:\n      S=S+liste[i]\n      nbNotes=nbNotes+1\n      \n  return S/nbNotes", "user": "userdId_15", "attemptID": 1655, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-13.657385", "embeddingY": "-12.027639"},{"extension": "py", "date": "2020-04-13 22:28:49", "correct": "1", "upload": "def verifSuiteAriGeo(liste,a,b):\n  ok=True\n  n=1\n  while n<len(liste) and ok:\n    if liste[n]!=liste[n-1]*a+b:\n      ok=False\n    n+=1\n  return ok\ndef suiteAriGeo(liste):\n  res=True\n  if len(liste)>2:\n    if (liste[1]-liste[0])==0:\n      q=0\n      r=0\n    else:\n      q=(liste[2]-liste[1])/(liste[1]-liste[0])\n      r=liste[1]-q*liste[0]\n      res=verifSuiteAriGeo(liste,q,r)\n  return res", "user": "userdId_8", "attemptID": 1656, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "16.318449", "embeddingY": "74.49219"},{"extension": "py", "date": "2020-03-05 10:44:14", "correct": "0", "upload": "from math import *\n\ndef polynome(a,b,c):\n  d=b**2-4*a*c\n  if d <0:\n    return \"pas de solution\"\n  elif d==0:\n    x1==-b/2*a and x2==-b/2*a\n    return x1 and x2\n  elif d>0:\n    s1=(-b-(sqrt(d)))/2*a\n    s2=(-b+(sqrt(d)))/2*a\n    return s1 and s2\n\n    polynome(1,-1,0)\n    polynome(2,-4,2)\n    polynome(3,-2,10)", "user": "userdId_1", "attemptID": 1657, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-53.05182", "embeddingY": "7.8363557"},{"extension": "py", "date": "2020-04-06 06:22:02", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  i=0\n  for i in range(nombre):\n    if chiffre==i:\n      cpt=cpt+1\n    i=i+1\n  return cpt", "user": "userdId_3", "attemptID": 1658, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-17.553148", "embeddingY": "-24.445187"},{"extension": "py", "date": "2020-04-17 03:08:27", "correct": "1", "upload": "def nbVoyelles(mot):\n  cpt=0\n  for lettre in mot: \n    if lettre in 'aeiouy':\n      cpt=cpt+1\n  return cpt", "user": "userdId_21", "attemptID": 1659, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "16.042965", "embeddingY": "-24.909777"},{"extension": "py", "date": "2020-03-06 00:29:49", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    voy=None\n  else:\n    voy=0\n    for i in mot:\n      if mot[i] in \"aeiouy\":\n        voy=voy+1\n  return voy", "user": "userdId_13", "attemptID": 1660, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "3.0473702", "embeddingY": "-43.151676"},{"extension": "py", "date": "2020-03-10 01:57:37", "correct": "0", "upload": "def ecart(liste):\n    if len(liste)==0:\n      res=None\n    else:\n      res=liste[0]\n      max=liste[i]\n      min=liste[i]\n      for i in range(1,len(liste)):\n        if liste[i]<res:\n          min=liste[i]\n        if liste[i]>res:\n          max=liste[i]\n          res=max-min\n    return res\n      \n      ", "user": "userdId_9", "attemptID": 1661, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "13.46413", "embeddingY": "-53.469505"},{"extension": "py", "date": "2020-03-31 03:18:42", "correct": "0", "upload": "def fusion(liste1,liste2):\n  res=[]\n  i=0\n  j=0\n  while i<len(liste1) and i<len(liste2):\n    if liste1[i]<liste2[j]:\n      res.append(liste2[j])\n      j=i+1\n    else:\n      res.append(liste1[i])\n      i=i+1\n  \n  return res", "user": "userdId_36", "attemptID": 1662, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-40.24715", "embeddingY": "48.810097"},{"extension": "py", "date": "2020-03-13 00:56:55", "correct": "0", "upload": "def sommeNPremiersEntiers(n):\n  if n<0:\n    res=0\n  else:\n    for i in range(n):\n      res=res+[i]\n  return res", "user": "userdId_12", "attemptID": 1663, "exercise": "c315a540cf0bfb0182dc114c6f0eafd1", "exercise_name": "sommeNPremiersEntiers", "embeddingX": "27.88026", "embeddingY": "-55.985607"},{"extension": "py", "date": "2020-03-03 00:04:14", "correct": "0", "upload": "def jourNuit(heure):\n  if heure > 24 or heure < 0 :\n    res = (\"l'heure saisie est invalide\")\n  elif heure >= 6 and heure <= 18 :\n    if heure >= 5 and heure <= 12 :\n      res = (\"on est le matin et il fait jour\")\n    elif heure > 12 and heure <= 17 :\n      res = (\"on est l'apr\u00e8s-midi et il fait jour\")\n    else :\n      res = (\"on est le soir et il fait jour\")\n  else :\n    if heure >= 5 and heure <= 12 :\n      res = (\"on est le matin et il fait nuit\")\n    elif heure > 12 and heure <= 17 :\n      res = (\"on est l'apr\u00e8s-midi et il fait nuit\")\n    elif heure > 17 and heure <= 21 :\n      res = (\"on est le soir et il fait nuit\")\n    else :\n      res = (\"il fait nuit\")\n    return res", "user": "userdId_17", "attemptID": 1664, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "75.429", "embeddingY": "21.791748"},{"extension": "py", "date": "2020-04-12 11:07:46", "correct": "0", "upload": "def phrasePalindrome(phrase):\n    if len(phrase)==0:\n      res=True\n    else:\n      res=True\n      i=0\n      x=''\n      while i<len(phrase)//2 and res:\n        if phrase[i]==x:\n          phrase=phrase-phrase[i]\n        else:\n          if phrase[i]!=phrase[-(i+1)]:\n            res=False\n          i+=1\n    return res", "user": "userdId_11", "attemptID": 1665, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "34.175053", "embeddingY": "35.373398"},{"extension": "py", "date": "2020-03-06 00:27:20", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n  if len(mot)==0:\n    pos=None\n  else:\n    for elem in mot:\n      if lettre==elem:\n        pos=mot[i]\n      else:\n        pos=None\n        \n  return pos", "user": "userdId_15", "attemptID": 1666, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-13.300936", "embeddingY": "-33.269943"},{"extension": "py", "date": "2020-03-24 06:37:44", "correct": "0", "upload": "def fusion(liste1,liste2):\n  liste3=[liste1[i]]+[liste2[i]]\n  liste3.sort()\n  return liste3", "user": "userdId_13", "attemptID": 1667, "exercise": "6613efb6c873b142dc2b6040c14eb616", "exercise_name": "fusion", "embeddingX": "-49.401398", "embeddingY": "-4.300833"},{"extension": "py", "date": "2020-04-12 05:35:06", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=False\n  c=[]\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    d=liste[i]+d\n    c.append(d)\n  return c", "user": "userdId_8", "attemptID": 1668, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-81.58268", "embeddingY": "17.715927"},{"extension": "py", "date": "2020-04-10 01:02:35", "correct": "0", "upload": "def suiteAriGeo(liste):\n  i=0\n  while i<len(liste)-1:\n    b=liste[i+1]-liste[i]*a\n    if liste[0]!=0:\n      a=liste[1]/liste[0]\n      if liste[i+1]==liste[i]*a:\n          b=0\n    if liste[i+1]==liste[i]+b:\n      a=1\n    i=i+1\n  i=0\n  ok=True\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=a*liste[i]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 1669, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "31.389866", "embeddingY": "82.342606"},{"extension": "py", "date": "2020-03-17 05:25:33", "correct": "0", "upload": "def permutationChaine(s):\n    res=''\n    for i in range(0,len(s)+1,len(s)):\n        res=res+s[i+1]+s[i]\n    return res", "user": "userdId_39", "attemptID": 1670, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-47.512966", "embeddingY": "-48.415833"},{"extension": "py", "date": "2020-03-23 01:54:38", "correct": "0", "upload": "def nbVoyelles(mot):\n    res=0\n    for i in range (mot) :\n      if i =='a,e,i,o,u,y' :\n        res=res+1\n    return res", "user": "userdId_24", "attemptID": 1671, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-40.884018", "embeddingY": "-21.015139"},{"extension": "py", "date": "2020-03-22 23:59:24", "correct": "0", "upload": "def nombrePair(n):\n  res=False\n  for x in range(n):\n    if x%2==True:\n      res=True\n  return res", "user": "userdId_8", "attemptID": 1672, "exercise": "3001254263845e9a478696f81a704d33", "exercise_name": "nombrePair", "embeddingX": "31.724705", "embeddingY": "-7.416768"},{"extension": "py", "date": "2020-05-04 21:34:00", "correct": "0", "upload": "def somme(liste):\n  res=0\n  for elem in range(liste):\n    res+=elem\n  return res", "user": "userdId_8", "attemptID": 1673, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-40.783073", "embeddingY": "-21.408506"},{"extension": "py", "date": "2020-03-10 03:01:49", "correct": "0", "upload": "def jourNuit(heure):\n  if 5<=heure<6:\n    res='on est le matin et il fait nuit'\n  elif 6<=heure<12:\n    res='on est le matin et il fait jour'\n  elif 12<=heure<17:\n    res=\"on est l'apr\u00e8s-midi et il fait jour\"\n  elif 17<=heure<18:\n    res='on est le soir et il fait jour'\n  elif 18<=heure<21:\n    res='on est le soir et il fait nuit'\n  elif 0<=heure<5 or 21<=heure<24:\n    res='on est la nuit et il fait nuit'\n  else:\n    res=\"l'heure saisie est invalide\"\n  return res\n            ", "user": "userdId_18", "attemptID": 1674, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "71.835014", "embeddingY": "25.240341"},{"extension": "py", "date": "2020-03-06 00:23:50", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n\tres=0\n\tfor l in range(len(mot)):\n\t\tif lettre==mot[l]:\n\t\t\tres=l\n        \n\treturn res", "user": "userdId_19", "attemptID": 1675, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-20.224678", "embeddingY": "-39.859474"},{"extension": "py", "date": "2020-03-20 00:26:22", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  res=\"\"\n  if debut+longueur>len(s):\n    fin=len(s)\n    for i in range(debut,debut+longueur):\n      res=res+s[i]\n  else:\n    fin=debut+longueur\n  return res\n    ", "user": "userdId_34", "attemptID": 1676, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-79.88742", "embeddingY": "28.586357"},{"extension": "py", "date": "2020-03-07 01:02:19", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut1>=debut2:\n    if fin1<=fin2:\n      if fin1>=debut2:\n        res=True\n  else:\n    res=False\n  return res", "user": "userdId_8", "attemptID": 1677, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "51.83697", "embeddingY": "-20.312183"},{"extension": "py", "date": "2020-03-12 08:29:58", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n    return None\n  max=[0]\n  for i in range (1,(len(liste))):\n    if liste[i]>max:\n      max=liste[i]\n  return max", "user": "userdId_1", "attemptID": 1678, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "11.8303795", "embeddingY": "-69.42916"},{"extension": "py", "date": "2020-03-13 00:45:54", "correct": "1", "upload": "def sommeNPremiersEntiers(n):\n\tres = 0\n\tfor i in range(n+1):\n\t\tres = res + i\n\treturn res", "user": "userdId_29", "attemptID": 1679, "exercise": "c315a540cf0bfb0182dc114c6f0eafd1", "exercise_name": "sommeNPremiersEntiers", "embeddingX": "-19.838432", "embeddingY": "13.259997"},{"extension": "py", "date": "2020-03-17 06:45:20", "correct": "0", "upload": "def permutationListe(liste,permutation):\n  res=liste[0]\n  for elem in liste:\n    res[permutation]=liste[i]\n  return res", "user": "userdId_25", "attemptID": 1680, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-50.20976", "embeddingY": "-12.575177"},{"extension": "py", "date": "2020-04-06 10:01:48", "correct": "0", "upload": "def nextConway(s):\n    s=int(s)\n    liste=[]\n    while s!=0:\n      liste.append(s%10)\n      s//=10\n    nliste=[0]\n    for i in range(len(liste)):\n      nliste=[liste[i]]+nliste\n    cw=[]\n    cpt=1\n    for i in range(len(nliste)-1):\n      if nliste[i]==nliste[i+1]:\n        cpt+=1\n      else:\n        cw+=[cpt]\n        cw+=[nliste[i]]\n        cpt=1\n    res=0\n    for i in range(len(cw)):\n      res+=cw[-i-1]*10**abs(-i)\n    return res", "user": "userdId_18", "attemptID": 1681, "exercise": "a580c32690609356dae4401b3c89a3b8", "exercise_name": "nextConway", "embeddingX": "-29.844578", "embeddingY": "-52.785633"},{"extension": "py", "date": "2020-03-19 05:24:43", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if jour1<jour2 and annee1<annee2:\n    res=-1\n    if jour1==jour2 and mois1==mois2 and annee1==annee2:\n      res=1\n  else:\n    res=0\n  return res", "user": "userdId_34", "attemptID": 1682, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "78.9744", "embeddingY": "-24.611465"},{"extension": "py", "date": "2020-04-12 12:17:43", "correct": "1", "upload": "def suiteAri(liste):\n    if len(liste)==0:\n      res=True\n    else:\n      res=True\n      for i in range(1,len(liste)):\n        x=liste[1]-liste[0]\n        if liste[i]!=liste[i-1]+x:\n          res=False\n    return res", "user": "userdId_11", "attemptID": 1683, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "-16.020378", "embeddingY": "-64.64042"},{"extension": "py", "date": "2020-04-03 00:29:42", "correct": "0", "upload": "def doubleChiffre(nombre):\n  res=False\n  compare=nombre%10\n  while nombre!=0 and res==False:\n    nombre=nombre//10\n    if nombre%10==compare:\n      res=True\n  return res", "user": "userdId_12", "attemptID": 1684, "exercise": "c83ea6acd3e9f6f5543e87d515e8a44a", "exercise_name": "doubleChiffre", "embeddingX": "13.204394", "embeddingY": "20.148329"},{"extension": "py", "date": "2020-04-12 05:58:13", "correct": "0", "upload": "def suiteGeo(liste):\n    if len(liste)==0:\n      res=True\n    else:\n      res=True\n      for i in range(1,len(liste)):\n        x=liste[1]//liste[0]\n        if x==0:\n          res=False\n        else:         \n          if liste[i]==liste[i-1]*x:\n            res=True\n          else:\n            res=False\n    return res", "user": "userdId_11", "attemptID": 1685, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "-13.8496895", "embeddingY": "-81.6234"},{"extension": "py", "date": "2020-03-22 14:28:38", "correct": "1", "upload": "def sommeNPremiersEntiersPairs(n):\n    res=0\n    for n in range(1,n+1):\n      if n%2==0:\n        res=res+n\n    return res", "user": "userdId_21", "attemptID": 1686, "exercise": "3030dc079e6607c253e89e8ef4784b74", "exercise_name": "sommeNPremiersEntiersPairs", "embeddingX": "33.936573", "embeddingY": "-11.560424"},{"extension": "py", "date": "2020-03-17 05:17:46", "correct": "0", "upload": "def distribution(liste,n):\n  cpts=[0]*(n+1)\n  for elem in liste:\n    elem=liste[elem]+1\n  return elem", "user": "userdId_8", "attemptID": 1687, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-59.100487", "embeddingY": "-16.994118"},{"extension": "py", "date": "2020-04-06 04:05:51", "correct": "0", "upload": "def suiteAri(liste):\n    if liste==[]:\n      ok1=True\n    else:\n      ok1=True\n      ctePrec=liste[1]-liste[0]\n      cteAct=None\n      i=2\n      while i<len(liste) and ok:\n        cteAct=liste[i]-liste[i-1]\n        if cteAct!=ctePrec:\n          ok1=False\n        ctePrec=cteAct\n        i+=1\n    return ok1\n\ndef suiteGeo(liste):\n    if liste==[] or len(liste)==1:\n      ok2=True\n    elif 0 in liste:\n      ok2=False\n    else:\n      ok2=True\n      i=1\n      while i<len(liste) and ok:\n        cte=liste[i]/liste[i-1]\n        if liste[0]*cte**i!=liste[i]:\n          ok2=False\n        i+=1\n    return ok2\n\ndef suiteAriGeo(liste):\n    suiteAri(liste)\n    suiteGeo(liste)\n    ok=(ok1 or ok2)\n    return ok", "user": "userdId_18", "attemptID": 1688, "exercise": "4c9665daf155b115fe13218141fa1aff", "exercise_name": "suiteAriGeo", "embeddingX": "18.140125", "embeddingY": "65.089714"},{"extension": "py", "date": "2020-06-02 21:12:53", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut1<=fin2 or debut2<=fin1:\n    return True\n  else:\n    return False", "user": "userdId_12", "attemptID": 1689, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "58.617817", "embeddingY": "-27.445744"},{"extension": "py", "date": "2020-04-05 03:34:51", "correct": "0", "upload": "def minimum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=liste[0]\n    for i in range(1,len(liste)-1):\n      if res>liste[i]:\n        res=liste[i]\n  return res", "user": "userdId_26", "attemptID": 1690, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "-5.314113", "embeddingY": "-67.51921"},{"extension": "py", "date": "2020-03-31 04:33:10", "correct": "0", "upload": "def indiceOccurence(n,x,l):\n  trouve=False\n  cpt=0\n  i=0\n  res=None\n  while i<len(l) and not trouve :\n    if l[i]==x:\n      cpt=cpt+1\n    if cpt==n:\n      res=i\n    i=i+1\n  return res", "user": "userdId_10", "attemptID": 1691, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "1.1977457", "embeddingY": "72.184654"},{"extension": "py", "date": "2020-04-12 06:08:51", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=False\n  c=[]\n  e=[]\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n    e.extend(c)\n  return e", "user": "userdId_8", "attemptID": 1692, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-79.72784", "embeddingY": "28.252378"},{"extension": "py", "date": "2020-03-31 04:09:35", "correct": "1", "upload": "def listeSymetrique(liste):\n  res = True\n  i = 0\n  while i<(len(liste)//2):\n    if liste[i] != liste[len(liste)-1-i] :\n      res = False\n    i = i + 1\n  return res", "user": "userdId_52", "attemptID": 1693, "exercise": "8eb27aeda471a467e2223abebeca886e", "exercise_name": "listeSymetrique", "embeddingX": "23.043583", "embeddingY": "49.227634"},{"extension": "py", "date": "2020-03-31 01:25:33", "correct": "0", "upload": "def doubleChiffre(nombre):\n  nombre = str(nombre)\n  res = False\n  i = 0\n  while res == False and i < len(nombre)-1:\n    if nombre[i] == nombre[i+1]:\n      res = True\n    i+=1\n\n  return res", "user": "userdId_4", "attemptID": 1694, "exercise": "7f84d207313ad3dc0f4fef3d72d72abb", "exercise_name": "doubleChiffre", "embeddingX": "33.896473", "embeddingY": "50.694756"},{"extension": "py", "date": "2020-03-09 08:10:58", "correct": "1", "upload": "def somme(liste):\n    res=0\n    for elem in liste:\n      res=res+elem\n    return res\n  \n", "user": "userdId_11", "attemptID": 1695, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-26.722298", "embeddingY": "2.0149975"},{"extension": "py", "date": "2020-04-08 00:46:43", "correct": "0", "upload": "def elemAri(n,u0,r):\n  i=0\n  res=u0\n  while i!=n:\n    res=res*r\n    i+=1\n  return res", "user": "userdId_13", "attemptID": 1696, "exercise": "d7c83a7fb9b49e28804e55955ad06968", "exercise_name": "elemGeo", "embeddingX": "-48.271248", "embeddingY": "-6.61877"},{"extension": "py", "date": "2020-03-05 21:33:54", "correct": "1", "upload": "def somme(liste):\n    res=0\n    for i in range (len(liste)):\n      res=res+liste[i]\n    return res", "user": "userdId_49", "attemptID": 1697, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-43.643757", "embeddingY": "-37.053883"},{"extension": "py", "date": "2020-04-06 03:33:36", "correct": "0", "upload": "def produitScalaire(vec1,vec2):\n  res=0\n  i=0\n  while i<len(vec1) and i<len(vec2):\n    p1=vec1[i]\n    p2=vec\u00e9[i]\n    res=res+p1*p2\n    i=i+1\n  return res\n", "user": "userdId_26", "attemptID": 1698, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-14.03746", "embeddingY": "53.020893"},{"extension": "py", "date": "2020-03-30 03:07:35", "correct": "0", "upload": "def fusion(liste1,liste2):\n    res = []\n    res.extend(liste1 + liste2)\n    res.sort()\n\n    return (res)", "user": "userdId_4", "attemptID": 1699, "exercise": "6613efb6c873b142dc2b6040c14eb616", "exercise_name": "fusion", "embeddingX": "-42.683575", "embeddingY": "10.042848"},{"extension": "py", "date": "2020-03-06 00:25:31", "correct": "0", "upload": "def minimum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=liste[0]\n    for elem in liste:\n      if elem<liste[0]:\n        res=liste[0]\n  return res", "user": "userdId_14", "attemptID": 1700, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "29.851551", "embeddingY": "-62.44417"},{"extension": "py", "date": "2020-04-07 05:36:39", "correct": "0", "upload": "def suiteAri(liste):\n  ok=True\n  i=0\n  if len(liste)==0:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=liste[0]+(liste[i+1]-liste[i])*liste[i]:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 1701, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "19.339874", "embeddingY": "53.50611"},{"extension": "py", "date": "2020-03-23 00:22:19", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  res=[]\n  for i in range(len(liste)):\n    if liste[i+1]>liste[i]:\n      res=liste[i+1]\n  return res", "user": "userdId_8", "attemptID": 1702, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-5.0959854", "embeddingY": "-64.19703"},{"extension": "py", "date": "2020-03-05 23:56:17", "correct": "0", "upload": "def maximum(liste):\n    max=0\n    for elem in range(1, len(liste)):\n      if liste[elem]>max:\n        max=liste[elem]\n    return max    \n      \n   \n    ", "user": "userdId_46", "attemptID": 1703, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "10.854768", "embeddingY": "-72.816025"},{"extension": "py", "date": "2020-03-05 23:34:43", "correct": "0", "upload": "def somme(liste):\n  res=0\n  for elem in liste:\n    res=res+elem\n    return res", "user": "userdId_33", "attemptID": 1704, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-25.904917", "embeddingY": "4.974345"},{"extension": "py", "date": "2020-04-05 23:58:45", "correct": "1", "upload": "def suiteAri(liste):\n    if liste==[]:\n      ok=True\n    else:\n      ok=True\n      ctePrec=liste[1]-liste[0]\n      cteAct=None\n      i=2\n      while i<len(liste) and ok:\n        cteAct=liste[i]-liste[i-1]\n        if cteAct!=ctePrec:\n          ok=False\n        ctePrec=cteAct\n        i+=1\n    return ok", "user": "userdId_18", "attemptID": 1705, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "19.95301", "embeddingY": "66.84534"},{"extension": "py", "date": "2020-06-02 22:39:02", "correct": "0", "upload": "def maximum(liste):\n  res=liste[0]\n  for elem in liste:\n    if elem>res:\n      res=elem\n  return res", "user": "userdId_12", "attemptID": 1706, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "32.004433", "embeddingY": "-46.657555"},{"extension": "py", "date": "2020-03-10 09:51:36", "correct": "0", "upload": "def nbVoyelles(mot):\n  res=0\n  x='a,e,i,o,u,y'\n  for x in mot:\n    res=res+1\n     \n  return res", "user": "userdId_5", "attemptID": 1707, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-31.676044", "embeddingY": "0.38533473"},{"extension": "py", "date": "2020-03-05 23:50:36", "correct": "0", "upload": "def somme(liste):\n  res=0\n  for elem in list:\n    res=res+elem\n    return res\n    ", "user": "userdId_20", "attemptID": 1708, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-31.195143", "embeddingY": "-13.126726"},{"extension": "py", "date": "2020-03-20 00:04:32", "correct": "0", "upload": "def permutationChaine(s):\n  res=\"\"\n  for i in range(0,len(s),2):\n    x=s[i]\n    s[i]=s[i+1]\n    s[i+1]=x\n    res=res+s[i]+s[i+1]\n  return res\n", "user": "userdId_13", "attemptID": 1709, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-43.35319", "embeddingY": "-47.33309"},{"extension": "py", "date": "2020-03-12 22:08:38", "correct": "0", "upload": "def moyenne(liste):\n  if len (liste)==0:\n    res=None\n  else:\n    res=0\n    cpt=0\n    for elem in liste:\n      res=res+elem\n      cpt=cpt+elem\n      res=elem%cpt\n  return res ", "user": "userdId_20", "attemptID": 1710, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-5.0660505", "embeddingY": "-3.8001275"},{"extension": "py", "date": "2020-03-12 08:35:29", "correct": "1", "upload": "def nombrePair(n):\n    res=0\n    if n%2==0 :\n      res= True\n    else :\n      res= False\n    return res", "user": "userdId_24", "attemptID": 1711, "exercise": "3001254263845e9a478696f81a704d33", "exercise_name": "nombrePair", "embeddingX": "43.59304", "embeddingY": "-3.0661857"},{"extension": "py", "date": "2020-04-14 03:26:58", "correct": "0", "upload": "def listeDecroissante(scores):\n  scorePrec=scores[0]\n  ok=True\n  i=1\n  while i<len(scores) and ok:\n    if scorePrec<=scores[i]:\n      ok=False\n    i+=1\n  return ok", "user": "userdId_18", "attemptID": 1712, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "16.537815", "embeddingY": "38.656174"},{"extension": "py", "date": "2020-04-12 11:20:23", "correct": "1", "upload": "def elemAri(n,u0,r):\n    res=0\n    x=0\n    while x<=n:\n      res=u0+n*r\n      x+=1\n    return res\n      ", "user": "userdId_11", "attemptID": 1713, "exercise": "f239498950e974e29e01472749d9a09d", "exercise_name": "elemAri", "embeddingX": "-9.316318", "embeddingY": "23.625322"},{"extension": "py", "date": "2020-03-31 01:25:23", "correct": "0", "upload": "def doubleChiffre2(nombre):\n  nombre = str(nombre)\n  res = False\n  i = 0\n  while res == False and i < len(nombre)-1:\n    if nombre[i] == nombre[i+1]:\n      res = True\n    i+=1\n\n  return res", "user": "userdId_4", "attemptID": 1714, "exercise": "7f84d207313ad3dc0f4fef3d72d72abb", "exercise_name": "doubleChiffre", "embeddingX": "33.897793", "embeddingY": "50.69477"},{"extension": "py", "date": "2020-03-10 03:26:50", "correct": "0", "upload": "def jourNuit(heure):\n  if heure<0 or heure>24:\n    res=\"l'heure saisie est invalide\"\n  else:\n    if heure<5 or heure>=21:\n      res=\"on est la nuit\"\n    elif heure<12:\n      res=\"on est le matin\"\n    elif heure<17:\n      res=\"on est l'apres-midi\"\n    else:\n      res=\"on est le soir\"\n    if heure<6 or heure >=18:\n      res=res+\" et il fait nuit\"\n    else:\n      res=res+\" et il fait jour\"\n  return res", "user": "userdId_31", "attemptID": 1715, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "71.71584", "embeddingY": "15.387915"},{"extension": "py", "date": "2020-04-17 03:20:37", "correct": "0", "upload": "def minimum(liste):\n  for i in liste: \n    if i<min:\n      min=i\n  return min", "user": "userdId_21", "attemptID": 1716, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "36.503567", "embeddingY": "-55.981667"},{"extension": "py", "date": "2020-03-05 23:49:41", "correct": "1", "upload": "def nbVoyelles(mot):\n  Voyelles=[\"a\",\"e\",\"i\",\"o\",\"u\",\"y\"]\n  res=0\n  for l in mot:\n    if l in Voyelles:\n      res=res+1\n  return res", "user": "userdId_15", "attemptID": 1717, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "17.906822", "embeddingY": "-29.522324"},{"extension": "py", "date": "2020-03-13 00:43:34", "correct": "0", "upload": "def sommeNPremiersEntiersPairs(n):\n  res=0\n  if i in range(1,n+1):\n    if i%2==0:\n      res=res+i\n    \n    return res", "user": "userdId_38", "attemptID": 1718, "exercise": "3030dc079e6607c253e89e8ef4784b74", "exercise_name": "sommeNPremiersEntiersPairs", "embeddingX": "6.801967", "embeddingY": "-18.8743"},{"extension": "py", "date": "2020-04-10 00:24:04", "correct": "0", "upload": "def suiteAriGeo(liste):\n  i=0\n  ok=True\n  while i<len(liste)-1:\n    a=liste[1]-liste[0]\n    b=liste[1]-liste[0]\n    if liste[i+1]==liste[i]*a:\n        b=0 and a==liste[1]/liste[0]\n    if liste[i+1]==liste[i]+b:\n      a=1 and b==liste[1]-liste[0]\n    i=i+1\n    ok=True\n    i=0\n    if len(liste)==0 or len(liste)==1:\n      ok=True\n    while i<len(liste)-1 and ok:\n      if liste[i+1]!=a*liste[i]+b:\n        ok=False\n      i=i+1\n    return ok", "user": "userdId_1", "attemptID": 1719, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "31.848955", "embeddingY": "80.843185"},{"extension": "py", "date": "2020-03-27 07:04:23", "correct": "1", "upload": "def compare(chaine1,chaine2):\n  res=0\n  i=0\n  while i<len(chaine1) and i<len(chaine2) and res==0:\n    if chaine1[i]<chaine2[i]:\n      res=-1\n    elif chaine1[i]==chaine2[i]:\n      res=0\n    else:\n      res=1\n    i=i+1\n  #traiter le cas o\u00f9 les deux chaines sont identiques mais l'une est plus longue que l'autre\n  if res==0:\n    if len(chaine1)>len(chaine2):\n      res=1\n    elif len(chaine1)<len(chaine2):\n      res=-1\n  return res\n   ", "user": "userdId_34", "attemptID": 1720, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-23.42719", "embeddingY": "62.051785"},{"extension": "py", "date": "2020-03-17 05:12:52", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n    fin=debut+longueur\n    if debut+longueur>len(s):\n        fin=len(s)\n    for i in range(debut,fin):\n        res=res+s[i]\n    return res", "user": "userdId_39", "attemptID": 1721, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-72.10814", "embeddingY": "29.330887"},{"extension": "py", "date": "2020-04-06 17:15:43", "correct": "1", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  res=True\n  if debut1<=debut2:\n    if fin1<debut2:\n      if fin1<debut2:\n      \tres=False\n  if debut2<=debut1:\n    if fin2<fin1:\n      if fin2<debut1:\n      \tres=False\n  return res", "user": "userdId_3", "attemptID": 1722, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "57.693966", "embeddingY": "-18.620218"},{"extension": "py", "date": "2020-04-12 07:04:01", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  if liste==[]:\n    res=True\n  c=[]\n  res=False\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n    c=[liste[0]]%2+c\n  return c", "user": "userdId_8", "attemptID": 1723, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-77.647255", "embeddingY": "15.095825"},{"extension": "py", "date": "2020-04-08 00:26:29", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  ok=False\n  i=0\n  j=0\n  while i<len(phrase)//2 and j<len(phrase)//2:\n    if phrase[i]==\" \":\n      i+=1\n    elif phrase[-j]==\" \":\n      j+=1\n    elif phrase[i]!=phrase[-j-1]:\n      ok=False\n    else:\n      ok=True\n    i+=1\n    j+=1\n  if phrase==\"\":\n    ok=True\n  return ok\n\n", "user": "userdId_13", "attemptID": 1724, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "36.29929", "embeddingY": "33.557487"},{"extension": "py", "date": "2020-04-07 23:44:31", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  ok=False\n  i=0\n  while i<len(phrase)//2:\n    if phrase[i]==\" \" and phrase[-i]==\" \":\n      i+=1\n    elif phrase[i]!=phrase[-i-1]:\n      ok=False\n      i+=1\n    else:\n      ok=True\n      i+=1\n  if phrase==\"\":\n    ok=True\n  return ok", "user": "userdId_13", "attemptID": 1725, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "28.44867", "embeddingY": "36.02628"},{"extension": "py", "date": "2020-03-23 21:03:15", "correct": "0", "upload": "def quatrePlus100(l):\n  res=0\n  for i in l:\n    if (i>100):\n      res=res+l[i]\n  return res", "user": "userdId_48", "attemptID": 1726, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "28.5854", "embeddingY": "-43.232433"},{"extension": "py", "date": "2020-04-06 05:27:10", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  i=0\n  mot=[]\n  phrs=[]\n  mts=True\n  while i<len(phrase):\n    if phrase[i]!=\" \" and mts==True:\n      mot+=phrase[i]\n    elif phrase[i]==\" \":\n      mts=False\n    elif phrase[i]!=\" \":\n      phrs+=phrase[i]\n    i+=1\n  while i<len(mot) and res==True:\n    if mot[i]==phrs[-i-1]:\n      res=True\n    else:\n      res=False\n  return res", "user": "userdId_26", "attemptID": 1727, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "40.705917", "embeddingY": "35.236706"},{"extension": "py", "date": "2020-03-31 00:23:48", "correct": "0", "upload": "def listeSymetrique(l):\n    trouve=False\n    i=0\n    j=-1\n    while i<len(l) and j<=-len(l):\n      if l(i)==l(j):\n        trouve=True\n      else:\n        trouve=False\n      i=i+1\n      j=j-1\n    return trouve\n  \n      ", "user": "userdId_28", "attemptID": 1728, "exercise": "8eb27aeda471a467e2223abebeca886e", "exercise_name": "listeSymetrique", "embeddingX": "5.3043156", "embeddingY": "45.091957"},{"extension": "py", "date": "2020-04-03 00:53:30", "correct": "1", "upload": "def stockerChiffres(nombre):\n    res=[]\n    if nombre==0:\n      res=[0]\n    else:\n      while nombre!=0:\n        res.append(nombre%10)\n        nombre=nombre//10\n    return res\n  ", "user": "userdId_43", "attemptID": 1729, "exercise": "49a87f644f84a443327fb4315b47f249", "exercise_name": "stockerChiffres", "embeddingX": "41.73561", "embeddingY": "13.150276"},{"extension": "py", "date": "2020-04-14 06:01:49", "correct": "0", "upload": "def indiceInsertion(sc,scores):\n  res=0\n  i=0\n  while i<len(scores):\n    if sc>scores[i]:\n      res=i\n    i=i+1\n  return res\n", "user": "userdId_28", "attemptID": 1730, "exercise": "f8a820b2bd54d18d36716e3d703858f7", "exercise_name": "indiceInsertion", "embeddingX": "-19.243277", "embeddingY": "59.39207"},{"extension": "py", "date": "2020-05-04 22:29:38", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n    res=None\n    i=0\n    while i<len(mot) and res:\n      if lettre==mot[i]:\n        res=i\n      i+=1\n    return res", "user": "userdId_26", "attemptID": 1731, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-14.197968", "embeddingY": "46.594902"},{"extension": "py", "date": "2020-03-10 08:58:09", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n\tif jour1<jour2 or mois1<mois2 or annee1<annee2: \n\t\tres=-1\n\tif jour1>jour2 or mois1>mois2 or annee1>annee2:\n\t\tres=1\n\telse:\n\t\tres=0\n\treturn res", "user": "userdId_37", "attemptID": 1732, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "80.16804", "embeddingY": "-29.521095"},{"extension": "py", "date": "2020-03-06 00:24:30", "correct": "1", "upload": "def minimum(liste):\n    if len(liste)==0:\n      return None\n    else:\n      min=liste[0]\n    for i in range(1,len(liste)):\n      if liste[i]<min:\n        min=liste[i]\n    return min", "user": "userdId_1", "attemptID": 1733, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "18.855951", "embeddingY": "-78.880554"},{"extension": "py", "date": "2020-04-11 04:35:26", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  res=0\n  for i in range(len(nombre)):\n    res.append(nombre%10)\n    if nombre[i]==chiffre:\n      res+=1\n  return res", "user": "userdId_8", "attemptID": 1734, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-36.01364", "embeddingY": "-17.521017"},{"extension": "py", "date": "2020-03-13 00:57:46", "correct": "0", "upload": "def sommeNPremiersEntiers(n):\n  if n<0:\n    res=0\n  else:\n    for i in range(n):\n      res=res+i\n  return res", "user": "userdId_12", "attemptID": 1735, "exercise": "c315a540cf0bfb0182dc114c6f0eafd1", "exercise_name": "sommeNPremiersEntiers", "embeddingX": "27.606062", "embeddingY": "-55.617233"},{"extension": "py", "date": "2020-03-12 23:54:58", "correct": "0", "upload": "def jourNuit(heure):\n\tif heure<0 or heure>24:\n\t\tn=\"l'heure saisie est invalide\"\n\tif 6<=heure<=18:\n\t\tn='et il fait jour'\n\t\tif 6<=heure<=12:\n\t\t\tn='on est le matin '+n\n\t\tif 13<=heure<=17:\n\t\t\tn=\"on est l'apr\u00e8s-midi \"+n\n\t\telse:\n\t\t\tn='on est le soir '+n\n\tif heure<=5 or heure>=19:\n\t\tn='et il fait nuit'\n\t\tif heure<=5:\n\t\t\tn='on est la nuit '+n\n\t\tif heure==5:\n\t\t\tn='on est le matin '+n\n\t\tif 19<=heure<=21:\n\t\t\tn='on est le soir '+n\n\t\telse:\n\t\t\tn='on est la nuit '+n\n\treturn res\n\t\n\t\t\n", "user": "userdId_19", "attemptID": 1736, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "69.57754", "embeddingY": "19.475365"},{"extension": "py", "date": "2020-03-22 09:03:46", "correct": "0", "upload": "def moyenne(liste):\n  if liste==():\n    res=none\n  else:\n    for i in range (len(liste)):\n      x=res+liste[i]\n      res=x/len(liste)\n  return res", "user": "userdId_16", "attemptID": 1737, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-12.906712", "embeddingY": "-6.29731"},{"extension": "py", "date": "2020-03-06 00:46:52", "correct": "0", "upload": "def minimum(liste):\n   if len(liste)==0:\n      res=0\n   else:\n      rest=liste[0]\n      for i in range(len(liste)):\n        if(liste[0])<res:\n            res=(liste[0])\n   return res", "user": "userdId_45", "attemptID": 1738, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "25.36896", "embeddingY": "-65.134796"},{"extension": "py", "date": "2020-03-17 06:26:44", "correct": "1", "upload": "def permutationListe(liste,permutation):\n    res=[0]*(len(liste))\n    for i in range(len(liste)):\n        res[permutation[i]]=liste[i]  \n    return res", "user": "userdId_39", "attemptID": 1739, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-50.606167", "embeddingY": "-30.379976"},{"extension": "py", "date": "2020-03-27 06:55:10", "correct": "0", "upload": "def compare(chaine1,chaine2):\n  res=0\n  i=0\n  while i<len(chaine1) and i<len(chaine2) and res==0:\n    if chaine1[i]<chaine2[i]:\n      res=-1\n    else:\n      if chaine1[i]>chaine2[i]:\n        res=1\n      else:\n        res=0\n    i=i+1\n  return res", "user": "userdId_14", "attemptID": 1740, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-23.87489", "embeddingY": "60.88073"},{"extension": "py", "date": "2020-04-07 03:55:43", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  j=0\n  ok=True\n  raison=None\n  if len(liste)>1:\n    while i<len(liste) and liste[0]!=0 and raison==None:\n      raison=liste[i+1]/liste[i]\n      i+=1\n    while j<len(liste)-1 and ok:\n      if liste[j+1]!=liste[j]*raison:\n        ok=False\n      j+=1\n  return ok", "user": "userdId_12", "attemptID": 1741, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "22.352385", "embeddingY": "70.151146"},{"extension": "py", "date": "2020-04-11 05:53:00", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  res=0\n  while nombre!=0:\n    nombre=nombre//10\n    if nombre%10==chiffre:\n      res+=1\n  return res", "user": "userdId_8", "attemptID": 1742, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "22.860733", "embeddingY": "10.427636"},{"extension": "py", "date": "2020-04-14 03:54:52", "correct": "0", "upload": "def listeDecroissante(scores):\n  if scores==[]:\n    return True\n  else:\n    for i in range(len(scores)):\n      if scores[i]<scores[i+1]:\n        return False\n      else: \n        return True", "user": "userdId_31", "attemptID": 1743, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "18.794302", "embeddingY": "-69.021614"},{"extension": "py", "date": "2020-03-16 08:38:06", "correct": "0", "upload": "def prononcable(mot):\n  if len(mot)==0:\n    return True\n  for lettre in mot:\n    if lettre=='aeiouy' and lettre!=3*lettre:\n      if lettre!='aeiouy' and lettre!=3*lettre:\n        return True\n    else:\n      return False\n    ", "user": "userdId_1", "attemptID": 1744, "exercise": "6318b210c201fba050d60bc0913cb7ef", "exercise_name": "prononcable", "embeddingX": "17.234697", "embeddingY": "-44.047863"},{"extension": "py", "date": "2020-04-11 08:03:18", "correct": "0", "upload": "def sousChaine(s1,s2):\n  res=True\n  i=0\n  j=0\n  while i<len(s1) and j<len(s2) and s1[i]!=s2[j]:\n    j+=1\n  else:\n    while i<len(s1) and j<len(s2) and s1[i]==s2[j]:\n      if s1[i]==s2[j]:\n        res=False\n      i+=1\n      j+=1  \n  return res", "user": "userdId_8", "attemptID": 1745, "exercise": "4bdf8c9c5d020593e1771e4d3ae1ae0d", "exercise_name": "sousChaine", "embeddingX": "-4.795324", "embeddingY": "58.651306"},{"extension": "py", "date": "2020-03-19 23:57:38", "correct": "0", "upload": "def sousChaine(s,d,l):\n  res=\"\"\n  for j in range(d,d+l):\n    res=res+s[j]\n\n  return res\n", "user": "userdId_5", "attemptID": 1746, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-82.7874", "embeddingY": "17.013834"},{"extension": "py", "date": "2020-03-31 04:16:24", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n  trouve=False\n  i=0\n  cpt=0\n  while i<len(l)and not trouve:\n    if l[i]==x:\n      cpt+=1\n    if cpt==n:\n      trouve=True\n    i+=1\n  return res", "user": "userdId_36", "attemptID": 1747, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-2.1417053", "embeddingY": "69.99395"},{"extension": "py", "date": "2020-03-03 05:53:17", "correct": "0", "upload": "def nbVoyelles(mot):\n  if \"aeiouy\" in (mot):\n    res=\"aeiouy\"\n    return res", "user": "userdId_8", "attemptID": 1748, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "11.112168", "embeddingY": "-22.083567"},{"extension": "py", "date": "2020-04-11 00:30:33", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  c=True\n  while i<(len(liste)-2) and c:\n    if liste[i]!=0 and liste[i+1]!=0:\n      if liste[i+2]/liste[i+1]!=liste[i+1]/liste[i]:\n        c=False\n    i=i+1\n  return c", "user": "userdId_19", "attemptID": 1749, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "25.576271", "embeddingY": "54.705223"},{"extension": "py", "date": "2020-03-30 21:22:41", "correct": "0", "upload": "def fusion(liste1,liste2):\n  i=0\n  j=0\n  res = []\n  while j<len(liste2) and i<len(liste1):\n    if liste1[i]<liste2[j]:\n      res.append(liste1[i])\n      i+=1\n    else:\n      res.append(liste2[j])\n      j+=1\n  return res", "user": "userdId_6", "attemptID": 1750, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-41.970028", "embeddingY": "53.510273"},{"extension": "py", "date": "2020-03-19 23:58:24", "correct": "0", "upload": "def permutationChaine(s):\n  res=''\n  for i in range(0,len(s)-1):\n    res=res+s[i+1]\n    res=res+s[i]\n  res=res+s[len(s)-1]\n  return res", "user": "userdId_40", "attemptID": 1751, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-44.923527", "embeddingY": "-50.028545"},{"extension": "py", "date": "2020-04-10 00:22:41", "correct": "0", "upload": "def suiteAriGeo(liste):\n  i=0\n  while i<len(liste)-1:\n    a=liste[1]-liste[0]\n    b=liste[1]-liste[0]\n    if liste[i+1]==liste[i]*a:\n        b=0 and a==liste[1]/liste[0]\n    if liste[i+1]==liste[i]+b:\n      a=1 and b==liste[1]-liste[0]\n    i=i+1\n  def verifSuiteAriGeo(liste,a,b):\n    ok=True\n    i=0\n    if len(liste)==0 or len(liste)==1:\n      ok=True\n    while i<len(liste)-1 and ok:\n      if liste[i+1]!=a*liste[i]+b:\n        ok=False\n      i=i+1\n    return ok", "user": "userdId_1", "attemptID": 1752, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "30.6277", "embeddingY": "78.77387"},{"extension": "py", "date": "2020-03-31 04:03:56", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n  cpt=0\n  trouve=False\n  i=0\n  while i<len(l):\n    if l[i]==x:\n      cpt+=1\n    if cpt==n:\n      trouve=True\n    i+=1\n  return trouve", "user": "userdId_13", "attemptID": 1753, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-10.74206", "embeddingY": "70.34247"},{"extension": "py", "date": "2020-03-24 04:57:43", "correct": "0", "upload": "def quatrePlus100(liste):\n  i=0\n  res=[]\n  while i<len(liste) and i<5:\n    if liste[i]>100:\n      res.append(liste[i])\n    i=i+1\n  return res\n", "user": "userdId_13", "attemptID": 1754, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-25.574114", "embeddingY": "39.891144"},{"extension": "py", "date": "2020-03-05 22:19:27", "correct": "0", "upload": "def maximum(liste):\n  res=-100\t\n  for elem in liste:\n    if res<elem:\n      res=elem\n  return res\n  ", "user": "userdId_23", "attemptID": 1755, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "43.79105", "embeddingY": "-53.376793"},{"extension": "py", "date": "2020-04-07 04:03:01", "correct": "0", "upload": "def elemAri(n,u0,r):\n  cpt=1\n  i=0\n  while i<=n:\n    cpt=u0+r\n  i=i+1\n  return cpt\n  ", "user": "userdId_1", "attemptID": 1756, "exercise": "f239498950e974e29e01472749d9a09d", "exercise_name": "elemAri", "embeddingX": "-7.997356", "embeddingY": "24.42685"},{"extension": "py", "date": "2020-03-05 23:48:24", "correct": "1", "upload": "def moyenne(liste):\n    if len (liste)==0:\n      res=None\n    else:\n      res=0\n      cpt=0\n      for elem in liste:\n        res=res+elem\n        cpt=cpt+1  \n      res=res/cpt\n    return res\n  ", "user": "userdId_9", "attemptID": 1757, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-3.6843507", "embeddingY": "-8.611272"},{"extension": "py", "date": "2020-04-07 23:25:51", "correct": "0", "upload": "def motPalindrome(mot):\n  c=True\n  while i<len(mot)/2 and c:\n    if mot[i]==mot[len(mot)-i]:\n      c=True\n    else:\n      c=False\n  if c==True:\n    return True\n  else:\n    return False\n    \n    \n\n", "user": "userdId_19", "attemptID": 1758, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "-2.6515322", "embeddingY": "41.296406"},{"extension": "py", "date": "2020-03-22 12:04:13", "correct": "0", "upload": "def maximum(liste):\n  res=0\n  for i in range(1,len(liste)): \n    if list[i]>res:\n      res=list[i]\t\n  return res", "user": "userdId_21", "attemptID": 1759, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-4.784063", "embeddingY": "-57.522224"},{"extension": "py", "date": "2020-06-02 21:59:23", "correct": "1", "upload": "def polynome(a,b,c):\n  import math\n  delta=b**2-4*a*c\n  if delta>0:\n    x1=(-b+(math.sqrt(delta)))/2*a\n    x2=(-b-(math.sqrt(delta)))/2*a\n    res=(x1,x2)\n  elif delta==0:\n    x=(-b)/(2*a)\n    res=x\n  else:\n    res='pas de solution'\n  return res", "user": "userdId_12", "attemptID": 1760, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-50.189503", "embeddingY": "9.854574"},{"extension": "py", "date": "2020-03-31 05:43:38", "correct": "0", "upload": "def nbChiffres(nombre):\n  cpt=0\n  while nombre!=0:\n    nombre=nombre//10\n    cpt+=1\n  if nombre==0:\n    cpt=1\n  return cpt", "user": "userdId_13", "attemptID": 1761, "exercise": "3dcf332c003a1f3bf15df22ee17884a3", "exercise_name": "nbChiffres", "embeddingX": "31.854593", "embeddingY": "13.633229"},{"extension": "py", "date": "2020-03-03 05:49:10", "correct": "1", "upload": "def nbVoyelles(mot):\n  cpt=0\n  for i in range(len(mot)):\n    if mot[i] in 'aouiye':\n      cpt=cpt+1\n  return cpt", "user": "userdId_30", "attemptID": 1762, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-24.392002", "embeddingY": "-64.67857"},{"extension": "py", "date": "2020-03-04 00:16:35", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if fin1>=debut2 and debut1<fin2:\n    return True\n  else:\n    return False", "user": "userdId_32", "attemptID": 1763, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "58.183037", "embeddingY": "-25.543861"},{"extension": "py", "date": "2020-03-06 00:29:21", "correct": "0", "upload": "def maximum(liste):\n  res= liste [0]\n  for elem in liste:\n    if  res < elem:\n      res=elem\n  return res", "user": "userdId_20", "attemptID": 1764, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "41.509315", "embeddingY": "-57.84973"},{"extension": "py", "date": "2020-04-05 04:16:06", "correct": "0", "upload": "def moyenne(liste):\n  if len(liste)!=0:\n    s=0\n    for elem in liste:\n      s+=elem\n    res=s//len(liste)\n  else:\n    res=None\n    \n  return res", "user": "userdId_26", "attemptID": 1765, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-7.1464863", "embeddingY": "-15.144852"},{"extension": "py", "date": "2020-03-06 00:38:04", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    voy=0\n  else:\n    voy=0\n    for i in mot:\n      if mot in [\"a\",\"e\",\"i\",\"o\",\"u\",\"y\"]:\n        voy=voy+1\n  return voy", "user": "userdId_13", "attemptID": 1766, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "12.683277", "embeddingY": "-35.902596"},{"extension": "py", "date": "2020-03-14 22:04:25", "correct": "0", "upload": "def maximum(liste):\n    maxi = liste[0]\n    for i in liste:\n      if i >= maxi:\n    \t  maxi = i\n    return maxi", "user": "userdId_21", "attemptID": 1767, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "35.9063", "embeddingY": "-47.52806"},{"extension": "py", "date": "2020-03-24 06:18:31", "correct": "0", "upload": "def fusion(liste1,liste2):\n  res=liste1.append(liste2)\n  res.sorted()\n  return res", "user": "userdId_13", "attemptID": 1768, "exercise": "6613efb6c873b142dc2b6040c14eb616", "exercise_name": "fusion", "embeddingX": "-40.27454", "embeddingY": "-8.8097"},{"extension": "py", "date": "2020-03-23 21:55:00", "correct": "0", "upload": "def quatrePlus100(l):\n  res=[]\n  for i in range (3):\n    if (l[i]>100):\n      res.append(l[i])\n    return res", "user": "userdId_48", "attemptID": 1769, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-8.384198", "embeddingY": "-65.048645"},{"extension": "py", "date": "2020-03-16 05:24:52", "correct": "0", "upload": "def nbSyllabes(mot):\n    cpt=0\n    voyelles='aeiouy'\n    if mot[0] in voyelles:\n        cpt+=1\n    for i in range(1,len(mot)):\n        if mot[i] in voyelles and mot[i-1] not in voyelles:\n            cpt+=1\n    if mot.endswith('e'):\n        cpt-=1\n    if cpt==0:\n        cpt+=1\n    return cpt\n    ", "user": "userdId_18", "attemptID": 1770, "exercise": "1c86bec0f4df503e23db53994f3d2991", "exercise_name": "nbSyllabes", "embeddingX": "-24.062477", "embeddingY": "-71.7151"},{"extension": "py", "date": "2020-03-17 04:49:55", "correct": "0", "upload": "def reconstruireChainePartielle(s,n):\n  res=''\n  for i in range(0,len(s)-1,n):\n    res=res+s[i]\n  return res", "user": "userdId_12", "attemptID": 1771, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-62.155537", "embeddingY": "-41.435997"},{"extension": "py", "date": "2020-03-05 10:42:27", "correct": "0", "upload": "from math import *\n\ndef polynome(a,b,c):\n  d=b**2-4*a*c\n  if d <0:\n    return \"pas de solution\"\n  elif d==0:\n    x1==-b/2*a and x2==-b/2*a\n    return x1 and x2\n  elif d>0:\n    x1==(-b-(sqrt(d)))/2*a\n    x2==(-b+(sqrt(d)))/2*a\n    return x1 and x2\n\n    polynome(1,-1,0)\n    polynome(2,-4,2)\n    polynome(3,-2,10)", "user": "userdId_1", "attemptID": 1772, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-49.370235", "embeddingY": "10.6815815"},{"extension": "py", "date": "2020-03-05 23:51:26", "correct": "1", "upload": "def minimum(liste):\n  if liste==[]:\n    return None\n  else:\n    res=liste[0]\n    for i in range (0,len(liste)):\n      if res>liste[i]:\n        res=liste[i]\n    return res", "user": "userdId_2", "attemptID": 1773, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "-6.6281204", "embeddingY": "-63.998714"},{"extension": "py", "date": "2020-03-12 23:56:08", "correct": "0", "upload": "def jourNuit(heure):\n  afficher=\"\"\n  if heure>24 or heure<0:\n    afficher=\"l'heure saisie est invalide\"\n  else:\n    if 0<=heure<=5 or 5<=heure<=12:\n      afficher=\"on est le matin et il fait nuit\"\n    if 21<=heure<=24 and 0<=heure<=5:\n      afficher=\"on est la nuit et il fait nuit\"\n    if 12<=heure<=17 or 6<=heure<=18:\n      afficher=\"on est l'apres-midi et il fait jour\"\n    if 17<=heure<=21 or 6<=heure<=18:\n      afficher=\"on est le soir et il fait jour\"\n     \n  return afficher", "user": "userdId_38", "attemptID": 1774, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "72.54019", "embeddingY": "23.07148"},{"extension": "py", "date": "2020-03-05 06:45:27", "correct": "0", "upload": "from math import sqrt\ndef polynome(a,b,c):\n  x=0\n  delta=b**2-(4*a*c)\n  if delta>0 :\n    x=((-b)-sqrt(delta))/(2*a),((-b)+sqrt(delta))/(2-a)\n  elif delta==0 :\n    x=(-b)/(2*a)\n  else :\n    x='pas de solution'\n  return x\n\n    \n", "user": "userdId_28", "attemptID": 1775, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-50.141438", "embeddingY": "12.344776"},{"extension": "py", "date": "2020-03-03 00:06:44", "correct": "0", "upload": "def jourNuit(heure):\n  if heure > 24 or heure < 0 :\n    res = (\"l'heure saisie est invalide\")\n  elif heure >= 6 and heure <= 18 :\n    if heure >= 5 and heure < 12 :\n      res = (\"on est le matin et il fait jour\")\n    elif heure > 12 and heure < 17 :\n      res = (\"on est l'apr\u00e8s-midi et il fait jour\")\n    else :\n      res = (\"on est le soir et il fait jour\")\n  else :\n    if heure >= 5 and heure < 12 :\n      res = (\"on est le matin et il fait nuit\")\n    elif heure > 12 and heure < 17 :\n      res = (\"on est l'apr\u00e8s-midi et il fait nuit\")\n    elif heure > 17 and heure < 21 :\n      res = (\"on est le soir et il fait nuit\")\n    else :\n      res = (\"on est la nuit et il fait nuit\")\n  return res", "user": "userdId_17", "attemptID": 1776, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "75.68306", "embeddingY": "21.659807"},{"extension": "py", "date": "2020-03-22 23:34:11", "correct": "1", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1>annee2:\n    res=1\n  elif annee1<annee2:\n    res=-1\n  elif mois1>mois2:\n    res=1\n  elif mois1<mois2:\n    res=-1\n  elif jour1>jour2:\n    res=1\n  elif jour1<jour2:\n    res=-1\n  else:\n    res=0\n  return res", "user": "userdId_8", "attemptID": 1777, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "82.16565", "embeddingY": "-32.473476"},{"extension": "py", "date": "2020-03-24 04:25:41", "correct": "0", "upload": "def compare(chaine1,chaine2):\n  res=0\n  cpt=0\n  i=0\n  while i<len(chaine1) and i<len(chaine2) and cpt!=2:\n    if chaine1[i]>chaine2[i]:\n      res=1\n      cpt=cpt+1\n    elif chaine1[i]<chaine2[i]:\n      res=-1\n      cpt=cpt+1\n    i=i+1\n    if res==0:\n      if len(chaine1)>len(chaine2):\n        res=-1\n      else:\n        res=1\n  return res", "user": "userdId_27", "attemptID": 1778, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-29.608526", "embeddingY": "66.253525"},{"extension": "py", "date": "2020-03-02 23:42:18", "correct": "1", "upload": "from math import sqrt\ndef polynome(a, b, c):\n    Delta = (b ** 2) - (4 * a * c)\n    if Delta < 0:\n        return (\"pas de solution\")\n    else:\n        if Delta == 0:\n            sol = -b / (2 * a)\n            return (sol)\n        else:\n            sol1 = (-b - sqrt(Delta)) / 2 * a\n            sol2 = (-b + sqrt(Delta)) / 2 * a\n            return (sol2, sol1)", "user": "userdId_42", "attemptID": 1779, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-52.483322", "embeddingY": "3.9048996"},{"extension": "py", "date": "2020-03-12 23:41:33", "correct": "0", "upload": "def jourNuit(heure):\n  Error=\"l'heure saisie est invalide\"\n  Time=\"on est\"\n  if heure<0 or heure>24:\n    res=Error\n  elif heure>=5 and heure<12:\n    res=Time+' le matin'\n    if heure>=6 and heure<=18:\n      res=res+' et il fait jour'\n    else:\n      res=res+' et il fait nuit'\n  elif heure>=12 and heure<17:\n    res=Time+\" l'apr\u00e8s-midi et il fait jour\"\n  elif heure>=17 and heure<21:\n    res=Time+' le soir'\n    if heure>=6 and heure<=18:\n      res=res+' et il fait jour'\n    else:\n      res=res+' et il fait nuit'\n  else:\n    res=Time+' la nuit et il fait nuit'\n  return res\n    \n  \n    ", "user": "userdId_2", "attemptID": 1780, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "80.80629", "embeddingY": "15.269534"},{"extension": "py", "date": "2020-04-12 06:44:12", "correct": "0", "upload": "def phrasePalindrome(phrase):\n    if len(phrase)==0:\n      res=True\n    else:\n      res=True\n      i=0\n      while i<len(phrase)//2 and res:\n        if phrase[i]!=phrase[-(i+1)]:\n          res=False\n          if phrase[i]=='':\n            res=True\n        i+=1\n    return res", "user": "userdId_11", "attemptID": 1781, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "27.725924", "embeddingY": "36.103264"},{"extension": "py", "date": "2020-03-27 05:51:07", "correct": "1", "upload": "def quatrePlus100(liste):\n  res=[]\n  i=0\n  while i<len(liste) and len(res)<4 :\n    if liste[i]>100 :\n      res.append(liste[i])\n    i=i+1\n  return res", "user": "userdId_15", "attemptID": 1782, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-26.002457", "embeddingY": "40.90365"},{"extension": "py", "date": "2020-03-09 21:57:37", "correct": "1", "upload": "def sommeNbPairs(liste):\n  res = 0;\n  for i in liste:\n    if (i%2==0):\n      res+=i\n  return res", "user": "userdId_6", "attemptID": 1783, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "32.891666", "embeddingY": "-19.433834"},{"extension": "py", "date": "2020-03-13 00:30:55", "correct": "1", "upload": "def sommeNPremiersEntiers(n):\n  if n <= 0:\n    return 0\n  else:\n    sum = 0\n    for i in range(1,n+1):\n      sum += i\n    return sum", "user": "userdId_42", "attemptID": 1784, "exercise": "c315a540cf0bfb0182dc114c6f0eafd1", "exercise_name": "sommeNPremiersEntiers", "embeddingX": "-18.831083", "embeddingY": "16.199871"},{"extension": "py", "date": "2020-03-06 00:15:55", "correct": "0", "upload": "def maximum(liste):\n  res=liste[0]\n  for elem in liste:\n    if res<elem:\n      res=elem\n  return res", "user": "userdId_23", "attemptID": 1785, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "41.837444", "embeddingY": "-58.18579"},{"extension": "py", "date": "2020-03-20 00:48:46", "correct": "0", "upload": "def permutationListe(liste,permutation):\n    res = [0]*len(liste)\n    for i in range (len(liste)) :\n      for elem in permutation :\n        if elem == i :\n          res[elem]=liste[i]\n    return res", "user": "userdId_17", "attemptID": 1786, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-27.11026", "embeddingY": "-33.44023"},{"extension": "py", "date": "2020-03-12 08:37:23", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    return 0\n  cpt=0\n  for lettre in mot:\n    if lettre in mot=='aeiouy':\n      cpt=cpt+1\n  return cpt\n  ", "user": "userdId_1", "attemptID": 1787, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "7.524189", "embeddingY": "-32.030827"},{"extension": "py", "date": "2020-03-27 05:27:20", "correct": "0", "upload": "def quatrePremierSuperieurACent(liste):\n  i=0\n  res=[0]*len(liste)\n  while i<4:\n    if liste[i]>100:\n      res.append(liste[i])\n    i=i+1\n  return res", "user": "userdId_12", "attemptID": 1788, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-27.108566", "embeddingY": "35.339867"},{"extension": "py", "date": "2020-04-07 07:16:26", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=True\n  i=1\n  while i<len(liste):\n    if liste[i]!=a*liste[i-1]+b:\n      res=False\n    i+=1\n  return res\ndef suiteAriGeo(liste):\n  i=1\n  res=True\n  if len(liste)>3:\n    ecart1=liste[1]-liste[0]\n    ecart2=liste[2]-liste[1]\n    if ecart1>0:\n      a=ecart2/ecart1\n      b=liste[1]-a*liste[0]\n    while i<len(liste):\n      if verifSuiteAriGeo(liste,a,b)!=True:\n        res=False\n      i+=1 \n  return res", "user": "userdId_27", "attemptID": 1789, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "16.196743", "embeddingY": "76.98453"},{"extension": "py", "date": "2020-04-12 07:02:45", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  if liste==[]:\n    res=True\n  c=[]\n  res=False\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n    c=[liste[0]]/range(len(liste)-1)+c\n  return c", "user": "userdId_8", "attemptID": 1790, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-72.23107", "embeddingY": "31.052225"},{"extension": "py", "date": "2020-03-06 00:16:42", "correct": "0", "upload": "def maximum(liste):\n  res=0\n  for i in range(len(liste)):\n      res=res+liste[i]\n  return res", "user": "userdId_41", "attemptID": 1791, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-45.75566", "embeddingY": "-36.038185"},{"extension": "py", "date": "2020-03-20 00:00:57", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  res=\"\"\n  fin=debut+longueur\n  if fin>len(s):\n    fin=len(s)\n  for i in range(debut,fin):\n    res=res+s[i]\n  return None", "user": "userdId_20", "attemptID": 1792, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-71.01592", "embeddingY": "11.150282"},{"extension": "py", "date": "2020-03-24 04:18:12", "correct": "0", "upload": "def compare(chaine1,chaine2):\n  res=0\n  i=0\n  while i<len(chaine1) and i<len(chaine2) and res==0:\n    if chaine1[i]>chaine2[i]:\n      res=-1\n    elif chaine1[i]<chaine2[i]:\n      res=1\n    i=i+1\n    return res\n  ", "user": "userdId_21", "attemptID": 1793, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-23.471289", "embeddingY": "60.29445"},{"extension": "py", "date": "2020-05-04 22:45:56", "correct": "0", "upload": "def prononcable(mot):\n  res=True\n  cpt=0\n  i=0\n  while i<len(mot) and res:\n    if mot[i] not in 'aeiouy':\n      cpt+=1\n    elif mot[i] in 'aeiouy':\n      cpt=0\n    if cpt>=3:\n      res=False\n    i+=1\n  return res", "user": "userdId_26", "attemptID": 1794, "exercise": "6318b210c201fba050d60bc0913cb7ef", "exercise_name": "prononcable", "embeddingX": "-4.891637", "embeddingY": "45.297394"},{"extension": "py", "date": "2020-03-06 00:10:15", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    return None\n  cpt=0\n  for elem in mot=={a,e,i,o,u,y}:\n    cpt=cpt+1\n  return cpt", "user": "userdId_1", "attemptID": 1795, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "4.9276733", "embeddingY": "-44.614853"},{"extension": "py", "date": "2020-03-06 00:36:05", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0 :\n    res=0\n  else:\n    for elem in mot :\n      res=len(mot)\n    return res", "user": "userdId_24", "attemptID": 1796, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "6.4770403", "embeddingY": "-38.428703"},{"extension": "py", "date": "2020-03-19 05:26:10", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1<annee2:\n    res=-1\n    if jour1==jour2 and mois1==mois2 and annee1==annee2:\n      res=1\n  else:\n    res=0\n  return res", "user": "userdId_34", "attemptID": 1797, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "78.78058", "embeddingY": "-24.47036"},{"extension": "py", "date": "2020-03-24 06:12:47", "correct": "1", "upload": "def compare(chaine1,chaine2):\n  res=0\n  i=0\n  while i<len(chaine1) and i<len(chaine2) and res==0:\n    if chaine1[i]<chaine2[i]:\n      res=-1\n    elif chaine1[i]>chaine2[i]:\n      res=1\n    i+=1\n  if res==0:\n    if len(chaine1)<len(chaine2):\n      res=-1\n    elif len(chaine1)>len(chaine2):\n      res=1\n  return res", "user": "userdId_9", "attemptID": 1798, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-20.142305", "embeddingY": "65.123276"},{"extension": "py", "date": "2020-04-08 00:34:54", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  res=[]\n  cpt=0\n  if nombre==0:\n    res.append(0)\n  while nombre!=0:\n    res.append(nombre%10)\n    nombre=nombre//10\n    if nombre==chiffre:\n      cpt=cpt+1\n  return cpt", "user": "userdId_14", "attemptID": 1799, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "16.938015", "embeddingY": "11.757922"},{"extension": "py", "date": "2020-03-09 21:50:43", "correct": "0", "upload": "def jourNuit(heure):\n   if heure > 24 : \n      res = \"l'heure saisie est invalide\" \n      \n   return res\n    \njourNuit(28) ", "user": "userdId_44", "attemptID": 1800, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "65.28412", "embeddingY": "17.191912"},{"extension": "py", "date": "2020-03-23 01:03:15", "correct": "0", "upload": "def prononcable(mot):\n  if mot=='':\n    res=True\n  else:\n    res=True\n    aux=''\n    for c in mot:\n      if c==aux:\n        res=False\n      aux=c\n  return res", "user": "userdId_27", "attemptID": 1801, "exercise": "6318b210c201fba050d60bc0913cb7ef", "exercise_name": "prononcable", "embeddingX": "17.37189", "embeddingY": "-5.4805393"},{"extension": "py", "date": "2020-04-12 04:10:09", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=[]\n  for elem in liste:\n    res+=a*elem+b\n  return res", "user": "userdId_8", "attemptID": 1802, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-78.87342", "embeddingY": "17.00413"},{"extension": "py", "date": "2020-03-05 07:07:57", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut1==debut2:\n    res=True\n  else:\n    for debut1 in range(fin2):\n        res=True\n     \n      \n  return res\n  ", "user": "userdId_5", "attemptID": 1803, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "64.66125", "embeddingY": "-30.747612"},{"extension": "py", "date": "2020-03-31 04:30:04", "correct": "1", "upload": "def indiceOccurrence(n,x,l):\n  cpt=0\n  i=0\n  res=None\n  while i<len(l) and cpt<n:\n    if l[i]==x:\n      cpt=cpt+1\n    if cpt==n:\n      res=i\n    i=i+1\n  return res", "user": "userdId_12", "attemptID": 1804, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-6.0332904", "embeddingY": "77.12575"},{"extension": "py", "date": "2020-03-31 03:24:45", "correct": "0", "upload": "def fusion(liste1,liste2):\n  res=[]\n  i=0\n  j=0\n  while i<len(liste1) and j<len(liste2):\n    if liste1[i]<liste2[j]:\n      res.append(liste1[i])\n      i=i+1\n    else:\n      res.append(liste2[j])\n      j=j+1\n  if len(liste1)!=len(liste2):\n    while i<len(liste1):\n      res.append(liste1[i])\n      i=i+1\n    while j<len(liste2):\n      res.append(liste2[j])\n      j=j+1\n  return res", "user": "userdId_12", "attemptID": 1805, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-38.94537", "embeddingY": "49.22653"},{"extension": "py", "date": "2020-04-11 08:05:48", "correct": "0", "upload": "def elemAri(n,u0,r):\n  res=0\n  u0+n*r\n  return res", "user": "userdId_8", "attemptID": 1806, "exercise": "f239498950e974e29e01472749d9a09d", "exercise_name": "elemAri", "embeddingX": "-34.438816", "embeddingY": "18.587343"},{"extension": "py", "date": "2020-04-05 08:24:50", "correct": "0", "upload": "def plusLongueSuite(liste):\n    if liste==[]:\n      res=0\n    else:\n      cpt=1\n      cptMax=1\n      prec=liste[0]\n      for i in range(1,len(liste)):\n        if prec==liste[i]:\n          cpt+=1\n          if cpt>cptMax:\n            cptMax=cpt\n        else:\n          cpt=0\n        prec=liste[i]\n    return cpt\n      ", "user": "userdId_18", "attemptID": 1807, "exercise": "deed004abb317b11778f7e8247197a40", "exercise_name": "plusLongueSuite", "embeddingX": "-3.1884556", "embeddingY": "-78.97633"},{"extension": "py", "date": "2020-03-21 06:02:02", "correct": "0", "upload": "def sommeNbPairs(liste):\n  res=0\n  for i in range(len(liste)):\n    if x%2!=0:\n      res=res+liste[i]\n  return res", "user": "userdId_9", "attemptID": 1808, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "-5.186384", "embeddingY": "-42.783653"},{"extension": "py", "date": "2020-03-12 23:44:33", "correct": "0", "upload": "def jourNuit(heure):\n  \"\"\"\n  cette fonction a pour objectif d'indiquer dans quelle partie de la journ\u00e9e on est et s'il fait jour ou nuit\n  param\u00e8tre: \n    heure : de type int repr\u00e9sente l'heure\n  r\u00e9sultat:un int qui indique dans quelle partie de la journ\u00e9e on est et s'il fait jour ou nuit\n  \"\"\"\n  if heure>24 or heure<0:\n    res=\"l'heure saisie est invalide\"\n  else:\n    if heure>=5 and heure<12:\n      res=\"on est le matin\"\n    if heure>=12 and heure<17:\n      res=\"on est l'apr\u00e8s-midi\"\n    if heure>=17 and heure<21:\n      res=\"on est la soir\u00e9e\"\n    else:\n      res=\"on est la nuit\"\n    if heure>=6 and heure<18:\n      res=res+\" et il fait jour\"\n    else: \n      res=res+\" et il fait nuit\"\n  return res\n\n  #test de la fonction jourNuit\n  assert jourNuit(9)==\"on est le matin et il fait jour\"\n  assert jourNuit(15)==\"on est l'apr\u00e8s-midi et il fait jour\"\n  assert jourNuit(29)==\"l'heure saisie est invalide\"", "user": "userdId_12", "attemptID": 1809, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "76.9762", "embeddingY": "20.811913"},{"extension": "py", "date": "2020-03-06 23:22:43", "correct": "0", "upload": "def prononcable(mot):\n    res = True\n    liste_voyelles = [\"a\",\"e\",\"i\",\"o\",\"u\",\"y\"]\n    nb_ = 0\n    last = \"\"\n    for lettre in range(mot):\n        if lettre.lower() in liste_voyelles:\n            if last == \"syl\":\n        \t    nb = 0\n            last = \"voy\"\n            nb += 1\n        else:\n            if last == \"voy\":\n        \t    nb = 0\n            last = \"syl\"\n            nb += 1\n\n        if nb_ == 3:\n            res = False\n    return res\n        \n          \n    ", "user": "userdId_4", "attemptID": 1810, "exercise": "6318b210c201fba050d60bc0913cb7ef", "exercise_name": "prononcable", "embeddingX": "-37.16243", "embeddingY": "-22.49715"},{"extension": "py", "date": "2020-03-12 23:41:45", "correct": "0", "upload": "def jourNuit(heure):\n  if heure > 24 or heure < 0 :\n    res = \"l'heure saisie est invalide\"\n  else :\n    if heure < 5 :\n      res = \"on est la nuit \"\n    elif heure < 12 :\n      res = \"on est le matin \"\n    elif heure < 17 :\n      res = \"on est l'apr\u00e8s midi \"\n    else :\n      res = \"on est la nuit \"\n    if heure >= 6 and heure < 18 :\n      res = res + \"et il fait jour\"\n    else :\n      res = res + \"et il fait nuit\"\n  return res", "user": "userdId_17", "attemptID": 1811, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "79.15745", "embeddingY": "20.041222"},{"extension": "py", "date": "2020-04-05 10:47:37", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n    res = True\n    if len(liste) < 0:\n        liste2 = [liste[0]] + [liste[nb-1]*a+b for nb in range(1,len(liste))]    \n        res = liste == liste2\n    return res", "user": "userdId_4", "attemptID": 1812, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-73.492645", "embeddingY": "23.200304"},{"extension": "py", "date": "2020-03-05 23:47:21", "correct": "0", "upload": "def moyenne(liste):\n    if len (liste)==0:\n      res=None\n    else:\n      res=0\n      cpt=0\n      for elem in liste:\n        res=res+elem\n        cpt=cpt+1\n        res=res/cpt\n    return res\n  ", "user": "userdId_9", "attemptID": 1813, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-3.0063963", "embeddingY": "-8.983757"},{"extension": "py", "date": "2020-04-06 03:43:03", "correct": "1", "upload": "def motPalindrome(mot):\n  ok=True\n  i=0\n  while i<len(mot)//2 and ok:\n    if mot[i]!=mot[-1-i]:\n      ok=False\n    i+=1\n  return ok\n", "user": "userdId_6", "attemptID": 1814, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "24.289528", "embeddingY": "37.11764"},{"extension": "py", "date": "2020-03-23 00:51:34", "correct": "0", "upload": "def sommeNPremiersEntiers(n):\n    if n<0:\n      res=0\n    else:\n      res=0\n      for x in range(n):\n        res=res+x\n    return res", "user": "userdId_11", "attemptID": 1815, "exercise": "c315a540cf0bfb0182dc114c6f0eafd1", "exercise_name": "sommeNPremiersEntiers", "embeddingX": "-15.866738", "embeddingY": "11.316625"},{"extension": "py", "date": "2020-04-12 06:38:43", "correct": "0", "upload": "def phrasePalindrome(phrase):\n    if len(phrase)==0:\n      res=True\n    else:\n      res=True\n      i=0\n      while i<len(phrase)//2 and res:\n        if phrase[i]!=phrase[-(i+1)]:\n          res=False\n        i+=1\n    return res", "user": "userdId_11", "attemptID": 1816, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "25.531754", "embeddingY": "36.285034"},{"extension": "py", "date": "2020-04-07 04:06:48", "correct": "0", "upload": "def motPalindrome(mot):\n  i=0\n  trouve=False\n  res=True\n  while i<len(mot)/2 and not trouve:\n    if mot[i]==mot[-i-1]:\n      i+=1\n      trouve=True\n  if trouve: \n    res=True\n  return res", "user": "userdId_16", "attemptID": 1817, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "28.138525", "embeddingY": "47.43313"},{"extension": "py", "date": "2020-04-03 00:16:01", "correct": "1", "upload": "def nbChiffres(nombre):\n  cpt=0\n  if nombre==0:\n    cpt=1\n  else:\n    while nombre>=1:\n      nombre=nombre//10\n      cpt=cpt+1\n  return cpt", "user": "userdId_14", "attemptID": 1818, "exercise": "3dcf332c003a1f3bf15df22ee17884a3", "exercise_name": "nbChiffres", "embeddingX": "31.63451", "embeddingY": "9.935082"},{"extension": "py", "date": "2020-04-14 04:28:04", "correct": "0", "upload": "def indiceInsertion(sc,scores):\n  i=0\n  while i<len(scores):\n    if sc>=scores[i]:\n      return i\n    i=i+1\n  return 0", "user": "userdId_7", "attemptID": 1819, "exercise": "f8a820b2bd54d18d36716e3d703858f7", "exercise_name": "indiceInsertion", "embeddingX": "-17.16692", "embeddingY": "61.97599"},{"extension": "py", "date": "2020-04-12 05:45:51", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=False\n  c=[]\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n    \n  return c", "user": "userdId_8", "attemptID": 1820, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-71.38657", "embeddingY": "10.332514"},{"extension": "py", "date": "2020-03-21 06:02:30", "correct": "0", "upload": "def sommeNbPairs(liste):\n  res=0\n  for i in range(len(liste)):\n    if liste[i]%2!=0:\n      res=res+liste[i]\n  return res", "user": "userdId_9", "attemptID": 1821, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "-23.816729", "embeddingY": "-57.72474"},{"extension": "py", "date": "2020-03-12 06:30:45", "correct": "0", "upload": "def somme(liste):\n  res=0\n  for i in liste(l):\n    res=res+i\n  return res\n", "user": "userdId_20", "attemptID": 1822, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-31.204967", "embeddingY": "-15.031566"},{"extension": "py", "date": "2020-03-31 06:42:12", "correct": "0", "upload": "def doubleChiffre(nombre):\n  res=False\n  com1=None\n  while nombre!=0 and not res:\n    chiffre=nombre%10\n    nombre=nombre//10\n    if chiffre==com1:\n      res=True\n    com1=chiffre\n  return res", "user": "userdId_13", "attemptID": 1823, "exercise": "49a87f644f84a443327fb4315b47f249", "exercise_name": "stockerChiffres", "embeddingX": "9.695089", "embeddingY": "20.792868"},{"extension": "py", "date": "2020-04-11 00:27:15", "correct": "1", "upload": "def suiteAri(liste):\n  i=0\n  c=True\n  while i<(len(liste)-2) and c:\n    if liste[i+2]-liste[i+1]!=liste[i+1]-liste[i]:\n      c=False\n    i=i+1\n  return c", "user": "userdId_19", "attemptID": 1824, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "19.712463", "embeddingY": "51.49465"},{"extension": "py", "date": "2020-04-06 06:19:11", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  i=0\n  while i<len(nombre):\n    if chiffre==nombre[i]:\n      cpt=cpt+1\n    i=i+1\n  return cpt", "user": "userdId_3", "attemptID": 1825, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-14.711681", "embeddingY": "44.22624"},{"extension": "py", "date": "2020-04-09 02:47:00", "correct": "0", "upload": "def suiteAriGeo(liste):\n  ok=True\n  i=0\n  R=0\n  Q=0\n  if len(liste)<=2 :\n    ok=True\n  else :\n    for elem in (liste) :\n      if liste[0]==0 :\n        Q=1\n      elif (liste[i+1]-liste[i])==(liste[i+2]-liste[i+1]) :\n        Q=1\n        R=(liste[1]-liste[0])\n      elif (liste[i+1]/liste[i])==(liste[i+2]/liste[i+1]) :\n        Q=(liste[1]/liste[0])\n        R=0\n      \n    while i<(len(liste)-1) and ok :\n      if liste[i+1]!=Q*liste[i]+R :\n        ok=False\n      i+=1\n  return ok", "user": "userdId_15", "attemptID": 1826, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "43.627518", "embeddingY": "55.62468"},{"extension": "py", "date": "2020-03-10 02:51:54", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n  if mot=='':\n    cpt=none\n  else:\n    cpt=-1\n    for i in range(len(mot)):\n      if mot[i]!=lettre:\n        cpt=cpt+1\n        return cpt\n  ", "user": "userdId_15", "attemptID": 1827, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-22.322361", "embeddingY": "-44.800255"},{"extension": "py", "date": "2020-03-03 05:23:44", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    for i in len(liste):\n      if res<liste[i]:\n        res=liste[i]\n  return res", "user": "userdId_8", "attemptID": 1828, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "3.2535257", "embeddingY": "-45.01875"},{"extension": "py", "date": "2020-04-11 07:27:28", "correct": "0", "upload": "def sousChaine(s1,s2):\n  res=True\n  i=0\n  j=0\n  while i<len(s1)==j<len(s2) and res:\n    res=True\n  else:\n    res=False\n  return res", "user": "userdId_8", "attemptID": 1829, "exercise": "4bdf8c9c5d020593e1771e4d3ae1ae0d", "exercise_name": "sousChaine", "embeddingX": "-4.566907", "embeddingY": "49.088642"},{"extension": "py", "date": "2020-03-06 00:28:01", "correct": "0", "upload": "def ecart(liste):\n    if liste==[]:\n      return None\n    elif len(liste)==1:\n      return 0\n    else:\n      res=liste[0]\n      min=0\n      for i in range(0,len(liste)):\n        if res<liste[i]:\n          min=liste[i]\n      max=0\n      for i in range(0,len(liste)):\n        if res>liste[i]:\n          max=liste[i]\n      ecart=max-min\n      return ecart\n          \n      \n      \n      ", "user": "userdId_2", "attemptID": 1830, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "10.248032", "embeddingY": "-84.6196"},{"extension": "py", "date": "2020-03-06 00:00:05", "correct": "0", "upload": "def nbVoyelles(mot):\n  cpt=0\n  if elem in liste =={a,e,i,o,u,y}:\n    cpt=cpt+1\n  return cpt", "user": "userdId_1", "attemptID": 1831, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "7.5671835", "embeddingY": "-15.699214"},{"extension": "py", "date": "2020-03-20 00:09:15", "correct": "0", "upload": "def permutationChaine(s):\n  res=''\n  for i in range(len(s)-1):\n    res=res+s[i+1]\n    res=res+s[i]\n  return res\n", "user": "userdId_40", "attemptID": 1832, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-44.855873", "embeddingY": "-50.190178"},{"extension": "py", "date": "2020-03-27 05:37:47", "correct": "0", "upload": "def quatrePlus100(liste):\n  i=0\n  res=[]\n  while i<len(l) and i<=4:\n    if l[i]>100:\n      res=res+l[i]\n    i=i+1\n  return res", "user": "userdId_1", "attemptID": 1833, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-30.010998", "embeddingY": "40.31494"},{"extension": "py", "date": "2020-04-12 06:54:46", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  if liste==[]:\n    res=True\n  c=[]\n  res=False\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n  return c\n  e=[liste[0]]+c\n  return e", "user": "userdId_8", "attemptID": 1834, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-80.79529", "embeddingY": "11.395119"},{"extension": "py", "date": "2020-04-16 08:46:46", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n  prec=0\n  res=0\n  i=0\n  while i<len(l) and prec<n:\n    if l[i]==x:\n      prec=prec+1\n    i=i+1\n    if prec==n:\n      return i\n    if prec<n:\n      return None", "user": "userdId_28", "attemptID": 1835, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-5.7307005", "embeddingY": "76.67312"},{"extension": "py", "date": "2020-03-17 08:52:37", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2): \n    if jour1>jour2 and mois1>mois2 and annee1>annee2 :\n      res=1\n    else :\n      res=-1\n    if jour1==jour2 and mois1==mois2 and annee1==annee2 :\n      res=0        \n    return res", "user": "userdId_24", "attemptID": 1836, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "81.98281", "embeddingY": "-24.966448"},{"extension": "py", "date": "2020-03-31 06:07:17", "correct": "0", "upload": "def nbChiffres(nombre):\n  cpt=0\n  while nombre!=0:\n    nombre//=10\n    cpt+=1\n  if cpt==0:\n    cpt=1\n  return res", "user": "userdId_18", "attemptID": 1837, "exercise": "3dcf332c003a1f3bf15df22ee17884a3", "exercise_name": "nbChiffres", "embeddingX": "31.038187", "embeddingY": "15.915544"},{"extension": "py", "date": "2020-03-19 23:39:10", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  res=''\n  if debut<len(s) or debut>len(s):\n    res=''\n  elif (debut+longueur)>len(s):\n    for i in range(debut,len(s)-debut):\n      res=res+s[i]\n  return res\n    ", "user": "userdId_40", "attemptID": 1838, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-76.3581", "embeddingY": "19.771381"},{"extension": "py", "date": "2020-04-07 11:07:25", "correct": "0", "upload": "def suiteGeo(liste):\n  ok=True\n  i=0\n  if len(liste)==0 and len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i]!=0:\n      q=liste[1]/liste[0] \n    if liste[i+1]/liste[i]!=q and liste[i]!=0:\n        ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 1839, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "27.749937", "embeddingY": "61.17165"},{"extension": "py", "date": "2020-03-31 06:47:34", "correct": "1", "upload": "def stockerChiffres(nombre):\n  res=[]\n  cpt=0\n  while nombre!=0:\n    res.append(nombre%10)\n    nombre=nombre//10\n    cpt+=1\n  if cpt==0:\n    res.append(0)\n  return res\ndef listeSymetrique(l):\n  trouve=True\n  i=0\n  j=len(l)-1\n  while i<len(l) and j<len(l) and trouve:\n    if l[i]!=l[j]:\n      trouve=False\n    i+=1\n    j-=1\n  return trouve\ndef nombreSymetrique(nombre):\n  res=stockerChiffres(nombre)\n  trouve=listeSymetrique(res)\n  return trouve", "user": "userdId_27", "attemptID": 1840, "exercise": "fae4d6a34289cf5bf06f9d6d17e8547e", "exercise_name": "nombreSymetrique", "embeddingX": "40.40985", "embeddingY": "47.058346"},{"extension": "py", "date": "2020-03-04 10:30:01", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut2<=fin1 and fin2>=debut1 :\n    res='true'\n  else :\n    res='false'\n    \n  \n\n    \n    ", "user": "userdId_28", "attemptID": 1841, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "51.476246", "embeddingY": "-25.767963"},{"extension": "py", "date": "2020-04-02 23:59:38", "correct": "0", "upload": "def nombreSymetrique (nombre):\n  liste = stockerChiffres(nombre)\n  res = listeSymetrique(liste)\n  return res", "user": "userdId_17", "attemptID": 1842, "exercise": "fae4d6a34289cf5bf06f9d6d17e8547e", "exercise_name": "nombreSymetrique", "embeddingX": "-43.211815", "embeddingY": "16.156593"},{"extension": "py", "date": "2020-04-12 04:00:06", "correct": "1", "upload": "def elemGeo(n,u0,q):\n  res=u0*q**n\n  return res", "user": "userdId_8", "attemptID": 1843, "exercise": "d7c83a7fb9b49e28804e55955ad06968", "exercise_name": "elemGeo", "embeddingX": "-39.08501", "embeddingY": "17.71549"},{"extension": "py", "date": "2020-03-22 12:00:45", "correct": "0", "upload": "def maximum(liste):\n  res=0\n  for x in liste: \n    if x>res:\n      res=x\n  return res", "user": "userdId_21", "attemptID": 1844, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "31.468845", "embeddingY": "-42.836662"},{"extension": "py", "date": "2020-03-31 07:41:23", "correct": "0", "upload": "def moyenne(liste):\n    if len(liste)==0:\n      res=None\n    else:\n      res=0\n      cpt=0\n      for elem in liste:\n        res=res+elem\n        cpt=cpt+1\n    return res/cpt\n  ", "user": "userdId_11", "attemptID": 1845, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-3.7183926", "embeddingY": "-9.584112"},{"extension": "py", "date": "2020-04-08 01:23:27", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  end=False\n  res=True\n  while i<len(liste)-1 and res==True and end==False:\n    if liste[i]==0:\n      res=False\n    elif len(liste)==1 and liste[i]>=1:\n      end=True\n      res=True\n    else:\n      q=liste[1]/liste[0]\n      if liste[i+1]/liste[i]==q:\n        res=True\n      else:\n        res=False\n    i+=1\n  return res", "user": "userdId_26", "attemptID": 1846, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "38.639893", "embeddingY": "57.64751"},{"extension": "py", "date": "2020-03-22 09:04:11", "correct": "0", "upload": "def moyenne(liste):\n  if liste==():\n    res=none\n  else:\n    res=0\n    for i in range (len(liste)):\n      x=res+liste[i]\n      res=x/len(liste)\n  return res", "user": "userdId_16", "attemptID": 1847, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-12.322238", "embeddingY": "-6.2967405"},{"extension": "py", "date": "2020-03-23 00:52:54", "correct": "0", "upload": "def maximum(liste):\n    res=liste[0]\n    if res<liste[i]:\n      res=liste[i]\n    return res", "user": "userdId_24", "attemptID": 1848, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "37.5488", "embeddingY": "-61.27841"},{"extension": "py", "date": "2020-03-13 00:51:49", "correct": "0", "upload": "def sommeNPremiersEntiers(n):\n  if n<0:\n    return 0\n  else:\n    res=0\n  for elem in n:\n    res=res+elem\n  return res\n      \n    ", "user": "userdId_1", "attemptID": 1849, "exercise": "c315a540cf0bfb0182dc114c6f0eafd1", "exercise_name": "sommeNPremiersEntiers", "embeddingX": "40.587227", "embeddingY": "-52.80371"},{"extension": "py", "date": "2020-03-03 06:15:17", "correct": "1", "upload": "def polynome(a,b,c):\n  res= 0\n  delta= b**2-4*a*c\n  if delta > 0:\n    res= ((-b+delta**(1/2))/2*a, (-b-delta**(1/2))/2*a)\n  elif delta==0:\n    res= -b/(2*a)\n  else:\n    res= 'pas de solution'\n  return res", "user": "userdId_7", "attemptID": 1850, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-53.449768", "embeddingY": "6.8155766"},{"extension": "py", "date": "2020-03-06 00:26:20", "correct": "0", "upload": "def maximum(liste):\n  res=liste([0])\n  for elem in liste:\n     if res<elem:\n        res=elem\n  return res", "user": "userdId_23", "attemptID": 1851, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-48.530853", "embeddingY": "-0.688696"},{"extension": "py", "date": "2020-04-05 22:55:44", "correct": "1", "upload": "def motPalindrome(mot):\n  ok=True\n  i=0\n  j=len(mot)-1\n  while i<j and ok :\n    if mot[i]!=mot[j] :\n      ok=False\n    i+=1\n    j-=1\n  return ok", "user": "userdId_15", "attemptID": 1852, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "36.363937", "embeddingY": "46.689064"},{"extension": "py", "date": "2020-03-03 05:29:15", "correct": "1", "upload": "def nbVoyelles(mot):\n  res=0\n  for elem in mot:\n    if elem in 'aeiouy':\n      res= res+1\n  return res", "user": "userdId_7", "attemptID": 1853, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "15.966222", "embeddingY": "-24.781158"},{"extension": "py", "date": "2020-04-10 01:05:28", "correct": "0", "upload": "def suiteAriGeo(liste):\n  i=0\n  while i<len(liste)-1:\n    if liste[0]!=0:\n      a=liste[1]/liste[0]\n      b=liste[i+1]-liste[i]*a\n    if liste[0]!=0:\n      a=liste[1]/liste[0]\n      if liste[i+1]==liste[i]*a:\n          b=0\n    b=liste[1]-liste[0]\n    if liste[i+1]==liste[i]+b:\n      a=1\n    i=i+1\n  i=0\n  ok=True\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=a*liste[i]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 1854, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "35.245953", "embeddingY": "83.31724"},{"extension": "py", "date": "2020-03-05 21:36:23", "correct": "1", "upload": "def somme(liste):\n   res=0\n   for i in range(len(liste)):\n      res=res+liste[i]\n   return res", "user": "userdId_48", "attemptID": 1855, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-44.157764", "embeddingY": "-37.222347"},{"extension": "py", "date": "2020-04-06 03:44:20", "correct": "1", "upload": "def elemGeo(n,u0,q):\n  return u0*q**n", "user": "userdId_6", "attemptID": 1856, "exercise": "d7c83a7fb9b49e28804e55955ad06968", "exercise_name": "elemGeo", "embeddingX": "-39.863213", "embeddingY": "19.771273"},{"extension": "py", "date": "2020-04-08 02:45:15", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  res=True\n  while i<len(liste) and res==True:\n    if liste[i]!=0 and len(liste)>=2:\n      listetest=[liste[0]]\n      q=liste[1]/liste[0]\n      u=liste[0]*q**i\n      listetest=listetest+u\n      if liste[i]==listetest[i]:\n        res=True\n      else:\n        res=False\n    else:\n      res=False\n    \n  return res", "user": "userdId_26", "attemptID": 1857, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "35.249363", "embeddingY": "69.05615"},{"extension": "py", "date": "2020-03-10 09:41:42", "correct": "0", "upload": "def nbVoyelles(mot):\n  if mot==0:\n    res=None\n  else:\n    for mot in 'a,e,i,o,u,y':\n      res=res+1\n  \n     \n  return res", "user": "userdId_5", "attemptID": 1858, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-0.6617602", "embeddingY": "-29.169859"},{"extension": "py", "date": "2020-03-27 05:46:18", "correct": "0", "upload": "def quatrePlus100(liste):\n  i=0\n  res=[]\n  while len(res)<4:\n    if liste[i]>100:\n      res.append(liste[i])\n    i=i+1\n  return res", "user": "userdId_12", "attemptID": 1859, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-26.40035", "embeddingY": "37.182827"},{"extension": "py", "date": "2020-03-31 03:31:38", "correct": "1", "upload": "def fusion(liste1,liste2):\n    i=0\n    j=0\n    res=[]\n    while i<len(liste1) and j<len(liste2):\n      if liste1[i]>liste2[j]:\n          res.append(liste2[j])\n          j=j+1\n      else:\n          res.append(liste1[i])\n          i=i+1\n#post-traitement\n    while j<len(liste2):#la liste 2 n'a pas \u00e9t\u00e9 trait\u00e9e enti\u00e8rement\n      res.append(liste2[j])\n      j=j+1\n    while i<len(liste1):#la liste 1 n'a pas \u00e9t\u00e9 trait\u00e9e enti\u00e8rement\n      res.append(liste1[i])\n      i=i+1\n    return res    ", "user": "userdId_39", "attemptID": 1860, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-34.135094", "embeddingY": "50.611584"},{"extension": "py", "date": "2020-03-17 08:46:24", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n    if debut1 <= fin2 :\n      res=True\n    else :\n      res=False\n    return res", "user": "userdId_24", "attemptID": 1861, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "51.210217", "embeddingY": "-22.237196"},{"extension": "py", "date": "2020-03-31 04:24:06", "correct": "1", "upload": "def indiceOccurrence(n,x,l):\n  res=None\n  i=0\n  cpt=0\n  while i<len(l) and cpt!=n:\n      if l[i]==x:\n        cpt+=1\n      i+=1\n  if cpt==n:\n    res=i-1\n  return res\n    ", "user": "userdId_16", "attemptID": 1862, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-9.477742", "embeddingY": "75.08546"},{"extension": "py", "date": "2020-05-04 20:22:37", "correct": "0", "upload": "def polynome(a,b,c):\n  res=\"pas de solution\"\n  delta=b**2-4*a*c\n  if delta>0:\n    S1=(-b+delta**(1/2))/2*a\n    S2=(-b-delta**(1/2))/2*a\n  return res", "user": "userdId_8", "attemptID": 1863, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-50.43927", "embeddingY": "8.754809"},{"extension": "py", "date": "2020-03-05 06:56:26", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut1==debut2:\n    res=True\n  else:\n    for debut1 in range(fin2):\n      res=true\n      \n      \n   \n  \n  return res\n  ", "user": "userdId_5", "attemptID": 1864, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "63.44074", "embeddingY": "-30.404434"},{"extension": "py", "date": "2020-04-06 14:46:25", "correct": "0", "upload": "def motPalindrome(mot):\n  ok=True\n  i=0\n  j=len(mot)-1\n  while i<len(mot) and ok:\n    if i==j:\n      ok=true\n    else:\n      ok=true\n    i=i+1\n    j=j-1\n  return ok", "user": "userdId_3", "attemptID": 1865, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "6.6800942", "embeddingY": "52.93257"},{"extension": "py", "date": "2020-04-06 08:34:07", "correct": "1", "upload": "def ecart(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    min=liste[0]\n    max=liste[0]\n    res=0\n    for i in range(1,len(liste)):\n      if min>liste[i]:\n        min=liste[i]\n      if max<liste[i]:\n        max=liste[i]\n      res=max-min\n    return res", "user": "userdId_16", "attemptID": 1866, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "13.65407", "embeddingY": "-83.76644"},{"extension": "py", "date": "2020-03-06 00:52:22", "correct": "1", "upload": "def nbOccurrencesLettre(lettre,mot):\n  res=0\n  for i in range(len(mot)):\n    if mot[i]==lettre:\n      res=res+1\n  return res", "user": "userdId_12", "attemptID": 1867, "exercise": "2864c9e5861229d2ff32570f6bc944fb", "exercise_name": "nbOccurrencesLettre", "embeddingX": "-21.230358", "embeddingY": "-40.827175"},{"extension": "py", "date": "2020-04-12 05:46:19", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=False\n  c=[]\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d-1)\n    \n  return c", "user": "userdId_8", "attemptID": 1868, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-71.126366", "embeddingY": "29.307322"},{"extension": "py", "date": "2020-03-03 06:12:25", "correct": "0", "upload": "def nbVoyelles(mot):\n  res=0\n  for c in range(len(mot)):\n    if c in [\"aeiouy\"]:\n      res=res+1\n    else:\n      res=0\n  return res", "user": "userdId_35", "attemptID": 1869, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-2.9393425", "embeddingY": "-50.00307"},{"extension": "py", "date": "2020-03-24 03:37:57", "correct": "1", "upload": "def quatrePlus100(liste):\n  res=[]\n  i = 0\n  while i<len(liste) and len(res)<4:\n    if liste[i]>100:\n      res=res+[liste[i]]\n    i=i+1\n  return res ", "user": "userdId_10", "attemptID": 1870, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-26.974459", "embeddingY": "43.030365"},{"extension": "py", "date": "2020-05-04 20:19:51", "correct": "0", "upload": "def polynome(a,b,c):\n  res=\"pas de solution\"\n  delta=b**2-4*a*c\n  if delta>0:\n    res=(-b+delta**(1/2))/2*a\n  return res", "user": "userdId_8", "attemptID": 1871, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-50.74823", "embeddingY": "7.2855644"},{"extension": "py", "date": "2020-03-20 00:53:36", "correct": "0", "upload": "def permutationListe(liste,permutation):\n  res=[]\n  for i in range(liste):\n    res.insert(permutation(i),liste(i))\n  return res", "user": "userdId_13", "attemptID": 1872, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-43.222782", "embeddingY": "-17.430765"},{"extension": "py", "date": "2020-03-10 21:10:09", "correct": "0", "upload": "def ecart(liste):\n  res=0\n  if len(liste)==0:\n    res=None\n    return res", "user": "userdId_14", "attemptID": 1873, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "11.553932", "embeddingY": "-49.71171"},{"extension": "py", "date": "2020-03-31 05:13:34", "correct": "0", "upload": "def listeSymetrique(l):\n  ok=True\n  i=0\n  while i<len(l) and ok:\n    if l[i]!=l[i-1]:\n      ok=False\n      i=i+1\n  return ok\n", "user": "userdId_9", "attemptID": 1874, "exercise": "8eb27aeda471a467e2223abebeca886e", "exercise_name": "listeSymetrique", "embeddingX": "20.001732", "embeddingY": "36.98342"},{"extension": "py", "date": "2020-03-12 23:55:12", "correct": "0", "upload": "def jourNuit(heure):\n\tif heure<0 or heure>24:\n\t\tn=\"l'heure saisie est invalide\"\n\tif 6<=heure<=18:\n\t\tn='et il fait jour'\n\t\tif 6<=heure<=12:\n\t\t\tn='on est le matin '+n\n\t\tif 13<=heure<=17:\n\t\t\tn=\"on est l'apr\u00e8s-midi \"+n\n\t\telse:\n\t\t\tn='on est le soir '+n\n\tif heure<=5 or heure>=19:\n\t\tn='et il fait nuit'\n\t\tif heure<=5:\n\t\t\tn='on est la nuit '+n\n\t\tif heure==5:\n\t\t\tn='on est le matin '+n\n\t\tif 19<=heure<=21:\n\t\t\tn='on est le soir '+n\n\t\telse:\n\t\t\tn='on est la nuit '+n\n\treturn n\n\t\n\t\t\n", "user": "userdId_19", "attemptID": 1875, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "69.812904", "embeddingY": "19.910076"},{"extension": "py", "date": "2020-04-14 04:32:43", "correct": "0", "upload": "def meilleurScoreJoueur(scores,joueurs,nom):\n  i=0\n  max=0\n  while i<len(scores)-1 and i<len(joueurs) and max:\n    if nom==joueurs[i] and scores[i]<=score[i+1]:\n      max=i\n  return max", "user": "userdId_21", "attemptID": 1876, "exercise": "c96fadc94086276f98451a798b3bb730", "exercise_name": "meilleurScoreJoueur", "embeddingX": "-11.016759", "embeddingY": "47.06192"},{"extension": "py", "date": "2020-03-27 06:46:09", "correct": "0", "upload": "def compare(chaine1,chaine2):\n  res=0\n  i=0\n  while i<len(chaine1) and i<len(chaine2):\n    if chaine1[i]<chaine2[i]:\n      res=1\n    else:\n      if chaine1[i]>chaine2[i]:\n        res=-1\n      else:\n        res=0\n    i=i+1\n  return res", "user": "userdId_14", "attemptID": 1877, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-21.504618", "embeddingY": "58.86815"},{"extension": "py", "date": "2020-03-03 06:43:06", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1<annee2:\n    res=-1\n  elif annee1>annee2:\n    res=1\n  else:\n    if annee1==annee2:\n      if mois1==mois2:\n        if jour1==jour2:\n          res=0\n  return res", "user": "userdId_30", "attemptID": 1878, "exercise": "af7c1467ef9f7684d9ff58734067ae98", "exercise_name": "compareDates", "embeddingX": "79.1967", "embeddingY": "-35.805714"},{"extension": "py", "date": "2020-03-03 05:45:10", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    for i in range(len(liste)):\n      res=range[i]\n      if liste[i]>res:\n        res=liste[i]\n  return res", "user": "userdId_8", "attemptID": 1879, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "4.9431343", "embeddingY": "-51.07038"},{"extension": "py", "date": "2020-03-17 05:24:09", "correct": "0", "upload": "def permutationChaine(s):\n    res=''\n    for i in range(0,len(s)+1,len(s)):\n        res=res+s[i]\n    return res", "user": "userdId_39", "attemptID": 1880, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-47.534683", "embeddingY": "-48.4686"},{"extension": "py", "date": "2020-03-17 05:50:54", "correct": "0", "upload": "def distribution(liste,n):\n    cpt=0*n+1\n    for elem in liste:\n        cpt[elem]=cpt[elem]+1\n    return res", "user": "userdId_39", "attemptID": 1881, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-60.857513", "embeddingY": "-9.739967"},{"extension": "py", "date": "2020-04-06 22:18:55", "correct": "0", "upload": "def motPalindrome(mot):\n    if len(mot)==0:\n      res=True\n    else:\n      res=True\n      i=0\n      while i<len(mot) and res:\n        if mot[i]==mot[-i]:\n          res=True\n        i+=1\n    return res\n", "user": "userdId_11", "attemptID": 1882, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "26.296679", "embeddingY": "44.140553"},{"extension": "py", "date": "2020-03-10 10:02:09", "correct": "1", "upload": "def nbOccurrencesLettre(lettre,mot):\n    cpt=0\n    for elem in mot:\n      if elem==lettre:\n        cpt=cpt+1\n    return cpt\n  ", "user": "userdId_11", "attemptID": 1883, "exercise": "2864c9e5861229d2ff32570f6bc944fb", "exercise_name": "nbOccurrencesLettre", "embeddingX": "-12.306607", "embeddingY": "-27.87343"},{"extension": "py", "date": "2020-03-12 07:49:23", "correct": "0", "upload": "def semestreValide(ue1,ue2):\n  if ue1==10 and ue2==10:\n    return True\n  if ue1>ue2 or ue1<ue2:\n    return True\n  else:\n    return False", "user": "userdId_1", "attemptID": 1884, "exercise": "70ae7ad6cf504e0fa8cedebd8e8a825f", "exercise_name": "semestreValide", "embeddingX": "75.89626", "embeddingY": "-5.763058"},{"extension": "py", "date": "2020-03-10 10:12:53", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n    if len(mot)==0:\n      res=None\n    else:\n      res=0\n      for i in range(len(mot)):\n        if lettre==mot[i]:\n          res=mot[i]\n        else:\n          if lettre!=mot[i]:\n            res=None\n    return res\n  \n      ", "user": "userdId_11", "attemptID": 1885, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-17.661362", "embeddingY": "-40.145477"},{"extension": "py", "date": "2020-03-09 05:47:58", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  \n  res=0\n  for elem in jour1,mois1,annee1,jour2,mois2,annee2:\n    \n    if ('jour1,mois1,annee1')<('jour2,mois2,annee2'):\n       res=res-1\n      \n    if ('jour1,mois1,annee1')==('jour2,mois2,annee2'):\n       res=res\n    \n    if ('jour1,mois1,annee1')<('jour2,mois2,annee2'):\n       res=res+1\n      \n  return res", "user": "userdId_23", "attemptID": 1886, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "-14.313406", "embeddingY": "1.1551503"},{"extension": "py", "date": "2020-03-02 08:15:28", "correct": "1", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if fin1>=debut2 and debut1<fin2:\n    return True\n  else:\n    return False", "user": "userdId_1", "attemptID": 1887, "exercise": "6fd66bb2393fbf3809f1c6d04f3831f7", "exercise_name": "rendezVous", "embeddingX": "58.188442", "embeddingY": "-25.544102"},{"extension": "py", "date": "2020-04-05 08:49:32", "correct": "0", "upload": "def produitScalaire(vec1,vec2):\n  res=0\n  for i in range(4):\n    res=res+[vec1[i]]*[vec2[i]]\n  return res", "user": "userdId_26", "attemptID": 1888, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-55.4456", "embeddingY": "-7.4133286"},{"extension": "py", "date": "2020-03-03 05:44:00", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    for i in range(len(liste)):\n      res=range[1]\n      if liste[i]>res:\n        res=liste[i]\n  return res", "user": "userdId_8", "attemptID": 1889, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "4.946762", "embeddingY": "-51.09174"},{"extension": "py", "date": "2020-03-27 05:33:29", "correct": "0", "upload": "def quatrePlus100(liste):\n  i=0\n  while i>len(liste):\n    res.append(liste[4])\n    i=i+1\n    return i", "user": "userdId_20", "attemptID": 1890, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-19.023449", "embeddingY": "31.852098"},{"extension": "py", "date": "2020-04-05 11:08:18", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  ok=True\n  i=0\n  sansespace=''\n  for lettre in phrase:\n    if lettre!=' ':\n      sansespace+=lettre\n  while i<len(sansespace)/2 and ok:\n    ok=sansespace[i]==sansespace[i-1]\n    i+=1\n  return ok\n", "user": "userdId_12", "attemptID": 1891, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "44.799465", "embeddingY": "34.3733"},{"extension": "py", "date": "2020-03-05 23:49:39", "correct": "0", "upload": "def maximum(liste):\n    max=0\n    for elem in range(1, len(liste)):\n      if len[liste]>max:\n        max=l[liste]\n    return max    \n      \n   \n    ", "user": "userdId_46", "attemptID": 1892, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "9.270836", "embeddingY": "-74.37449"},{"extension": "py", "date": "2020-04-06 05:40:47", "correct": "1", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  res=[]\n  while nombre!=0:\n    res.append(nombre%10)\n    nombre=nombre//10\n  if res==[]:\n    res.append(0)\n  for i in res:\n    if i==chiffre:\n      cpt+=1\n  return cpt", "user": "userdId_27", "attemptID": 1893, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "1.104938", "embeddingY": "7.846918"},{"extension": "py", "date": "2020-04-12 05:57:19", "correct": "0", "upload": "def suiteGeo(liste):\n    if len(liste)==0:\n      res=True\n    else:\n      res=True\n      for i in range(1,len(liste)):\n        if liste[i]==0:\n          res=False\n        else:\n          x=liste[1]//liste[0]\n          if liste[i]==liste[i-1]*x:\n            res=True\n          else:\n            res=False\n    return res", "user": "userdId_11", "attemptID": 1894, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "-13.884946", "embeddingY": "-81.6639"},{"extension": "py", "date": "2020-04-11 05:28:21", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  res=0\n  while nombre!=0:\n    if nombre%10==chiffre:\n      nombre=nombre//10\n      res+=1\n  return res", "user": "userdId_8", "attemptID": 1895, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "25.210455", "embeddingY": "12.273146"},{"extension": "py", "date": "2020-04-07 02:52:42", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n  trouve=False\n  i=0\n  cpt=0\n  while i<len(l) and not trouve:\n    if l[i]==x:\n      cpt+=1\n    if cpt==n:\n      trouve=True\n    i+=1\n  if trouve:\n    res=i-1\n  else:\n    res=None\n    return res", "user": "userdId_36", "attemptID": 1896, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-1.4039187", "embeddingY": "68.87399"},{"extension": "py", "date": "2020-04-08 00:00:18", "correct": "0", "upload": "def suiteGeo(liste):\n  ok=True\n  i=0\n  if len(liste)<=1 :\n    ok=True\n  else :\n    while i<(len(liste)-1) and ok :\n      if liste[0]==0 :\n        Q=0\n      else :\n        Q=(liste[i+1]/liste[i])\n      if liste[i+1]!=(Q*liste[i]):\n        ok=False\n      i+=1\n  return ok", "user": "userdId_15", "attemptID": 1897, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "25.585022", "embeddingY": "69.488594"},{"extension": "py", "date": "2020-04-07 04:26:02", "correct": "1", "upload": "def produitScalaire(vec1,vec2):\n  if len(vec1)==[] and len(vec2)==[]:\n    res=0\n  else:\n    res=0\n    for i in range(len(vec1)) and range (len(vec2)):\n      scal=vec1[i]*vec2[i]\n      res=res+scal\n    return res", "user": "userdId_36", "attemptID": 1898, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-30.775126", "embeddingY": "-42.89859"},{"extension": "py", "date": "2020-04-06 22:41:31", "correct": "0", "upload": "def motPalindrome(mot):\n    if len(mot)==0:\n      res=True\n    else:\n      res=True\n      i=0\n      while i<len(mot) and res==True:\n        if mot[i//2]==mot[-i//2]:\n          res=True\n          i+=1\n    return res\n", "user": "userdId_11", "attemptID": 1899, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "27.069672", "embeddingY": "44.93663"},{"extension": "py", "date": "2020-04-12 10:32:37", "correct": "0", "upload": "def phrasePalindrome(phrase):\n    if len(phrase)==0:\n      res=True\n    else:\n      res=True\n      i=0\n      x=''\n      while i<len(phrase)//2 and res:\n        if phrase[i]!=phrase[-(i+1)]:\n          res=False\n          i+=1\n        if (phrase[i]==x)!=phrase[-(i+1)]:\n          i+=1\n    return res", "user": "userdId_11", "attemptID": 1900, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "33.572655", "embeddingY": "35.675617"},{"extension": "py", "date": "2020-03-10 04:19:40", "correct": "0", "upload": "def nbSyllabes(mot):\n  if mot=='':\n    res=0\n  else:\n    res=0\n    Voyelles=['a','e','i','o','u','y']\n    ch=\"\"\n    for i in range(1,len(mot)):\n      if mot[i-1] not in Voyelles and mot[i] in Voyelles:\n        res=res+1\n      else:\n        ch=mot[i]\n    if mot[0] in Voyelles :\n      res=res+1\n    elif mot[-1] not in Voyelles and len(mot)>4:\n      res=res-1\n  return res\n    ", "user": "userdId_15", "attemptID": 1901, "exercise": "1c86bec0f4df503e23db53994f3d2991", "exercise_name": "nbSyllabes", "embeddingX": "-19.459217", "embeddingY": "-72.76445"},{"extension": "py", "date": "2020-03-05 22:06:44", "correct": "0", "upload": "def maximum(liste):\n  if len(liste):\n    res=None \n  else:\n    res=liste[0]\n    for i in range(1,len(liste)):\n      res=len(liste)>res\n      res=len(liste)  \n  return res", "user": "userdId_25", "attemptID": 1902, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "5.1730213", "embeddingY": "-55.549076"},{"extension": "py", "date": "2020-03-23 23:07:03", "correct": "0", "upload": "def quatrePlus100(liste):\n  if len(liste)==0:\n    res=[]\n  else:\n    res=[]\n    for i in range(len(liste)):\n      if liste[i]>100:\n        res=res+liste\n    return res", "user": "userdId_9", "attemptID": 1903, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-8.458972", "embeddingY": "-62.73271"},{"extension": "py", "date": "2020-03-31 03:41:15", "correct": "0", "upload": "def fusion(liste1,liste2):\n  i=0\n  j=0\n  res=[]\n  while i<len(liste1) and j<len(liste2):\n    if liste1[i]<liste2[j]:\n      res.append(liste1[i])\n      i=i+1\n    else:\n      res.append(lite2[j])\n      j=j+1\n  while j<len(liste2):\n    res.append(liste2[j])\n    j=j+1\n  while i<len(liste1[i]):\n    res.append(liste1[i])\n    i+=1\n  return res", "user": "userdId_9", "attemptID": 1904, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-36.68323", "embeddingY": "51.149956"},{"extension": "py", "date": "2020-03-14 00:27:55", "correct": "0", "upload": "def ecart(liste):\n   res=0\n   max=0\n   min=0\n   if len(liste)==0:\n      res=None\n   if len(liste)==1:\n      res=0\n   else:\n      max=liste[0]\n      min=max\n      for i in range(len(liste)):\n         if liste[i]>max:\n            max=liste[i]\n      for i in range(len(liste)):\n         if liste[i]<min:\n            min=liste[i]\n   res=max-min\n   return res", "user": "userdId_14", "attemptID": 1905, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "14.128205", "embeddingY": "-86.03666"},{"extension": "py", "date": "2020-03-23 00:46:42", "correct": "0", "upload": "def reconstruireChainePartielle(s,n):\n    res = \"\"\n    for i in range (len(s),n) :\n      res = res + s[i]\n    return res", "user": "userdId_24", "attemptID": 1906, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-59.19779", "embeddingY": "-35.948574"},{"extension": "py", "date": "2020-03-19 23:57:21", "correct": "0", "upload": "def reconstruireChainePartielle(o,n):\n  res=\"\"\n  for i in range(len(o),n):\n    res=res+l[i]\n  return res", "user": "userdId_20", "attemptID": 1907, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-60.827286", "embeddingY": "-34.735924"},{"extension": "py", "date": "2020-03-30 22:37:16", "correct": "0", "upload": "def doubleChiffre(nombre):\n  while nombre!=0:\n    temp = nombre%10\n    nombre-=nombre%10\n    nombre/=10\n    if nombre%10==temp:\n      return True\n  return False\n", "user": "userdId_6", "attemptID": 1908, "exercise": "7f84d207313ad3dc0f4fef3d72d72abb", "exercise_name": "doubleChiffre", "embeddingX": "41.463745", "embeddingY": "2.4359176"},{"extension": "py", "date": "2020-03-23 00:37:48", "correct": "0", "upload": "def reconstruireChainePartielle(s,n):\n  res=''\n  for i in range(0,len(s),2):\n    res=res+s[i]\n  return res", "user": "userdId_35", "attemptID": 1909, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-45.95166", "embeddingY": "-45.80487"},{"extension": "py", "date": "2020-03-15 03:25:27", "correct": "0", "upload": "def polynome(a,b,c):\n    delta=(b**2)-(4*a*c)\n    \n    if delta<0:\n      return(\"pas de solution\")\n    elif delta>0:\n      x=(-b-delta**0,5)/(2*a)\n      y=(-b+delta**0,5)/(2*a)\n      return(x,y)\n    if delta==0:\n      return(-b/a)\n \n\n ", "user": "userdId_21", "attemptID": 1910, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-54.763588", "embeddingY": "13.227096"},{"extension": "py", "date": "2020-06-02 21:54:37", "correct": "0", "upload": "def polynome(a,b,c):\n  import math\n  delta=b**2-4*a*c\n  if delta>0:\n    x1=(-b-(math.sqrt(delta)))/2*a\n    x2=(-b+(math.sqrt(delta)))/2*a\n    return (x1,x2)\n  elif delta==0:\n    x=-b/a\n    return x\n  else:\n    return 'pas de solution'", "user": "userdId_12", "attemptID": 1911, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-50.48201", "embeddingY": "7.616955"},{"extension": "py", "date": "2020-03-05 21:38:05", "correct": "1", "upload": "def maximum(liste):\n  if len(liste)==0:\n    return None\n  else:\n    max = liste[0]\n    for i in range(1,len(liste)):\n      if liste[i]>max:\n        max = liste[i]\n  return max", "user": "userdId_6", "attemptID": 1912, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "12.02956", "embeddingY": "-70.701866"},{"extension": "py", "date": "2020-04-12 06:09:08", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=False\n  c=[]\n  e=[]\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n    e.append(c)\n  return e", "user": "userdId_8", "attemptID": 1913, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-78.83951", "embeddingY": "21.644545"},{"extension": "py", "date": "2020-04-12 05:19:54", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=False\n  c=[]\n  for i in range(1,len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n  return c", "user": "userdId_8", "attemptID": 1914, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-72.01818", "embeddingY": "25.98222"},{"extension": "py", "date": "2020-04-16 23:12:44", "correct": "1", "upload": "def meilleurClassementJoueur(scores,joueurs,nom):\n  res = - 1\n  i = 0\n  while i < len(joueurs) and res == -1 :\n    if nom == joueurs[i] :\n      res = i + 1\n    i = i + 1\n  return res", "user": "userdId_17", "attemptID": 1915, "exercise": "be6ce0a06c5d396190024c7c681da95d", "exercise_name": "meilleurClassementJoueur", "embeddingX": "-9.045013", "embeddingY": "79.26091"},{"extension": "py", "date": "2020-02-29 06:10:29", "correct": "0", "upload": "def polynome(a,b,c):\n    import math\n    delta=(b**2)-(4*a*c)\n    if delta>0:\n      x1=(-b-math.sqrt(delta))/(2*a)\n      x2=(-b+math.sqrt(delta))/(2*a)\n      print(x1,x2)\n    elif delta==0:\n      x0=-b/(2*a)\n      print(x0)\n    else:\n      print('pas de solution')", "user": "userdId_18", "attemptID": 1916, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-52.613457", "embeddingY": "7.5593667"},{"extension": "py", "date": "2020-04-13 20:58:57", "correct": "1", "upload": "def elemGeo(n,u0,q):\n    return u0*q**n", "user": "userdId_8", "attemptID": 1917, "exercise": "d7c83a7fb9b49e28804e55955ad06968", "exercise_name": "elemGeo", "embeddingX": "-39.8654", "embeddingY": "19.803394"},{"extension": "py", "date": "2020-03-20 00:00:13", "correct": "0", "upload": "def permutationListe(liste,permutation):\n  res=[0]*len(liste)\n  for elem,smt in zip(liste,permutation):\n    res[smt]=liste[elem]\n  return res", "user": "userdId_12", "attemptID": 1918, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-54.381096", "embeddingY": "-25.798462"},{"extension": "py", "date": "2020-04-07 20:09:02", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  nombre=int(nombre)\n  for i in range(nombre):\n    if nombre[i]==chiffre:\n      cpt=cpt+1\n    i=i+1\n  return cpt", "user": "userdId_3", "attemptID": 1919, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-24.52588", "embeddingY": "-28.567726"},{"extension": "py", "date": "2020-03-27 06:45:45", "correct": "0", "upload": "def compare(chaine1,chaine2):\n  res=0\n  i=0\n  while i<len(chaine1) and i<len(chaine2):\n    if chaine1[i]<chaine2[i]:\n      res=-1\n    else:\n      if chaine1[i]>chaine2[i]:\n        res=1\n      else:\n        res=0\n    i=i+1\n  return res", "user": "userdId_14", "attemptID": 1920, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-21.510454", "embeddingY": "58.870407"},{"extension": "py", "date": "2020-03-04 10:49:06", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2) :\n  if(debut1,fin1,debut2,fin2)in '1,10,7,20':\n     res=True\n  if(debut1,fin1,debut2,fin2)in '1,7,10,20':\n     res=False\n  if(debut1,fin1,debut2,fin2)in '20,25,10,20':\n     res=True\n   \n  return res\n  ", "user": "userdId_39", "attemptID": 1921, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "-68.74758", "embeddingY": "34.501217"},{"extension": "py", "date": "2020-03-11 01:49:31", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n    if annee1<annee2:\n      res=-1\n    if annee1==annee2 and mois1>mois2:\n      res=1\n    else:\n      res=0\n    return res", "user": "userdId_21", "attemptID": 1922, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "78.70341", "embeddingY": "-33.944145"},{"extension": "py", "date": "2020-04-06 10:26:00", "correct": "0", "upload": "def suiteAriGeo(liste):\n    if liste==[] or len(liste)==1:\n      ok1=True\n    else:\n      ok1=True\n      ctePrec=liste[1]-liste[0]\n      cteAct=None\n      i=2\n      while i<len(liste) and ok1:\n        cteAct=liste[i]-liste[i-1]\n        if cteAct!=ctePrec:\n          ok1=False\n        ctePrec=cteAct\n        i+=1\n    if liste==[] or len(liste)==1:\n      ok2=True\n    elif 0 in liste:\n      if liste[0]!=0:\n        ok2=True\n      while 0 in liste:\n        liste.remove(0)\n      if liste==[]:\n        ok2=True\n      else:\n        ok2=False\n    else:\n      ok2=True\n      i=1\n      while i<len(liste) and ok2:\n        cte=liste[i]/liste[i-1]\n        if liste[0]*cte**i!=liste[i]:\n          ok=False\n        i+=1\n    return ok1 or ok2", "user": "userdId_18", "attemptID": 1923, "exercise": "4c9665daf155b115fe13218141fa1aff", "exercise_name": "suiteAriGeo", "embeddingX": "28.324127", "embeddingY": "83.84201"},{"extension": "py", "date": "2020-03-15 04:03:25", "correct": "0", "upload": "def nombrePair(n):\n  res=0\n  if terminaison is (\"0,2,4,6,8\"):\n    res=True\n  else:\n    res=false\n  return res", "user": "userdId_23", "attemptID": 1924, "exercise": "3001254263845e9a478696f81a704d33", "exercise_name": "nombrePair", "embeddingX": "9.796547", "embeddingY": "-19.036455"},{"extension": "py", "date": "2020-03-10 04:06:00", "correct": "0", "upload": "def sommeNbPairs(liste):\n  for liste in range==0:\n    res=0  \n  return None", "user": "userdId_25", "attemptID": 1925, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "5.246416", "embeddingY": "-49.97144"},{"extension": "py", "date": "2020-03-23 01:16:25", "correct": "0", "upload": "def nbOccurrencesLettre(lettre,mot):\n  res=0\n  for i in mot: \n    if l==lettre:\n      res=res+1\n  return res", "user": "userdId_21", "attemptID": 1926, "exercise": "2864c9e5861229d2ff32570f6bc944fb", "exercise_name": "nbOccurrencesLettre", "embeddingX": "-12.339181", "embeddingY": "-25.666203"},{"extension": "py", "date": "2020-03-02 08:47:57", "correct": "0", "upload": "def jourNuit(heure):\n    res = \"l'heure saisie est invalide\"\n\n    if heure <= 24:\n        if heure >= 5 and heure < 12:\n            res = \"on est le matin\"\n        elif heure >= 12 and heure < 17:\n      \t    res = \"on est l'apr\u00e8s-midi\"\n        elif heure >= 17 and heure < 21:\n            res = \"on est le soir\"\n        else:\n            res = \"on est la nuit\"\n        if heure >= 6 and heure < 18:\n            res += \" et il fait jour\"\n        else:\n            res += \" et il fait nuit\"\n    return res\n", "user": "userdId_4", "attemptID": 1927, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "77.393524", "embeddingY": "24.798662"},{"extension": "py", "date": "2020-03-05 23:41:46", "correct": "1", "upload": "def somme(liste):\n  res=0\n  for i in range (len(liste)):\n    res=res+liste[i]\n  return res", "user": "userdId_19", "attemptID": 1928, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-45.23253", "embeddingY": "-37.351852"},{"extension": "py", "date": "2020-04-07 23:30:11", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  ok=False\n  i=0\n  while i<len(phrase)//2:\n    if phrase[i]!=phrase[-i-1]:\n      ok=True\n    else:\n      ok=False\n    i+=1\n  if phrase==\"\":\n    ok=True\n  return ok", "user": "userdId_13", "attemptID": 1929, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "26.345005", "embeddingY": "33.70052"},{"extension": "py", "date": "2020-04-12 11:37:51", "correct": "0", "upload": "def phrasePalindrome(phrase):\n    if len(phrase)==0:\n      res=True\n    else:\n      res=True\n      i=0\n      x=''\n      while i<len(phrase)//2 and res:\n        if phrase[i]!=phrase[-(i+1)]:\n          res=False\n          i+=1\n        if phrase[i]==x:\n          res=True\n          i+=1\n        if phrase[-(i+1)]:\n          res=True\n          i+=1\n    return res", "user": "userdId_11", "attemptID": 1930, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "35.196064", "embeddingY": "35.78098"},{"extension": "py", "date": "2020-04-16 08:45:55", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n  prec=0\n  res=0\n  i=0\n  while i<len(l) and prec<n:\n    if l[i]==x:\n      prec=prec+1\n    i=i+1\n    if prec==n:\n      return i\n    if prec<n:\n      return none", "user": "userdId_28", "attemptID": 1931, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-5.406909", "embeddingY": "76.005104"},{"extension": "py", "date": "2020-03-17 04:59:45", "correct": "1", "upload": "def reconstruireChainePartielle(s,n):\n  res=''\n  for i in range (0,len(s),n):\n    res=res+s[i]\n  return res", "user": "userdId_25", "attemptID": 1932, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-59.65053", "embeddingY": "-41.42079"},{"extension": "py", "date": "2020-03-24 03:55:32", "correct": "0", "upload": "def compare(chaine1,chaine2):\n    res=0\n    i=0\n    while i<len(chaine1) and i<len(chaine2):\n      if chaine1[i]>chaine2[i]:\n        res=-1\n      elif chaine1[i]<chaine2[i]:\n        res=1\n      i=i+1\n    return res", "user": "userdId_18", "attemptID": 1933, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-21.510864", "embeddingY": "58.86919"},{"extension": "py", "date": "2020-03-06 00:45:32", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    res=None\n  else:\n    res=0\n    for mot in \"aeiouy\":\n      res=res+1\n  \n  return res", "user": "userdId_5", "attemptID": 1934, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "0.029759813", "embeddingY": "-29.795721"},{"extension": "py", "date": "2020-03-23 22:35:47", "correct": "0", "upload": "def quatrePlus100(liste):\n  res=[]\n  x=0\n  while len(res)<4 :\n    if liste(x)>100 :\n      res=res+[liste[x]]\n    x=x+1\n  return res", "user": "userdId_28", "attemptID": 1935, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-20.663267", "embeddingY": "39.238934"},{"extension": "py", "date": "2020-03-09 22:01:05", "correct": "0", "upload": "def nbOccurrencesLettre(lettre,mot):\n    res = 0\n    for c in mot:\n      if c == lettre:\n        res += 1\n    return None", "user": "userdId_42", "attemptID": 1936, "exercise": "2864c9e5861229d2ff32570f6bc944fb", "exercise_name": "nbOccurrencesLettre", "embeddingX": "-9.386656", "embeddingY": "-27.525051"},{"extension": "py", "date": "2020-03-19 05:39:09", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if jour1<jour2 and mois1<mois2 and annee1<annee2:\n    res=-1\n  elif jour1==jour2 and mois1==mois2 and annee1==annee2:\n      res=1\n  else:\n    res=0\n  return res", "user": "userdId_34", "attemptID": 1937, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "79.57022", "embeddingY": "-24.787868"},{"extension": "py", "date": "2020-03-06 00:58:10", "correct": "1", "upload": "def ecart(liste):\n\tif len(liste) == 0:\n\t\tres = None\n\telse:\n\t\tma = liste[0]\n\t\tmi = liste[0]\n\t\tfor i in range(len(liste)):\n\t\t\tif liste[i] > ma and liste[i] > mi:\n\t\t\t\tma = liste[i]\n\t\t\telif liste[i] < ma and liste[i]< mi:\n\t\t\t\tmi = liste[i]\n\t\tres = ma - mi\n\treturn res", "user": "userdId_29", "attemptID": 1938, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "-2.1515062", "embeddingY": "-84.986694"},{"extension": "py", "date": "2020-03-22 05:17:45", "correct": "1", "upload": "def semestreValide(ue1,ue2):\n  res=False\n  if ue1>=10 and ue2>=10:\n    res=True\n  if ue1>=10 and (ue1+ue2)/2>=10:\n    res=True\n  return res", "user": "userdId_12", "attemptID": 1939, "exercise": "70ae7ad6cf504e0fa8cedebd8e8a825f", "exercise_name": "semestreValide", "embeddingX": "68.804665", "embeddingY": "-0.4095797"},{"extension": "py", "date": "2020-03-31 07:59:03", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n    if len(mot)==0 or lettre not in mot:\n      res=None\n    else:\n      res=0\n      for i in range(len(mot)):\n        if mot[i]==lettre:\n          res=i\n    return res", "user": "userdId_11", "attemptID": 1940, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-18.613985", "embeddingY": "-38.75238"},{"extension": "py", "date": "2020-03-17 06:21:21", "correct": "0", "upload": "def permutationListe(liste,permutation):\n  res=[0]*(len(permutation))\n  for i in range(len(liste)):\n    premuatation[i]=liste[i] \n  return res", "user": "userdId_35", "attemptID": 1941, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-49.73706", "embeddingY": "-26.661158"},{"extension": "py", "date": "2020-03-03 00:15:19", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if jour1 < jour2 and mois1 <= mois2 and annee1 <= annee2:\n    res= -1\n  if jour1 == jour2 and mois1 == mois2 and annee1 == annee2:\n    res= 0\n  if jour1 > jour2 and mois1 >= mois2 and annee1 >= annee2:\n    res= 1\n    \n  return res\n  \n ", "user": "userdId_7", "attemptID": 1942, "exercise": "af7c1467ef9f7684d9ff58734067ae98", "exercise_name": "compareDates", "embeddingX": "81.768425", "embeddingY": "-17.28392"},{"extension": "py", "date": "2020-03-01 12:42:12", "correct": "1", "upload": "from math import sqrt\ndef polynome(a, b, c):\n    Delta = (b ** 2) - (4 * a * c)\n    if Delta < 0:\n        return (\"pas de solution\")\n    else:\n        if Delta == 0:\n            sol = -b / (2*a)\n            return (sol)\n        else:\n            sol1 = (-b - sqrt(Delta)) / 2 * a\n            sol2 = (-b + sqrt(Delta)) / 2 * a\n            return (sol2, sol1)\n", "user": "userdId_42", "attemptID": 1943, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-49.7447", "embeddingY": "12.161164"},{"extension": "py", "date": "2020-03-09 08:48:24", "correct": "0", "upload": "def nbVoyelles(mot):\n    cpt=0\n    for i in range(len(mot)):\n      if mot[i]==\"a,e,i,o,u,y\":\n        cpt=cpt+1\n    return cpt\n  ", "user": "userdId_11", "attemptID": 1944, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-8.899013", "embeddingY": "-52.057888"},{"extension": "py", "date": "2020-03-12 23:51:56", "correct": "0", "upload": "def jourNuit(heure):\n  if heure>24 or heure<0:\n    afficher=\"l'heure saisie est invalide\"\n  else:\n    if 0<=heure<=5 or 5<=heure<=12:\n      afficher=\"on est le matin et il fait nuit\"\n    if 21<=heure<=24 and 0<=heure<=5:\n      afficher=\"on est la nuit et il fait nuit\"\n    if 12<=heure<=17 or 6<=heure<=18:\n      afficher=\"on est l'apres-midi et il fait jour\"\n    if 17<=heure<=21 or 6<=heure<=18:\n      afficher=\"on est le soir et il fait jour\"\n     \n    return afficher", "user": "userdId_38", "attemptID": 1945, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "72.59587", "embeddingY": "23.105244"},{"extension": "py", "date": "2020-03-19 23:52:03", "correct": "0", "upload": "def reconstruireChainePartielle(s,n):\n  res=\"\"\n  for i in range(0,len(o),n):\n    res=res+l[i]\n  return res", "user": "userdId_20", "attemptID": 1946, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-32.53257", "embeddingY": "-20.045958"},{"extension": "py", "date": "2020-03-17 06:25:56", "correct": "1", "upload": "def reconstruireChainePartielle(s,n):\n  res=''\n  for i in range(0,len(s),n):\n    res=res+s[i]\n  return res", "user": "userdId_25", "attemptID": 1947, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-32.641907", "embeddingY": "-20.425447"},{"extension": "py", "date": "2020-04-07 04:33:57", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  res=0\n  cpt=0\n  l=[]\n  decomp=nombre\n  while decomp!=0:\n    l.append(decomp%10)\n    decomp=decomp//10\n    if l[cpt]==chiffre:\n      res=res+1\n    cpt=cpt+1\n  return res", "user": "userdId_31", "attemptID": 1948, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "7.796542", "embeddingY": "3.1945689"},{"extension": "py", "date": "2020-03-06 00:21:21", "correct": "0", "upload": "def maximum(liste):\n  res=liste[0]\n  for elem in liste:\n    if  res < elem:\n      res=elem\n  return res", "user": "userdId_20", "attemptID": 1949, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "41.863766", "embeddingY": "-57.49216"},{"extension": "py", "date": "2020-03-16 05:32:29", "correct": "0", "upload": "def qualifJO(sexe,record,nbvictoires,champion):\n    if sexe=='M':\n      if record<12.0 and nbvictoires>=3:\n          res=True\n      else:\n        if champion==True:\n          res=True\n        else:\n          res=False\n    else:\n      if record<15.0 and nbvictoires>=3:\n        res=True\n      else:\n        if champion==True:\n          res=True\n        else:\n          res=False\n    return res", "user": "userdId_18", "attemptID": 1950, "exercise": "78ec7738f3a7f3553d4a5c653534c32d", "exercise_name": "qualifJO", "embeddingX": "63.9792", "embeddingY": "-10.844381"},{"extension": "py", "date": "2020-04-06 08:00:51", "correct": "1", "upload": "def minimum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=liste[0]\n    for i in range(1,len(liste)):\n       if res>liste[i]:\n          res=liste[i]\n  return res", "user": "userdId_16", "attemptID": 1951, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "-0.19577663", "embeddingY": "-61.069115"},{"extension": "py", "date": "2020-04-07 10:53:36", "correct": "0", "upload": "def suiteGeo(liste):\n  ok=True\n  i=1\n  if len(liste)==0 and len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i]==0:\n      ok=False\n    q=liste[1]/liste[0]\n    if liste[i+1]/liste[i]!=q:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 1952, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "27.829102", "embeddingY": "60.646866"},{"extension": "py", "date": "2020-03-10 23:58:06", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  res=0\n  if debut1>fin2 and debut2>fin1:\n    res=False \n  else:\n    res=True\n  return res\n", "user": "userdId_21", "attemptID": 1953, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "66.080925", "embeddingY": "-21.189056"},{"extension": "py", "date": "2020-04-10 01:06:58", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  res=True\n  if len(liste)==0 or len(liste)==1:\n    res=True\n  while i<len(liste)-1 and res:\n    if liste[0]==0:\n      res=False\n    if liste[i]!=0:\n      q=liste[1]/liste[0]\n    if liste[i]!=0:\n      if liste[i+1]/liste[0]!=q:\n        res=False\n   \n    if liste[i]==0 and liste[i+1]==0:\n      res=True\n    i+=1\n  return res", "user": "userdId_26", "attemptID": 1954, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "35.805958", "embeddingY": "61.42745"},{"extension": "py", "date": "2020-03-20 00:12:37", "correct": "1", "upload": "def permutationChaine(s):\n  res=''\n  for i in range (0,len(s)-1,2):\n    res=res+s[1+i]+s[i]\n  if len(s)%2!=0:\n    res=res+s[-1]\n  return res\n", "user": "userdId_13", "attemptID": 1955, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-35.730736", "embeddingY": "-59.175888"},{"extension": "py", "date": "2020-04-03 00:01:12", "correct": "0", "upload": "def nbChiffres(nombre):\n  i=0\n  res=0\n  while nombre!=0:\n    nombre=nombre//10\n    res=res+1\n  return res  ", "user": "userdId_12", "attemptID": 1956, "exercise": "3dcf332c003a1f3bf15df22ee17884a3", "exercise_name": "nbChiffres", "embeddingX": "0.98574513", "embeddingY": "19.887964"},{"extension": "py", "date": "2020-03-23 22:49:12", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n    if jour1==jour2 and mois1==mois2 and annee1==annee2:\n      res=0\n    elif jour1!=jour2 or mois1!=mois2 or annee1!=annee2:\n      res=-1 \n    else:\n      res=1\n    return res", "user": "userdId_9", "attemptID": 1957, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "81.863106", "embeddingY": "-23.72417"},{"extension": "py", "date": "2020-03-13 00:14:16", "correct": "1", "upload": "def jourNuit(heure):\n  while heure < 0 or heure > 24 :\n    return \"l'heure saisie est invalide\"\n  if heure >= 6 and heure < 18 :\n    nuit_jour = \"jour\"\n  else:\n    nuit_jour = \"nuit\"\n  if heure >= 5 and heure < 12:\n    moment = \"le matin\"\n  elif heure >= 12 and heure < 17:\n    moment = \"l'apr\u00e8s-midi\"\n  elif heure >= 17 and heure < 21:\n    moment = \"le soir\"\n  else:\n    moment = \"la nuit\"\n  return \"on est {} et il fait {}\".format(moment,nuit_jour)", "user": "userdId_42", "attemptID": 1958, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "75.82336", "embeddingY": "18.400696"},{"extension": "py", "date": "2020-04-07 03:11:39", "correct": "1", "upload": "def produitScalaire(vec1,vec2):\n  res=0\n  i=0\n  while i<len(vec1):\n    res=res+vec1[i]*vec2[i]\n    i=i+1\n  return res", "user": "userdId_7", "attemptID": 1959, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-15.789845", "embeddingY": "51.001846"},{"extension": "py", "date": "2020-03-31 06:51:13", "correct": "0", "upload": "def nombreSymetrique(nombre):\n  while nombre!=0:\n    res.append(nombre%10)\n    nombre=nombre//10\n  res=True\n  i=0\n  while i<len(nombre)//2 and res:\n    if nombre[i]!=nombre[-i-1]:\n      res=False\n    i+=1\n  if res==0:\n    res=0\n  return res", "user": "userdId_8", "attemptID": 1960, "exercise": "fae4d6a34289cf5bf06f9d6d17e8547e", "exercise_name": "nombreSymetrique", "embeddingX": "43.2129", "embeddingY": "18.568886"},{"extension": "py", "date": "2020-03-12 06:53:13", "correct": "0", "upload": "def maximum(liste):\n  res=liste[0]\n  for i in range(liste):\n     if res<i:\n      return i\n  else:\n    return res", "user": "userdId_20", "attemptID": 1961, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-49.399914", "embeddingY": "-17.126755"},{"extension": "py", "date": "2020-03-23 00:10:34", "correct": "0", "upload": "def somme(liste):\n  res=0\n  for x in range[liste]:\n    res+=x\n  return res", "user": "userdId_8", "attemptID": 1962, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-46.89693", "embeddingY": "-15.211306"},{"extension": "py", "date": "2020-04-06 22:38:02", "correct": "1", "upload": "def compteChiffre(chiffre,nombre):\n    res=0\n    nb=nombre\n    while nb//10!=0:\n      if nb%10==chiffre:\n        res=res+1\n      nb=nb//10\n    if nombre==0 and chiffre==0:\n      res=1\n    return res\n      \n      ", "user": "userdId_28", "attemptID": 1963, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "14.595743", "embeddingY": "12.981668"},{"extension": "py", "date": "2020-03-06 00:05:20", "correct": "1", "upload": "def somme(liste):\n  res=0\n  for elem in liste:\n    res=res+elem\n  return res", "user": "userdId_20", "attemptID": 1964, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-30.418179", "embeddingY": "2.9846122"},{"extension": "py", "date": "2020-03-03 23:42:51", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut2<fin1<fin2 or debut1<fin2<fin1:\n    return True\n  else:\n    return False\n    \n", "user": "userdId_19", "attemptID": 1965, "exercise": "6fd66bb2393fbf3809f1c6d04f3831f7", "exercise_name": "rendezVous", "embeddingX": "60.27135", "embeddingY": "-27.303299"},{"extension": "py", "date": "2020-03-13 00:03:57", "correct": "0", "upload": "def qualifJO(sexe,record,nbvictoires,champion):\n  res = True\n  if sexe == 'M':\n    if record > 12 or nbvictoires <= 3 :\n      res = False\n      if champion == True :\n        res = True\n  else :\n    if record > 15 or nbvictoires <= 3 :\n      res = False\n      if champion == True :\n        res = True\n  return res", "user": "userdId_17", "attemptID": 1966, "exercise": "78ec7738f3a7f3553d4a5c653534c32d", "exercise_name": "qualifJO", "embeddingX": "65.14028", "embeddingY": "-15.035119"},{"extension": "py", "date": "2020-03-09 10:59:49", "correct": "0", "upload": "def ecart(liste):\n    if len(liste)==0:\n      res=None\n    else:\n      min=liste[0]\n      for i in range(1,len(liste)):\n        if liste[i]<min:\n          min=liste[i]\n      max=liste[0]\n      for i in range(1,len(liste)):\n        if liste[i]>max:\n          max=liste[i]\n    res=max-min\n    return res", "user": "userdId_11", "attemptID": 1967, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "13.93277", "embeddingY": "-84.434395"},{"extension": "py", "date": "2020-03-14 01:06:49", "correct": "0", "upload": "def maximum(liste):\n    if len(liste)==0:\n      res=None\n    else:\n      max=liste[0]\n      for i in range(1,len(liste)):\n        if liste[i]>max:\n          max=liste[i]\n    return max\n  ", "user": "userdId_11", "attemptID": 1968, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "9.132443", "embeddingY": "-67.089584"},{"extension": "py", "date": "2020-04-06 21:53:30", "correct": "0", "upload": "def sousChaine(s1,s2):\n  i=0\n  j=0\n  cpt=0\n  res=False\n  while i<len(s2) and j<len(s1):\n    if s2[i]==s1[j]:\n      cpt=cpt+1\n      j+=1\n    else:\n      cpt=0\n    i+=1\n  if cpt==len(s1):\n    res=True\n  return res", "user": "userdId_12", "attemptID": 1969, "exercise": "a7cdd094daa2f0bfccc7a4ec419f7243", "exercise_name": "sousChaine", "embeddingX": "-5.3369946", "embeddingY": "62.15453"},{"extension": "py", "date": "2020-04-13 20:24:13", "correct": "1", "upload": "def produitScalaire(vec1,vec2):\n  res=0\n  for i in range(len(vec1)):\n    res+=vec1[i]*vec2[i]\n  return res", "user": "userdId_8", "attemptID": 1970, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-52.12472", "embeddingY": "-37.060997"},{"extension": "py", "date": "2020-03-09 11:52:57", "correct": "0", "upload": "def nbOccurrencesLettre(lettre,mot):\n    if len(mot)==0:\n      cpt=None\n    else:\n      cpt=0\n      for elem in mot:\n        if elem==lettre:\n          cpt=cpt+1\n    return cpt\n  ", "user": "userdId_11", "attemptID": 1971, "exercise": "2864c9e5861229d2ff32570f6bc944fb", "exercise_name": "nbOccurrencesLettre", "embeddingX": "-11.54787", "embeddingY": "-30.581093"},{"extension": "py", "date": "2020-04-06 22:32:56", "correct": "0", "upload": "def elemAri(n,u0,r):\n  res=0\n  for i in range(0,n+1):\n    res+=u0+r\n  return res", "user": "userdId_12", "attemptID": 1972, "exercise": "f239498950e974e29e01472749d9a09d", "exercise_name": "elemAri", "embeddingX": "-20.516838", "embeddingY": "16.27112"},{"extension": "py", "date": "2020-03-05 06:44:29", "correct": "0", "upload": "from math import sqrt\ndef polynome(a,b,c):\n  x=0\n  delta=b**2-(4*a*c)\n  if delta>0 :\n    x=(-b-sqrt(delta))/2*a,(-b+sqrt(delta))/2-a\n  elif delta==0 :\n    x=(-b)/(2*a)\n  else :\n    x='pas de solution'\n  return x\n\n    \n", "user": "userdId_28", "attemptID": 1973, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-52.748135", "embeddingY": "4.000064"},{"extension": "py", "date": "2020-04-05 23:58:22", "correct": "1", "upload": "def elemGeo(n,u0,q):\n    return u0*q**n", "user": "userdId_18", "attemptID": 1974, "exercise": "d7c83a7fb9b49e28804e55955ad06968", "exercise_name": "elemGeo", "embeddingX": "-39.866486", "embeddingY": "19.705605"},{"extension": "py", "date": "2020-03-19 23:22:34", "correct": "1", "upload": "def reconstruireChainePartielle(s,n):\n  res=''\n  for i in range(0,len(s),n):\n    res=res+s[i]\n  return res ", "user": "userdId_12", "attemptID": 1975, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-60.42135", "embeddingY": "-41.72191"},{"extension": "py", "date": "2020-03-17 05:47:25", "correct": "0", "upload": "def permutationChaine(s):\n  res=\"\"\n  for i in range(0,len(s)-1,2):\n    res=res+s[1+i]+s[i]\n  if len(s)%2!=0:\n    res=res+s[i]-1\n  return res", "user": "userdId_8", "attemptID": 1976, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-38.109413", "embeddingY": "-60.80725"},{"extension": "py", "date": "2020-03-17 04:55:26", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  res=''\n  fin=debut+longueur\n  if longueur>len(s):\n    fin=len(s)\n  for i in range(debut,fin):\n    res=res+s[i]\n  return res", "user": "userdId_12", "attemptID": 1977, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-79.20725", "embeddingY": "24.300966"},{"extension": "py", "date": "2020-04-12 00:52:45", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  calc=0\n  i=0\n  lres=[]\n  ok=None\n  while i<len(liste):\n    calc=a*calc+b\n    lres.append(calc)\n    i+=1\n  if liste in lres:\n    ok=True\n  else:\n    ok=False\n  return ok", "user": "userdId_13", "attemptID": 1978, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-74.12138", "embeddingY": "9.76769"},{"extension": "py", "date": "2020-03-22 07:27:02", "correct": "0", "upload": "def maximum(liste):\n  res=''\n  for i in range(len(liste)):\n    if res<liste[i]:\n      res=liste[i]\n  return res", "user": "userdId_16", "attemptID": 1979, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "30.190634", "embeddingY": "-70.67522"},{"extension": "py", "date": "2020-03-23 00:58:54", "correct": "0", "upload": "def nbVoyelles(mot):\n    res=0\n    for i in range (mot) :\n      if mot =='a,e,i,o,u,y' :\n        res=res+1\n    return res", "user": "userdId_24", "attemptID": 1980, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-40.89017", "embeddingY": "-21.08433"},{"extension": "py", "date": "2020-04-06 22:53:39", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  ok=True\n  i=0\n  while i<len(liste) and ok:\n    ok=liste[i]==a*liste[i+1]+b \n    prec=ok\n    i+=1\n  return ok", "user": "userdId_12", "attemptID": 1981, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-70.527794", "embeddingY": "21.185915"},{"extension": "py", "date": "2020-03-09 22:07:56", "correct": "0", "upload": "def bissextile(annee):\n  if annee%100>0:\n    res=False\n  else:\n    res=True\n  return res", "user": "userdId_12", "attemptID": 1982, "exercise": "a7d37636649c0ada991520788deeb2d0", "exercise_name": "bissextile", "embeddingX": "45.858482", "embeddingY": "-5.498469"},{"extension": "py", "date": "2020-04-07 11:11:27", "correct": "0", "upload": "def suiteGeo(liste):\n  ok=True\n  i=0\n  if len(liste)==0 and len(liste)==1:\n    ok=True\n  if liste[0]==0:\n    ok=False\n  while i<len(liste)-1 and ok:\n    if liste[i]!=0:\n      q=liste[1]/liste[0]\n    if liste[i]!=0:\n      if liste[i+1]/liste[i]!=q:\n        ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 1983, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "28.751198", "embeddingY": "62.51643"},{"extension": "py", "date": "2020-04-11 07:35:38", "correct": "0", "upload": "def sousChaine(s1,s2):\n  res=True\n  i=0\n  j=0\n  while i!=j:\n    i+=1\n    j+=i  \n  while i<len(s1)==j<len(s2) and res:\n    res=True\n  else:\n    res=False\n  return res", "user": "userdId_8", "attemptID": 1984, "exercise": "4bdf8c9c5d020593e1771e4d3ae1ae0d", "exercise_name": "sousChaine", "embeddingX": "-4.920445", "embeddingY": "49.655643"},{"extension": "py", "date": "2020-03-17 06:01:29", "correct": "0", "upload": "def maximum(liste):\n    if len (liste)==0:\n      res=none\n    else:\n         res=liste[0]\n         for elem in liste:\n            res=elem\n    return res", "user": "userdId_22", "attemptID": 1985, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-3.094124", "embeddingY": "-35.908432"},{"extension": "py", "date": "2020-04-12 07:07:01", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  if liste==[]:\n    res=True\n  c=[]\n  res=False\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n    c+=[liste[0]]\n  return c", "user": "userdId_8", "attemptID": 1986, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-69.634834", "embeddingY": "16.134382"},{"extension": "py", "date": "2020-03-24 03:14:55", "correct": "0", "upload": "def quatrePlus100(liste):\n    res=[]\n    i=0\n    nb=0\n    while i<=len(liste) or nb<4:\n      if liste[i]>100:\n        res=res+[liste[i]]\n        nb=nb+1\n      i=i+1\n    return res", "user": "userdId_18", "attemptID": 1987, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-30.941841", "embeddingY": "37.28211"},{"extension": "py", "date": "2020-03-05 23:47:24", "correct": "0", "upload": "def moyenne(liste):\n  if len(liste)==0:\n    moy=None\n  else:\n    moy=0\n  for i in liste:\n    moy=moy+i\n  moy= moy/len(liste)\n  return moy", "user": "userdId_13", "attemptID": 1988, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-0.5384662", "embeddingY": "-17.249289"},{"extension": "py", "date": "2020-03-03 06:30:18", "correct": "1", "upload": "def nombrePair(n):\n  if n%2 == 0:\n    res= True\n  else:\n    res= False\n      \n  return res", "user": "userdId_7", "attemptID": 1989, "exercise": "3001254263845e9a478696f81a704d33", "exercise_name": "nombrePair", "embeddingX": "43.88636", "embeddingY": "-4.156968"},{"extension": "py", "date": "2020-05-04 22:45:24", "correct": "0", "upload": "def prononcable(mot):\n  res=True\n  cpt=0\n  i=0\n  while i<len(mot) and res:\n    if mot[i] not in 'aeiouy':\n      cpt+=1\n    elif mot[i] in 'aeiouy':\n      cpt=0\n    elif cpt>=3:\n      res=False\n    i+=1\n  return res", "user": "userdId_26", "attemptID": 1990, "exercise": "6318b210c201fba050d60bc0913cb7ef", "exercise_name": "prononcable", "embeddingX": "14.395353", "embeddingY": "38.431206"},{"extension": "py", "date": "2020-04-16 08:46:22", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n  prec=0\n  res=0\n  i=0\n  while i<len(l) and prec<n:\n    if l[i]==x:\n      prec=prec+1\n    i=i+1\n    if prec==n:\n      return i\n    if prec<n:\n      return none", "user": "userdId_28", "attemptID": 1991, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-5.4197717", "embeddingY": "76.01566"},{"extension": "py", "date": "2020-03-05 23:51:29", "correct": "0", "upload": "def somme(liste):\n  res=0\n  for elem in list:\n    res=res+elem\n  return res", "user": "userdId_20", "attemptID": 1992, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-31.661497", "embeddingY": "-13.214508"},{"extension": "py", "date": "2020-04-12 06:49:00", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  if liste==[]:\n    res=True\n  c=[]\n  res=False\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n  c=[liste[0]]+c\n  return c", "user": "userdId_8", "attemptID": 1993, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-78.209946", "embeddingY": "22.358238"},{"extension": "py", "date": "2020-03-24 04:30:28", "correct": "0", "upload": "def fusion(liste1,liste2):\n    if liste1==[]:\n      res=liste2\n    elif liste2==[]:\n      res=liste1\n    else:\n      res=[]\n      i=0\n      while i<len(liste1) and i<len(liste2):\n        if liste1[i]<liste2[i]:\n          res=res+[min(liste1)]+[min(liste2)]\n          liste1.remove([min(liste1)])\n          liste2.remove([min(liste2)])\n        elif liste1[i]>liste2[i]:\n          res=res+[min(liste2)]+[min(liste1)]\n          liste1.remove([min(liste1)])\n          liste2.remove([min(liste2)])\n        i=i+1\n      if len(liste1)>len(liste2):\n        while i<len(liste1):\n          res=res+[min(liste1)]\n          liste1.remove([min(liste1)])\n          i=i+1\n      elif len(liste1)<len(liste2):\n        while i<len(liste2):\n          res=res+[min(liste2)]\n          liste2.remove([min(liste2)])\n          i=i+1\n    return res", "user": "userdId_18", "attemptID": 1994, "exercise": "6613efb6c873b142dc2b6040c14eb616", "exercise_name": "fusion", "embeddingX": "-27.279234", "embeddingY": "54.74905"},{"extension": "py", "date": "2020-03-20 00:51:27", "correct": "0", "upload": "def permutationChaine(s):\n  res=\"\"\n  for i in range(0,len(s)-1,2):\n    res=res+s[i+1]+s[i]\n  if (len(s)%2!=0):\n    res=res+[-1]\n  return res", "user": "userdId_20", "attemptID": 1995, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-37.471443", "embeddingY": "-60.918694"},{"extension": "py", "date": "2020-04-12 06:12:54", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=liste[0]\n  return res", "user": "userdId_8", "attemptID": 1996, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-76.91171", "embeddingY": "16.483786"},{"extension": "py", "date": "2020-03-02 07:38:39", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1<=annee2 and mois1<=mois2 and jour1<jour2:\n    return -1\n  elif annee1==annee2 and mois1==mois2 and jour1==jour2:\n    return 0\n  elif annee1>=annee2 and mois1>=mois2 and jour1>jour2:\n    return 1\n  \ncompareDates(10,1,2020,14,2,2020)\ncompareDates(14,2,2020,11,2,2020)\ncompareDates(10,1,2020,10,1,2020)", "user": "userdId_1", "attemptID": 1997, "exercise": "af7c1467ef9f7684d9ff58734067ae98", "exercise_name": "compareDates", "embeddingX": "83.06012", "embeddingY": "-14.354704"},{"extension": "py", "date": "2020-03-06 00:07:05", "correct": "0", "upload": "def nbVoyelles(mot):\n  cpt=0\n  for elem in liste==(a,e,i,o,u,y):\n    cpt=cpt+1\n  return cpt", "user": "userdId_1", "attemptID": 1998, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-27.33232", "embeddingY": "-18.260807"},{"extension": "py", "date": "2020-03-01 12:15:29", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if fin1 >= debut2 or fin2 <= debut1 :\n    res = True\n  else:\n    res = False\n  return res", "user": "userdId_42", "attemptID": 1999, "exercise": "6fd66bb2393fbf3809f1c6d04f3831f7", "exercise_name": "rendezVous", "embeddingX": "54.43176", "embeddingY": "-22.206244"},{"extension": "py", "date": "2020-04-12 05:14:33", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=False\n  c=[]\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    liste[0]+c.append(d)\n  return c", "user": "userdId_8", "attemptID": 2000, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-73.48355", "embeddingY": "26.054588"},{"extension": "py", "date": "2020-04-02 23:28:51", "correct": "0", "upload": "def listeSymetrique(l):\n  i=0\n  ok=True\n  while i<len(liste) and ok:\n    if liste[i]!=liste[-(i+1)]:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 2001, "exercise": "8eb27aeda471a467e2223abebeca886e", "exercise_name": "listeSymetrique", "embeddingX": "-3.4737208", "embeddingY": "43.05591"},{"extension": "py", "date": "2020-04-10 00:31:32", "correct": "0", "upload": "def suiteAriGeo(liste):\n  i=0\n  while i<len(liste)-1:\n    a=liste[1]-liste[0]\n    b=liste[1]-liste[0]\n    if liste[i+1]==liste[i]*a:\n        b=0\n        if liste[0]!=0:\n          a=liste[1]/liste[0]\n    if liste[i+1]==liste[i]+b:\n      a=1\n      b=liste[1]-liste[0]\n    i=i+1\n  i=0\n  ok=True\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=a*liste[i]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 2002, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "33.381477", "embeddingY": "83.24586"},{"extension": "py", "date": "2020-04-17 00:01:31", "correct": "0", "upload": "def meilleurClassementJoueur(scores,joueurs,nom):\n  if nom not in joueurs:\n    res=-1\n  else:\n    for i in range(len(joueurs)):\n      if joueurs[i]==nom:\n        return i\n  return res", "user": "userdId_12", "attemptID": 2003, "exercise": "be6ce0a06c5d396190024c7c681da95d", "exercise_name": "meilleurClassementJoueur", "embeddingX": "-24.676336", "embeddingY": "-36.56357"},{"extension": "py", "date": "2020-04-12 07:01:13", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  if liste==[]:\n    res=True\n  c=[]\n  res=False\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n    c=[liste[0]]/4+c\n  return c", "user": "userdId_8", "attemptID": 2004, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-69.809", "embeddingY": "24.241457"},{"extension": "py", "date": "2020-04-07 23:35:42", "correct": "0", "upload": "def suiteGeo(liste):\n  ok=True\n  i=0\n  if liste[i]!=0 and i<len(liste):\n    q=liste[1]/liste[0]\n  while i<len(liste)-1 and ok:\n    if liste[i]!=0:\n      if liste[i+1]/liste[i]!=q:\n        ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 2005, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "23.398285", "embeddingY": "60.35818"},{"extension": "py", "date": "2020-03-24 04:00:41", "correct": "0", "upload": "def compare(chaine1,chaine2):\n  i=0\n  while i<len(chaine1) and i<len(chaine2) and res==0:\n    if chaine1[i]>chaine2[i]:\n      res=-1\n    elif chaine1[i]<chaine2[i]:\n      res=1\n    i=i+1\n  return res", "user": "userdId_26", "attemptID": 2006, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-11.515132", "embeddingY": "43.296844"},{"extension": "py", "date": "2020-03-22 05:27:06", "correct": "1", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=liste[0]\n    for i in range(len(liste)):\n      if liste[i]>res:\n        res=liste[i]\n  return res", "user": "userdId_12", "attemptID": 2007, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "1.3979635", "embeddingY": "-62.713364"},{"extension": "py", "date": "2020-03-10 03:15:16", "correct": "0", "upload": "def jourNuit(heure):\n    if heure<0 or heure>24:\n      res=\"l'heure saisie est invalide\"\n    else:\n      if heure<5 or heure>21:\n        res=\"On est le soir\"\n      elif heure<12:\n        res=\"On est le matin\"\n      elif heure<17:\n        res=\"On est l'apres midi\"\n      else:\n        res=\"On est le soir\"\n      if heure<6 or heure>=18:\n        res=res+\" et il fait nuit\"\n      else:\n        res=res+\" et il fait jour\"\n    return res", "user": "userdId_9", "attemptID": 2008, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "72.00747", "embeddingY": "13.027212"},{"extension": "py", "date": "2020-03-03 05:18:01", "correct": "1", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res= None\n  else:\n    res= liste[0]\n    for i in range(1, len(liste)):\n    \tif res < liste[i]:\n    \t\tres= liste[i]\n  return res", "user": "userdId_7", "attemptID": 2009, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "26.329453", "embeddingY": "-68.15976"},{"extension": "py", "date": "2020-03-12 06:30:36", "correct": "0", "upload": "def somme(liste):\n  res=0\n  for i in liste(l):\n    res=res+I\n  return res\n", "user": "userdId_20", "attemptID": 2010, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-31.20085", "embeddingY": "-15.031352"},{"extension": "py", "date": "2020-03-10 04:15:30", "correct": "1", "upload": "def sommeNPremiersEntiersPairs(n):\n    res=0\n    for i in range(0,n+1,2):\n      res=res+i\n    return res", "user": "userdId_18", "attemptID": 2011, "exercise": "3030dc079e6607c253e89e8ef4784b74", "exercise_name": "sommeNPremiersEntiersPairs", "embeddingX": "-18.093628", "embeddingY": "13.18514"},{"extension": "py", "date": "2020-03-04 01:37:06", "correct": "0", "upload": "def polynome(a,b,c):\n    delta =  b**2 - (4*a*c)\n    \n    if delta > 0:\n        x = (-b + maths.sqrt(delta))/2*a , (-b -maths.sqrt(delta))/2*a\n        \n         \n    elif delta == 0:\n        x = -(b/2*a)\n        \n    else:\n        x = \"pas de solution\"\n        \n    return x", "user": "userdId_32", "attemptID": 2012, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-53.66206", "embeddingY": "2.9304678"},{"extension": "py", "date": "2020-04-10 00:16:20", "correct": "0", "upload": "def suiteAriGeo(liste):\n  while i<len(liste):\n    a=liste[1]-liste[0]\n    b=liste[1]-liste[0]\n  if liste[i+1]==liste[i]*a:\n      b=0 and a==liste[1]/liste[0]\n  if liste[i+1]==liste[i]+b:\n    a=1 and b==liste[1]-liste[0]\n  i=i+1\n  \ndef verifSuiteAriGeo(liste,a,b):\n  ok=True\n  i=0\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=a*liste[i]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 2013, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "-50.020985", "embeddingY": "19.755077"},{"extension": "py", "date": "2020-03-13 00:55:19", "correct": "1", "upload": "def sommeNPremiersEntiersPairs(n):\n\tres=0\n\tif n<0:\n\t\tres=0\n\tfor i in range(2,n+1,2):\n\t\t\tres=res+i\n\treturn res", "user": "userdId_19", "attemptID": 2014, "exercise": "3030dc079e6607c253e89e8ef4784b74", "exercise_name": "sommeNPremiersEntiersPairs", "embeddingX": "-14.392823", "embeddingY": "12.362092"},{"extension": "py", "date": "2020-03-27 06:04:38", "correct": "0", "upload": "def quatrePlus100(liste):\n  res=[]\n  i=0\n  while i<len(liste)and len(res)<4:\n    if l[i]>100:\n      res=res+[liste[i]]\n    i=i+1\n  return res", "user": "userdId_20", "attemptID": 2015, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-29.35292", "embeddingY": "43.538692"},{"extension": "py", "date": "2020-03-31 05:42:38", "correct": "0", "upload": "def nbChiffres(nombre):\n  cpt=0\n  while nombre!=0:\n    nombre=nombre//10\n    cpt+=1\n  if cpt==0:\n    res=1\n  return cpt", "user": "userdId_13", "attemptID": 2016, "exercise": "3dcf332c003a1f3bf15df22ee17884a3", "exercise_name": "nbChiffres", "embeddingX": "31.726273", "embeddingY": "13.81061"},{"extension": "py", "date": "2020-03-06 00:21:31", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n  if len(mot)==0:\n    pos=None\n  else:\n    for i in range(len(liste)):\n      if lettre==liste[i]:\n        pos=liste[i]\n      else:\n        pos=None\n        \n  return pos", "user": "userdId_15", "attemptID": 2017, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-17.924385", "embeddingY": "-36.133102"},{"extension": "py", "date": "2020-04-07 19:53:04", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  for i in range(len(nombre)):\n    if chiffre==nombre[i]:\n      cpt=cpt+1\n  return cpt", "user": "userdId_3", "attemptID": 2018, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-35.985775", "embeddingY": "-17.496637"},{"extension": "py", "date": "2020-03-04 05:06:49", "correct": "0", "upload": "def maximum(liste):\n    if len(liste)==0:\n      res=None\n    else:\n      res=liste[0]\n      for i in range(1,len(liste)):\n        if (liste[i])>res:\n          res=i\n    return res", "user": "userdId_18", "attemptID": 2019, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "0.5171072", "embeddingY": "-60.840984"},{"extension": "py", "date": "2020-03-22 04:54:30", "correct": "0", "upload": "def polynome(a,b,c):\n  delta=b^2-4*a*c\n  if delta>0:\n    x=(-b-delta^0.5)/2*a,(-b+(delta^0.5)/2*a)\n  elif delta==0:\n    x=-b/2*a\n  else:\n    x='pas de solution'\n  return x", "user": "userdId_12", "attemptID": 2020, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-53.636135", "embeddingY": "5.296879"},{"extension": "py", "date": "2020-03-23 00:55:33", "correct": "0", "upload": "def sommeNPremiersEntiersPairs(n):\n    if n<0:\n      res=0\n    else:\n      res=0\n      for x in range(n):\n        if x%2==0:\n          res=res+x\n    return res\n  ", "user": "userdId_11", "attemptID": 2021, "exercise": "3030dc079e6607c253e89e8ef4784b74", "exercise_name": "sommeNPremiersEntiersPairs", "embeddingX": "28.767597", "embeddingY": "-12.890801"},{"extension": "py", "date": "2020-03-08 23:08:06", "correct": "0", "upload": "from math import sqrt \n\ndef polynome(a,b,c):\n  d=b**2-(4*a*c)\n  if d<0:\n    return 'pas de solution'\n  elif d==0:\n    solution=-b/(2*a)\n    return solution\n  else:\n    if d>0:\n      solution1=-b-(sqrt(d))/(2*a)\n      solution2=-b+(sqrt(d))/(2*a)\n      return solution1 and solution2", "user": "userdId_1", "attemptID": 2022, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-51.50923", "embeddingY": "9.329752"},{"extension": "py", "date": "2020-03-31 01:59:58", "correct": "1", "upload": "def listeSymetrique(l):\n    trouve=True\n    i=0\n    j=-1\n    while i<len(l) and j>=-len(l) and trouve==True:\n      if l[i]!=l[j]:\n        trouve=False\n      i=i+1\n      j=j-1\n    return trouve\n  \n      ", "user": "userdId_28", "attemptID": 2023, "exercise": "8eb27aeda471a467e2223abebeca886e", "exercise_name": "listeSymetrique", "embeddingX": "22.981339", "embeddingY": "63.341568"},{"extension": "py", "date": "2020-04-08 03:54:28", "correct": "1", "upload": "def motPalindrome(mot):\n    if len(mot)==0:\n      res=True\n    else:\n      res=True\n      i=0\n      while i<len(mot)//2 and res:\n        if mot[i]!=mot[-(i+1)]:\n          res=False\n        i+=1\n    return res", "user": "userdId_11", "attemptID": 2024, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "25.47913", "embeddingY": "36.279297"},{"extension": "py", "date": "2020-03-13 00:55:03", "correct": "0", "upload": "def doubleLettre(mot):\n  lettre2 = ' '\n  res = False\n  for lettre1 in mot :\n    if lettre1 == lettre2 :\n      res = True\n  \t\n  return res", "user": "userdId_17", "attemptID": 2025, "exercise": "00da9cf1fa2b468d915724499459ed8f", "exercise_name": "doubleLettre", "embeddingX": "16.173307", "embeddingY": "-5.661906"},{"extension": "py", "date": "2020-04-13 23:17:07", "correct": "0", "upload": "def listeDecroissante(scores):\n  res=False\n  if scores==[]:\n    res=True\n  for i in range(len(scores)-1):\n    if scores[i]>scores[i+1]:\n      res=True\n  return res", "user": "userdId_8", "attemptID": 2026, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "-8.165484", "embeddingY": "-69.01681"},{"extension": "py", "date": "2020-03-12 21:54:40", "correct": "0", "upload": "def minimum(liste):\n  res=l([0],)\n  for elem in liste:\n    if res>elem:\n      res=elem\n  return res", "user": "userdId_23", "attemptID": 2027, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "-50.520336", "embeddingY": "-0.8335875"},{"extension": "py", "date": "2020-04-07 04:00:21", "correct": "1", "upload": "def produitScalaire(vec1,vec2):\n  if len(vec1)==[] and len(vec2)==[]:\n    res=0\n  else: \n    res=0\n    for i in range(len(vec1) and len(vec2)):\n      res=res+vec1[i]*vec2[i]\n  return res", "user": "userdId_21", "attemptID": 2028, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-30.609402", "embeddingY": "-42.772373"},{"extension": "py", "date": "2020-03-31 04:09:40", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n  i=0\n  cpt=0\n  trouve=False\n  if l==[]:\n    res=None\n  else:\n    while i<len(l) and not trouve:\n      if x==l[i]:\n        cpt+=1  \n      if n==cpt:\n        trouve=True    \n      i+=1\n      res=i-1\n    if n>cpt:\n      res=None\n    elif cpt==0:\n      res=None\n  return res", "user": "userdId_27", "attemptID": 2029, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-0.45626628", "embeddingY": "67.70781"},{"extension": "py", "date": "2020-03-06 00:13:05", "correct": "0", "upload": "def maximum(liste):\n  res=0\n  for i in range(len(liste)):\n      res=res+ liste[i]\n  return res", "user": "userdId_41", "attemptID": 2030, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-43.651546", "embeddingY": "-37.481808"},{"extension": "py", "date": "2020-04-13 21:32:33", "correct": "1", "upload": "def indiceInsertion(sc,scores):\n  for i in range(len(scores)):\n    if scores[i]<sc:\n      return i\n  return(len(scores))", "user": "userdId_6", "attemptID": 2031, "exercise": "f8a820b2bd54d18d36716e3d703858f7", "exercise_name": "indiceInsertion", "embeddingX": "-17.26009", "embeddingY": "-46.937607"},{"extension": "py", "date": "2020-03-31 04:29:38", "correct": "0", "upload": "def stockerChiffres(nombre):\n  nombre = str(nombre)\n  i = 0\n  res = []\n  while i > len(nombre):\n    res = [int(nombre[i])] + res\n    i = i + 1 \n  return res", "user": "userdId_17", "attemptID": 2032, "exercise": "49a87f644f84a443327fb4315b47f249", "exercise_name": "stockerChiffres", "embeddingX": "-39.745224", "embeddingY": "41.238483"},{"extension": "py", "date": "2020-04-06 22:20:24", "correct": "0", "upload": "def sousChaine(s1,s2):\n  i=0\n  j=0\n  cpt=0\n  while i<len(s2) and j<len(s1): \n    if s2[i]==s1[j]:\n      cpt+=1 \n      j+=1\n    else:\n      cpt=0\n    i+=1\n  return cpt==len(s1)", "user": "userdId_12", "attemptID": 2033, "exercise": "a7cdd094daa2f0bfccc7a4ec419f7243", "exercise_name": "sousChaine", "embeddingX": "-7.405158", "embeddingY": "61.474705"},{"extension": "py", "date": "2020-03-12 06:39:33", "correct": "0", "upload": "def maximum(liste):\n  res=(liste[0])\n  for i in liste:\n    if res<liste:\n      res=max\n  return res ", "user": "userdId_20", "attemptID": 2034, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "39.490532", "embeddingY": "-59.127754"},{"extension": "py", "date": "2020-03-01 12:41:10", "correct": "0", "upload": "def polynome(a, b, c):\n    Delta = (b ** 2) - (4 * a * c)\n    if Delta < 0:\n        return (\"pas de solution\")\n    else:\n        if Delta == 0:\n            sol = -b / (2*a)\n            return (sol)\n        else:\n            sol1 = (-b - sqrt(Delta)) / 2 * a\n            sol2 = (-b + sqrt(Delta)) / 2 * a\n            return (sol2, sol1)\n", "user": "userdId_42", "attemptID": 2035, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-52.264748", "embeddingY": "8.185953"},{"extension": "py", "date": "2020-03-05 21:44:33", "correct": "0", "upload": "def somme(liste):\n  res=0\n  for i in range (len(liste)):\n     res=res+liste(i)\n  return res", "user": "userdId_23", "attemptID": 2036, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-40.252712", "embeddingY": "-30.760069"},{"extension": "py", "date": "2020-03-05 22:06:41", "correct": "1", "upload": "def maximum(liste):\n  if len(liste)==0:\n     res=None\n  else:\n    res=liste[0]\n    for i in range(1,len(liste)):\n      if liste[i]>res:\n        res=liste[i]\n  return res", "user": "userdId_30", "attemptID": 2037, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-0.6593091", "embeddingY": "-61.084846"},{"extension": "py", "date": "2020-04-12 10:23:09", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  res=0\n  while nombre!=0:\n    if nombre%10==chiffre:\n      res=res+1\n    nombre=nombre//10\n  if nombre==0:\n    res=1\n  return res", "user": "userdId_38", "attemptID": 2038, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "21.793726", "embeddingY": "10.698769"},{"extension": "py", "date": "2020-04-07 01:47:04", "correct": "1", "upload": "def produitScalaire(vec1,vec2):\n  res = 0\n  for i in range (len(vec1)):\n    res = res + vec1[i]*vec2[i]\n  return res\n  ", "user": "userdId_17", "attemptID": 2039, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-49.47579", "embeddingY": "-35.980656"},{"extension": "py", "date": "2020-03-20 00:15:57", "correct": "0", "upload": "def permutationChaine(s):\n  res=''\n  if len(s)<1:\n  \tres=''\n  else:\n    for i in range(0,len(s)-1,2):\n      res=res+s[i+1]\n      res=res+s[i]\n  res=res+s[len(s)-1]\n  return res", "user": "userdId_40", "attemptID": 2040, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-39.897938", "embeddingY": "-55.2071"},{"extension": "py", "date": "2020-03-10 08:37:10", "correct": "1", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n\tif debut2>fin1 or debut1>fin2:\n\t\tres=False\n\telse :\n\t\tres=True\n\treturn res", "user": "userdId_37", "attemptID": 2041, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "63.904472", "embeddingY": "-22.439814"},{"extension": "py", "date": "2020-04-05 06:23:47", "correct": "1", "upload": "def permutationListe(liste,permutation):\n    res=[0]*len(liste)\n    for i in range(len(liste)):\n       res[permutation[i]]=liste[i]\n    return res", "user": "userdId_18", "attemptID": 2042, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-50.617973", "embeddingY": "-30.391382"},{"extension": "py", "date": "2020-03-05 21:42:58", "correct": "0", "upload": "def somme(liste):\n  res=0\n  for i in range (len(liste)):\n     res=res+liste(i)\n  return None", "user": "userdId_23", "attemptID": 2043, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-40.26177", "embeddingY": "-30.761503"},{"extension": "py", "date": "2020-04-06 03:44:30", "correct": "1", "upload": "def verifSuiteAriGeo(liste,a,b):\n  ok=True\n  n=1\n  while n<len(liste) and ok:\n    if liste[n]!=liste[n-1]*a+b:\n      ok=False\n    n+=1\n  return ok", "user": "userdId_6", "attemptID": 2044, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-72.36351", "embeddingY": "27.7764"},{"extension": "py", "date": "2020-04-17 03:05:33", "correct": "0", "upload": "def nbVoyelles(mot):\n  cpt=0\n  for n in mot: \n    if n=='aeiouy':\n      cpt=cpt+1\n  return cpt", "user": "userdId_21", "attemptID": 2045, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "1.1766059", "embeddingY": "-24.480074"},{"extension": "py", "date": "2020-03-23 01:14:05", "correct": "1", "upload": "def nbOccurrencesLettre(lettre,mot):\n  res=0\n  for i in range(len(mot)):\n    if lettre==mot[i]:\n      res=res+1\n  return res", "user": "userdId_16", "attemptID": 2046, "exercise": "2864c9e5861229d2ff32570f6bc944fb", "exercise_name": "nbOccurrencesLettre", "embeddingX": "-21.253643", "embeddingY": "-40.86795"},{"extension": "py", "date": "2020-04-07 04:20:21", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  ok=True\n  i=0\n  while i<len(liste) and ok:\n    if liste[i]!=a*liste[i-1]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 2047, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-75.62613", "embeddingY": "13.76083"},{"extension": "py", "date": "2020-04-07 02:57:02", "correct": "0", "upload": "def suiteAri(liste):\n  i=1\n  ok=True\n  raison=liste[1]-liste[0]\n  while i<len(liste)-1 and ok:\n    ok=liste[i+1]==liste[i]+raison\n    i+=1\n  return ok", "user": "userdId_12", "attemptID": 2048, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "31.940523", "embeddingY": "53.245804"},{"extension": "py", "date": "2020-03-05 22:05:51", "correct": "0", "upload": "def maximum(liste):\n  if len(liste):\n    res=None \n  else:\n      res=liste[0]\n      for i in range(1,len(liste)):\n        res=len(liste)>res\n        res=len(liste)  \n  return res", "user": "userdId_25", "attemptID": 2049, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "5.1764655", "embeddingY": "-55.54878"},{"extension": "py", "date": "2020-03-06 00:22:40", "correct": "0", "upload": "def minimum(liste):\n    if len(liste)==0:\n      return None\n    min=0\n    for i in range(1,len(liste)):\n      if liste[i]<min:\n        min=liste[i]\n      return min", "user": "userdId_1", "attemptID": 2050, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "18.694298", "embeddingY": "-78.886406"},{"extension": "py", "date": "2020-03-17 05:53:57", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  res=''\n  if debut+longueur>len(s):\n    res=debut+longueur\n  else:\n    if debut+longueur<len(s):\n      fin=debut+longueur\n  for i in range(debut,debut+longueur): \n    res=res+fin\n  return res", "user": "userdId_25", "attemptID": 2051, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-78.66012", "embeddingY": "17.4625"},{"extension": "py", "date": "2020-04-11 05:32:54", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  res=0\n  while nombre!=0:\n    if nombre//10==chiffre:\n      nombre=nombre//10\n      res+=1\n  return res", "user": "userdId_8", "attemptID": 2052, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "23.629314", "embeddingY": "12.921457"},{"extension": "py", "date": "2020-04-12 10:21:19", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  res=0\n  while nombre!=0:\n    if nombre%10==chiffre:\n      res=res+1\n    nombre=nombre//10\n  return res", "user": "userdId_38", "attemptID": 2053, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "21.798573", "embeddingY": "10.707853"},{"extension": "py", "date": "2020-03-22 09:19:06", "correct": "0", "upload": "def moyenne(liste):\n  if liste==():\n    res=none\n  else:\n    x=0\n    for i in range(len(liste)):\n      x=x+liste[i]\n    res=x/len(liste)\n  return res", "user": "userdId_16", "attemptID": 2054, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-12.342548", "embeddingY": "-6.284937"},{"extension": "py", "date": "2020-03-12 21:47:37", "correct": "1", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1>annee2:\n    res=1\n  elif annee1<annee2:\n    res=-1\n  elif mois1>mois2:\n    res=1\n  elif mois1<mois2:\n    res=-1\n  elif jour1>jour2:\n    res=1\n  elif jour1<jour2:\n    res=-1\n  else:\n    res=0\n  return res", "user": "userdId_35", "attemptID": 2055, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "82.18912", "embeddingY": "-32.339977"},{"extension": "py", "date": "2020-04-12 10:05:35", "correct": "0", "upload": "def phrasePalindrome(phrase):\n    if len(phrase)==0:\n      res=True\n    else:\n      res=True\n      i=0\n      x=''\n      while i<len(phrase)//2 and res:\n        if phrase[i]!=phrase[-(i+1)]:\n          res=False\n        if x in phrase:\n          res=False\n        i+=1\n    return res", "user": "userdId_11", "attemptID": 2056, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "33.300743", "embeddingY": "33.38357"},{"extension": "py", "date": "2020-04-07 03:24:41", "correct": "0", "upload": "def suiteGeo(liste):\n  i=-1\n  ok=True\n  if len(liste)>1:\n    while i>-len(liste):\n      if liste[i-1]!=0 and liste[i]%liste[i-1]!=0:\n        ok=False\n      i-=1\n  return ok", "user": "userdId_12", "attemptID": 2057, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "17.148884", "embeddingY": "31.084883"},{"extension": "py", "date": "2020-03-27 05:27:57", "correct": "0", "upload": "def quatrePlus100(liste):\n  i=0\n  res=[0]*len(liste)\n  while i<4:\n    if liste[i]>100:\n      res.append(liste[i])\n    i=i+1\n  return res", "user": "userdId_12", "attemptID": 2058, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-27.110561", "embeddingY": "35.374985"},{"extension": "py", "date": "2020-03-31 03:19:12", "correct": "0", "upload": "def fusion(liste1,liste2):\n  res=[]\n  i=0\n  j=0\n  while i<len(liste1) and j<len(liste2):\n    if liste1[i]<=liste2[j]:\n      res.append(liste1[i])\n      i+=1\n    else:\n      res.append(liste2[j])\n      j+=1\n    if len(liste1)<len(liste2):\n      res.append(liste2[j])\n      j+=1\n    else:\n      res.append(liste1[i])\n      i+=1\n  return res", "user": "userdId_8", "attemptID": 2059, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-43.228016", "embeddingY": "53.167263"},{"extension": "py", "date": "2020-04-11 07:26:54", "correct": "0", "upload": "def sousChaine(s1,s2):\n  res=True\n  i=0\n  j=0\n  while i<len(s1[i]) in j<len(s2[i]) and res:\n    res=True\n  else:\n    res=False\n  return res", "user": "userdId_8", "attemptID": 2060, "exercise": "4bdf8c9c5d020593e1771e4d3ae1ae0d", "exercise_name": "sousChaine", "embeddingX": "-4.138281", "embeddingY": "47.44756"},{"extension": "py", "date": "2020-03-11 01:38:59", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n    d1=jour1,mois1,annee1\n    d2=jour2,mois2,annee2\n    if d1>d2:\n      res=-1\n    elif d2>d1:\n      res=1\n    else:\n      res=0\n    return res", "user": "userdId_21", "attemptID": 2061, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "3.4413147", "embeddingY": "2.383029"},{"extension": "py", "date": "2020-04-07 22:44:05", "correct": "0", "upload": "def suiteAri(liste):\n  res = True\n  if liste == [] :\n    res = True\n  else :\n    raison = liste[1]-liste[0]\n  while res and i < len(liste)-1 :\n    if liste[i]+raison != liste[i+1]:\n      res = False\n  return res", "user": "userdId_17", "attemptID": 2062, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "14.717409", "embeddingY": "60.11153"},{"extension": "py", "date": "2020-03-24 06:43:45", "correct": "0", "upload": "def fusion(liste1,liste2):\n  res=[1]\n  i=0\n  while i<len(liste1)+len(liste2) and res==len(liste1)+len(liste2):\n    if liste1[i]>liste2[i]:\n      res=res+[liste2[i]]\n    elif liste1[i]==liste2[i]:\n      res=res+[liste1[i]]+[liste2[i]]\n    else:\n      res=res+[liste1[i]]\n    i=i+1\n  return res", "user": "userdId_26", "attemptID": 2063, "exercise": "6613efb6c873b142dc2b6040c14eb616", "exercise_name": "fusion", "embeddingX": "-21.466614", "embeddingY": "52.14073"},{"extension": "py", "date": "2020-03-03 05:25:59", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    for i in range(liste):\n      if res<liste[i]:\n        res=liste[i]\n  return res", "user": "userdId_8", "attemptID": 2064, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "2.5747268", "embeddingY": "-46.813168"},{"extension": "py", "date": "2020-04-17 03:08:15", "correct": "1", "upload": "def nbVoyelles(mot):\n  cpt=0\n  for i in mot: \n    if i in 'aeiouy':\n      cpt=cpt+1\n  return cpt", "user": "userdId_21", "attemptID": 2065, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "15.447177", "embeddingY": "-24.878424"},{"extension": "py", "date": "2020-04-12 11:00:33", "correct": "0", "upload": "def phrasePalindrome(phrase):\n    if len(phrase)==0:\n      res=True\n    else:\n      res=True\n      i=0\n      x=''\n      y=phrase-x\n      while i<len(y)//2 and res:\n        if y[i]!=y[-(i+1)]:\n          res=False\n        i+=1\n    return res", "user": "userdId_11", "attemptID": 2066, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "3.3058283", "embeddingY": "-40.319748"},{"extension": "py", "date": "2020-03-11 03:17:18", "correct": "0", "upload": "def prononcable(mot):\n    listvoy = [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"A\", \"E\", \"I\", \"O\", \"U\", \"Y\", \" \", \"\u00e8\", \"\u00e9\", \"\u00e0\"]\n    cons = 0\n    for lettre in mot:\n        if lettre not in listvoy:\n            cons += 1\n        elif cons >= 4:\n            return False\n        else:\n            cons = 0\n    return True", "user": "userdId_42", "attemptID": 2067, "exercise": "6318b210c201fba050d60bc0913cb7ef", "exercise_name": "prononcable", "embeddingX": "23.805475", "embeddingY": "-31.484825"},{"extension": "py", "date": "2020-03-22 10:23:13", "correct": "0", "upload": "def bissextile(a):\n    if a%4==0 or a%400==0: \n      res=True\n    else: \n      res=False\n    return res", "user": "userdId_21", "attemptID": 2068, "exercise": "a7d37636649c0ada991520788deeb2d0", "exercise_name": "bissextile", "embeddingX": "44.636223", "embeddingY": "-0.10043634"},{"extension": "py", "date": "2020-03-05 23:34:53", "correct": "1", "upload": "def somme(liste):\n    res=0\n    for elem in liste:\n      res=res+elem\n    return res\n  \n      \n    ", "user": "userdId_9", "attemptID": 2069, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-28.833048", "embeddingY": "1.974326"},{"extension": "py", "date": "2020-04-06 02:37:27", "correct": "0", "upload": "def motPalindrome(mot):\n  res = True\n  i = 0\n  while i < len(mot)/2 and res == True :\n    if mot[i] != mot[len(l)-i-1] :\n      res = False\n    i = i + 1\n  return res", "user": "userdId_17", "attemptID": 2070, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "28.473856", "embeddingY": "52.472183"},{"extension": "py", "date": "2020-03-17 08:56:05", "correct": "0", "upload": "def nombrePair(n):\n  if n%2==0 :\n    res=True\n  else :\n    res=False\n    return res", "user": "userdId_24", "attemptID": 2071, "exercise": "3001254263845e9a478696f81a704d33", "exercise_name": "nombrePair", "embeddingX": "43.87103", "embeddingY": "-2.799199"},{"extension": "py", "date": "2020-04-12 05:37:15", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=False\n  c=[]\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n    c=liste[0]+d\n    c.append(d)\n  return c", "user": "userdId_8", "attemptID": 2072, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-70.93377", "embeddingY": "10.168596"},{"extension": "py", "date": "2020-03-10 03:05:37", "correct": "0", "upload": "def jourNuit(heure):\n  temp='il fait nuit le reste du temps'\n  if heure>=6<=18:\n    return temp", "user": "userdId_36", "attemptID": 2073, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "66.10206", "embeddingY": "17.777418"},{"extension": "py", "date": "2020-04-12 08:04:36", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n    cpt=0\n    x=nombre%10\n    decomp=nombre\n    while decomp!=0 and x:\n      if x==chiffre:\n        cpt+=1\n      else:\n        decomp=decomp//10\n        x=decomp%10\n    if cpt==0:\n      cpt=1\n    return cpt", "user": "userdId_11", "attemptID": 2074, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "7.717167", "embeddingY": "12.738727"},{"extension": "py", "date": "2020-04-07 23:31:39", "correct": "0", "upload": "def suiteGeo(liste):\n  ok=True\n  i=0\n  if liste[0]!=0:\n    q=liste[1]/liste[0]\n  while i<len(liste)-1 and ok:\n    if liste[i]!=0:\n      if liste[i+1]/liste[i]!=q:\n        ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 2075, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "23.383345", "embeddingY": "60.344616"},{"extension": "py", "date": "2020-03-02 23:53:21", "correct": "1", "upload": "def semestreValide(ue1,ue2):\n  if ue1 < 10 :\n    res = False\n  elif ue1 >= 10 and ue2 < 10 :\n    if ((ue1 + ue2) /2) >= 10 :\n      res = True\n    else :\n      res = False\n  else :\n  \tres = True\n   \n      \n  return res", "user": "userdId_17", "attemptID": 2076, "exercise": "70ae7ad6cf504e0fa8cedebd8e8a825f", "exercise_name": "semestreValide", "embeddingX": "67.107285", "embeddingY": "-1.0049992"},{"extension": "py", "date": "2020-03-12 22:11:25", "correct": "0", "upload": "def moyenne(liste):\n  if len (liste)==0:\n    res=None\n  else:\n    res=0\n    cpt=0\n    for elem in liste:\n      res=res+elem\n      cpt=cpt+elem\n      res=elem/cpt\n  return res ", "user": "userdId_20", "attemptID": 2077, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-2.9913626", "embeddingY": "-8.320898"},{"extension": "py", "date": "2020-03-17 04:58:15", "correct": "1", "upload": "def reconstruireChainePartielle(s,n):\n  res=\"\"\n  for i in range(0,len(s),n):\n    res=res+s[i]\n  return res", "user": "userdId_35", "attemptID": 2078, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-59.579597", "embeddingY": "-40.793736"},{"extension": "py", "date": "2020-03-01 01:35:19", "correct": "1", "upload": "def bissextile(annee):\n    res = False\n    if annee%4 == 0 and annee%100 != 0 or annee%400 == 0: res = True\n    return res", "user": "userdId_4", "attemptID": 2079, "exercise": "a7d37636649c0ada991520788deeb2d0", "exercise_name": "bissextile", "embeddingX": "48.162876", "embeddingY": "1.305156"},{"extension": "py", "date": "2020-03-05 21:37:59", "correct": "0", "upload": "def somme(liste):\n  res=0\n  for i in range (len(liste)):\n   res=res+liste\n  return None", "user": "userdId_23", "attemptID": 2080, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-40.60136", "embeddingY": "-29.047495"},{"extension": "py", "date": "2020-05-04 21:58:35", "correct": "0", "upload": "def moyenne(liste):\n  if liste==[]:\n    res=None\n  res=0\n  for elem in liste:\n    res+=elem\n  res=res/len(liste)\n  return res", "user": "userdId_8", "attemptID": 2081, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-4.459539", "embeddingY": "-18.704456"},{"extension": "py", "date": "2020-03-13 00:58:59", "correct": "1", "upload": "def sommeNPremiersEntiers(n):\n  res=0\n  for i in range(n+1):\n    res=res+i\n  return res", "user": "userdId_12", "attemptID": 2082, "exercise": "c315a540cf0bfb0182dc114c6f0eafd1", "exercise_name": "sommeNPremiersEntiers", "embeddingX": "-19.729307", "embeddingY": "12.949941"},{"extension": "py", "date": "2020-03-30 11:44:04", "correct": "0", "upload": "def fusion(liste1,liste2):\n    if liste1==[]:\n      res=liste2\n    elif liste2==[]:\n      res=liste1\n    else:\n      res=liste1+liste2\n    res.sort()\n    return res", "user": "userdId_32", "attemptID": 2083, "exercise": "6613efb6c873b142dc2b6040c14eb616", "exercise_name": "fusion", "embeddingX": "-17.769646", "embeddingY": "-16.07663"},{"extension": "py", "date": "2020-03-12 06:23:59", "correct": "0", "upload": "def somme(liste):\n  res=0\n  for i in liste:\n    res=res+i(liste)\n  return res", "user": "userdId_20", "attemptID": 2084, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-27.384037", "embeddingY": "5.7567596"},{"extension": "py", "date": "2020-03-02 02:50:16", "correct": "1", "upload": "def bissextile(annee):\n  a=(annee/400)\n  b=(annee//400)\n  c=(annee/4)\n  d=(annee//4)\n  e=(annee/100)\n  f=(annee//100)\n  if a==b or (c==d and e!=f) :\n    res=True\n  else :\n    res=False\n    \n  return res", "user": "userdId_15", "attemptID": 2085, "exercise": "a7d37636649c0ada991520788deeb2d0", "exercise_name": "bissextile", "embeddingX": "22.082375", "embeddingY": "24.191872"},{"extension": "py", "date": "2020-03-24 04:40:36", "correct": "0", "upload": "def fusion(liste1,liste2):\n    if liste1==[]:\n      res=liste2\n    elif liste2==[]:\n      res=liste1\n    else:\n      res=[]\n      i=0\n      while i<len(liste1) and i<len(liste2):\n        if liste1[i]<liste2[i]:\n          res=res+[min(liste1)]+[min(liste2)]\n          liste1.remove(min(liste1))\n          liste2.remove(min(liste2))\n        elif liste1[i]>liste2[i]:\n          res=res+[min(liste2)]+[min(liste1)]\n          liste1.remove(min(liste1))\n          liste2.remove(min(liste2))\n        i=i+1\n      if len(liste1)>len(liste2):\n        while i<len(liste1):\n          res=res+[min(liste1)]\n          liste1.remove(min(liste1))\n          i=i+1\n      elif len(liste1)<len(liste2):\n        while i<len(liste2):\n          res=res+[min(liste2)]\n          liste2.remove(min(liste2))\n          i=i+1\n    return res", "user": "userdId_18", "attemptID": 2086, "exercise": "6613efb6c873b142dc2b6040c14eb616", "exercise_name": "fusion", "embeddingX": "-27.405954", "embeddingY": "54.52158"},{"extension": "py", "date": "2020-03-13 00:55:56", "correct": "1", "upload": "def doubleLettre(mot):\n  lettre2 = ' '\n  res = False\n  for lettre1 in mot :\n    if lettre1 == lettre2 :\n      res = True\n    lettre2 = lettre1\n  return res", "user": "userdId_17", "attemptID": 2087, "exercise": "00da9cf1fa2b468d915724499459ed8f", "exercise_name": "doubleLettre", "embeddingX": "16.270065", "embeddingY": "-5.8600283"},{"extension": "py", "date": "2020-03-13 00:39:11", "correct": "1", "upload": "def sommeNPremiersEntiers(n):\n\tres=0\n\tif n<0:\n\t\tres=0\n\tfor i in range(1,n+1):\n\t\tres=res+i\n\treturn res", "user": "userdId_19", "attemptID": 2088, "exercise": "c315a540cf0bfb0182dc114c6f0eafd1", "exercise_name": "sommeNPremiersEntiers", "embeddingX": "-14.533926", "embeddingY": "12.316484"},{"extension": "py", "date": "2020-03-23 22:26:02", "correct": "0", "upload": "def quatrePlus100(liste):\n  res=[]\n  i=0\n  while len(res)<4 :\n    if liste[i]>100 :\n      res=res+[liste[i]]\n    i=i+1\n  return res", "user": "userdId_28", "attemptID": 2089, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-28.221596", "embeddingY": "37.46405"},{"extension": "py", "date": "2020-03-07 00:52:50", "correct": "1", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1<annee2:\n    res=-1\n  elif annee1>annee2:\n    res=1\n  elif mois1<mois2:\n    res=-1\n  elif mois1>mois2:\n    res=1\n  elif jour1<jour2:\n    res=-1\n  elif jour1>jour2:\n    res=1\n  else:\n    res=0\n  return res", "user": "userdId_8", "attemptID": 2090, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "81.77952", "embeddingY": "-33.56212"},{"extension": "py", "date": "2020-04-21 02:47:37", "correct": "0", "upload": "def meilleurScoreJoueur(scores,joueurs,nom):\n    trouve=False\n    i=0\n    while i<len(joueurs) and i<len(scores) and trouve:\n      if joueurs[i]==nom:\n        trouve=True\n      i+=1\n    if trouve:\n      res=scores[i-1]\n    else:\n      res=0\n    return res", "user": "userdId_11", "attemptID": 2091, "exercise": "c96fadc94086276f98451a798b3bb730", "exercise_name": "meilleurScoreJoueur", "embeddingX": "-1.5718122", "embeddingY": "50.70096"},{"extension": "py", "date": "2020-03-23 00:47:12", "correct": "0", "upload": "def reconstruireChainePartielle(s,n):\n    res = \"\"\n    for i in range (len(s),n) :\n      res = res + [s]\n    return res", "user": "userdId_24", "attemptID": 2092, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-61.08258", "embeddingY": "-35.873756"},{"extension": "py", "date": "2020-04-03 00:42:33", "correct": "1", "upload": "def stockerChiffres(nombres):\n  res=[]\n  if nombres==0:\n    res=[0]\n  while nombres!=0:\n    res.append(nombres%10)\n    nombres=nombres//10\n  return res", "user": "userdId_5", "attemptID": 2093, "exercise": "49a87f644f84a443327fb4315b47f249", "exercise_name": "stockerChiffres", "embeddingX": "41.574287", "embeddingY": "13.376739"},{"extension": "py", "date": "2020-03-10 04:09:15", "correct": "0", "upload": "def sommeNbPairs(liste):\n  if len(liste)==0:\n    res=0\n  else:\n    res=liste[0]\n    for i in range(1,len(liste)):\n      if liste[i]%2==0:\n        res=res+liste[i]\n  return res\n      \n      \n  ", "user": "userdId_9", "attemptID": 2094, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "-19.36431", "embeddingY": "-56.991745"},{"extension": "py", "date": "2020-04-14 00:22:23", "correct": "0", "upload": "def indiceInsertion(sc,scores):\n  res=0\n  for elme in scores:\n    if elem>=sc:\n      res+=1\n    return res", "user": "userdId_8", "attemptID": 2095, "exercise": "f8a820b2bd54d18d36716e3d703858f7", "exercise_name": "indiceInsertion", "embeddingX": "-5.807388", "embeddingY": "-26.00186"},{"extension": "py", "date": "2020-03-27 07:03:46", "correct": "1", "upload": "def compare(chaine1,chaine2):\n  res=0\n  i=0\n  while i<len(chaine1) and i<len(chaine2) and res==0:\n    if chaine1[i]<chaine2[i]:\n      res=-1\n    elif chaine1[i]==chaine2[i]:\n      res=0\n    else:\n      res=1\n    i=i+1\n  #traiter le cas o\u00f9 les deux chaines sont identiques mais l'une est plus longue que l'autre\n  if res==0:\n    if len(chaine1)>len(chaine2):\n      res=1\n    elif len(chaine1)<len(chaine2):\n      res=-1\n  return res\n   ", "user": "userdId_34", "attemptID": 2096, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-23.484632", "embeddingY": "62.009403"},{"extension": "py", "date": "2020-03-05 23:50:56", "correct": "0", "upload": "def moyenne(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=0\n    cpt=0\n    for elem in liste:\n      res=res+elem\n      cpt=cpt+1\n      res=res/cpt\n  return res", "user": "userdId_13", "attemptID": 2097, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-3.0767565", "embeddingY": "-8.859951"},{"extension": "py", "date": "2020-04-14 05:52:16", "correct": "1", "upload": "def meilleurClassementJoueur(scores,joueurs,nom):\n  MS=1\n  i=0\n  while i<len(joueurs) and nom!=joueurs[i]:\n    MS=MS+1\n    i=i+1\n  if nom not in joueurs:\n      MS=-1\n  return MS", "user": "userdId_28", "attemptID": 2098, "exercise": "be6ce0a06c5d396190024c7c681da95d", "exercise_name": "meilleurClassementJoueur", "embeddingX": "-9.268464", "embeddingY": "81.59189"},{"extension": "py", "date": "2020-04-12 04:54:09", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=False\n  c=[]\n  for i in range(len(liste)-1):\n    c=a*liste[i]+b\n    c=c.append(liste[i])\n    if c==liste:\n      res=True\n  return res", "user": "userdId_8", "attemptID": 2099, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-74.67808", "embeddingY": "22.068079"},{"extension": "py", "date": "2020-03-06 00:25:07", "correct": "0", "upload": "def ecart(liste):\n  if len(liste)==0:\n    res=None\n  def maximum(liste):\n    maxi=liste[0]\n    for i in range(len(liste)):\n      if liste[i]>maxi:\n        maxi=liste[i]\n  def minimum(liste):\n    mini=liste[0]\n    for i in range(len(liste)):\n      if liste [i]<mini:\n        mini=liste[i]\n  res=maxi-mini\n  return res", "user": "userdId_12", "attemptID": 2100, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "7.699253", "embeddingY": "-46.22584"},{"extension": "py", "date": "2020-03-06 21:57:47", "correct": "1", "upload": "def somme(liste):\n    res = 0\n    if len(liste) > 0:\n        res = sum(liste)\n    return res\n      ", "user": "userdId_4", "attemptID": 2101, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "10.318495", "embeddingY": "-55.0712"},{"extension": "py", "date": "2020-03-31 08:01:32", "correct": "1", "upload": "def premiereOccurrenceLettre(lettre,mot):\n    if len(mot)==0 or lettre not in mot:\n      res=None\n    else:\n      res=0\n      cpt=0\n      for i in range(len(mot)):\n        if mot[i]==lettre:\n          cpt+=1\n        if mot[i]==lettre and cpt==1:\n          res=i\n    return res", "user": "userdId_11", "attemptID": 2102, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-19.4385", "embeddingY": "-37.18756"},{"extension": "py", "date": "2020-03-03 05:55:44", "correct": "0", "upload": "def nbVoyelles(mot):\n  res=0\n  if \"aeiouy\" in (mot):\n    res=mot*\"aeiouy\"\n    return res", "user": "userdId_8", "attemptID": 2103, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "12.233595", "embeddingY": "-20.47092"},{"extension": "py", "date": "2020-03-31 05:12:39", "correct": "0", "upload": "def listeSymetrique(l):\n  ok=True\n  i=0\n  while i<len(l) and ok:\n    if l[i]!=l[i-1]:\n      ok=False\n    i=i+1\n    return res", "user": "userdId_9", "attemptID": 2104, "exercise": "8eb27aeda471a467e2223abebeca886e", "exercise_name": "listeSymetrique", "embeddingX": "20.051615", "embeddingY": "57.420776"},{"extension": "py", "date": "2020-03-16 23:58:35", "correct": "0", "upload": "def sommeNPremiersEntiers(n):\n  res=0\n  for i in range(0,n+1,1):\n    res=res+[i]\n  return res", "user": "userdId_12", "attemptID": 2105, "exercise": "c315a540cf0bfb0182dc114c6f0eafd1", "exercise_name": "sommeNPremiersEntiers", "embeddingX": "-18.47844", "embeddingY": "11.181565"},{"extension": "py", "date": "2020-03-06 00:44:32", "correct": "1", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    voy=0\n  else:\n    voy=0\n    for elem in mot:\n      if elem in [\"a\",\"e\",\"i\",\"o\",\"u\",\"y\"]:\n        voy=voy+1\n  return voy", "user": "userdId_13", "attemptID": 2106, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "13.057052", "embeddingY": "-36.61432"},{"extension": "py", "date": "2020-04-07 22:22:17", "correct": "0", "upload": "def suiteGeo(liste):\n  ok=True\n  i=0\n  while i<len(liste)-1 and ok:\n    if liste[i]==0:\n      ok=False\n    if liste[i]!=0:\n      q=liste[0]*liste[1]\n    if liste[i]!=0:\n      if liste[i+1]/liste[i]!=q:\n        ok=False\n    i=i+1\n  return ok\n    ", "user": "userdId_1", "attemptID": 2107, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "29.059872", "embeddingY": "68.05419"},{"extension": "py", "date": "2020-03-06 00:27:33", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    voy=None\n  else:\n    voy=0\n    for i in range(len(mot)):\n      if mot in 'aeiouy':\n        voy=voy+1\n  return voy", "user": "userdId_13", "attemptID": 2108, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "6.7032943", "embeddingY": "-34.702755"},{"extension": "py", "date": "2020-04-17 01:20:19", "correct": "0", "upload": "def nbOccurrencesJoueur(joueurs,nom):\n  cpt=0\n  for i in joueur:\n    if joueurs==nom:\n      cpt=cpt+1\n    return cpt", "user": "userdId_5", "attemptID": 2109, "exercise": "00ee5faf82e54951fbdb2ba2656f7ae7", "exercise_name": "nbOccurrencesJoueur", "embeddingX": "-30.624447", "embeddingY": "-17.201088"},{"extension": "py", "date": "2020-03-02 07:34:11", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1<=annee2 and mois1<=mois2 and jour1<jour2:\n    return -1\n  elif annee1==annee2 and mois1==mois2 and jour1==jour2:\n    return 0\n  else :\n    return 1\n  \ncompareDates(10,1,2020,14,2,2020)\ncompareDates(14,2,2020,11,2,2020)\ncompareDates(10,1,2020,10,1,2020)", "user": "userdId_1", "attemptID": 2110, "exercise": "af7c1467ef9f7684d9ff58734067ae98", "exercise_name": "compareDates", "embeddingX": "87.91604", "embeddingY": "-13.215962"},{"extension": "py", "date": "2020-06-02 22:49:46", "correct": "1", "upload": "def maximum(liste):\n  if len(liste)!=0:\n    max=liste[0]\n    for elem in liste:\n      if elem>max:\n        max=elem\n    return max", "user": "userdId_12", "attemptID": 2111, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "12.919682", "embeddingY": "-73.873116"},{"extension": "py", "date": "2020-04-09 02:43:49", "correct": "0", "upload": "def suiteAriGeo(liste):\n  ok=True\n  i=0\n  R=0\n  Q=0\n  if len(liste)<=2 :\n    ok=True\n  else :\n    for elem in (liste) :\n      if liste[0]==0 :\n        Q=1\n      elif (liste[i+1]-liste[i])==(liste[i+2]-liste[i+1]) :\n        Q=1\n        R=(liste[1]-liste[0])\n      elif (liste[i+1]/liste[i])==(liste[i+2]/liste[i+1]) :\n        Q=(liste[1]/liste[0])\n        R=0\n      \n    while i<(len(liste)-1) and ok :\n      if liste[i+1]!=Q*liste[i]+R :\n        ok=False\n      i+=1\n  return ok", "user": "userdId_15", "attemptID": 2112, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "43.633316", "embeddingY": "55.61915"},{"extension": "py", "date": "2020-03-23 00:54:34", "correct": "0", "upload": "def maximum(liste):\n    res=liste[0]\n    for i in range (liste):\n      if liste[i]>res :\n        res=liste[i]\n    return res", "user": "userdId_24", "attemptID": 2113, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-49.396847", "embeddingY": "-17.102674"},{"extension": "py", "date": "2020-03-07 00:01:12", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut1>=debut2 or fin1<=fin2:\n     if fin1>=debut2:\n        res=True\n  else:\n    res=False\n  return res", "user": "userdId_8", "attemptID": 2114, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "54.022625", "embeddingY": "-21.03991"},{"extension": "py", "date": "2020-03-10 04:20:15", "correct": "0", "upload": "def sommeNPremiersEntiers(n):\n  res=0\n  for i in range(n):\n    res=res+i\n  return res", "user": "userdId_26", "attemptID": 2115, "exercise": "c315a540cf0bfb0182dc114c6f0eafd1", "exercise_name": "sommeNPremiersEntiers", "embeddingX": "-21.655766", "embeddingY": "13.034233"},{"extension": "py", "date": "2020-03-22 11:59:15", "correct": "0", "upload": "def maximum(liste):\n  res=l(0)\n  for x in liste: \n    if x>res:\n      res=x\n  return res", "user": "userdId_21", "attemptID": 2116, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-48.281815", "embeddingY": "2.7530427"},{"extension": "py", "date": "2020-03-31 00:07:10", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n  cpt=0\n  trouve=False\n  i=0\n  res=None\n  while i<len(l) and trouve:\n    if l[i]==x:\n      cpt=cpt+1\n    if cpt==n:\n      trouve=True\n    i=i+1\n    if trouve==True:\n      res=i-1\n    else:\n      res=None\n  return res\n\n      \n    ", "user": "userdId_28", "attemptID": 2117, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "0.72056514", "embeddingY": "47.58271"},{"extension": "py", "date": "2020-04-10 00:57:46", "correct": "0", "upload": "def suiteAriGeo(liste):\n  i=0\n  while i<len(liste)-1:\n    a=liste[1]-liste[0]\n    b=liste[i+1]-liste[i]*a\n    if liste[0]!=0:\n      a=liste[1]/liste[0]\n      if liste[i+1]==liste[i]*a:\n          b=0\n    if liste[i+1]==liste[i]+b:\n      a=1\n    i=i+1\n  i=0\n  ok=True\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i]==0 and liste[i+1]==0:\n      ok=True\n    if liste[i+1]!=a*liste[i]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 2118, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "33.355804", "embeddingY": "81.29857"},{"extension": "py", "date": "2020-03-06 00:18:46", "correct": "0", "upload": "def maximum(liste):\n  res=0\n  for i in range(len(liste)):\n      res=res+liste[i]\n  return res", "user": "userdId_41", "attemptID": 2119, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-44.36766", "embeddingY": "-36.753536"},{"extension": "py", "date": "2020-03-17 06:41:02", "correct": "0", "upload": "def doubleLettre(mot):\n  c1=(0,len(mot),2)\n  c2=(1,len(mot),2)\n  for c2 in mot:\n    if c1==c2:\n      res=True\n    else:\n      res=False\n  return res", "user": "userdId_8", "attemptID": 2120, "exercise": "00da9cf1fa2b468d915724499459ed8f", "exercise_name": "doubleLettre", "embeddingX": "17.512815", "embeddingY": "-2.4463568"},{"extension": "py", "date": "2020-03-12 21:56:21", "correct": "0", "upload": "def maximum(liste):\n   if len(liste)==0:\n      res=None\n   else:\n      res=liste[0]\n      for i in range(1,len(liste)):\n         if liste[i]>res:\n            res=liste[1]\n   return res", "user": "userdId_14", "attemptID": 2121, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-0.6702286", "embeddingY": "-60.53401"},{"extension": "py", "date": "2020-03-19 05:30:03", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1<annee2:\n    res=-1\n    if mois1>mois2:\n      res=1\n  else:\n    res=0\n  return res", "user": "userdId_34", "attemptID": 2122, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "79.580414", "embeddingY": "-33.628315"},{"extension": "py", "date": "2020-03-02 07:30:04", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1<=annee2 and mois1<=annee2 and jour1<jour2:\n    return -1\n  elif annee1==annee2 and mois1==mois2 and jour1==jour2:\n    return 0\n  else:\n    return 1\n  \ncompareDates(10,1,2020,14,2,2020)\ncompareDates(14,2,2020,11,2,2020)\ncompareDates(10,1,2020,10,1,2020)", "user": "userdId_1", "attemptID": 2123, "exercise": "af7c1467ef9f7684d9ff58734067ae98", "exercise_name": "compareDates", "embeddingX": "89.651054", "embeddingY": "-12.454963"},{"extension": "py", "date": "2020-03-30 22:01:14", "correct": "1", "upload": "def nbChiffres(nombre):\n  return len(str(nombre))", "user": "userdId_6", "attemptID": 2124, "exercise": "3dcf332c003a1f3bf15df22ee17884a3", "exercise_name": "nbChiffres", "embeddingX": "-62.11112", "embeddingY": "11.301621"},{"extension": "py", "date": "2020-03-10 10:12:27", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n    if len(mot)==0:\n      res=None\n    else:\n      res=0\n      for i in range(mot):\n        if lettre==mot[i]:\n          res=mot[i]\n        else:\n          if lettre!=mot[i]:\n            res=None\n    return res\n  \n      ", "user": "userdId_11", "attemptID": 2125, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-18.689436", "embeddingY": "-34.513557"},{"extension": "py", "date": "2020-03-06 00:34:17", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    res=0\n  else:\n    for lettre in [\"a\",\"e\",\"i\",\"o\",\"u\",\"y\"]:\n     res=res+1\n  return res\n  \n      \n  \n\n ", "user": "userdId_9", "attemptID": 2126, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "12.887053", "embeddingY": "-38.59413"},{"extension": "py", "date": "2020-03-09 21:49:01", "correct": "0", "upload": "def jourNuit(heure):\n   print(heure)\n   return heure\n    \njourNuit(10) ", "user": "userdId_44", "attemptID": 2127, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "-41.198265", "embeddingY": "19.855093"},{"extension": "py", "date": "2020-04-08 00:03:44", "correct": "0", "upload": "def suiteGeo(liste):\n  i = 0\n  j = 0\n  raison = 0\n  if liste == [] or len(liste) == 1 :\n    res = True\n  else :\n    res = True \n    while raison == 0 :\n      if liste[j] != 0 :\n         raison = liste[j+1]/liste[j]\n      j = j + 1\n  while res and i < len(liste) - 1 :\n    if liste[i]*raison != liste[i+1]:\n      res = False\n    i = i + 1\n  return res", "user": "userdId_32", "attemptID": 2128, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "31.827452", "embeddingY": "72.82721"},{"extension": "py", "date": "2020-04-21 02:43:20", "correct": "0", "upload": "def meilleurScoreJoueur(scores,joueurs,nom):\n    trouve=False\n    i=0\n    res=0\n    while i<len(joueurs) and trouve:\n      if joueurs[i]==nom:\n        trouve=True\n      i+=1\n    if trouve:\n      res=scores[i-1]\n    else:\n      res=0\n    return res", "user": "userdId_11", "attemptID": 2129, "exercise": "c96fadc94086276f98451a798b3bb730", "exercise_name": "meilleurScoreJoueur", "embeddingX": "-1.7138537", "embeddingY": "50.382397"},{"extension": "py", "date": "2020-04-17 03:12:24", "correct": "0", "upload": "def minimum(liste):\n  min=0\n  for i in liste: \n    if liste[i]<liste[i+1]:\n      min=liste[i]\n    else:\n      min=None\n  return min", "user": "userdId_21", "attemptID": 2130, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "34.911797", "embeddingY": "-58.34209"},{"extension": "py", "date": "2020-04-05 12:15:58", "correct": "1", "upload": "def elemAri(n,u0,r):\n    return u0+n*r", "user": "userdId_4", "attemptID": 2131, "exercise": "f239498950e974e29e01472749d9a09d", "exercise_name": "elemAri", "embeddingX": "-35.464375", "embeddingY": "20.724493"},{"extension": "py", "date": "2020-03-31 04:06:44", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n  cpt=0\n  trouve=0\n  i=0  \n  while i<len(l) and trouve==False:\n    if l[i]==x:\n      cpt=cpt+1\n    if cpt==n:\n      trouve=True\n    i=i+1    \n#post-traitement\n  if trouve!=n:\n    i=None\n  return i    ", "user": "userdId_39", "attemptID": 2132, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-2.7536736", "embeddingY": "76.501724"},{"extension": "py", "date": "2020-03-31 04:30:55", "correct": "1", "upload": "def indiceOccurrence(n,x,l):\n  cpt=0\n  trouve=0\n  i=0  \n  while i<len(l) and trouve==False:\n    if l[i]==x:\n      cpt=cpt+1\n    if cpt==n:\n      trouve=True\n    i=i+1    \n#post-traitement\n  if trouve:\n    res=i-1\n  else:\n    res=None  \n  return res      \n\n     \n", "user": "userdId_39", "attemptID": 2133, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-0.57621086", "embeddingY": "74.71132"},{"extension": "py", "date": "2020-04-07 23:54:39", "correct": "1", "upload": "def suiteGeo(liste):\n  i = 0\n  j = 0\n  raison = 0\n  if liste == [] or len(liste) == 1 :\n    res = True\n  else :\n    res = True \n  while raison == 0 and j < len(liste) - 1 :\n    if liste[j] != 0 :\n       raison = liste[j+1]/liste[j]\n    j = j + 1\n  while res and i < len(liste) - 1 :\n    if liste[i]*raison != liste[i+1]:\n      res = False\n    i = i + 1\n  return res\n", "user": "userdId_17", "attemptID": 2134, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "31.804043", "embeddingY": "73.40858"},{"extension": "py", "date": "2020-03-05 23:34:50", "correct": "1", "upload": "def somme(liste):\n  res=0\n  for elem in liste:\n    res=res+elem\n  return res ", "user": "userdId_23", "attemptID": 2135, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-28.646328", "embeddingY": "4.085083"},{"extension": "py", "date": "2020-03-23 00:48:41", "correct": "0", "upload": "def sommeNPremiersEntiers(n):\n    if n<0:\n      res=0\n    else:\n      res=0\n      for i in range(n):\n        res=res+i\n    return res", "user": "userdId_11", "attemptID": 2136, "exercise": "c315a540cf0bfb0182dc114c6f0eafd1", "exercise_name": "sommeNPremiersEntiers", "embeddingX": "-14.796906", "embeddingY": "11.480902"},{"extension": "py", "date": "2020-03-22 07:19:23", "correct": "1", "upload": "def somme(liste):\n  res=0\n  for i in range (len(liste)):\n    res=res+liste[i]\n  return res", "user": "userdId_16", "attemptID": 2137, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-43.557243", "embeddingY": "-36.609592"},{"extension": "py", "date": "2020-04-06 22:56:04", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  ok=True\n  i=0\n  while i<len(liste)-1 and ok:\n    if liste[i]!=a*liste[i+1]+b:\n      ok=False\n    i+=1\n  return ok", "user": "userdId_12", "attemptID": 2138, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-76.66065", "embeddingY": "17.975716"},{"extension": "py", "date": "2020-04-12 06:34:46", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  if liste==[]:\n    res=True\n  res=liste[0]\n  return res", "user": "userdId_8", "attemptID": 2139, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-75.44318", "embeddingY": "15.177441"},{"extension": "py", "date": "2020-04-10 00:37:13", "correct": "0", "upload": "def suiteAriGeo(liste):\n  i=0\n  while i<len(liste)-1:\n    if liste[0]!=0:\n      a=liste[1]/liste[0]\n    b=liste[1]-liste[0]\n    if liste[i+1]==liste[i]*a:\n        b=0\n    if liste[i+1]==liste[i]+b:\n      a=1\n    i=i+1\n  i=0\n  ok=True\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=a*liste[i]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 2140, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "33.039448", "embeddingY": "81.80495"},{"extension": "py", "date": "2020-05-11 00:30:53", "correct": "0", "upload": "def listeDecroissante(scores):\n  ok=True\n  i=0\n  while i<len(scores)-1 and ok:\n    if scores[i]>scores[i+1]:\n      ok=False\n    i=i+1\n  return ok\n\n", "user": "userdId_12", "attemptID": 2141, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "16.837122", "embeddingY": "50.52126"},{"extension": "py", "date": "2020-04-06 00:58:31", "correct": "1", "upload": "def elemAri(n,u0,r):\n    res=u0+(n*r)\n    return res", "user": "userdId_15", "attemptID": 2142, "exercise": "f239498950e974e29e01472749d9a09d", "exercise_name": "elemAri", "embeddingX": "-35.518394", "embeddingY": "18.551594"},{"extension": "py", "date": "2020-04-13 21:20:02", "correct": "1", "upload": "def nbOccurrencesJoueur(joueurs,nom):\n  cpt = 0\n  for i in joueurs:\n    if i == nom:\n      cpt+=1\n  return cpt", "user": "userdId_6", "attemptID": 2143, "exercise": "00ee5faf82e54951fbdb2ba2656f7ae7", "exercise_name": "nbOccurrencesJoueur", "embeddingX": "-10.126987", "embeddingY": "-27.21702"},{"extension": "py", "date": "2020-03-06 00:25:47", "correct": "0", "upload": "def maximum(liste):\n    res=0\n    for elem in liste:\n        if elem>res:\n            res=elem\n    return res", "user": "userdId_45", "attemptID": 2144, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "31.385414", "embeddingY": "-42.62102"},{"extension": "py", "date": "2020-03-12 23:43:52", "correct": "0", "upload": "def jourNuit(heure):\n  Error=\"l'heure saisie est invalide\"\n  Time=\"on est\"\n  if heure<0 or heure>24:\n    res=Error\n  elif heure>=5 and heure<12:\n    res=Time+' le matin'\n    if heure>=6 and heure<=18:\n      res=res+' et il fait jour'\n    else:\n      res=res+' et il fait nuit'\n  elif heure>=12 and heure<17:\n    res=Time+\" l'apr\u00e8s-midi et il fait jour\"\n  elif heure>=17 and heure<21:\n    res=Time+' le soir'\n    if heure>=6 and heure<=18:\n      res=res+' et il fait jour'\n    else:\n      res=res+' et il fait nuit'\n  elif heure>=21 and heure<=24 or heure>=0:\n    res=Time+' la nuit et il fait nuit'\n  else:\n    res=Error\n  return res\n    \n  \n    ", "user": "userdId_2", "attemptID": 2145, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "80.74654", "embeddingY": "15.248334"},{"extension": "py", "date": "2020-03-07 00:42:23", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1<annee2:\n    res=-1\n  elif annee1>annee2:\n    res=1\n  elif mois1<mois2:\n      res=-1\n      if mois1>mois2:\n        res=1\n      elif jour1<jour2:\n        res=-1\n        if jour1>jour2:\n          res=1\n  else:\n    res=0\n  return res", "user": "userdId_8", "attemptID": 2146, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "80.654366", "embeddingY": "-33.34095"},{"extension": "py", "date": "2020-03-13 00:42:29", "correct": "1", "upload": "def sommeNPremiersEntiersPairs(n):\n\tres=0\n\tif n<0:\n\t\tres=0\n\tfor i in range(1,n+1):\n\t\tif i%2==0:\n\t\t\tres=res+i\n\treturn res", "user": "userdId_19", "attemptID": 2147, "exercise": "3030dc079e6607c253e89e8ef4784b74", "exercise_name": "sommeNPremiersEntiersPairs", "embeddingX": "28.914877", "embeddingY": "-12.780316"},{"extension": "py", "date": "2020-04-12 09:49:36", "correct": "0", "upload": "def suiteAriGeo(liste):\n  i=1\n  while i<len(liste)-1:\n    a=liste[1]\n    b=liste[1]\n    if liste[i+1]==liste[i]+(liste[1]-liste[0]):\n      b=liste[1]-liste[0]\n    if liste[0]!=0:                        \n      if liste[i+1]==liste[i]*liste[1]/liste[0]:\n        a=liste[1]/liste[0]\n        b=0\n    if liste[i+1]==liste[i]*(liste[1]-liste[0])+(liste[i]-(liste[i-1]*(liste[1]-liste[0]))):\n      a=liste[1]-liste[0]\n      b=liste[i]-(liste[i-1]*a)\n    i=i+1\n  ok=True\n  i=0\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=a*liste[i]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 2148, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "34.590977", "embeddingY": "84.145615"},{"extension": "py", "date": "2020-03-31 04:04:13", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n  cpt=0\n  i=0\n  while i<len(l) and cpt<n:\n    if l[i]==x:\n       cpt=cpt+1\n    i=i+1\n  if cpt==0:\n    res=None\n  else:\n    res=i[cpt]\n  return res", "user": "userdId_12", "attemptID": 2149, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-6.0686107", "embeddingY": "77.35059"},{"extension": "py", "date": "2020-04-06 03:03:38", "correct": "0", "upload": "def suiteGeo(liste):\n  ok=True\n  i=0\n  if len(liste)<=1 :\n    ok=True\n  else :\n    while i<(len(liste)-1) and ok :\n      if (liste[i]*liste[i+1])==0 :\n        ok=False\n      elif liste[i]!=(liste[0]*(liste[i+1]//liste[i])**i):\n        ok=False\n      i+=1\n  return ok", "user": "userdId_15", "attemptID": 2150, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "51.17523", "embeddingY": "46.115665"},{"extension": "py", "date": "2020-03-24 03:58:56", "correct": "0", "upload": "def compare(chaine1,chaine2):\n  res=0\n  i=0\n  while i<len(chaine1) and i<len(chaine2) and res==0:\n    if chaine1[i] > chaine2[i]:\n      res=1\n    elif chaine1[i] < chaine2[i]:\n      res=-1\n    i=i+1\n  return res", "user": "userdId_31", "attemptID": 2151, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-23.679173", "embeddingY": "60.55719"},{"extension": "py", "date": "2020-03-03 05:41:11", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0: \n    res=none\n  else: \n    res=liste[0]\n    for i in range(1,len(liste)):\n      if liste[i]>res:\n        res=liste[i]\n  return res", "user": "userdId_35", "attemptID": 2152, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-3.7842362", "embeddingY": "-59.719414"},{"extension": "py", "date": "2020-06-02 22:08:28", "correct": "1", "upload": "def bissextile(annee):\n  res=False\n  if annee%4==0 and annee%100!=0 or annee%400==0:\n    res=True\n  return res", "user": "userdId_12", "attemptID": 2153, "exercise": "a7d37636649c0ada991520788deeb2d0", "exercise_name": "bissextile", "embeddingX": "47.75767", "embeddingY": "1.3748894"},{"extension": "py", "date": "2020-03-17 06:15:35", "correct": "0", "upload": "def distribution(liste,n):\n  res=liste[0]*n+1\n  for elem in liste:\n    res[elem]+=1\n  return res", "user": "userdId_23", "attemptID": 2154, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-62.71706", "embeddingY": "-9.498271"},{"extension": "py", "date": "2020-03-06 00:25:28", "correct": "0", "upload": "def nbVoyelles(mot):\n  nb=0\n  for lettre in [\"a\",\"e\",\"i\",\"o\",\"u\",\"y\"]:\n    res=nb+1\n  return res\n  \n      \n  \n\n ", "user": "userdId_9", "attemptID": 2155, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-28.027716", "embeddingY": "-9.9847"},{"extension": "py", "date": "2020-03-24 04:46:51", "correct": "0", "upload": "def quatrePlus100(liste):\n  i=\"\"\n  res=[]\n  while i<len(liste) and i>100:\n    res.append(l[i])\n  return res", "user": "userdId_13", "attemptID": 2156, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-20.103817", "embeddingY": "42.65878"},{"extension": "py", "date": "2020-03-07 03:07:11", "correct": "0", "upload": "def nbSyllabes(mot):\n  if len(mot)==0:\n    return 0\n  else:\n    if (mot[0] in 'aeiouy'):\n      cpt = 1\n    else:\n      cpt = 0\n    for i in range (0, len(mot)-1):\n      if not(mot[i] in 'aeiouy') and (mot[i+1] in 'aeiouy'):\n        cpt+=1\n    return cpt\n        ", "user": "userdId_6", "attemptID": 2157, "exercise": "1c86bec0f4df503e23db53994f3d2991", "exercise_name": "nbSyllabes", "embeddingX": "-29.196032", "embeddingY": "-69.87583"},{"extension": "py", "date": "2020-03-31 03:07:38", "correct": "0", "upload": "def fusion(liste1,liste2):\n  res=[]\n  i=0\n  j=0\n  while i<len(liste1) and j<len(liste2):\n    if liste1[i]<liste2[j]:\n      res.append(liste1[i])\n      i=i+1\n    else:\n      res.append(liste2[j])\n      j=j+1\n  if len(liste1)!=len(liste2):\n    if len(liste1)>len(liste2):\n      for k in range(len(liste2),len(liste1)):\n        res.append(liste1[k])\n    elif len(liste1)<len(liste2):\n      for k in range(len(liste1,len(liste2))):\n        res.append(liste2[k])\n  return res", "user": "userdId_12", "attemptID": 2158, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-36.703285", "embeddingY": "48.190407"},{"extension": "py", "date": "2020-03-22 07:22:19", "correct": "0", "upload": "def somme(liste):\n  res=0\n  for i in range (len(liste)):\n    return res+liste[i]", "user": "userdId_16", "attemptID": 2159, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-43.405426", "embeddingY": "-39.14333"},{"extension": "py", "date": "2020-03-22 23:26:07", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut1<debut2 or debut2<debut1:\n    res=False\n  else:\n    res=True", "user": "userdId_9", "attemptID": 2160, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "60.794422", "embeddingY": "-18.497875"},{"extension": "py", "date": "2020-03-17 06:09:43", "correct": "1", "upload": "def permutationListe(liste,permutation):\n  res=[0]*len(liste)\n  for i in range(len(liste)):\n    res[permutation[i]]=liste[i]\n  return res", "user": "userdId_7", "attemptID": 2161, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-50.515133", "embeddingY": "-30.482525"},{"extension": "py", "date": "2020-03-24 04:44:35", "correct": "0", "upload": "def fusion(liste1,liste2):\n    if liste1==[]:\n      res=liste2\n    elif liste2==[]:\n      res=liste1\n    else:\n      res=[]\n      i=0\n      while i<len(liste1) and i<len(liste2):\n        if min(liste1)<min(liste2):\n          res=res+[min(liste1)]+[min(liste2)]\n          liste1.remove(min(liste1))\n          liste2.remove(min(liste2))\n        elif min(liste1)>min(liste2):\n          res=res+[min(liste2)]+[min(liste1)]\n          liste1.remove(min(liste1))\n          liste2.remove(min(liste2))\n        i=i+1\n      if len(liste1)>len(liste2):\n        while i<len(liste1):\n          res=res+[min(liste1)]\n          liste1.remove(min(liste1))\n          i=i+1\n      elif len(liste1)<len(liste2):\n        while i<len(liste2):\n          res=res+[min(liste2)]\n          liste2.remove(min(liste2))\n          i=i+1\n    return res", "user": "userdId_18", "attemptID": 2162, "exercise": "6613efb6c873b142dc2b6040c14eb616", "exercise_name": "fusion", "embeddingX": "-27.357597", "embeddingY": "54.13068"},{"extension": "py", "date": "2020-04-06 02:04:54", "correct": "1", "upload": "def suiteAri(liste):\n  ok=True\n  i=0\n  if len(liste)<=2 :\n    ok=True\n  else :\n    while i<(len(liste)-2) and ok :\n      if (liste[i+1]-liste[i])!=(liste[i+2]-liste[i+1]) :\n        ok=False\n      i+=1\n  return ok", "user": "userdId_15", "attemptID": 2163, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "20.485205", "embeddingY": "46.94609"},{"extension": "py", "date": "2020-04-17 03:07:11", "correct": "0", "upload": "def nbVoyelles(mot):\n  cpt=0\n  for i in mot: \n    if i=='aeiouy':\n      cpt=cpt+1\n  return cpt", "user": "userdId_21", "attemptID": 2164, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "1.1705043", "embeddingY": "-24.475288"},{"extension": "py", "date": "2020-04-11 04:43:48", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  res=0\n  for elem in nombre:\n    nombre=nombre//10\n    if nombre[i]==chiffre:\n      res+=1\n  return res", "user": "userdId_8", "attemptID": 2165, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-36.462852", "embeddingY": "-12.816808"},{"extension": "py", "date": "2020-03-10 02:52:43", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n  if mot=='':\n    cpt=None\n  else:\n    cpt=-1\n    for i in range(len(mot)):\n      if mot[i]!=lettre:\n        cpt=cpt+1\n      return cpt\n  ", "user": "userdId_15", "attemptID": 2166, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-22.036154", "embeddingY": "-44.546097"},{"extension": "py", "date": "2020-03-22 11:56:33", "correct": "0", "upload": "def maximum(liste):\n  res=liste[1]\n  for x in liste: \n    if x>res:\n      res=x\n  return res", "user": "userdId_21", "attemptID": 2167, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "31.999231", "embeddingY": "-46.621655"},{"extension": "py", "date": "2020-04-07 23:49:49", "correct": "1", "upload": "def phrasePalindrome(m):\n  res=True\n  i=0\n  j=0\n  while i<len(m) and j<len(m) and res:\n    if m[i]==' ':\n      i+=1\n    elif m[-1-j]==' ':\n      j+=1  \n    elif m[i]!=m[-1-j]:\n      res=False\n    else:\n      i+=1\n      j+=1\n  return res", "user": "userdId_30", "attemptID": 2168, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "35.96379", "embeddingY": "38.398083"},{"extension": "py", "date": "2020-03-12 10:14:05", "correct": "0", "upload": "def jourNuit(heure):\n  heure=temps+soleil\n  0<=heure<=24\n  if 6<=heure<=18 :\n    temps='il fait jour'\n  else :\n    temps='il fait nuit'\n  if 0<=heure<=5 and 21<=heure<=24 :\n    soleil='on est la nuit'\n  if 5<=heure<=12 :\n    soleil='on est le matin'\n  if 12<=heure<=17 :\n    soleil=\"on est l'apr\u00e8s-midi\"\n  if 17<=heure<=21 :\n    soleil=\"on est le soir\"\n    return heure", "user": "userdId_24", "attemptID": 2169, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "-23.037271", "embeddingY": "9.519701"},{"extension": "py", "date": "2020-04-13 21:52:42", "correct": "0", "upload": "def listeDecroissante(scores):\n  i=0\n  ok=True\n  while i<len(scores) :\n    if scores[i]<scores[i+1] :\n      ok=False\n    i+=1\n  return ok", "user": "userdId_15", "attemptID": 2170, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "19.985159", "embeddingY": "43.236843"},{"extension": "py", "date": "2020-04-12 05:06:36", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=False\n  c=[]\n  for i in range(len(liste)-1):\n    c=a*liste[i]+b\n    c=c.append(liste)\n    if c==liste:\n      res=True\n  return res", "user": "userdId_8", "attemptID": 2171, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-66.17886", "embeddingY": "17.059452"},{"extension": "py", "date": "2020-03-10 08:57:13", "correct": "0", "upload": "def jourNuit(heure):\n    if heure>24:\n      res=\"l'heure saisie est invalide\"\n    else:\n      res=0\n      if 5<=heure<12:\n        res=\"on est le matin et il fait nuit\"\n      else:\n        if 12<=heure<17:\n          res=\"on est l'apr\u00e8s-midi et il fait jour\"\n        else:\n          if 17<=heure<21:\n            res=\"on est le soir et il fait jour\"\n          else:\n            if 21<=heure<24:\n              res=\"on est la nuit et il fait nuit\"\n    return res\n  ", "user": "userdId_11", "attemptID": 2172, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "72.62123", "embeddingY": "25.630627"},{"extension": "py", "date": "2020-03-06 22:02:55", "correct": "0", "upload": "def maximum(liste):\n    res = None\n    if len(liste) > 0:\n        liste.sort()\n        res = liste\n    return res", "user": "userdId_4", "attemptID": 2173, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "8.171319", "embeddingY": "-56.13673"},{"extension": "py", "date": "2020-03-03 05:13:45", "correct": "0", "upload": "def maximum(liste):\n  if (liste)==0:\n    res=None\n  else:\n    for i in range(1,len(liste)):\n      if liste[i]>res:\n        res=res>liste[i]\n  return res", "user": "userdId_30", "attemptID": 2174, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "5.546297", "embeddingY": "-62.980896"},{"extension": "py", "date": "2020-04-06 22:13:16", "correct": "0", "upload": "def sousChaine(s1,s2):\n  i=0\n  j=0\n  cpt=0\n  res=False\n  while i<len(s2) and j<len(s1): \n    if s2[i]==s1[j]:\n      cpt+=1 \n      j+=1\n    else:\n      cpt=0\n    i+=1\n  if cpt==len(s1): \n    res=True\n  return res", "user": "userdId_12", "attemptID": 2175, "exercise": "a7cdd094daa2f0bfccc7a4ec419f7243", "exercise_name": "sousChaine", "embeddingX": "-5.3911076", "embeddingY": "61.761837"},{"extension": "py", "date": "2020-04-12 10:09:27", "correct": "0", "upload": "def phrasePalindrome(phrase):\n    if len(phrase)==0:\n      res=True\n    else:\n      res=True\n      i=0\n      x=''\n      while i<len(phrase) and res:\n        if phrase[i]!=phrase[-(i+1)] or phrase[i]==x:\n          res=False\n        i+=1\n    return res", "user": "userdId_11", "attemptID": 2176, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "31.15424", "embeddingY": "30.421305"},{"extension": "py", "date": "2020-04-10 00:52:46", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  ok=False\n  i=0\n  j=0\n  while i<len(phrase)//2 and j<len(phrase)//2:\n    if phrase[i]==\" \":\n      i=i+1\n    elif phrase[-j]==\" \":\n      j=j-1\n    elif phrase[i]!=phrase[-j-1]:\n      ok=False\n    i=i+1\n    j=j-1\n  if phrase==\"\":\n    ok=True\n  return ok", "user": "userdId_3", "attemptID": 2177, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "43.29943", "embeddingY": "43.430492"},{"extension": "py", "date": "2020-03-08 21:40:45", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1==annee2 and mois1==mois2 and jour1==jour2:\n    return 0\n  elif annee1<annee2 and mois1<=mois2 and jour1<jour2:\n    return -1\n  elif annee1<annee2 and mois1>=mois2 and jour1>jour2:\n    return -1\n  else:\n    return 1", "user": "userdId_1", "attemptID": 2178, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "84.11129", "embeddingY": "-14.249019"},{"extension": "py", "date": "2020-04-06 22:39:17", "correct": "1", "upload": "def elemGeo(n,u0,q):\n  return u0*q**n", "user": "userdId_12", "attemptID": 2179, "exercise": "d7c83a7fb9b49e28804e55955ad06968", "exercise_name": "elemGeo", "embeddingX": "-39.97738", "embeddingY": "19.678911"},{"extension": "py", "date": "2020-03-06 00:38:19", "correct": "0", "upload": "def nbOccurrencesLettre(lettre,mot):\n  if len(mot)==0:\n    return None\n  else:\n    cpt=0\n    for elem in mot:\n      if lettre==elem:\n        cpt=cpt+1\n    return cpt\n\n    ", "user": "userdId_2", "attemptID": 2180, "exercise": "2864c9e5861229d2ff32570f6bc944fb", "exercise_name": "nbOccurrencesLettre", "embeddingX": "-11.562287", "embeddingY": "-30.617697"},{"extension": "py", "date": "2020-03-24 04:52:28", "correct": "0", "upload": "def quatrePlus100(liste):\n  i=0\n  res=[]\n  while i<len(liste):\n    if i>100:\n      res.append(l[i])\n      i=i+1\n  return res\n", "user": "userdId_13", "attemptID": 2181, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-23.409819", "embeddingY": "33.19582"},{"extension": "py", "date": "2020-03-06 00:23:02", "correct": "0", "upload": "def maximum(liste):\n  res=liste[0]\n  for elem in liste:\n    if  res < elem:\n      res=elem\n  return res", "user": "userdId_20", "attemptID": 2182, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "41.735485", "embeddingY": "-58.1301"},{"extension": "py", "date": "2020-03-12 23:58:57", "correct": "0", "upload": "def jourNuit(heure):\n  res=[]\n  if heure==5:\n    res=\"on est le matin et il fait nuit\"\n  if heure<=0:\n    res=\"l'heure saisie est invalide\"\n  if heure>24:\n    res=\"l'heure saisie est invalide\"\n  if 6<=heure<=18:\n    if 5<heure<=12:\n      res=\"on est le matin et il fait jour\"\n    elif 12<=heure<17:\n      res=\"on est l'apr\u00e8s-midi et il fait jour\"\n    elif 17<=heure<=18:\n      res=\"on est le soir et il fait jour\"\n  if 1<=heure<=5 or 19<=heure<=24:\n    if 1<=heure<=4:\n      res=\"on est la nuit et il fait nuit\"\n    elif 21<=heure<=24:\n      res=\"on est la nuit et il fait nuit\"\n    elif 19<=heure<=20:\n      res=\"on est le soir et il fait nuit\"\n  return res", "user": "userdId_13", "attemptID": 2183, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "68.58563", "embeddingY": "22.641993"},{"extension": "py", "date": "2020-03-06 00:56:08", "correct": "1", "upload": "def nbVoyelles(mot):\n  res=0\n  for elem in mot:\n    if elem in[\"a\",\"e\",\"i\",\"o\",\"u\",\"y\"]:\n      res=res+1\n  return res", "user": "userdId_23", "attemptID": 2184, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "14.418511", "embeddingY": "-33.76344"},{"extension": "py", "date": "2020-03-12 21:44:53", "correct": "0", "upload": "def somme(liste):\n  res=0\n  for i in liste:\n    res= res+liste[i]\n  return res ", "user": "userdId_20", "attemptID": 2185, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-54.365414", "embeddingY": "-12.929685"},{"extension": "py", "date": "2020-03-19 23:58:04", "correct": "0", "upload": "def permutationChaine(s):\n  res=''\n  for i in range(0,len(s)-1):\n    res=res+s[i+1]\n    res=res+s[i]\n  res=res+s[len(s)]\n  return res", "user": "userdId_40", "attemptID": 2186, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-46.314095", "embeddingY": "-48.880062"},{"extension": "py", "date": "2020-03-05 23:45:22", "correct": "0", "upload": "def nbVoyelles(mot):\n  res=0\n  for i in range(len(mot)):\n    if mot[i]==range('aeyuio'):\n      res=res+1\n  return res", "user": "userdId_30", "attemptID": 2187, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-8.285679", "embeddingY": "-51.701855"},{"extension": "py", "date": "2020-04-03 00:34:50", "correct": "0", "upload": "def stockerChiffres(nombre):\n  i=0\n  res=[]\n  if nombre==0:\n    res=[0]\n  while nombre!=0:\n    nombre=nombre//10\n    res=res.append(nombre)\n    i+=1\n  return res", "user": "userdId_1", "attemptID": 2188, "exercise": "49a87f644f84a443327fb4315b47f249", "exercise_name": "stockerChiffres", "embeddingX": "39.38425", "embeddingY": "15.539492"},{"extension": "py", "date": "2020-03-05 23:49:54", "correct": "1", "upload": "def nbVoyelles(mot):\n  res=0\n  for i in range(len(mot)):\n    if mot[i] in 'aeyuio':\n      res=res+1\n  return res", "user": "userdId_30", "attemptID": 2189, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-24.403925", "embeddingY": "-64.65187"},{"extension": "py", "date": "2020-03-06 00:32:50", "correct": "1", "upload": "def minimum(liste):\n   if len(liste)==0:\n      min=None\n   else:\n      min=liste[0]\n      for i in range (1,len(liste)):\n         if liste[i]<min:\n            min=liste[i]\n   return min", "user": "userdId_14", "attemptID": 2190, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "18.83557", "embeddingY": "-78.89878"},{"extension": "py", "date": "2020-04-20 21:36:11", "correct": "0", "upload": "def rechercheDicho(liste,val):\n  index = None\n  nbAcces=0\n  acces =len(liste)//2\n  prevAcces = -1\n  found = False\n  while acces !=prevAcces and not found:\n    nbAcces+=1\n    if liste[acces]==val:\n      found = True\n      index = acces\n    else:\n      prevAcces = acces\n      if liste[acces]>val:\n        acces = acces//2\n      else:\n        acces = len(liste)-1-(acces//2)\n  return (index,nbAcces)", "user": "userdId_6", "attemptID": 2191, "exercise": "434544c545ce211c7e57445707047bee", "exercise_name": "rechercheDicho", "embeddingX": "1.484654", "embeddingY": "65.61258"},{"extension": "py", "date": "2020-04-13 22:19:26", "correct": "0", "upload": "def meilleurClassementJoueur(scores,joueurs,nom):\n  c=True\n  if nom in joueurs:\n    while i<len(joueurs) and c:\n      if nom==joueurs[i]:\n        res=i+1\n        c=False\n  else:\n    res=-1\n  return res\n", "user": "userdId_19", "attemptID": 2192, "exercise": "be6ce0a06c5d396190024c7c681da95d", "exercise_name": "meilleurClassementJoueur", "embeddingX": "-3.011798", "embeddingY": "52.550262"},{"extension": "py", "date": "2020-03-24 06:38:12", "correct": "0", "upload": "def fusion(liste1,liste2):\n  liste3=[liste1]+[liste2]\n  liste3.sort()\n  return liste3", "user": "userdId_13", "attemptID": 2193, "exercise": "6613efb6c873b142dc2b6040c14eb616", "exercise_name": "fusion", "embeddingX": "-50.51566", "embeddingY": "-3.414112"},{"extension": "py", "date": "2020-03-02 09:24:27", "correct": "0", "upload": "def qualifJO(sexe,record,nbvictoires,champion):\n    res = False\n    if (sexe == \"F\" or sexe == \"M\") and record > 0 and nbvictoires > 0:\n        \n        if champion == True: res = True\n\n        record_need = 12\n\n        if sexe == \"F\":\n            record_need = 15\n        print(record_need)\n        if record < record_need and nbvictoires >= 3:\n            res = True\n\n        \n    \n    return res", "user": "userdId_4", "attemptID": 2194, "exercise": "78ec7738f3a7f3553d4a5c653534c32d", "exercise_name": "qualifJO", "embeddingX": "66.9374", "embeddingY": "-12.805522"},{"extension": "py", "date": "2020-04-05 23:29:03", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  ok=True\n  l=[]\n  i0=0\n  while i0<len(phrase) :\n    if phrase[i0]!='':\n      l.append(phrase[i0])\n    i0+=1\n  \n  i=0\n  j=len(l)-1    \n  while i<j and ok :\n    if l[i]!=l[j] :\n      ok=False\n    i+=1\n    j-=1\n  print(l)\n  return ok", "user": "userdId_15", "attemptID": 2195, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "42.525303", "embeddingY": "37.74392"},{"extension": "py", "date": "2020-04-11 08:03:08", "correct": "0", "upload": "def sousChaine(s1,s2):\n  res=False\n  i=0\n  j=0\n  while i<len(s1) and j<len(s2) and s1[i]!=s2[j]:\n    j+=1\n  else:\n    while i<len(s1) and j<len(s2) and s1[i]==s2[j]:\n      if s1[i]==s2[j]:\n        res=False\n      i+=1\n      j+=1  \n  return res", "user": "userdId_8", "attemptID": 2196, "exercise": "4bdf8c9c5d020593e1771e4d3ae1ae0d", "exercise_name": "sousChaine", "embeddingX": "-4.87325", "embeddingY": "58.81009"},{"extension": "py", "date": "2020-03-03 05:07:49", "correct": "1", "upload": "def somme(liste):\n  res=0 \n  for i in range (len(liste)):\n  \tres=res+liste[i]\n  return res", "user": "userdId_30", "attemptID": 2197, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-44.812332", "embeddingY": "-35.882416"},{"extension": "py", "date": "2020-04-06 21:48:28", "correct": "1", "upload": "def produitScalaire(vec1,vec2):\n    if len(vec1)==0 or len(vec2)==0:\n      res=0\n    else:\n      res=0\n      for i in range(len(vec1) and len(vec2)):\n        res=res+vec1[i]*vec2[i]\n    return res", "user": "userdId_11", "attemptID": 2198, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-32.00809", "embeddingY": "-41.76576"},{"extension": "py", "date": "2020-03-31 03:29:57", "correct": "0", "upload": "def fusion(liste1,liste2):\n  res=[]\n  i=0\n  j=0\n  while i<len(liste1) and j<len(liste2):\n    if liste1[i]<liste2[j]:\n      res=res+[liste1[i]]\n      i=i+1\n    elif liste2[j]<liste1[i]:\n      res=res+[liste2[j]]\n      j=j+1\n    else:\n      res=res+[liste1[i]]\n      res=res+[liste2[j]]\n\n  if i<len(liste1):\n    while i<len(liste1):\n      res=res+[liste1[i]]\n      i=i+1\n  else:\n    while j<len(liste2):\n      res=res+[liste2[j]]\n      j=j+1\n  return res", "user": "userdId_7", "attemptID": 2199, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-37.758614", "embeddingY": "53.881508"},{"extension": "py", "date": "2020-03-23 02:01:58", "correct": "0", "upload": "def minimum(liste): \n    res=0\n    for i in range (len(liste)) :\n      if liste [i] > res :\n        res= liste[i]\n    return res", "user": "userdId_24", "attemptID": 2200, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "-1.2143515", "embeddingY": "-64.99635"},{"extension": "py", "date": "2020-03-31 05:38:16", "correct": "0", "upload": "def nbChiffres(nombre):\n  while nombre!=0:\n    nombre=nombre%10\n  if nombre==0:\n    nombre=1\n\n  return nombre", "user": "userdId_13", "attemptID": 2201, "exercise": "3dcf332c003a1f3bf15df22ee17884a3", "exercise_name": "nbChiffres", "embeddingX": "44.983753", "embeddingY": "14.863233"},{"extension": "py", "date": "2020-05-04 22:41:45", "correct": "0", "upload": "def prononcable(mot):\n  res=True\n  cpt=0\n  i=0\n  while i<len(mot) and res:\n    if elem not in 'aeiouy':\n      cpt+=1\n    elif elem in 'aeiouy':\n      cpt=0\n    elif cpt>=3:\n      res=False\n    i+=1\n  return res", "user": "userdId_26", "attemptID": 2202, "exercise": "6318b210c201fba050d60bc0913cb7ef", "exercise_name": "prononcable", "embeddingX": "4.8011456", "embeddingY": "51.214756"},{"extension": "py", "date": "2020-03-22 10:24:03", "correct": "0", "upload": "def bissextile(a):\n    if a%4==0 or a%400==0: \n      res=True\n    else: \n      if a%100!=0: \n      \tres=False\n    return res", "user": "userdId_21", "attemptID": 2203, "exercise": "a7d37636649c0ada991520788deeb2d0", "exercise_name": "bissextile", "embeddingX": "45.264687", "embeddingY": "0.5628752"},{"extension": "py", "date": "2020-03-04 01:37:52", "correct": "0", "upload": "def polynome(a,b,c):\n    delta =  b**2 - (4*a*c)\n    \n    if delta > 0:\n        x = (-b + math.sqrt(delta))/2*a , (-b -math.sqrt(delta))/2*a\n        \n         \n    elif delta == 0:\n        x = -(b/2*a)\n        \n    else:\n        x = \"pas de solution\"\n        \n    return x", "user": "userdId_32", "attemptID": 2204, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-55.443096", "embeddingY": "3.6986215"},{"extension": "py", "date": "2020-03-02 09:35:59", "correct": "0", "upload": "def qualifJO(sexe,record,nbvictoires,champion):\n    res = False\n    types = [int,float]\n    if type(sexe) == str and type(record) in types and type(nbvictoires) in types:\n        if (sexe == \"F\" or sexe == \"M\") and record > 0 and nbvictoires > 0 and type(champion) == bool:\n            if sexe == \"F\" and record < 15 or sexe == \"M\" and record < 12 and nbvictoires >= 3 or champion == True:\n                res = True\n    \n        \n    return res\n", "user": "userdId_4", "attemptID": 2205, "exercise": "78ec7738f3a7f3553d4a5c653534c32d", "exercise_name": "qualifJO", "embeddingX": "67.400635", "embeddingY": "-13.008072"},{"extension": "py", "date": "2020-03-12 22:05:29", "correct": "0", "upload": "def moyenne(liste):\n  if len (liste)==0:\n    res=None\n  else:\n    res=1\n    cpt=1\n    for elem in range(len(liste)):\n      res=res+elem\n      cpt=cpt+1\n      res=res%cpt\n  return res ", "user": "userdId_20", "attemptID": 2206, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-6.5290236", "embeddingY": "-2.8409417"},{"extension": "py", "date": "2020-03-16 05:34:57", "correct": "0", "upload": "def qualifJO(sexe,record,nbvictoires,champion):\n    if sexe=='M':\n      if (record<12.0 and nbvictoires>=3) or champion==True:\n          res=True\n      else:\n          res=False\n    else:\n      if (record<15.0 and nbvictoires>=3) or champion==True:\n        res=True\n      else:\n        res=False\n    return res", "user": "userdId_18", "attemptID": 2207, "exercise": "78ec7738f3a7f3553d4a5c653534c32d", "exercise_name": "qualifJO", "embeddingX": "64.00622", "embeddingY": "-10.14174"},{"extension": "py", "date": "2020-03-23 22:29:06", "correct": "0", "upload": "def quatrePlus100(liste):\n  res=[]\n  x=0\n  while len(res)<4 :\n    if liste[x]>100 :\n      res=res+[liste[i]]\n    i=i+1\n  return res", "user": "userdId_28", "attemptID": 2208, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-30.643347", "embeddingY": "38.516994"},{"extension": "py", "date": "2020-03-10 03:29:29", "correct": "1", "upload": "def jourNuit(heure):\n  if heure<0 or heure >24:\n    res=\"l'heure saisie est invalide\"\n  else:\n    if heure<5 or heure>=21:\n      res=\"on est la nuit\"\n    elif heure<12:\n      res=\"on est le matin\" \n    elif heure<17:\n      res=\"on est l'apr\u00e8s-midi\"\n    else:\n      res=\"on est le soir\"\n    if heure<6 or heure>=18:\n      res=res+\" et il fait nuit\"\n    else:\n      res=res+\" et il fait jour\"\n  return res", "user": "userdId_16", "attemptID": 2209, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "71.78439", "embeddingY": "14.969958"},{"extension": "py", "date": "2020-04-06 05:26:31", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  i=0\n  mot=[]\n  phrs=[]\n  mts=True\n  while i<len(phrase):\n    if phrase[i]!=\" \" and mts==True:\n      mot+=phrase[i]\n    elif phrase[i]==\" \":\n      mts=False\n    elif phrase[i]!=\" \":\n      phrs+=phrase[i]\n    i+=1\n  while i<len(mot) and res==True:\n    if mot[i]==phrs[-i-1]:\n      res=True\n    else:\n      res=False\n  return res", "user": "userdId_26", "attemptID": 2210, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "40.705208", "embeddingY": "35.245617"},{"extension": "py", "date": "2020-05-04 21:22:16", "correct": "0", "upload": "def bissextile(annee):\n  res=False\n  if annee%4==0 and anne%100!=0 or annee%400==0:\n    res=True\n  return res", "user": "userdId_8", "attemptID": 2211, "exercise": "a7d37636649c0ada991520788deeb2d0", "exercise_name": "bissextile", "embeddingX": "48.536034", "embeddingY": "3.3133986"},{"extension": "py", "date": "2020-04-09 22:09:17", "correct": "0", "upload": "def suiteAriGeo(liste):\n  ok=True\n  i=0\n  j=0\n  R=0\n  Q=0\n  if len(liste)<=2 :\n    ok=True\n  else :\n    while j<(len(liste)-2):\n      if liste[0]==0 :\n        Q=1\n      elif (liste[j+1]-liste[j])==(liste[j+2]-liste[j+1]) :\n        Q=1\n        R=(liste[1]-liste[0])\n      elif (liste[j+1]/liste[j])==(liste[j+2]/liste[j+1]) :\n        Q=(liste[1]/liste[0])\n        R=0\n      else : \n        Q=(liste[1]/liste[0])\n        R=liste[2]-(Q*liste[1])\n      j+=1\n      \n    while i<(len(liste)-1) and ok :\n      if liste[i+1]!=Q*liste[i]+R :\n        ok=False\n      i+=1\n  return ok", "user": "userdId_15", "attemptID": 2212, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "40.32777", "embeddingY": "55.40922"},{"extension": "py", "date": "2020-04-12 08:22:46", "correct": "0", "upload": "def suiteAriGeo(liste):\n  i=0\n  while i<len(liste)-1:\n    a=liste[0]\n    b=liste[0]\n    if liste[i+1]==liste[i]+(liste[1]-liste[0]):\n      b=liste[1]-liste[0]\n    if liste[0]!=0:                        \n      if liste[i+1]==liste[i]*liste[1]/liste[0]:\n        a=liste[1]/liste[0]\n        b=0\n    if liste[i+1]==liste[1]-liste[0]+liste[0]:\n      b=liste[0]\n    i=i+1\n  ok=True\n  i=0\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=a*liste[i]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 2213, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "36.069485", "embeddingY": "83.70803"},{"extension": "py", "date": "2020-03-03 05:41:56", "correct": "0", "upload": "def nbVoyelles(mot):\n  cpt=0\n  for i in range(len(mot)):\n    cpt=mot[i]+1\n  return cpt", "user": "userdId_30", "attemptID": 2214, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-42.06703", "embeddingY": "-34.015186"},{"extension": "py", "date": "2020-04-12 04:07:43", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=[]\n  for elem in liste:\n    res=a*elem+b\n  return res", "user": "userdId_8", "attemptID": 2215, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-78.436005", "embeddingY": "20.95164"},{"extension": "py", "date": "2020-03-09 21:37:56", "correct": "0", "upload": "def polynome(a,b,c):\n  delta=b-4*a*c\n  if delta>0:\n    res=(-b-sqrt(delta)/2*a,-b+sqrt(delta)/2*a)\n  if delta==0:\n    res=-b/a\n  else:\n    res='pas de solution'\n  return res", "user": "userdId_12", "attemptID": 2216, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-50.710934", "embeddingY": "4.7963963"},{"extension": "py", "date": "2020-04-09 03:47:03", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  calc=0\n  i=0\n  lres=[0]\n  ok=None\n  while i<len(liste):\n    calc=a*calc+b\n    lres.append(calc)\n    i+=1\n  return lres", "user": "userdId_13", "attemptID": 2217, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-70.08067", "embeddingY": "26.361624"},{"extension": "py", "date": "2020-03-12 08:31:30", "correct": "1", "upload": "def maximum(liste):\n  if len(liste)==0:\n    return None\n  max=liste[0]\n  for i in range (1,(len(liste))):\n    if liste[i]>max:\n      max=liste[i]\n  return max", "user": "userdId_1", "attemptID": 2218, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "12.194109", "embeddingY": "-70.65046"},{"extension": "py", "date": "2020-04-13 21:31:38", "correct": "0", "upload": "def indiceInsertion(sc,scores):\n  for i in range(len(scores)):\n    if scores[i]<sc:\n      return i", "user": "userdId_6", "attemptID": 2219, "exercise": "f8a820b2bd54d18d36716e3d703858f7", "exercise_name": "indiceInsertion", "embeddingX": "-17.26169", "embeddingY": "-46.927464"},{"extension": "py", "date": "2020-04-02 23:32:07", "correct": "0", "upload": "def listeSymetrique(l):\n  i=0\n  j=-1\n  res=True\n  while i<(len(l))/2 and j>(-len(l))/2 and res==True:\n    if l[i]!=l[j]:\n      res=False\n    i=i+1\n    j=j-1\n  return res", "user": "userdId_12", "attemptID": 2220, "exercise": "8eb27aeda471a467e2223abebeca886e", "exercise_name": "listeSymetrique", "embeddingX": "25.540323", "embeddingY": "62.913895"},{"extension": "py", "date": "2020-04-03 00:41:33", "correct": "1", "upload": "def nombreSymetrique(nombre):\n  l=[]\n  while nombre!=0:\n    l.append(nombre%10)\n    nombre=nombre//10\n  i=0\n  ok=True\n  while i<(len(l))/2 and ok:\n    if l[i]!=l[-1-i]:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_12", "attemptID": 2221, "exercise": "fae4d6a34289cf5bf06f9d6d17e8547e", "exercise_name": "nombreSymetrique", "embeddingX": "31.207335", "embeddingY": "48.320255"},{"extension": "py", "date": "2020-04-12 11:20:18", "correct": "1", "upload": "def sousChaine(s1,s2):\n    if len(s1)==0:\n      res=True\n    else:\n      res=False\n      if s1 in s2:\n        res=True\n    return res", "user": "userdId_11", "attemptID": 2222, "exercise": "4bdf8c9c5d020593e1771e4d3ae1ae0d", "exercise_name": "sousChaine", "embeddingX": "42.71272", "embeddingY": "-16.905561"},{"extension": "py", "date": "2020-04-11 00:16:16", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  i=0\n  c=True\n  while i<len(liste+1) and c:\n    if liste[i+1]!=a*liste[i]+b:\n      c=False\n    i=i+1\n  return c\n      ", "user": "userdId_19", "attemptID": 2223, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-72.39161", "embeddingY": "11.540122"},{"extension": "py", "date": "2020-03-31 03:37:41", "correct": "0", "upload": "def fusion(liste1,liste2):\n  res=[]\n  i=0\n  j=0\n  while i<len(liste1) and i<len(liste2):\n    if liste1[i]<liste2[j]:\n      res.append(liste1[i])\n      j=i+1\n    else:\n      res.append(liste1[i])\n      i=i+1\n      while j<len(liste2):\n        res.append(liste2[j])\n        j=j+1\n      \n      while i<len(liste1):\n          res.append(liste1[i])\n          i=i+1\n  return res", "user": "userdId_36", "attemptID": 2224, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-40.311417", "embeddingY": "48.84746"},{"extension": "py", "date": "2020-04-05 03:33:11", "correct": "0", "upload": "def minimum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=liste[0]\n    for i in range(1,len(liste)-1):\n      if liste[i]<res:\n        res=liste[i]\n  return res", "user": "userdId_26", "attemptID": 2225, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "23.381262", "embeddingY": "-69.47347"},{"extension": "py", "date": "2020-04-16 23:55:17", "correct": "1", "upload": "def indiceInsertion(sc,scores):\n  i=0\n  while i<len(scores):\n    if sc>scores[i]:\n      return i\n    i=i+1\n  return len(scores)", "user": "userdId_1", "attemptID": 2226, "exercise": "f8a820b2bd54d18d36716e3d703858f7", "exercise_name": "indiceInsertion", "embeddingX": "-16.549826", "embeddingY": "60.699203"},{"extension": "py", "date": "2020-03-22 05:04:42", "correct": "1", "upload": "def nombrePair(n):\n  if n%2==0:\n    res=True\n  else:\n    res=False\n  return res", "user": "userdId_12", "attemptID": 2227, "exercise": "3001254263845e9a478696f81a704d33", "exercise_name": "nombrePair", "embeddingX": "43.554096", "embeddingY": "-3.8392022"},{"extension": "py", "date": "2020-03-12 07:34:24", "correct": "0", "upload": "def bissextile(annee):\n  if annee%4==0 and annee%100!=0:\n    if annee%400==0:\n      return True\n  else:\n    return False\n", "user": "userdId_1", "attemptID": 2228, "exercise": "a7d37636649c0ada991520788deeb2d0", "exercise_name": "bissextile", "embeddingX": "50.99865", "embeddingY": "-1.0058367"},{"extension": "py", "date": "2020-03-31 01:09:54", "correct": "1", "upload": "def listeSymetrique(l):\n  i=0\n  res = True\n  while res == True and i < len(l)-1:\n    i+=1\n    if l[i] != l[len(l)-i-1]:\n      res = False\n  return res", "user": "userdId_4", "attemptID": 2229, "exercise": "8eb27aeda471a467e2223abebeca886e", "exercise_name": "listeSymetrique", "embeddingX": "28.291405", "embeddingY": "43.608276"},{"extension": "py", "date": "2020-03-06 21:57:17", "correct": "0", "upload": "def somme(liste):\n    res = None\n    if len(liste) > 0:\n        res = sum(liste)\n    return res\n      ", "user": "userdId_4", "attemptID": 2230, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "10.206686", "embeddingY": "-55.097923"},{"extension": "py", "date": "2020-03-31 06:21:56", "correct": "0", "upload": "def doubleChiffre(nombre):\n  res=False\n  com=0\n  while nombre!=0:\n    com=nombre%10\n    nombre=nombre//10\n    if com in nombre:\n      res=True\n  return res", "user": "userdId_13", "attemptID": 2231, "exercise": "c83ea6acd3e9f6f5543e87d515e8a44a", "exercise_name": "doubleChiffre", "embeddingX": "15.222739", "embeddingY": "6.610998"},{"extension": "py", "date": "2020-04-03 00:02:46", "correct": "1", "upload": "def listeSymetrique(l):\n  res = True\n  i = 0\n  while i < len(l)/2 and res == True :\n    if l[i] != l[len(l)-i-1] :\n      res = False\n    i = i + 1\n  return res", "user": "userdId_17", "attemptID": 2232, "exercise": "8eb27aeda471a467e2223abebeca886e", "exercise_name": "listeSymetrique", "embeddingX": "27.18661", "embeddingY": "52.8973"},{"extension": "py", "date": "2020-04-12 07:02:50", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  if liste==[]:\n    res=True\n  c=[]\n  res=False\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n    c=[liste[0]]/range(len(liste))+c\n  return c", "user": "userdId_8", "attemptID": 2233, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-72.05519", "embeddingY": "30.420507"},{"extension": "py", "date": "2020-04-06 05:32:49", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  i=0\n  mot=[]\n  phrs=[]\n  mts=True\n  res=True\n  while i<len(phrase):\n    if phrase[i]!=\" \" and mts==True:\n      mot+=phrase[i]\n    elif phrase[i]==\" \":\n      mts=False\n    elif phrase[i]!=\" \":\n      phrs+=phrase[i]\n    i+=1\n  while i<len(mot) and res==True:\n    if mot[i]==phrs[-i-1]:\n      res=True\n    else:\n      res=False\n    i+=1\n  return res", "user": "userdId_26", "attemptID": 2234, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "40.814777", "embeddingY": "35.123734"},{"extension": "py", "date": "2020-04-12 06:26:15", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  if liste==[]:\n    res=True\n  else:\n    c=[]\n    res=False\n    for i in range(len(liste)-1):\n      d=a*liste[i]+b\n      c.append(d)\n      c=liste[0]+c\n    if c==liste:\n      res=True\n    return res", "user": "userdId_8", "attemptID": 2235, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-71.82143", "embeddingY": "16.011272"},{"extension": "py", "date": "2020-03-05 22:05:08", "correct": "1", "upload": "def maximum(liste):\n  if len(liste)==0:\n     res=None\n  else:\n    res=liste[0]\n    for i in range(len(liste)):\n      if liste[i]>res:\n        res=liste[i]\n  return res", "user": "userdId_30", "attemptID": 2236, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "0.625076", "embeddingY": "-63.033978"},{"extension": "py", "date": "2020-03-06 00:12:58", "correct": "0", "upload": "def moyenne(liste):\n    if liste==[]:\n        return None\n    else:\n        somme=0\n        nbtermes=0\n        for elem in liste:\n          somme=somme+elem\n          nbtermes=nbtermes+1\n          moy=somme/nbtermes\n          return moy", "user": "userdId_2", "attemptID": 2237, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-0.32872152", "embeddingY": "-5.7168837"},{"extension": "py", "date": "2020-04-07 23:52:24", "correct": "0", "upload": "def motPalindrme(mot):\n  res=False\n  if mot=='':\n    res=True\n  else:\n    mot2=''\n    for i in mot:\n      mot2=i+mot2\n    if mot1==mot2:\n      res=True\n  return res\n  ", "user": "userdId_2", "attemptID": 2238, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "14.842387", "embeddingY": "-5.2074556"},{"extension": "py", "date": "2020-03-12 22:00:27", "correct": "0", "upload": "def maximum(liste):\n  maximum=liste[0]\n  for maximum in liste:\n    if c>=maximum:\n      maximum=c\n  return maximum", "user": "userdId_35", "attemptID": 2239, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "36.206764", "embeddingY": "-48.949986"},{"extension": "py", "date": "2020-04-12 05:34:21", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=False\n  c=[]\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n  return c", "user": "userdId_8", "attemptID": 2240, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-77.50153", "embeddingY": "19.906635"},{"extension": "py", "date": "2020-04-08 00:05:11", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  res=0\n  for i in range(nombre):\n    if i==chiffre:\n      res=res+1\n  return res", "user": "userdId_2", "attemptID": 2241, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-19.539087", "embeddingY": "-25.368183"},{"extension": "py", "date": "2020-04-12 06:26:08", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  if liste==[]:\n    res=True\n  else:\n    c=[]\n    res=False\n    for i in range(len(liste)-1):\n      d=a*liste[i]+b\n      c.append(d)\n      c=liste[0]+c\n      if c==liste:\n        res=True\n    return res", "user": "userdId_8", "attemptID": 2242, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-73.0964", "embeddingY": "18.93675"},{"extension": "py", "date": "2020-03-19 23:59:27", "correct": "1", "upload": "def reconstruireChainePartielle(s,n):\n  res=\"\"\n  for i in range(0,len(s),n):\n    res=res+s[i]\n  return res", "user": "userdId_34", "attemptID": 2243, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-60.83984", "embeddingY": "-40.543472"},{"extension": "py", "date": "2020-04-06 05:30:05", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  i=0\n  mot=[]\n  phrs=[]\n  mts=True\n  faute=False\n  res=True\n  while i<len(phrase):\n    if phrase[i]!=\" \" and mts==True:\n      mot+=phrase[i]\n    elif phrase[i]==\" \":\n      mts=False\n    elif phrase[i]!=\" \":\n      phrs+=phrase[i]\n    i+=1\n  while i<len(mot) and faute==False:\n    if mot[i]==phrs[-i-1]:\n      res=True\n    else:\n      res=False\n      faute==True\n  return res", "user": "userdId_26", "attemptID": 2244, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "40.389282", "embeddingY": "34.545757"},{"extension": "py", "date": "2020-03-31 05:49:38", "correct": "0", "upload": "def stockerChiffres(nombre):\n  cpt=0\n  res=[]\n  nb=nombre\n  while nb!=0:\n    res=res+[nb%10]\n    nb=nb//10\n  return res\n    ", "user": "userdId_28", "attemptID": 2245, "exercise": "49a87f644f84a443327fb4315b47f249", "exercise_name": "stockerChiffres", "embeddingX": "-0.9759449", "embeddingY": "18.531826"},{"extension": "py", "date": "2020-03-06 00:13:28", "correct": "0", "upload": "def maximum(liste):\n  res=0\n  for i in range(len(liste)):\n      res==res+liste[i]\n  return res", "user": "userdId_41", "attemptID": 2246, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-28.80758", "embeddingY": "-47.020023"},{"extension": "py", "date": "2020-04-03 00:22:51", "correct": "1", "upload": "def nbChiffres(nombre):\n  cpt=0\n  if nombre==0:\n    cpt=1\n  while nombre!=0:\n    nombre=nombre//10 \n    cpt+=1\n  return cpt", "user": "userdId_34", "attemptID": 2247, "exercise": "3dcf332c003a1f3bf15df22ee17884a3", "exercise_name": "nbChiffres", "embeddingX": "32.071415", "embeddingY": "14.161687"},{"extension": "py", "date": "2020-03-31 05:25:41", "correct": "0", "upload": "def nbChiffres(nombre):\n  while nombre//10>0:\n    nombre//10\n  return res\n", "user": "userdId_13", "attemptID": 2248, "exercise": "3dcf332c003a1f3bf15df22ee17884a3", "exercise_name": "nbChiffres", "embeddingX": "36.01326", "embeddingY": "10.117113"},{"extension": "py", "date": "2020-03-13 00:39:39", "correct": "0", "upload": "def sommeNPremiersEntiers(n):\n  if n<0 :\n    res=0\n  else:\n    for i in range(n+1):\n      res=res+i\n  \n  return res", "user": "userdId_15", "attemptID": 2249, "exercise": "c315a540cf0bfb0182dc114c6f0eafd1", "exercise_name": "sommeNPremiersEntiers", "embeddingX": "27.586485", "embeddingY": "-55.590954"},{"extension": "py", "date": "2020-03-09 08:57:25", "correct": "0", "upload": "def nbVoyelles(mot):\n    cpt=0\n    for lettre[i] in range(0,len(mot)):\n      if lettre==\"a\":\n        cpt=cpt+1\n      if lettre==\"e\":\n        cpt=cpt+1\n      if lettre==\"i\":\n        cpt=cpt=1\n      if lettre==\"o\":\n        cpt=cpt+1\n      if lettre==\"u\":\n        cpt=cpt+1\n      if lettre==\"y\":\n        cpt=cpt+1\n    return cpt\n  ", "user": "userdId_11", "attemptID": 2250, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-45.172417", "embeddingY": "-40.16487"},{"extension": "py", "date": "2020-04-12 05:19:17", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=False\n  c=[]\n  for i in range(0,len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n  return c", "user": "userdId_8", "attemptID": 2251, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-77.30396", "embeddingY": "21.802004"},{"extension": "py", "date": "2020-03-12 06:56:10", "correct": "0", "upload": "def maximum(liste):\n  res=liste[0]\n  for i in len(liste):\n    if res<liste[i]:\n      max=liste[i]\n    return max", "user": "userdId_20", "attemptID": 2252, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-50.0947", "embeddingY": "-16.541258"},{"extension": "py", "date": "2020-03-27 06:06:08", "correct": "0", "upload": "def compare(chaine1,chaine2):\n  res=0\n  i=0\n  while i<len(chaine1) and res==0:\n    if chaine1[i]<chaine2[2]:\n      res=-1\n    if chaine1[i]>chaine2[2]:\n      res=1\n    else:\n      res=0\n    i=i+1\n  return res\n", "user": "userdId_19", "attemptID": 2253, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-25.414297", "embeddingY": "59.42156"},{"extension": "py", "date": "2020-03-09 23:50:51", "correct": "0", "upload": "def ecart(liste):\n    if len(liste)==0:\n      res=None\n    else:\n      res=liste[0]\n      max=''\n      min=''\n      for i in range(1,len(liste)):\n        if liste[i]<res:\n          min=liste[i]\n        if liste[i]>res:\n          max=liste[i]\n          res=max-min\n    return res\n      \n      ", "user": "userdId_9", "attemptID": 2254, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "15.331833", "embeddingY": "-83.16692"},{"extension": "py", "date": "2020-03-27 05:24:57", "correct": "0", "upload": "def quatrePlus100(liste):\n  i=0\n  while i>len(liste):\n    res.append(liste[i])\n    i=i+1\n    return None", "user": "userdId_20", "attemptID": 2255, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-19.023512", "embeddingY": "31.855057"},{"extension": "py", "date": "2020-03-31 05:26:39", "correct": "0", "upload": "def nbChiffres(nombre):\n  while nombre//10>0:\n    nombre=nombre//10\n  return nombre", "user": "userdId_13", "attemptID": 2256, "exercise": "3dcf332c003a1f3bf15df22ee17884a3", "exercise_name": "nbChiffres", "embeddingX": "35.90291", "embeddingY": "9.712222"},{"extension": "py", "date": "2020-04-07 03:36:38", "correct": "0", "upload": "def motPalindrome(mot):\n  res=False\n  if mot[0]==mot[-1]:\n    res=True\n  return res", "user": "userdId_30", "attemptID": 2257, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "43.827198", "embeddingY": "-9.286244"},{"extension": "py", "date": "2020-04-11 05:51:52", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  if (chiffre or nombre)==0:\n    res=1\n  else:\n    while nombre!=0:\n      nombre=nombre//10\n      if nombre%10==chiffre:\n        res+=1\n  return res", "user": "userdId_8", "attemptID": 2258, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "23.968182", "embeddingY": "10.267315"},{"extension": "py", "date": "2020-03-13 00:34:18", "correct": "0", "upload": "def doubleLettre(mot):\n    for i in range(1,len(mot)):\n      if mot[i] == mot [i-1]:\n        return True\n      else:\n        return False", "user": "userdId_42", "attemptID": 2259, "exercise": "00da9cf1fa2b468d915724499459ed8f", "exercise_name": "doubleLettre", "embeddingX": "16.825619", "embeddingY": "-69.700615"},{"extension": "py", "date": "2020-03-20 00:36:15", "correct": "0", "upload": "def permutationListe(liste,permutation):\n    res = []\n    for i in range (len(liste)) :\n      res.append(liste[permutation[i]])\n    return res", "user": "userdId_17", "attemptID": 2260, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-47.110744", "embeddingY": "-32.0284"},{"extension": "py", "date": "2020-04-14 06:05:42", "correct": "0", "upload": "def indiceInsertion(sc,scores):\n  res=0\n  i=0\n  while i<len(scores) and sc<scores:\n    res=res+1\n    i=i+1\n  return res\n", "user": "userdId_28", "attemptID": 2261, "exercise": "f8a820b2bd54d18d36716e3d703858f7", "exercise_name": "indiceInsertion", "embeddingX": "-16.039904", "embeddingY": "44.901546"},{"extension": "py", "date": "2020-03-20 00:00:00", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  res=\"\"\n  fin=deb+long\n  if fin>len(s):\n    fin=len(s)\n  for i in range(deb,fin):\n    res=res+s[i]\n  return None", "user": "userdId_20", "attemptID": 2262, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-75.22585", "embeddingY": "21.66098"},{"extension": "py", "date": "2020-04-07 23:07:46", "correct": "1", "upload": "def motPalindrome(mot):\n  ok=True\n  i=0\n  while i<len(mot)//2 and ok:\n    if mot[i]!=mot[-i-1]:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_13", "attemptID": 2263, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "23.854126", "embeddingY": "49.43816"},{"extension": "py", "date": "2020-03-05 22:20:10", "correct": "1", "upload": "def maximum(liste):\n  if len(liste)==0 :\n      res=None \n  else:\n    res=0\n    res=liste[0]\n    for i in range (1,len(liste)):\n      if liste [i]>res:\n        res=liste [i]\n  return res", "user": "userdId_25", "attemptID": 2264, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-0.27197847", "embeddingY": "-60.09921"},{"extension": "py", "date": "2020-03-30 22:19:22", "correct": "0", "upload": "def doubleChiffre(nombre):\n  temp = str(nombre)\n  for i in range (len(temp)+1):\n    if temp[i]==temp[i+1]:\n      return True\n  return False", "user": "userdId_6", "attemptID": 2265, "exercise": "7f84d207313ad3dc0f4fef3d72d72abb", "exercise_name": "doubleChiffre", "embeddingX": "-15.71431", "embeddingY": "-62.862713"},{"extension": "py", "date": "2020-03-15 02:44:23", "correct": "0", "upload": "def sommeNPremiersEntiersPairs(n):\n  res=0\n  for x in range(1,n+1):\n    if x%2==0:\n      res=res+x\n    return res", "user": "userdId_8", "attemptID": 2266, "exercise": "3030dc079e6607c253e89e8ef4784b74", "exercise_name": "sommeNPremiersEntiersPairs", "embeddingX": "29.23076", "embeddingY": "-11.2019825"},{"extension": "py", "date": "2020-04-08 00:56:58", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res = True\n  i = 0\n  while res and i < len(liste)-1:\n    if liste[i+1] != (a*liste[i]+b) :\n      res = False\n    i = i + 1\n  return res\n\ndef suiteAriGeo(liste):\n  if len(liste) < 3 :\n    res = True\n  else :\n    ecart1 = liste[1]-liste[0]\n    ecart2 = liste[2]-liste[1]\n    if ecart1 == 0 or ecart == 0:\n      a = 1\n    else :\n      a = ecart2/ecart1\n    b = liste[1]-a*liste[0]\n    res = verifSuiteAriGeo(liste,a,b)\n  return res\n", "user": "userdId_17", "attemptID": 2267, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "16.576431", "embeddingY": "70.934204"},{"extension": "py", "date": "2020-03-06 00:20:08", "correct": "0", "upload": "def nbVoyelles(mot):\n  voyel=\"aeiouy\"\n  if len(mot)==0:\n    voy=None\n  else:\n    voy=0\n    for i in range(mot):\n      if voyel[i] ==mot:\n        voy=voy+1\n  return voy", "user": "userdId_13", "attemptID": 2268, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-0.31933865", "embeddingY": "-43.74221"},{"extension": "py", "date": "2020-04-07 01:02:40", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  i=0\n  end=False\n  \n  while i<len(phrase) and end==False:\n    if phrase[i]==\" \":\n      end=True\n    elif phrase[i]==phrase[-i-1]:\n      res=True\n    elif phrase[-i-1]==\" \":\n      if phrase[i]==phrase[-i-2]:\n        res=True\n    else:\n      res=False\n  return res", "user": "userdId_26", "attemptID": 2269, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "33.983986", "embeddingY": "41.00727"},{"extension": "py", "date": "2020-03-12 08:40:29", "correct": "0", "upload": "def bissextile(annee):\n    if annee%4==0 :\n      res=True \n    else :\n      res=False\n    if annee%400==0 :\n      res=True\n    else :\n      res=False\n    return res", "user": "userdId_24", "attemptID": 2270, "exercise": "a7d37636649c0ada991520788deeb2d0", "exercise_name": "bissextile", "embeddingX": "44.18905", "embeddingY": "-2.9137788"},{"extension": "py", "date": "2020-04-13 21:28:04", "correct": "0", "upload": "def suiteAri(liste):\n  res=True\n  if len(liste)>1:\n    r=liste[1]-liste[0]\n    res=verifSuiteAriGeo(liste,1,r)\n  return res", "user": "userdId_8", "attemptID": 2271, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "-5.5986867", "embeddingY": "-73.17368"},{"extension": "py", "date": "2020-05-04 21:30:45", "correct": "0", "upload": "def semestreValide(ue1,ue2):\n  res=False\n  if ue1>=10 and ue2>=10 or ue1+ue2>=20:\n    res=True\n  elif ue1<10:\n    res=False\n  return res", "user": "userdId_8", "attemptID": 2272, "exercise": "70ae7ad6cf504e0fa8cedebd8e8a825f", "exercise_name": "semestreValide", "embeddingX": "68.04717", "embeddingY": "-1.4690833"},{"extension": "py", "date": "2020-03-13 23:37:02", "correct": "1", "upload": "def jourNuit(heure):\n  if heure<0 or heure>24:\n    res =\"l'heure saisie est invalide\"\n  else:\n    if heure<5 or heure>=21:\n      res=\"on est la nuit\"\n    elif heure<12:\n      res=\"on est le matin\"\n    elif heure<17:\n      res=\"on est l'apr\u00e8s-midi\"\n    else:\n      res=\"on est le soir\"\n    if heure<=5 or heure>=18:\n      res=res+\" et il fait nuit\"\n    else:\n      res=res+\" et il fait jour\"\n  return res", "user": "userdId_14", "attemptID": 2273, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "71.25529", "embeddingY": "16.935102"},{"extension": "py", "date": "2020-03-06 00:10:34", "correct": "1", "upload": "def somme(liste):\n    res = 0\n    for nb in liste:\n      res = res + nb\n    return res", "user": "userdId_29", "attemptID": 2274, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-29.471434", "embeddingY": "1.2489616"},{"extension": "py", "date": "2020-04-16 23:46:05", "correct": "0", "upload": "def indiceInsertion(sc,scores):\n  i=0\n  while i<len(scores):\n    if sc>scores[i]:\n      return i\n    i=i+1\n  if sc<score[i]:\n      return len(scores)", "user": "userdId_1", "attemptID": 2275, "exercise": "f8a820b2bd54d18d36716e3d703858f7", "exercise_name": "indiceInsertion", "embeddingX": "-17.005522", "embeddingY": "60.482086"},{"extension": "py", "date": "2020-03-22 05:00:12", "correct": "0", "upload": "def polynome(a,b,c):\n  delta=b**2-4*a*c\n  if delta>0:\n    x=((-b)+(delta**0.5)/2*a),((-b)-(delta**0.5)/2*a)\n  elif delta==0:\n    x=-b/2*a\n  else:\n    x='pas de solution'\n  return x", "user": "userdId_12", "attemptID": 2276, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-57.023163", "embeddingY": "7.6616497"},{"extension": "py", "date": "2020-03-13 00:40:59", "correct": "1", "upload": "def sommeNbPairs(liste):\n    res = 0\n    for nb in liste:\n      if nb%2 == 0:\n        res = res + nb\n    return res", "user": "userdId_29", "attemptID": 2277, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "29.760504", "embeddingY": "-18.738516"},{"extension": "py", "date": "2020-04-07 23:37:49", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  res=True\n  if liste[i]==0:\n    res=False\n  while i<len(liste)-1 and res==True:\n    q=liste[i+1]/liste[i]\n    if liste[i+1]/liste[i]==q:\n      res=True\n    else:\n      res=False\n    i+=1\n  return res\n", "user": "userdId_34", "attemptID": 2278, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "35.11547", "embeddingY": "54.591133"},{"extension": "py", "date": "2020-03-17 06:06:19", "correct": "0", "upload": "def distribution(liste,n):\n    res=[0]*n\n    for i in range(len(liste)):\n        if liste[i]==0:\n            res[0]=res[0]+1\n        elif liste[i]==1:\n            res[1]=res[1]+1\n        elif liste[i]==2:\n            res[2]=res[2]+1\n    return res\n\n\n  \n  \n", "user": "userdId_28", "attemptID": 2279, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-16.820766", "embeddingY": "-58.1792"},{"extension": "py", "date": "2020-04-06 17:22:42", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  i=0\n  while i<len(nombre):\n    if chiffre==nombre[i]:\n      cpt=cpt+1\n    i=i+1\n  return cpt", "user": "userdId_3", "attemptID": 2280, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-14.723753", "embeddingY": "44.2233"},{"extension": "py", "date": "2020-03-15 00:23:06", "correct": "0", "upload": "def ecart(liste):\n   res=0\n   if len(liste)==0:\n      res=None\n   if len(liste)==1:\n      res=0\n   else:\n      max=liste[0]\n      min=max\n      for i in range(len(liste)):\n         if liste[i]>max:\n            max=liste[i]\n      for i in range(len(liste)):\n         if liste[i]<min:\n            min=liste[i]\n   res=(max-min)\n   return res", "user": "userdId_32", "attemptID": 2281, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "14.190903", "embeddingY": "-86.15645"},{"extension": "py", "date": "2020-04-14 04:46:49", "correct": "0", "upload": "def indiceInsertion(sc,scores):\n  i=0\n  res=None\n  while i<len(scores) and res==None:\n    if sc>=scores[i]:\n      res=i\n    elif sc<scores[-1]:\n      res=scores[scores[-1]]\n    i=i+1\n  return res", "user": "userdId_7", "attemptID": 2282, "exercise": "f8a820b2bd54d18d36716e3d703858f7", "exercise_name": "indiceInsertion", "embeddingX": "-22.441982", "embeddingY": "70.254616"},{"extension": "py", "date": "2020-03-31 04:14:32", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n  cpt=0\n  i=0\n  res=None\n  while i<len(l) and cpt<n:\n    if l[i]==x:\n      cpt=cpt+1\n    i=i+1\n  if cpt==n:\n    res=i\n  return res", "user": "userdId_12", "attemptID": 2283, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-6.0558925", "embeddingY": "77.14354"},{"extension": "py", "date": "2020-04-07 03:47:14", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  while nombre!=0:\n    nombre=nombre//10\n    if nombre==chiffre:\n      cpt=cpt+1\n  return cpt", "user": "userdId_50", "attemptID": 2284, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "22.201694", "embeddingY": "12.174585"},{"extension": "py", "date": "2020-04-13 21:17:40", "correct": "1", "upload": "def verifSuiteAriGeo(liste,a,b):\n  ok=True\n  n=1\n  while n<len(liste) and ok:\n    if liste[n]!=liste[n-1]*a+b:\n      ok=False\n    n+=1\n  return ok", "user": "userdId_8", "attemptID": 2285, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-81.87401", "embeddingY": "10.42347"},{"extension": "py", "date": "2020-03-08 22:13:27", "correct": "1", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1==annee2 and mois1==mois2 and jour1==jour2:\n    return 0\n  elif annee1<=annee2 and mois1<=mois2 and jour1<jour2:\n    return -1\n  elif annee1<annee2 and mois1>=mois2 and jour1>=jour2:\n    return -1\n  elif annee1<annee2 and mois1>=mois2 and jour1<=jour2:\n    return -1\n  elif annee1<=annee2 and mois1<mois2 and jour1>=jour2:\n    return -1\n  else:\n    return 1", "user": "userdId_1", "attemptID": 2286, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "83.916794", "embeddingY": "-12.756089"},{"extension": "py", "date": "2020-04-11 08:40:18", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  c=[]\n  for elem in liste:\n    c+=a*elem+b\n    if c==elem:\n      res=True\n  return res", "user": "userdId_8", "attemptID": 2287, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-78.88697", "embeddingY": "22.729445"},{"extension": "py", "date": "2020-03-06 00:12:50", "correct": "0", "upload": "def ecart(liste):\n  if len(liste)==0:\n    res=None\n  elif len(liste)==1:\n    res=0\n  else:\n    res=0\n    m1=liste[i]\n    for i in range(len(liste)):\n      if m1>liste[i]:\n        m1=liste[i]\n      if m2<liste[i]:\n        m2=liste[i]\n    res=m1-m2\n  return res", "user": "userdId_30", "attemptID": 2288, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "13.763315", "embeddingY": "-52.05061"},{"extension": "py", "date": "2020-03-31 07:38:58", "correct": "1", "upload": "def nombreSymetrique(nombre):\n  if nombre==0:\n    res=[0]\n  else:\n    res=[]\n    while nombre!=0:\n      res.append(nombre%10)\n      nombre//=10\n  if res==[]:\n    ok=True\n  else:\n    ok=True\n    i=0\n    while i<len(res) and ok:\n      if res[i]!=res[-i-1]:\n        ok=False\n      i+=1\n    return ok", "user": "userdId_18", "attemptID": 2289, "exercise": "fae4d6a34289cf5bf06f9d6d17e8547e", "exercise_name": "nombreSymetrique", "embeddingX": "33.179634", "embeddingY": "38.21718"},{"extension": "py", "date": "2020-03-31 05:46:34", "correct": "1", "upload": "def nbChiffres(nombre):\n  cpt=1\n  while nombre!=0:\n    if nombre//10!=0:      \n      cpt=cpt+1\n    nombre=nombre//10\n  return cpt\n   ", "user": "userdId_21", "attemptID": 2290, "exercise": "3dcf332c003a1f3bf15df22ee17884a3", "exercise_name": "nbChiffres", "embeddingX": "31.600615", "embeddingY": "11.498424"},{"extension": "py", "date": "2020-03-09 08:46:27", "correct": "1", "upload": "def moyenne(liste):\n  res=0\n  cpt=0\n  for elem in liste:\n    res=res+elem\n    cpt=cpt+1\n  if cpt==0:\n    res=None\n  else:\n    res=res/cpt\n  return res\n\n ", "user": "userdId_11", "attemptID": 2291, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-2.5178616", "embeddingY": "-6.9955482"},{"extension": "py", "date": "2020-03-13 00:13:50", "correct": "0", "upload": "def jourNuit(heure):\n  while heure < 0 or heure > 24 :\n    return \"l'heure saisie est invalide\"\n  if heure >= 6 and heure <= 18 :\n    nuit_jour = \"jour\"\n  else:\n    nuit_jour = \"nuit\"\n  if heure >= 5 and heure < 12:\n    moment = \"le matin\"\n  elif heure >= 12 and heure < 17:\n    moment = \"l'apr\u00e8s-midi\"\n  elif heure >= 17 and heure < 21:\n    moment = \"le soir\"\n  else:\n    moment = \"la nuit\"\n  return \"on est {} et il fait {}\".format(moment,nuit_jour)", "user": "userdId_42", "attemptID": 2292, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "75.815506", "embeddingY": "18.417154"},{"extension": "py", "date": "2020-03-06 00:44:35", "correct": "1", "upload": "def minimum(liste):\n  if len(liste)==0:\n    res=None\n  else :   \n    res=liste[0]\n    for i in range(len(liste)) :\n       if liste[i]<res :\n          res=liste[i]\n  return res", "user": "userdId_24", "attemptID": 2293, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "27.41605", "embeddingY": "-68.561386"},{"extension": "py", "date": "2020-03-09 21:34:44", "correct": "0", "upload": "def jourNuit(heure):\n    print('test') \n    return None", "user": "userdId_44", "attemptID": 2294, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "-89.27903", "embeddingY": "3.1831315"},{"extension": "py", "date": "2020-04-12 08:03:15", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n    cpt=0\n    x=nombre%10\n    decomp=nombre\n    while decomp!=0 and x:\n      if x==chiffre:\n        cpt+=1\n      else:\n        decomp=decomp//10\n        x=decomp%10\n    return cpt", "user": "userdId_11", "attemptID": 2295, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "7.7120214", "embeddingY": "12.732517"},{"extension": "py", "date": "2020-03-23 01:42:54", "correct": "1", "upload": "def permutationChaine(s):\n    res=''\n    for i in range(0,len(s)-1,2):\n      res=res+s[i+1]+s[i]\n    if (len(s)%2!=0):\n      res=res+s[-1]\n    return res\n     ", "user": "userdId_11", "attemptID": 2296, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-36.609657", "embeddingY": "-59.109596"},{"extension": "py", "date": "2020-04-10 00:39:01", "correct": "0", "upload": "def suiteAriGeo(liste):\n  i=0\n  while i<len(liste)-1:\n    b=liste[1]-liste[0]\n    if liste[0]!=0:\n      a=liste[1]/liste[0]\n      if liste[i+1]==liste[i]*a:\n          b=0\n    if liste[i+1]==liste[i]+b:\n      a=1\n    i=i+1\n  i=0\n  ok=True\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=a*liste[i]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 2297, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "33.582825", "embeddingY": "81.10964"},{"extension": "py", "date": "2020-04-07 10:51:12", "correct": "0", "upload": "def suiteGeo(liste):\n  ok=True\n  i=1\n  if len(liste)==0 and len(liste)==1:\n    ok=True\n  while i<len(liste)-2 and ok:\n    q=liste[2]/liste[1]\n    if liste[i]==0:\n      ok=False\n    if liste[i+2]/liste[i+1]!=q:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 2298, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "27.59082", "embeddingY": "60.333557"},{"extension": "py", "date": "2020-03-05 23:52:30", "correct": "1", "upload": "def somme(liste):\n  res=0\n  for i in range(len(liste)):\n    res=res+liste[i]\n  return res", "user": "userdId_1", "attemptID": 2299, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-44.572014", "embeddingY": "-37.938957"},{"extension": "py", "date": "2020-03-31 04:13:56", "correct": "1", "upload": "def indiceOccurrence(n,x,l):\n  trouve=False\n  i=0\n  cpt=0\n  res=None\n  while i<len(l) and not trouve:\n    if l[i]==x:\n      cpt=cpt+1\n    if cpt==n:\n     trouve=True\n     res=i\n    i=i+1\n  return res", "user": "userdId_50", "attemptID": 2300, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-0.69164866", "embeddingY": "73.129234"},{"extension": "py", "date": "2020-03-17 06:21:36", "correct": "0", "upload": "def permutationListe(liste,permutation):\n    res=[0]*(len(liste))\n    for i in range(len(liste)):\n        res[permutation]=liste[i]  \n    return res", "user": "userdId_39", "attemptID": 2301, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-50.752216", "embeddingY": "-25.980278"},{"extension": "py", "date": "2020-03-13 00:59:27", "correct": "1", "upload": "def sommeNbPairs(liste):\n  res=0\n  for elem in liste:\n    if elem%2==0:\n      res=res+elem\n  return res", "user": "userdId_30", "attemptID": 2302, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "29.78949", "embeddingY": "-19.132807"},{"extension": "py", "date": "2020-03-27 05:38:24", "correct": "0", "upload": "def quatrePlus100(liste):\n  i=0\n  res=[]\n  while len(res)<4:\n    if liste[i]>100:\n      res.append(liste[i])\n    i=i+1\n  return res", "user": "userdId_12", "attemptID": 2303, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-26.414482", "embeddingY": "37.169865"},{"extension": "py", "date": "2020-04-07 03:44:10", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  \n  if len(liste)==1 and liste[0]!=0:\n    res=True\n  elif len(liste)>=1 and liste[0]==0:\n    res=False\n  elif len(liste)==0:\n    res=True\n  else:\n    end=False\n    while i<len(liste)-1 and end==False:\n      r=liste[0]/liste[1]\n      if liste[i]/liste[i+1]==r:\n        res=True\n      else:\n        res=False\n        end=True\n      i+=1\n  return res\n  ", "user": "userdId_26", "attemptID": 2304, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "38.980133", "embeddingY": "58.778458"},{"extension": "py", "date": "2020-04-05 06:38:44", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n    trouve=False\n    i=0\n    while i<len(mot) and not trouve:\n      if mot[i]==lettre:\n        ok=True\n      i+=1\n    if trouve==True:\n      i-=1\n    if trouve==False:\n      i=None\n    return i", "user": "userdId_18", "attemptID": 2305, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-0.63524795", "embeddingY": "60.916054"},{"extension": "py", "date": "2020-03-02 08:42:23", "correct": "0", "upload": "def jourNuit(heure):\n    res = \"l'heure saisie est invalide\"\n\n    if heure <= 24:\n        if heure >= 5 and heure < 12:\n            res = \"on est le matin \"\n        elif heure >= 12 and heure < 17:\n      \t    res = \"on est l'apr\u00e8s-midi \"\n        elif heure >= 17 and heure < 21:\n            res = \"on est le soir \"\n        else:\n            res = \"on est la nuit \"\n        if heure >= 6 and heure < 18:\n            res += \"et il fait jour\"\n        else:\n            res += \"et il fait nuit\"\n    return res\n", "user": "userdId_4", "attemptID": 2306, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "77.35143", "embeddingY": "24.807508"},{"extension": "py", "date": "2020-04-06 04:05:55", "correct": "1", "upload": "def motPalindrome(mot):\n  i=0\n  res=True\n  while i<len(mot) and res==True:\n    pl=mot[i]\n    dl=mot[-i-1]\n    if pl==dl:\n        res=True\n    else:\n        res=False\n    i+=1\n  return res", "user": "userdId_26", "attemptID": 2307, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "9.416369", "embeddingY": "59.835682"},{"extension": "py", "date": "2020-03-03 05:08:09", "correct": "1", "upload": "def somme(liste):\n  res=0\n  for elem in liste:\n    res=res+elem\n  return res", "user": "userdId_25", "attemptID": 2308, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-29.445627", "embeddingY": "2.4823751"},{"extension": "py", "date": "2020-03-15 01:30:44", "correct": "0", "upload": "def qualifJO(sexe,record,nbvictoires,champion):\n  if champion==True:\n    res=True\n  else:#False continuer la fonction\n    if sexe==M:\n      if record<12 and nbvictoires>=3:\n        res=True\n    if sexe==F:\n      if record<15 and nbvictoires>=3:\n        res=True\n    else:\n      res=False\n  return res", "user": "userdId_8", "attemptID": 2309, "exercise": "78ec7738f3a7f3553d4a5c653534c32d", "exercise_name": "qualifJO", "embeddingX": "59.87542", "embeddingY": "-11.096105"},{"extension": "py", "date": "2020-04-01 06:23:25", "correct": "1", "upload": "def nbOccurrencesLettre(lettre,mot):\n  res=0\n  for elem in mot:\n    if elem==lettre:\n      res=res+1\n  return res", "user": "userdId_12", "attemptID": 2310, "exercise": "2864c9e5861229d2ff32570f6bc944fb", "exercise_name": "nbOccurrencesLettre", "embeddingX": "-12.318213", "embeddingY": "-27.991146"},{"extension": "py", "date": "2020-03-31 04:23:06", "correct": "0", "upload": "def niemeOccurence(n,x,l):\n  res=None\n  i=0\n  cpt=0\n  while i<len(l) and cpt!=n:\n      if l[i]==x:\n        cpt+=1\n      i+=1\n  if cpt==n:\n    res=i-1\n  return res\n    ", "user": "userdId_16", "attemptID": 2311, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-9.987945", "embeddingY": "75.07798"},{"extension": "py", "date": "2020-03-04 10:44:40", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2) :\n  if (debut1,fin1,debut2,fin2) in '1,10,7,20':\n     res=True\n  if (debut1,fin1,debut2,fin2) in '1,7,10,20':\n     res=False\n  if (debut1,fin1,debut2,fin2) in '20,25,10,20':\n     res=True\n   \n  return res\n  ", "user": "userdId_39", "attemptID": 2312, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "-68.748436", "embeddingY": "34.50183"},{"extension": "py", "date": "2020-04-07 02:55:22", "correct": "1", "upload": "def produitScalaire(vec1,vec2):\n  res=0\n  i=0\n  while i<len(vec1) and i<len(vec2):\n    res=res+vec1[i]*vec2[i]\n    i=i+1\n  return res", "user": "userdId_31", "attemptID": 2313, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-15.775117", "embeddingY": "50.410213"},{"extension": "py", "date": "2020-03-02 08:48:33", "correct": "1", "upload": "def jourNuit(heure):\n    res = \"l'heure saisie est invalide\"\n\n    if heure <= 24 and heure >= 0:\n        if heure >= 5 and heure < 12:\n            res = \"on est le matin\"\n        elif heure >= 12 and heure < 17:\n      \t    res = \"on est l'apr\u00e8s-midi\"\n        elif heure >= 17 and heure < 21:\n            res = \"on est le soir\"\n        else:\n            res = \"on est la nuit\"\n        if heure >= 6 and heure < 18:\n            res += \" et il fait jour\"\n        else:\n            res += \" et il fait nuit\"\n    return res\n", "user": "userdId_4", "attemptID": 2314, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "77.41312", "embeddingY": "24.770998"},{"extension": "py", "date": "2020-03-05 23:44:32", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    return 0\n  else:\n    for elem in mot:\n      res=0\n      if elem== a or e or i or o or u or y:\n        res=res+1\n        return res", "user": "userdId_14", "attemptID": 2315, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "0.5144869", "embeddingY": "-33.978622"},{"extension": "py", "date": "2020-04-05 10:45:57", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n    liste2 = [liste[0]] + [liste[nb-1]*a+b for nb in range(1,len(liste))]    \n    return liste == liste2", "user": "userdId_4", "attemptID": 2316, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-66.376854", "embeddingY": "17.95425"},{"extension": "py", "date": "2020-04-21 02:48:10", "correct": "0", "upload": "def meilleurScoreJoueur(scores,joueurs,nom):\n    trouve=False\n    i=0\n    while i<len(scores) and i<len(joueurs) and trouve:\n      if joueurs[i]==nom:\n        trouve=True\n      i+=1\n    if trouve:\n      res=scores[i-1]\n    else:\n      res=0\n    return res", "user": "userdId_11", "attemptID": 2317, "exercise": "c96fadc94086276f98451a798b3bb730", "exercise_name": "meilleurScoreJoueur", "embeddingX": "-1.5596052", "embeddingY": "50.7196"},{"extension": "py", "date": "2020-03-06 00:29:32", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    voy=None\n  else:\n    voy=0\n    for i in mot:\n      if mot in \"aeiouy\":\n        voy=voy+1\n  return voy", "user": "userdId_13", "attemptID": 2318, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "7.643958", "embeddingY": "-31.152464"},{"extension": "py", "date": "2020-03-27 05:36:15", "correct": "0", "upload": "def quatrePlus100(liste):\n  i=0\n  while i>len(liste):\n    res.append(liste[i])\n    i=i+1\n  if liste[i]>4:\n    res=i\nreturn res", "user": "userdId_20", "attemptID": 2319, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "31.132076", "embeddingY": "59.405014"},{"extension": "py", "date": "2020-03-09 05:30:28", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  \n  res=0\n  for elem in jour1,mois1,annee1,jour2,mois2,annee2 :\n    \n    if (jour1,mois1,annee1<jour2,mois2,annee2):\n      res=-1\n      \n    elif (jour1,mois1,annee1==jour2,mois2,annee2):\n      res=res\n      \n    elif (jour1,mois1,annee1<jour2,mois2,annee2):\n      res=res+1\n      \n  return res", "user": "userdId_23", "attemptID": 2320, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "-22.326292", "embeddingY": "-8.883893"},{"extension": "py", "date": "2020-05-04 22:15:46", "correct": "1", "upload": "def nbOccurrencesLettre(lettre,mot):\n  res=0\n  for elem in mot:\n    if lettre==elem:\n      res+=1\n  return res", "user": "userdId_26", "attemptID": 2321, "exercise": "2864c9e5861229d2ff32570f6bc944fb", "exercise_name": "nbOccurrencesLettre", "embeddingX": "-10.087436", "embeddingY": "-27.436535"},{"extension": "py", "date": "2020-03-31 05:02:43", "correct": "0", "upload": "def listeSymetrique(l):\n  ok=True\n  i=0\n  while i<len(l) and ok:\n    if l[i]!=l[-i]:\n      ok=False\n    i+=1\n\n  return res", "user": "userdId_13", "attemptID": 2322, "exercise": "8eb27aeda471a467e2223abebeca886e", "exercise_name": "listeSymetrique", "embeddingX": "21.910587", "embeddingY": "41.216286"},{"extension": "py", "date": "2020-04-09 03:59:20", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  calc=0\n  i=0\n  lres=[]\n  ok=None\n  while i<len(liste):\n    calc=a*calc+b\n    lres.append(calc)\n    i+=1\n  if liste in lres:\n    ok=True\n  else:\n    ok=False\n  return ok", "user": "userdId_13", "attemptID": 2323, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-66.89622", "embeddingY": "18.975979"},{"extension": "py", "date": "2020-04-06 06:32:20", "correct": "0", "upload": "def produitScalaire(vec1,vec2):\n  res=0\n  i=0\n  j=0\n  while i<len(vec1) and j<len(vec2):\n    res=i*j+res\n    i=i+1\n    j=j+1\n  return res", "user": "userdId_3", "attemptID": 2324, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-12.787324", "embeddingY": "50.22871"},{"extension": "py", "date": "2020-03-06 00:05:03", "correct": "0", "upload": "def somme(liste):\n  res=0\n  for elem in list :\n    res=res+elem\n  return res", "user": "userdId_20", "attemptID": 2325, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-31.45565", "embeddingY": "-12.821682"},{"extension": "py", "date": "2020-03-01 07:59:36", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  result:[]\n  if annee1>annee2:\n    result.append(1)\n    print (result)\n  if annee1<annee2:\n    result.append(-1)\n  if annee1==annee2:\n    if mois1>mois2:\n      result.append(1)\n      print (result)\n    if mois1<mois2:\n      result.append(-1)\n      print (result)\n    if mois1==mois2:\n      if jour1>jour2:\n        result.append(1)\n        print (result)\n      if jour1<jour2:\n        result.append(-1)\n        print(result)\n      else:\n        result.append(0)\n        print (result)\n  return None", "user": "userdId_13", "attemptID": 2326, "exercise": "af7c1467ef9f7684d9ff58734067ae98", "exercise_name": "compareDates", "embeddingX": "86.405754", "embeddingY": "-22.266363"},{"extension": "py", "date": "2020-03-27 05:26:12", "correct": "0", "upload": "def quatrePremierSuperieurACent(liste):\n  i=0\n  res=[0]*len(liste)\n  while i<4 and liste[i]>100:\n    res.append(liste[i])\n    i=i+1\n  return res", "user": "userdId_12", "attemptID": 2327, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-20.635187", "embeddingY": "45.71984"},{"extension": "py", "date": "2020-03-31 05:14:12", "correct": "0", "upload": "def listeSymetrique(l):\n  ok=True\n  i=0\n  while i<len(l) and ok:\n    if l[i]!=l[i-1]:\n      ok=False\n      i=i+1\n  return ok\n", "user": "userdId_9", "attemptID": 2328, "exercise": "8eb27aeda471a467e2223abebeca886e", "exercise_name": "listeSymetrique", "embeddingX": "19.997736", "embeddingY": "36.984955"},{"extension": "py", "date": "2020-03-19 23:28:15", "correct": "0", "upload": "def reconstruireChainePartielle(s,n):\n  res=\"\"\n  for k in range(0,len[s],n):\n    res=res+s[k]\n\n  return res\n", "user": "userdId_5", "attemptID": 2329, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-47.194553", "embeddingY": "-21.437979"},{"extension": "py", "date": "2020-04-07 04:21:31", "correct": "0", "upload": "def compteChiffre(chiffre, nombre):\n  res = 0\n  while nombre > 0:\n    if nombre % 10 == chiffre:\n      res += 1\n    nombre = nombre // 10\n\n  return res", "user": "userdId_42", "attemptID": 2330, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "23.959888", "embeddingY": "7.9386344"},{"extension": "py", "date": "2020-04-16 23:39:20", "correct": "0", "upload": "def indiceInsertion(sc,scores):\n  i=0\n  while i<len(scores):\n    if sc>scores[i]:\n      return i\n    i=i+1", "user": "userdId_1", "attemptID": 2331, "exercise": "f8a820b2bd54d18d36716e3d703858f7", "exercise_name": "indiceInsertion", "embeddingX": "-16.557276", "embeddingY": "60.705265"},{"extension": "py", "date": "2020-03-15 03:15:42", "correct": "0", "upload": "def polynome(a,b,c):\n    d=((b*b)-(4*a*c))\n    print(\"delta=\",d)\n    if d<0:\n      print(\"pas de solution\")\n    else:\n      if d>0:\n        x1=(-b + d)/(2*a)\n        x2=(-b - d)/(2*a)\n        print(\"les deux r\u00e9ponses sont\",x1,\"et\",x2)\n      else:\n        print(\"la solution est\",-b/(2*a))\n ", "user": "userdId_21", "attemptID": 2332, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-57.400894", "embeddingY": "4.5076823"},{"extension": "py", "date": "2020-03-13 00:03:33", "correct": "0", "upload": "def jourNuit(heure):\n  \n  if heure<0 or heure>24 :\n    res=\"l'heure saisie est invalide\"\n  else : \n    if heure>=6 and heure<18 :\n      res=\" et il fait jour\"\n    else :\n      res=\" et il fait nuit\"\n      if heure>=5 and heure<12 :\n        res=\"on est le matin\"+res\n      elif heure>=12 and heure<17 :\n        res=\"on est l'apr\u00e8s-midi\"+res\n      elif heure>=17 and heure<21 :\n        res=\"on est le soir\"+res\n      else :\n        res=\"on est la nuit\"+res\n    \n  return res", "user": "userdId_15", "attemptID": 2333, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "78.08562", "embeddingY": "19.827179"},{"extension": "py", "date": "2020-04-11 04:26:43", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  res=0\n  for i in range(len(nombre)):\n    if nombre[i]==chiffre:\n      res+=1\n  return res", "user": "userdId_8", "attemptID": 2334, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-35.99821", "embeddingY": "-17.513994"},{"extension": "py", "date": "2020-03-17 05:34:46", "correct": "0", "upload": "def permutationChaine(s):\n    res=''\n    for i in range(0,len(s)-1,2):\n        res=res+s[i+1]+s[i]\n    if res%2!=0:\n        res=res+len(s)\n    return res", "user": "userdId_39", "attemptID": 2335, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-38.521877", "embeddingY": "-62.73373"},{"extension": "py", "date": "2020-03-02 03:00:09", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1<=annee2 and mois1<=mois2 or jour1<jour2:\n    return -1\n  elif annee1==annee2 and mois1==mois2 and jour1==jour2:\n    return 0\n  else:\n    return 1\n  \ncompareDates(10,1,2020,14,2,2020)\ncompareDates(14,2,2020,11,2,2020)\ncompareDates(10,1,2020,10,1,2020)", "user": "userdId_1", "attemptID": 2336, "exercise": "af7c1467ef9f7684d9ff58734067ae98", "exercise_name": "compareDates", "embeddingX": "86.99631", "embeddingY": "-11.760314"},{"extension": "py", "date": "2020-04-12 08:41:18", "correct": "0", "upload": "def suiteAriGeo(liste):\n  i=0\n  while i<len(liste)-1:\n    a=liste[0]\n    b=liste[0]\n    if liste[i]==i and liste[i+1]==i:\n      a=1\n      b=0\n    if liste[i+1]==liste[i]+(liste[1]-liste[0]):\n      b=liste[1]-liste[0]\n    if liste[0]!=0:                        \n      if liste[i+1]==liste[i]*liste[1]/liste[0]:\n        a=liste[1]/liste[0]\n        b=0\n    if liste[i+1]==liste[i]*(liste[1]-liste[0])+(liste[i]-(liste[i-1]*(liste[1]-liste[0]))):\n      a=liste[1]-liste[0]\n      b=liste[i]-(liste[i-1]*a)\n    i=i+1\n  ok=True\n  i=0\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=a*liste[i]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 2337, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "33.33146", "embeddingY": "85.633064"},{"extension": "py", "date": "2020-04-06 14:52:35", "correct": "0", "upload": "def motPalindrome(mot):\n  ok=True\n  i=0\n  j=len(mot)-1\n  while i<j and ok:\n    if i==j:\n      ok=True\n    else:\n      ok=False\n    i=i+1\n    j=j-1\n  return ok", "user": "userdId_3", "attemptID": 2338, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "8.289278", "embeddingY": "52.90392"},{"extension": "py", "date": "2020-03-08 21:50:49", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1==annee2 and mois1==mois2 and jour1==jour2:\n    return 0\n  elif annee1<annee2 and mois1<=mois2 and jour1<=jour2:\n    return -1\n  elif annee1<annee2 and mois1>=mois2 and jour1>=jour2:\n    return -1\n  else:\n    return 1", "user": "userdId_1", "attemptID": 2339, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "83.99195", "embeddingY": "-12.7485485"},{"extension": "py", "date": "2020-03-13 01:02:15", "correct": "0", "upload": "def plusLongueSuite(liste):\n  res=0\n  for n1 in range(0,len(liste)):\n    \n     for n2 in range (2,len(liste)):\n      if n1==n2:\n        res=res+1\n  \n  return res", "user": "userdId_15", "attemptID": 2340, "exercise": "deed004abb317b11778f7e8247197a40", "exercise_name": "plusLongueSuite", "embeddingX": "-1.3583426", "embeddingY": "-40.049015"},{"extension": "py", "date": "2020-03-17 05:54:08", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  res=''\n  if debut+longueur>len(s):\n    res=debut+longueur\n  else:\n    if debut+longueur<len(s):\n      fin=debut+longueur\n  for i in range(debut,debut+longueur): \n    res=fin\n  return res", "user": "userdId_25", "attemptID": 2341, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-65.980736", "embeddingY": "20.608124"},{"extension": "py", "date": "2020-03-31 04:26:58", "correct": "1", "upload": "def indiceOccurrence(n,x,l):\n  res=\"\"\n  cpt=0\n  trouve=False\n  i=0\n  while i<len(l) and trouve==False:\n    if l[i]==x:\n      cpt=cpt+1\n    if cpt==n:\n      trouve=True\n    i=i+1\n  if trouve==False:\n    res=None\n  else:\n    res=i-1\n\n  return res", "user": "userdId_5", "attemptID": 2342, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "0.9414973", "embeddingY": "74.47114"},{"extension": "py", "date": "2020-04-06 15:05:51", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  i=0\n  for i in range(nombre):\n    if chiffre==nombre[i]:\n      cpt=cpt+1\n    i=i+1\n  return cpt", "user": "userdId_3", "attemptID": 2343, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-20.35678", "embeddingY": "-31.406244"},{"extension": "py", "date": "2020-03-09 05:31:07", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  \n  res=0\n  for elem in jour1,mois1,annee1,jour2,mois2,annee2 :\n    \n    if (jour1,mois1,annee1<jour2,mois2,annee2):\n      res=-1\n      \n    if (jour1,mois1,annee1==jour2,mois2,annee2):\n      res=res\n      \n    if (jour1,mois1,annee1<jour2,mois2,annee2):\n      res=res+1\n      \n  return res", "user": "userdId_23", "attemptID": 2344, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "-21.959436", "embeddingY": "-8.421716"},{"extension": "py", "date": "2020-06-02 07:20:40", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n\tres=False\n\tif debut2<debut1:\n\t\tif fin2>debut1:\n\t\t\tres=True\n\tif debut2<fin1:\n\t\tif fin2>fin1:\n\t\t\tres=True\n\treturn res", "user": "userdId_3", "attemptID": 2345, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "63.876583", "embeddingY": "-19.622627"},{"extension": "py", "date": "2020-03-07 01:05:00", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut1>=debut2:\n    res=True\n    if fin1<=fin2:\n      res=True\n      if fin1>=debut2:\n        res=True\n  else:\n    res=False\n  return res", "user": "userdId_8", "attemptID": 2346, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "52.158638", "embeddingY": "-20.200615"},{"extension": "py", "date": "2020-03-12 21:50:58", "correct": "0", "upload": "def minimum(liste):\n  res=0\n  for elem in liste:\n    if res<elem:\n      res=elem\n  return res", "user": "userdId_23", "attemptID": 2347, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "42.573334", "embeddingY": "-52.849857"},{"extension": "py", "date": "2020-03-13 00:33:05", "correct": "1", "upload": "def sommeNbPairs(liste):\n  res = 0\n  for i in liste :\n    if i%2 == 0 :\n      res = res + i\n  return res", "user": "userdId_17", "attemptID": 2348, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "28.885828", "embeddingY": "-18.736696"},{"extension": "py", "date": "2020-03-06 00:06:22", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    res=0\n  else:\n    for elem in mot:\n      res=0\n      if elem== 'a' or 'e' or 'i' or 'o' or 'u' or 'y':\n        res=res+1\n  return res     ", "user": "userdId_14", "attemptID": 2349, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "4.8050494", "embeddingY": "-25.868841"},{"extension": "py", "date": "2020-04-06 06:56:12", "correct": "0", "upload": "def suiteAri(liste):\n  r=liste[i+1]%liste[i]", "user": "userdId_3", "attemptID": 2350, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "-49.151733", "embeddingY": "-11.348064"},{"extension": "py", "date": "2020-03-20 00:21:36", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  res=''\n  cpt=0\n  for i in range (debut,len(s)):\n    res=res+s[i]\n    cpt=cpt+1\n    if cpt==longueur:\n      return res", "user": "userdId_15", "attemptID": 2351, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-70.2704", "embeddingY": "14.608819"},{"extension": "py", "date": "2020-03-06 00:00:16", "correct": "1", "upload": "def moyenne(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=0\n    cpt=0\n    for i in range(len(liste)):\n      cpt=cpt+1\n      res=res+liste[i]\n    res=res/cpt\n  return res", "user": "userdId_30", "attemptID": 2352, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-8.770793", "embeddingY": "-7.5370975"},{"extension": "py", "date": "2020-03-17 05:02:29", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  res=''\n  for i in range (debut,debut+longueur):\n    res=res+s[i]\n  return res", "user": "userdId_25", "attemptID": 2353, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-80.77699", "embeddingY": "21.333488"},{"extension": "py", "date": "2020-03-17 06:08:06", "correct": "0", "upload": "def permutationListe(liste,permutation):\n  res=[0]\n  for i in liste:\n    permutation[i]=liste[i] \n  return res", "user": "userdId_35", "attemptID": 2354, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-55.72992", "embeddingY": "-17.268335"},{"extension": "py", "date": "2020-03-03 06:13:57", "correct": "0", "upload": "def polynome(a,b,c):\n  res= 0\n  delta= b**2-4*a*c\n  if delta > 0:\n    res= ((-b+delta**(1/2))/2*a, (-b-delta**(1/2))/2*a)\n  elif delta==0:\n    res= -b/2*a\n  else:\n    res= 'pas de solution'\n  return res", "user": "userdId_7", "attemptID": 2355, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-50.583843", "embeddingY": "10.253435"},{"extension": "py", "date": "2020-03-31 06:18:05", "correct": "1", "upload": "def doubleChiffre(nombre):\n  res=False\n  cpt2=nombre%10\n  cpt=nombre//10\n  while not res and cpt!=0:\n    if cpt2 == cpt%10 :\n      res=True\n    else :\n      cpt2=cpt%10\n      cpt=cpt//10\n      \n  return res", "user": "userdId_28", "attemptID": 2356, "exercise": "c83ea6acd3e9f6f5543e87d515e8a44a", "exercise_name": "doubleChiffre", "embeddingX": "11.178472", "embeddingY": "21.746702"},{"extension": "py", "date": "2020-03-12 23:52:18", "correct": "0", "upload": "def jourNuit(heure):\n  if heure>24 or heure<0:\n    afficher=\"l'heure saisie est invalide\"\n  else:\n    if 0<=heure<=5 or 5<=heure<=12:\n      afficher=\"on est le matin et il fait nuit\"\n    if 21<=heure<=24 and 0<=heure<=5:\n      afficher=\"on est la nuit et il fait nuit\"\n    if 12<=heure<=17 or 6<=heure<=18:\n      afficher=\"on est l'apres-midi et il fait jour\"\n    if 17<=heure<=21 or 6<=heure<=18:\n      afficher=\"on est le soir et il fait jour\"\n     \n  return afficher", "user": "userdId_38", "attemptID": 2357, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "72.59416", "embeddingY": "23.112446"},{"extension": "py", "date": "2020-03-06 00:19:19", "correct": "1", "upload": "def nbOccurrencesLettre(lettre,mot):\n  if len(mot)==0:\n    res=0\n  if len(lettre)==1:\n    res=0\n  for i in range(len(mot)):\n    if mot[i] in lettre:\n      res=res+1\n  return res", "user": "userdId_30", "attemptID": 2358, "exercise": "2864c9e5861229d2ff32570f6bc944fb", "exercise_name": "nbOccurrencesLettre", "embeddingX": "-14.711161", "embeddingY": "-42.474796"},{"extension": "py", "date": "2020-04-06 14:46:44", "correct": "0", "upload": "def motPalindrome(mot):\n  ok=True\n  i=0\n  j=len(mot)-1\n  while i<len(mot) and ok:\n    if i==j:\n      ok=True\n    else:\n      ok=False\n    i=i+1\n    j=j-1\n  return ok", "user": "userdId_3", "attemptID": 2359, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "8.260121", "embeddingY": "52.89956"},{"extension": "py", "date": "2020-03-20 00:42:57", "correct": "0", "upload": "def permutationChaine(mot):\n  res=\"\"\n  for k in range(0,len(mot),2):\n    res=mot[k+1]+mot[k]\n\n  return res", "user": "userdId_5", "attemptID": 2360, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-46.140312", "embeddingY": "-46.820553"},{"extension": "py", "date": "2020-03-31 03:01:57", "correct": "0", "upload": "def fusion(liste1,liste2):\n  res=[]\n  i=0\n  j=0\n  while i<len(liste1) and j<len(liste2):\n    if liste1[i]<liste2[j]:\n      res.append(liste1[i])\n      i+=1\n    else:\n      res.append(liste2[j])\n      j+=1\n    return res", "user": "userdId_13", "attemptID": 2361, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-41.58282", "embeddingY": "52.779846"},{"extension": "py", "date": "2020-03-01 23:12:05", "correct": "1", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut1>=debut2 and debut1<=fin2 :\n    res=True\n  elif debut2>=debut1 and debut2<=fin1 :\n    res=True\n  else :\n    res=False\n  return res", "user": "userdId_15", "attemptID": 2362, "exercise": "6fd66bb2393fbf3809f1c6d04f3831f7", "exercise_name": "rendezVous", "embeddingX": "52.089016", "embeddingY": "-23.98419"},{"extension": "py", "date": "2020-04-05 09:16:11", "correct": "1", "upload": "def motPalindrome(mot):\n\tok=True\n\ti=0\n\twhile i<len(mot)//2 and ok:\n\t\tif mot[i]!=mot[-i-1]:\n\t\t\tok=False\n\t\ti+=1\n\treturn ok\n", "user": "userdId_38", "attemptID": 2363, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "24.266914", "embeddingY": "37.090042"},{"extension": "py", "date": "2020-03-27 06:36:14", "correct": "0", "upload": "def compare(chaine1,chaine2):\n  i=0\n  res=()\n  while i<len(chaine1) and i<len(chaine2):\n    if chaine1[i]>chaine2[i]:\n      res=-1\n    elif chaine1==chaine2:\n      res=0\n    else:\n      res=1\n    i=i+1\n  return res", "user": "userdId_1", "attemptID": 2364, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-26.273106", "embeddingY": "62.77324"},{"extension": "py", "date": "2020-03-17 05:18:21", "correct": "0", "upload": "def distribution(liste,n):\n  cpt=[0]*(n+1)\n  for elem in liste:\n    cpt=cpt+s[elem]\n  return cpt", "user": "userdId_7", "attemptID": 2365, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-59.08688", "embeddingY": "-9.555786"},{"extension": "py", "date": "2020-03-22 12:24:01", "correct": "1", "upload": "def nbVoyelles(mot):\n  cpt=0\n  for i in mot:\n    if i in 'aeiouy':\n      cpt=cpt+1\n  return cpt", "user": "userdId_21", "attemptID": 2366, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "15.174954", "embeddingY": "-24.25479"},{"extension": "py", "date": "2020-04-13 22:41:10", "correct": "1", "upload": "def nbOccurrencesJoueur(joueurs,nom):\n  i=0\n  cpt=0\n  while i<len(joueurs):\n    if nom==joueurs[i]:\n      cpt=cpt+1\n    i=i+1\n  return cpt", "user": "userdId_1", "attemptID": 2367, "exercise": "00ee5faf82e54951fbdb2ba2656f7ae7", "exercise_name": "nbOccurrencesJoueur", "embeddingX": "-19.480066", "embeddingY": "61.756874"},{"extension": "py", "date": "2020-03-11 03:18:26", "correct": "0", "upload": "def prononcable(mot):\n    listvoy = [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\",\"\"]\n    cons = 0\n    for lettre in mot:\n        if lettre not in listvoy:\n            cons += 1\n        elif cons >= 3:\n            return False\n        else:\n            cons = 0\n    return True", "user": "userdId_42", "attemptID": 2368, "exercise": "6318b210c201fba050d60bc0913cb7ef", "exercise_name": "prononcable", "embeddingX": "23.802927", "embeddingY": "-31.484581"},{"extension": "py", "date": "2020-03-17 05:13:13", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  res=\"\"\n  if debut+longueur>len(s):\n    fin=len(s)\n  else:\n    fin=debut+longueur\n  for i in range(debut,debut+longueur):\n    s=res+s[i]\n  return res  ", "user": "userdId_35", "attemptID": 2369, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-80.20784", "embeddingY": "20.475021"},{"extension": "py", "date": "2020-03-22 09:40:28", "correct": "0", "upload": "def nombrePair(n):\n  if n%2==0:\n    res=True\n  else:\n    res=False", "user": "userdId_21", "attemptID": 2370, "exercise": "3001254263845e9a478696f81a704d33", "exercise_name": "nombrePair", "embeddingX": "43.610394", "embeddingY": "-1.6910442"},{"extension": "py", "date": "2020-04-07 19:47:33", "correct": "0", "upload": "def produitScalaire(vec1,vec2):\n  res=0\n  for i in range(vec1):\n    res=vec1[i]*vec2[i]+res\n  return res", "user": "userdId_3", "attemptID": 2371, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-40.634586", "embeddingY": "-20.797993"},{"extension": "py", "date": "2020-04-07 05:48:39", "correct": "1", "upload": "def suiteAri(liste):\n  i=0\n  res=True\n  while i<len(liste)-1 and res==True:\n    r=liste[1]-liste[0]\n    if liste[i+1]-liste[i]==r:\n      res=True\n    else:\n      res=False\n    i+=1\n  return res", "user": "userdId_34", "attemptID": 2372, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "33.192463", "embeddingY": "52.937862"},{"extension": "py", "date": "2020-04-01 06:23:20", "correct": "1", "upload": "def nbOccurrencesLettre(lettre,mot):\n  res=0\n  for elem in mot:\n    if elem==lettre:\n      res=res+1\n  return res", "user": "userdId_12", "attemptID": 2373, "exercise": "2864c9e5861229d2ff32570f6bc944fb", "exercise_name": "nbOccurrencesLettre", "embeddingX": "-12.396107", "embeddingY": "-27.908407"},{"extension": "py", "date": "2020-03-08 21:55:29", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1==annee2 and mois1==mois2 and jour1==jour2:\n    return 0\n  elif annee1<=annee2 and mois1<mois2 and jour1<jour2:\n    return -1\n  elif annee1<=annee2 and mois1>mois2 and jour1>jour2:\n    return -1\n  else:\n    return 1", "user": "userdId_1", "attemptID": 2374, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "86.2272", "embeddingY": "-14.609921"},{"extension": "py", "date": "2020-04-07 23:11:46", "correct": "1", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=True\n  i=1\n  while i<len(liste):\n    if liste[i]!=a*liste[i-1]+b:\n      res=False\n    i+=1\n  return res\ndef suiteAriGeo(liste):\n  i=1\n  res=True\n  if len(liste)>3:\n    ecart1=liste[1]-liste[0]\n    ecart2=liste[2]-liste[1]\n    if ecart1>0:\n      a=ecart2/ecart1\n      b=liste[1]-a*liste[0]\n      while i<len(liste):\n        res=verifSuiteAriGeo(liste,a,b)\n        i+=1 \n  return res", "user": "userdId_27", "attemptID": 2375, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "16.109867", "embeddingY": "76.9595"},{"extension": "py", "date": "2020-04-07 05:23:20", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=True\n  i=1\n  while i<len(liste):\n    if liste[i]!=a*liste[i-1]+b:\n      res=False\n    i+=1\n  return res\ndef suiteAriGeo(liste):\n  i=1\n  res=True\n  if len(liste)>3:\n    ecart1=liste[1]-liste[0]\n    ecart2=liste[2]-liste[1]\n    a=ecart2/ecart1\n    b=liste[1]-a*liste[0]\n    while i<len(liste):\n      if verifSuiteAriGeo(liste,a,b)!=True:\n        res=False\n      i+=1 \n  return res", "user": "userdId_27", "attemptID": 2376, "exercise": "4c9665daf155b115fe13218141fa1aff", "exercise_name": "suiteAriGeo", "embeddingX": "16.07356", "embeddingY": "77.170975"},{"extension": "py", "date": "2020-03-20 00:51:12", "correct": "0", "upload": "def permutationChaine(s):\n  res=\"\"\n  for i in range(0,len(s)-1,2):\n    res=res+o[i+1]+o[i]\n  if (len(s)%2!=0):\n    res=res+[-1]\n  return res", "user": "userdId_20", "attemptID": 2377, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-34.78322", "embeddingY": "-60.97948"},{"extension": "py", "date": "2020-03-12 22:15:06", "correct": "1", "upload": "def moyenne(liste):\n  if len (liste)==0:\n    res=None\n  else:\n    res=0\n    cpt=0\n    for elem in liste:\n      res=res+elem\n      cpt=cpt+1\n    res=res/cpt\n  return res ", "user": "userdId_20", "attemptID": 2378, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-3.8332198", "embeddingY": "-8.74546"},{"extension": "py", "date": "2020-03-05 21:39:47", "correct": "0", "upload": "def somme(liste):\n  res=0\n  for i in range (len(l)):\n    res=res+liste[i]\n    return ", "user": "userdId_25", "attemptID": 2379, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-43.82088", "embeddingY": "-41.18822"},{"extension": "py", "date": "2020-03-05 22:20:28", "correct": "0", "upload": "def maximum(liste):\n  res=-12\t\n  for elem in liste:\n    if res<elem:\n      res=elem\n  return res\n  ", "user": "userdId_23", "attemptID": 2380, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "43.786213", "embeddingY": "-53.359657"},{"extension": "py", "date": "2020-04-07 23:21:42", "correct": "0", "upload": "def suiteGeo(liste):\n  ok=True\n  i=0\n  if len(liste)<=1 :\n    ok=True\n  else :\n    while i<(len(liste)-1) and ok :\n      if liste[i]==liste[i+1] :\n        ok=True\n      elif (liste[i]*liste[i+1])==0 :\n        ok=False\n      elif liste[i]!=(liste[0]*(liste[i+1]//liste[i])**i):\n        ok=False\n      i+=1\n  return ok", "user": "userdId_15", "attemptID": 2381, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "51.126274", "embeddingY": "46.133602"},{"extension": "py", "date": "2020-03-24 04:46:40", "correct": "0", "upload": "def quatrePlus100(liste):\n  i=[]\n  res=[]\n  while i<len(liste) and i>100:\n    res.append(l[i])\n  return res", "user": "userdId_13", "attemptID": 2382, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-20.298649", "embeddingY": "42.740005"},{"extension": "py", "date": "2020-03-12 07:41:47", "correct": "0", "upload": "def bissextile(annee):\n  if annee%4==0 and annee%100!=0:\n    if annee%400==0:\n      return True\n  else:\n    return False", "user": "userdId_1", "attemptID": 2383, "exercise": "a7d37636649c0ada991520788deeb2d0", "exercise_name": "bissextile", "embeddingX": "51.00074", "embeddingY": "-0.9878816"},{"extension": "py", "date": "2020-04-07 04:10:07", "correct": "1", "upload": "def motPalindrome(mot):\n  i=0\n  ok=True\n  res=False\n  while i<len(mot)/2 and ok:\n    if mot[i]!=mot[-i-1]:\n      ok=False\n    i+=1\n  if ok: \n    res=True\n  return res", "user": "userdId_16", "attemptID": 2384, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "32.319336", "embeddingY": "46.308235"},{"extension": "py", "date": "2020-03-31 07:42:58", "correct": "0", "upload": "def moyenne(liste):\n    if len(liste)==0:\n      res=None\n    else:\n      res=0\n      cpt=0\n      moy=0\n      for elem in liste:\n        res=res+elem\n        cpt=cpt+1\n      moy=res/cpt\n    return moy\n  \n  ", "user": "userdId_11", "attemptID": 2385, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "0.59619075", "embeddingY": "-8.551997"},{"extension": "py", "date": "2020-03-12 23:49:57", "correct": "0", "upload": "def jourNuit(heure):\n  res=[]\n  if heure<0:\n    res=\"l'heure saisie est invalide\"\n  if heure>24:\n    res=\"l'heure saisie est invalide\"\n  if 6<=heure<=18:\n    if 5<heure<=12:\n      res=\"on est le matin et il fait jour\"\n    if 12<=heure<=17:\n      res=\"on est l'apr\u00e8s-midi et il fait jour\"\n    if 17<=heure<=18:\n      res=\"on est le soir et il fait jour\"\n  if 1<=heure<=5 or 19<=heure<=24:\n    if 1<=heure<=4:\n      res=\"on est la nuit et il fait nuit\"\n    if 21<=heure<=24:\n      res=\"on est la nuit et il fait nuit\"\n    if 19<=heure<=20:\n      res=\"on est le soir et il fait nuit\"\n  return res", "user": "userdId_13", "attemptID": 2386, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "70.71446", "embeddingY": "23.86843"},{"extension": "py", "date": "2020-04-12 05:57:38", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=False\n  c=[]\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n  c=liste[0]+c\n  return c", "user": "userdId_8", "attemptID": 2387, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-80.991104", "embeddingY": "10.444614"},{"extension": "py", "date": "2020-03-31 06:35:11", "correct": "0", "upload": "def stockerChiffres(nombre):\n  res=[]\n  while nombre!=0:\n    res.append(nombre%10)\n    nombre=nombre//10\n  if res==0:\n    res.append(0)\n  return res", "user": "userdId_21", "attemptID": 2388, "exercise": "49a87f644f84a443327fb4315b47f249", "exercise_name": "stockerChiffres", "embeddingX": "41.770466", "embeddingY": "14.806528"},{"extension": "py", "date": "2020-03-06 00:20:44", "correct": "0", "upload": "def nbVoyelles(mot):\n  voyel=\"aeiouy\"\n  if len(mot)==0:\n    voy=None\n  else:\n    voy=0\n    for i in mot:\n      if voyel[i] ==mot[i]:\n        voy=voy+1\n  return voy", "user": "userdId_13", "attemptID": 2389, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "0.928401", "embeddingY": "-42.986954"},{"extension": "py", "date": "2020-04-13 22:52:15", "correct": "0", "upload": "def listeDecroissante(scores):\n  res=False\n  if scores==[]:\n    res=True\n  for i in range(len(scores)):\n    if scores[i]<scores[1-i]:\n      res=True\n  return res", "user": "userdId_8", "attemptID": 2390, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "19.165194", "embeddingY": "-68.40112"},{"extension": "py", "date": "2020-03-31 04:25:02", "correct": "1", "upload": "def listeSymetrique(l):\n  res=True\n  i=0\n  j=len(l)-1\n  while i<len(l) and j<len(l):\n    if l[i]!=l[j]:\n      res=False\n    i+=1\n    j-=1\n  return res", "user": "userdId_27", "attemptID": 2391, "exercise": "8eb27aeda471a467e2223abebeca886e", "exercise_name": "listeSymetrique", "embeddingX": "36.514683", "embeddingY": "46.627888"},{"extension": "py", "date": "2020-03-20 00:21:56", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  res=\"\"\n  if debut+longueur>len(s):\n    fin=len(s)\n  for i in range(debut,debut+longueur):\n    res=res+s[i]\n  else:\n    fin=debut+longueur\n  return res\n    ", "user": "userdId_34", "attemptID": 2392, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-77.37469", "embeddingY": "19.309847"},{"extension": "py", "date": "2020-03-14 22:01:33", "correct": "0", "upload": "def maximum(list):\n  maxi=0\n  for v in range(list):\n    if v>maxi:\n    \tmaxi=v\n    return maxi", "user": "userdId_21", "attemptID": 2393, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-40.733597", "embeddingY": "-21.430248"},{"extension": "py", "date": "2020-03-10 04:01:29", "correct": "1", "upload": "def sommeNbPairs(liste):\n    res=0\n    for c in liste:\n        if c%2==0:\n          res=res+c\n    return res", "user": "userdId_18", "attemptID": 2394, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "29.111109", "embeddingY": "-19.173334"},{"extension": "py", "date": "2020-03-12 21:32:33", "correct": "0", "upload": "def nbVoyelles(mot):\n  cpt=o\n  for lettre in mot:\n    if lettre in 'aeiouy':\n      cpt=cpt+1\n  return cpt\n", "user": "userdId_25", "attemptID": 2395, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-47.898113", "embeddingY": "-7.016568"},{"extension": "py", "date": "2020-03-10 08:56:31", "correct": "0", "upload": "def jourNuit(heure):\n    if heure>24:\n      res=\"l'heure saisie est invalide\"\n    else:\n      if 5<=heure<12:\n        res=\"on est le matin et il fait nuit\"\n      else:\n        if 12<=heure<17:\n          res=\"on est l'apr\u00e8s-midi et il fait jour\"\n        else:\n          if 17<=heure<21:\n            res=\"on est le soir et il fait jour\"\n          else:\n            if 21<=heure<24:\n              res=\"on est la nuit et il fait nuit\"\n    return res\n  ", "user": "userdId_11", "attemptID": 2396, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "72.67048", "embeddingY": "25.64184"},{"extension": "py", "date": "2020-03-05 21:38:03", "correct": "1", "upload": "def somme(liste):\n  res=0\n  for i in range(len(liste)):\n      res=res+liste[i]\n  return res", "user": "userdId_36", "attemptID": 2397, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-45.11373", "embeddingY": "-36.396442"},{"extension": "py", "date": "2020-03-17 06:18:09", "correct": "0", "upload": "def permutationChaine(s):\n  res=''\n  for i in range(0,len(s)+1,2):\n    res=res+s[n+i]+s[i]\n    return res", "user": "userdId_25", "attemptID": 2398, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-48.483253", "embeddingY": "-47.05482"},{"extension": "py", "date": "2020-03-30 22:33:43", "correct": "0", "upload": "def doubleChiffre(nombre):\n  while nombre!=0:\n    temp = nombre%10\n    nombre-=nombre%10\n    nombre/=10\n    if nombre==temp:\n      return True\n  return False", "user": "userdId_6", "attemptID": 2399, "exercise": "7f84d207313ad3dc0f4fef3d72d72abb", "exercise_name": "doubleChiffre", "embeddingX": "41.44973", "embeddingY": "2.4508772"},{"extension": "py", "date": "2020-04-12 11:14:05", "correct": "0", "upload": "def phrasePalindrome(phrase):\n    if len(phrase)==0:\n      res=True\n    else:\n      res=True\n      i=0\n      x=''\n      while i<len(phrase)//2 and res:\n        if phrase[i]==x:\n          phrase=phrase-phrase[i]\n          i+=1\n        else:\n          if phrase[i]!=phrase[-(i+1)]:\n            res=False\n        i+=1\n    return res", "user": "userdId_11", "attemptID": 2400, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "33.643097", "embeddingY": "35.482555"},{"extension": "py", "date": "2020-04-08 00:02:57", "correct": "0", "upload": "def suiteGeo(liste):\n  i = 0\n  j = 0\n  raison = 0\n  if liste == [] or len(liste) == 1 :\n    res = True\n  else :\n    res = True \n    while raison == 0 :\n      if liste[j] != 0 :\n         raison = liste[j+1]/liste[j]\n      j = j + 1\n  while res and i < len(liste) - 1 :\n    if liste[i]*raison != liste[i+1]:\n      res = False\n    i = i + 1\n  return res", "user": "userdId_32", "attemptID": 2401, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "31.83631", "embeddingY": "72.82912"},{"extension": "py", "date": "2020-04-08 04:12:17", "correct": "0", "upload": "def suiteAriGeo(liste):\n  if len(liste) <= 2:\n    res = True\n  else:\n    a = liste[1] // liste[0]\n    b = liste[1] % liste[0]\n    i = 2\n    trouve = False\n    while i < len(liste) and trouve == False:\n      if (((liste[i] // liste[i-1]) != a) or (liste[i] % liste[i-1]) != b):\n        trouve = True\n      i+=1\n    if trouve == False:\n      res = True\n    else:\n      res = False\n      \n    return res", "user": "userdId_42", "attemptID": 2402, "exercise": "4c9665daf155b115fe13218141fa1aff", "exercise_name": "suiteAriGeo", "embeddingX": "34.23143", "embeddingY": "28.159124"},{"extension": "py", "date": "2020-03-09 08:19:32", "correct": "1", "upload": "def maximum(liste):\n    if len(liste)==0:\n      max=None\n    else:\n      max=liste[0]\n      for i in range(1, len(liste)):\n        if liste[i]>max:\n          max=liste[i]\n    return max\n  ", "user": "userdId_11", "attemptID": 2403, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "12.218601", "embeddingY": "-70.80795"},{"extension": "py", "date": "2020-03-20 00:55:26", "correct": "1", "upload": "def permutationChaine(s):\n  res=\"\"\n  for i in range(0,len(s)-1,2):\n    res=res+s[i+1]+s[i]\n  if len(s)%2!=0:\n    res=res+s[-1]\n  return res", "user": "userdId_20", "attemptID": 2404, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-34.68376", "embeddingY": "-59.17818"},{"extension": "py", "date": "2020-04-06 12:07:36", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  ok=True\n  i=0\n  j=len(phrase)-1\n  while i<j and ok:\n    if phrase[i]!=phrase[j]:\n      ok=False\n    if phrase[i]=='':\n      i=i+1\n    if phrase[j]=='':\n      j=j-1\n    i+=1\n    j=j-1\n  return ok", "user": "userdId_1", "attemptID": 2405, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "37.484547", "embeddingY": "42.06185"},{"extension": "py", "date": "2020-03-06 00:26:13", "correct": "0", "upload": "def minimum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=liste[0]\n    for elem in liste:\n      if elem<liste[i]:\n        res=liste[i]\n  return res", "user": "userdId_14", "attemptID": 2406, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "29.232883", "embeddingY": "-63.174355"},{"extension": "py", "date": "2020-03-09 10:59:09", "correct": "0", "upload": "def ecart(liste):\n    if len(liste)==0:\n      res=None\n    else:\n      min=l[0]\n      for i in range(1,len(l)):\n        if l[i]<min:\n          min=l[i]\n      max=l[0]\n      for i in range(1,len(l)):\n        if l[i]>max:\n          max=l[i]\n    res=max-min\n    return res", "user": "userdId_11", "attemptID": 2407, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "10.3945675", "embeddingY": "-85.808075"},{"extension": "py", "date": "2020-03-02 23:38:52", "correct": "0", "upload": "def semestreValide(ue1,ue2):\n  if ue1 < 10 :\n    if ue2 >= 10 :\n    \tres = True\n    else :\n    \tres = False \n  else :\n    if ue2 >= 10 :\n    \tres = True\n      \n  return res", "user": "userdId_17", "attemptID": 2408, "exercise": "70ae7ad6cf504e0fa8cedebd8e8a825f", "exercise_name": "semestreValide", "embeddingX": "66.3469", "embeddingY": "-2.108461"},{"extension": "py", "date": "2020-03-29 22:17:39", "correct": "1", "upload": "def compare(chaine1,chaine2):\n    res=0\n    cpt=0\n    while cpt<len(chaine1) and cpt<len(chaine2) and res==0:\n      if chaine1[cpt]<chaine2[cpt]:\n          res=-1\n      elif chaine1[cpt]>chaine2[cpt]:\n          res=1\n      cpt+=1\n      #on g\u00e8re le cas des cha\u00eenes de tailles diff\u00e9rentes\n    if res==0 : \n        if len(chaine1)>len(chaine2):\n          res=1\n        elif len(chaine1)==len(chaine2):\n          res=0\n        else:\n          res=-1\n    return res", "user": "userdId_6", "attemptID": 2409, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-20.165098", "embeddingY": "65.11563"},{"extension": "py", "date": "2020-03-13 00:44:33", "correct": "1", "upload": "def sommeNPremiersEntiersPairs(n):\n  res=0\n  for i in range(1,n+1):\n    if i%2==0:\n      res=res+i\n    \n  return res", "user": "userdId_38", "attemptID": 2410, "exercise": "3030dc079e6607c253e89e8ef4784b74", "exercise_name": "sommeNPremiersEntiersPairs", "embeddingX": "30.202778", "embeddingY": "-11.993689"},{"extension": "py", "date": "2020-04-09 22:09:08", "correct": "0", "upload": "def suiteAriGeo(liste):\n  ok=True\n  i=0\n  j=0\n  R=0\n  Q=0\n  if len(liste)<=2 :\n    ok=True\n  else :\n    while j<(len(liste)-2):\n      if liste[0]==0 :\n        Q=1\n      elif (liste[j+1]-liste[j])==(liste[j+2]-liste[j+1]) :\n        Q=1\n        R=(liste[1]-liste[0])\n      elif (liste[j+1]/liste[j])==(liste[j+2]/liste[j+1]) :\n        Q=(liste[1]/liste[0])\n        R=0\n      else : #a modifier pour l'entre invisible Q=(liste[2]//liste[1]) R=liste[2]-(Q*liste[1])\n        Q=(liste[1]/liste[0])\n        R=liste[2]-(Q*liste[1])\n      j+=1\n      \n    while i<(len(liste)-1) and ok :\n      if liste[i+1]!=Q*liste[i]+R :\n        ok=False\n      i+=1\n  return ok", "user": "userdId_15", "attemptID": 2411, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "40.326714", "embeddingY": "55.411087"},{"extension": "py", "date": "2020-03-10 04:17:58", "correct": "0", "upload": "def sommeNbPairs(liste):\n  res=0\n  for nbrs in liste:\n    if nbrs%2==0:\n      res=res+nbrs\n    return res", "user": "userdId_26", "attemptID": 2412, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "27.301422", "embeddingY": "-19.447803"},{"extension": "py", "date": "2020-03-09 09:07:10", "correct": "0", "upload": "def nbVoyelles(mot):\n    cpt=0\n    for lettre in range(0,len(mot)):\n      if lettre==\"a\":\n        cpt=cpt+1\n      if lettre==\"e\":\n        cpt=cpt+1\n      if lettre==\"i\":\n        cpt=cpt=1\n      if lettre==\"o\":\n        cpt=cpt+1\n      if lettre==\"u\":\n        cpt=cpt+1\n      if lettre==\"y\":\n        cpt=cpt+1\n    return cpt\n  ", "user": "userdId_11", "attemptID": 2413, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-8.923059", "embeddingY": "-50.151424"},{"extension": "py", "date": "2020-04-12 05:11:11", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=False\n  c=[]\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n  return c", "user": "userdId_8", "attemptID": 2414, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-79.448784", "embeddingY": "22.11682"},{"extension": "py", "date": "2020-03-13 00:57:40", "correct": "1", "upload": "def doubleLettre(mot):\n    res = False\n    c1 = ' '\n    for c2 in mot:\n      if c2 == c1:\n        res = True\n      c1 = c2\n    return res", "user": "userdId_29", "attemptID": 2415, "exercise": "00da9cf1fa2b468d915724499459ed8f", "exercise_name": "doubleLettre", "embeddingX": "16.782139", "embeddingY": "-5.5200424"},{"extension": "py", "date": "2020-04-06 10:35:11", "correct": "0", "upload": "def suiteAriGeo(liste):\n    if liste==[] or len(liste)==1:\n      ok1=True\n    else:\n      ok1=True\n      ctePrec=liste[1]-liste[0]\n      cteAct=None\n      i=2\n      while i<len(liste) and ok1:\n        cteAct=liste[i]-liste[i-1]\n        if ctePrec!=cteAct:\n          ok1=False\n        ctePrec=cteAct\n        i+=1\n    if liste==[] or len(liste)==1:\n      ok2=True\n    elif 0 in liste:\n      if liste[0]!=0:\n        ok2=True\n      while 0 in liste:\n        liste.remove(0)\n      if liste==[]:\n        ok2=True\n      else:\n        ok2=False\n    else:\n      ok2=True\n      i=1\n      while i<len(liste) and ok2:\n        cte=liste[i]/liste[i-1]\n        if liste[0]*cte**i!=liste[i]:\n          ok2=False\n        i+=1\n    return ok1 or ok2", "user": "userdId_18", "attemptID": 2416, "exercise": "4c9665daf155b115fe13218141fa1aff", "exercise_name": "suiteAriGeo", "embeddingX": "28.313465", "embeddingY": "83.83057"},{"extension": "py", "date": "2020-03-09 22:35:04", "correct": "0", "upload": "def somme(liste):\n  res=0\n  for i in range(liste):\n    res=res+liste[i]\n  return res", "user": "userdId_12", "attemptID": 2417, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-40.419937", "embeddingY": "-21.144583"},{"extension": "py", "date": "2020-03-09 05:28:36", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  \n  res=0\n  for elem in jour1,mois1,annee1,jour2,mois2,annee2 :\n    \n    if (jour1,mois1,annee1<jour2,mois2,annee2):\n      res=-1\n      \n    elif (jour1,mois1,annee1==jour2,mois2,annee2):\n      res=0\n      \n    elif (jour1,mois1,annee1<jour2,mois2,annee2):\n      res=1\n      \n  return res", "user": "userdId_23", "attemptID": 2418, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "-22.33922", "embeddingY": "-8.889604"},{"extension": "py", "date": "2020-03-17 20:41:54", "correct": "0", "upload": "def permutationChaine(s):\n  res=''\n  for i in range(0,len(s)-1,2):\n    res=res+s[i+1]+s[i]\n  return res", "user": "userdId_12", "attemptID": 2419, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-44.204414", "embeddingY": "-50.34858"},{"extension": "py", "date": "2020-03-17 20:59:42", "correct": "0", "upload": "def permutationListe(liste,permutation):\n  res=[0]*len(liste)\n  for elem in permutation:\n    for i in range(len(liste)):\n      res[elem]=res+liste[i]\n  return res", "user": "userdId_12", "attemptID": 2420, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-50.219513", "embeddingY": "-25.882763"},{"extension": "py", "date": "2020-04-12 03:58:13", "correct": "0", "upload": "def elemAri(n,u0,r):\n  res=u0*q**n\n  return res", "user": "userdId_8", "attemptID": 2421, "exercise": "d7c83a7fb9b49e28804e55955ad06968", "exercise_name": "elemGeo", "embeddingX": "-38.127808", "embeddingY": "11.965229"},{"extension": "py", "date": "2020-03-03 23:48:44", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut2<fin1<fin2 or debut1<fin2<fin1 or debut1<debut2<fin1 or debut2<debut1<fin2:\n    return True\n  else:\n    return False", "user": "userdId_19", "attemptID": 2422, "exercise": "6fd66bb2393fbf3809f1c6d04f3831f7", "exercise_name": "rendezVous", "embeddingX": "60.37699", "embeddingY": "-27.273516"},{"extension": "py", "date": "2020-03-06 23:56:11", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut1>=debut2 or fin1<=fin2:\n      res=True\n  else:\n    res=False\n  return res", "user": "userdId_8", "attemptID": 2423, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "54.70327", "embeddingY": "-21.693174"},{"extension": "py", "date": "2020-04-07 23:17:08", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  res=False\n  prec=None\n  while nombre!=0 and not res:\n    numero=nombre%10\n    nombre=nombre//10\n    if chiffre==prec:\n      res=True\n      cpt=cpt+1\n    prec=numero\n  return cpt ", "user": "userdId_13", "attemptID": 2424, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "9.165781", "embeddingY": "23.787106"},{"extension": "py", "date": "2020-03-30 22:46:34", "correct": "1", "upload": "def nbChiffres(nombre):\n  res =0\n  if nombre==0:\n    return 1\n  while nombre//10!=nombre:\n    nombre//=10\n    res+=1\n  return res", "user": "userdId_6", "attemptID": 2425, "exercise": "3dcf332c003a1f3bf15df22ee17884a3", "exercise_name": "nbChiffres", "embeddingX": "31.032465", "embeddingY": "15.237086"},{"extension": "py", "date": "2020-03-23 01:15:03", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n    max=None\n  else:\n    max=liste[0]\n    for i in range(1,len(liste)):\n      if liste[i]>max:\n        max=liste[i]\n  return res", "user": "userdId_34", "attemptID": 2426, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "8.68493", "embeddingY": "-68.19936"},{"extension": "py", "date": "2020-03-09 05:31:48", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  \n  res=0\n  for elem in jour1,mois1,annee1,jour2,mois2,annee2 :\n    \n    if (jour1,mois1,annee1<jour2,mois2,annee2):\n      res=-1\n      \n    if (jour1,mois1,annee1==jour2,mois2,annee2):\n      res=res\n      \n    if (jour1,mois1,annee1<jour2,mois2,annee2):\n      res=0+1\n      \n  return res", "user": "userdId_23", "attemptID": 2427, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "-21.957184", "embeddingY": "-8.414043"},{"extension": "py", "date": "2020-03-12 08:48:15", "correct": "0", "upload": "def maximum(liste):\n    for i in liste :\n      res= liste([0])\n    if res<i in liste :\n      res=liste[i]\n    return res", "user": "userdId_24", "attemptID": 2428, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "44.951416", "embeddingY": "-57.638126"},{"extension": "py", "date": "2020-04-06 11:58:54", "correct": "1", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=True\n  i=1\n  while i<len(liste):\n    if liste[i]!=a*liste[i-1]+b:\n      res=False\n    i+=1\n  return res\ndef suiteGeo(liste):\n  i=1\n  a=1\n  b=0\n  while i<len(liste):\n    if liste[i-1]==0:\n      i+=1\n    else:\n      if liste[i]!=liste[i-1]:\n        a=liste[i]/liste[i-1]\n        b=liste[i]-a*liste[i-1]\n    i+=1 \n  return verifSuiteAriGeo(liste,a,b)", "user": "userdId_27", "attemptID": 2429, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "14.19232", "embeddingY": "79.06667"},{"extension": "py", "date": "2020-03-14 10:19:22", "correct": "1", "upload": "def nbVoyelles(mot):\n    cpt=0\n    for lettre in mot: \n      if lettre in 'aeiouy':\n        cpt=cpt+1\n    return cpt", "user": "userdId_21", "attemptID": 2430, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "15.17621", "embeddingY": "-23.914743"},{"extension": "py", "date": "2020-03-17 04:59:23", "correct": "0", "upload": "def reconstruireChainePartielle(s,n):\n    res=' '\n    for i in range(0,len(s),2):\n        res=res+s[i]\n    return res", "user": "userdId_39", "attemptID": 2431, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-45.928604", "embeddingY": "-45.82395"},{"extension": "py", "date": "2020-04-14 00:22:42", "correct": "0", "upload": "def indiceInsertion(sc,scores):\n  res=0\n  for elem in scores:\n    if elem>=sc:\n      res+=1\n    return res", "user": "userdId_8", "attemptID": 2432, "exercise": "f8a820b2bd54d18d36716e3d703858f7", "exercise_name": "indiceInsertion", "embeddingX": "-6.95076", "embeddingY": "-26.55824"},{"extension": "py", "date": "2020-03-05 06:45:35", "correct": "0", "upload": "from math import sqrt\ndef polynome(a,b,c):\n  x=0\n  delta=b**2-(4*a*c)\n  if delta>0 :\n    x=((-b)-sqrt(delta))/(2*a),((-b)+sqrt(delta))/(2*a)\n  elif delta==0 :\n    x=(-b)/(2*a)\n  else :\n    x='pas de solution'\n  return x\n\n    \n", "user": "userdId_28", "attemptID": 2433, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-53.489124", "embeddingY": "11.044938"},{"extension": "py", "date": "2020-03-31 04:14:01", "correct": "0", "upload": "def indiceOccurence(n,x,l):\n  cpt=0 \n  trouve=False \n  i=0\n  while i<len(l) and trouve==False:\n    if l[i]==x:\n      cpt+=1\n    if cpt==n:\n      trouve=True\n    i+=1\n    res=i", "user": "userdId_21", "attemptID": 2434, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "0.8097499", "embeddingY": "70.65685"},{"extension": "py", "date": "2020-04-07 03:45:09", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=1\n  while nombre!=0:\n    nombre=nombre//10\n  if nombre==chiffre:\n    cpt=cpt+1\n  return cpt", "user": "userdId_50", "attemptID": 2435, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "21.02938", "embeddingY": "12.438898"},{"extension": "py", "date": "2020-04-20 21:09:44", "correct": "0", "upload": "def listeMatchs(liste):\n  res=[]\n  for i in range(len(liste)):\n    for j in range(i,len(liste)):\n      res.append((liste[i],liste[j]))\n  return None", "user": "userdId_6", "attemptID": 2436, "exercise": "7425aa41502a932ef1011f8e2538120a", "exercise_name": "listeMatchs", "embeddingX": "-36.67887", "embeddingY": "-30.161837"},{"extension": "py", "date": "2020-03-24 06:45:01", "correct": "0", "upload": "def fusion(liste1,liste2):\n  res=[]\n  i=0\n  while i<len(liste1)+len(liste2) and len(res)==len(liste1)+len(liste2):\n    if liste1[i]>liste2[i]:\n      res=res+[liste2[i]]\n    elif liste1[i]==liste2[i]:\n      res=res+[liste1[i]]+[liste2[i]]\n    else:\n      res=res+[liste1[i]]\n    i=i+1\n  return res", "user": "userdId_26", "attemptID": 2437, "exercise": "6613efb6c873b142dc2b6040c14eb616", "exercise_name": "fusion", "embeddingX": "-20.368889", "embeddingY": "51.175697"},{"extension": "py", "date": "2020-03-17 05:02:27", "correct": "1", "upload": "def sousChaine(s,debut,longueur):\n  res=''\n  if debut+longueur>len(s):\n    fin=len(s)\n  else:\n    fin=debut+longueur\n  for i in range(debut,fin):\n    res=res+s[i]\n  return res", "user": "userdId_7", "attemptID": 2438, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-74.43959", "embeddingY": "17.737373"},{"extension": "py", "date": "2020-04-07 04:21:23", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  ok=True\n  i=0\n  while i<len(liste) and ok:\n    if liste[i+1]!=a*liste[i-1]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 2439, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-73.51132", "embeddingY": "20.947939"},{"extension": "py", "date": "2020-04-07 10:57:24", "correct": "0", "upload": "def suiteGeo(liste):\n  ok=True\n  i=0\n  if len(liste)==0 and len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i]==0:\n      ok=False\n      q=liste[i+2]/liste[i+1]\n      if liste[i+1]/liste[i]!=q:\n        ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 2440, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "26.58379", "embeddingY": "58.348362"},{"extension": "py", "date": "2020-03-30 21:43:44", "correct": "1", "upload": "def fusion(liste1,liste2):\n  i=0\n  j=0\n  res = []\n  while j<len(liste2) and i<len(liste1):\n    if liste1[i]<=liste2[j]:\n      res.append(liste1[i])\n      print('i',i)\n      i+=1\n    else:\n      res.append(liste2[j])\n      print('j',j)\n      j+=1\n  while i<len(liste1):\n    res.append(liste1[i])\n    i+=1\n  while j<len(liste2):\n    res.append(liste2[j])\n    j+=1\n  return res", "user": "userdId_6", "attemptID": 2441, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-42.61867", "embeddingY": "55.026188"},{"extension": "py", "date": "2020-03-12 22:00:13", "correct": "0", "upload": "def maximum(liste):\n  maximum=liste[0]\n  for maximum in liste:\n    if c>=maximum:\n      res=c\n  return res", "user": "userdId_35", "attemptID": 2442, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "36.20383", "embeddingY": "-48.9367"},{"extension": "py", "date": "2020-03-03 05:57:40", "correct": "0", "upload": "def polynome(a,b,c):\n  delta=b**2-4*a*c\n  if delta<0:\n    res=\"pas de solution\"\n  if delta==0:\n    sol1=str(b/2*a)\n    res=\"la solution est \"+sol1\n  if delta>0:\n    sol1=str((b*math.sqrt(delta))/2)\n    sol2=str(b*(math.sqrt(delta)/2))\n    res=\"les solutions sont \"+sol1+\" et \"+sol2\n  return None", "user": "userdId_53", "attemptID": 2443, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-50.784428", "embeddingY": "6.599724"},{"extension": "py", "date": "2020-03-12 08:34:10", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    return 0\n  cpt=0\n  for lettre in mot:\n    if lettre in mot=='aeiouy':\n      cpt=cpt+1\n  return cpt\n  ", "user": "userdId_1", "attemptID": 2444, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "7.514551", "embeddingY": "-32.05257"},{"extension": "py", "date": "2020-03-17 05:18:45", "correct": "0", "upload": "def sousChaine(s,debut,longueur,fin):\n  res=''\n  if debut+longueur>len(s):\n    fin=len(s)\n  else:\n    fin=debut+longueur\n  for i in range(debut,Fin):\n    res=res+s[i]\n  return res", "user": "userdId_23", "attemptID": 2445, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-76.0552", "embeddingY": "16.550632"},{"extension": "py", "date": "2020-04-07 19:47:40", "correct": "0", "upload": "def produitScalaire(vec1,vec2):\n  res=0\n  for i in range(vec1):\n    res=vec1[i]*vec2[i]+res\n  return res", "user": "userdId_3", "attemptID": 2446, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-40.822987", "embeddingY": "-20.857239"},{"extension": "py", "date": "2020-03-27 07:01:59", "correct": "0", "upload": "def compare(chaine1,chaine2):\n  res=\"\"\n  i=0\n  while i<len(chaine1) and i<len(chaine2) and res==0:\n    if chaine1[i]<chaine2[i]:\n      res=-1\n    elif chaine1[1]==chaine2[i]:\n      res=0\n    else:\n      res=1\n    i=i+1\n  if res==0:\n    if len(chaine1)>len(chaine2):\n      res=1\n    elif len(chaine1)<len(chaine2):\n      res=-1\n  return res\n   ", "user": "userdId_34", "attemptID": 2447, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-18.896183", "embeddingY": "55.683994"},{"extension": "py", "date": "2020-03-13 00:39:51", "correct": "1", "upload": "def sommeNPremiersEntiers(n):\n  if n<0 :\n    res=0\n  else:\n    res=0\n    for i in range(n+1):\n      res=res+i\n  \n  return res", "user": "userdId_15", "attemptID": 2448, "exercise": "c315a540cf0bfb0182dc114c6f0eafd1", "exercise_name": "sommeNPremiersEntiers", "embeddingX": "-14.599607", "embeddingY": "12.155474"},{"extension": "py", "date": "2020-03-20 00:56:09", "correct": "0", "upload": "def distribution(liste,n):\n  res=[len(n+1)]\n  for elem in liste:\n    if elem==res[elem]:\n      res[i]=res[i]+1\n  \n  return res\n\n", "user": "userdId_15", "attemptID": 2449, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-49.434727", "embeddingY": "-2.1267598"},{"extension": "py", "date": "2020-03-24 03:26:52", "correct": "1", "upload": "def quatrePlus100(l):\n  res=[]\n  i=0\n  while i<len(l) and len(res)<4:\n      if l[i]>100:\n         res=res+[l[i]]\n      i=i+1\n  return res", "user": "userdId_16", "attemptID": 2450, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-27.00542", "embeddingY": "43.007435"},{"extension": "py", "date": "2020-03-22 08:00:22", "correct": "0", "upload": "def maximum(liste):\n  if liste==():\n    res=none\n  else:\n    res=liste[0]\n    for i in range (len(liste)):\n      if res<liste[i]:\n        res=liste[i]\n  return res", "user": "userdId_16", "attemptID": 2451, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "19.973946", "embeddingY": "-64.33448"},{"extension": "py", "date": "2020-03-02 02:33:11", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if fin1>debut2 and fin2<debut1:\n    return True\n  else:\n    return False\n  \nrendezVous(1,10,7,20)\nrendezVous(1,7,10,20)", "user": "userdId_1", "attemptID": 2452, "exercise": "6fd66bb2393fbf3809f1c6d04f3831f7", "exercise_name": "rendezVous", "embeddingX": "61.022877", "embeddingY": "-24.526438"},{"extension": "py", "date": "2020-03-09 05:35:31", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  \n  res=15\n  for elem in jour1,mois1,annee1,jour2,mois2,annee2 :\n    \n    if (jour1,mois1,annee1<jour2,mois2,annee2):\n      res=res-1\n      \n    if (jour1,mois1,annee1==jour2,mois2,annee2):\n      res=res\n      \n    if (jour1,mois1,annee1<jour2,mois2,annee2):\n      res=res+1\n      \n  return res", "user": "userdId_23", "attemptID": 2453, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "-20.48663", "embeddingY": "-7.6862106"},{"extension": "py", "date": "2020-04-06 04:24:47", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  nbr=str(nombre)\n  chffre=str(chiffre)\n  i=0\n  res=0\n  while i<len(nbr):\n    if chffre==nbr:\n      res+=1\n    i+=1\n  return res", "user": "userdId_26", "attemptID": 2454, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-7.847941", "embeddingY": "65.27892"},{"extension": "py", "date": "2020-04-12 03:56:08", "correct": "1", "upload": "def elemGeo(n,u0,q):\n    return u0*q**n", "user": "userdId_8", "attemptID": 2455, "exercise": "d7c83a7fb9b49e28804e55955ad06968", "exercise_name": "elemGeo", "embeddingX": "-39.822712", "embeddingY": "19.778662"},{"extension": "py", "date": "2020-03-03 05:25:11", "correct": "0", "upload": "def nbVoyelles(mot):\n  res=0\n  for elem in mot:\n    if 'aeiouy' in mot:\n      res= res+1\n    return res", "user": "userdId_7", "attemptID": 2456, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "13.93497", "embeddingY": "-26.231327"},{"extension": "py", "date": "2020-03-04 03:51:37", "correct": "1", "upload": "def ecart(liste):\n  if len(liste) == 0 :\n  \tres = None\n  else :\n    maxi = liste[0]\n    mini = liste[0]\n    for i in range (1,len(liste)):\n      if liste[i] > maxi : \n        maxi = liste[i]\n      elif liste[i] < mini :\n        mini = liste[i]\n    res = maxi - mini\n  return res", "user": "userdId_17", "attemptID": 2457, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "-0.27186427", "embeddingY": "-83.76303"},{"extension": "py", "date": "2020-03-09 21:13:32", "correct": "1", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut1<fin1 and debut2<fin2:\n    if debut1>fin2 or debut2>fin1:\n      res=False\n    else:\n      res=True\n  else:\n    res=None\n  return res", "user": "userdId_12", "attemptID": 2458, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "63.0785", "embeddingY": "-20.805582"},{"extension": "py", "date": "2020-03-23 02:02:16", "correct": "0", "upload": "def minimum(liste): \n    res=0\n    for i in range (len(liste)) :\n      if liste [i] < res :\n        res= liste[i]\n    return res", "user": "userdId_24", "attemptID": 2459, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "29.353973", "embeddingY": "-70.05479"},{"extension": "py", "date": "2020-03-17 06:18:24", "correct": "0", "upload": "def distribution(liste,n):\n  cpt=liste[0]*n+1\n  for elem in liste:\n    cpt[elem]+=1\n  return res", "user": "userdId_23", "attemptID": 2460, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-62.78341", "embeddingY": "-9.51762"},{"extension": "py", "date": "2020-03-03 03:56:25", "correct": "0", "upload": "def maximum(liste):\n  res=0\n  for elem in liste:\n    if elem>res:\n      res=elem\n  return res", "user": "userdId_32", "attemptID": 2461, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "31.344076", "embeddingY": "-42.676907"},{"extension": "py", "date": "2020-04-06 07:51:54", "correct": "1", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=liste[0]\n    for i in range(1,len(liste)):\n       if res<liste[i]:\n          res=liste[i]\n  return res", "user": "userdId_16", "attemptID": 2462, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "26.125118", "embeddingY": "-68.32183"},{"extension": "py", "date": "2020-04-12 06:08:23", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=False\n  c=[]\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n    e.extend(c)\n  return c", "user": "userdId_8", "attemptID": 2463, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-72.86802", "embeddingY": "12.046466"},{"extension": "py", "date": "2020-03-19 23:52:43", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  res=\"\"\n  if (longueur+debut)>len(s):\n    longueur=len(s)\n  else:\n    longeur=debut+longueur\n  for i in range(debut,longueur):\n    res=res+s[i]\n  return res", "user": "userdId_13", "attemptID": 2464, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-79.250374", "embeddingY": "25.325474"},{"extension": "py", "date": "2020-04-07 23:43:40", "correct": "1", "upload": "def produitScalaire(vec1,vec2):\n  if vec1==[] and vec2==[]:\n    res=0\n  else:\n    res=0\n    for i in range(len(vec1)):\n      res=res+vec1[i]*vec2[i]\n  return res\n      ", "user": "userdId_2", "attemptID": 2465, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-30.636297", "embeddingY": "-42.817276"},{"extension": "py", "date": "2020-04-03 00:14:03", "correct": "1", "upload": "def nbChiffres(n):\n  cpt=0\n  if n==0:\n    cpt=1\n  else:\n    while n!=0:\n      n=n//10\n      cpt+=1\n  return cpt", "user": "userdId_30", "attemptID": 2466, "exercise": "3dcf332c003a1f3bf15df22ee17884a3", "exercise_name": "nbChiffres", "embeddingX": "32.310932", "embeddingY": "13.813042"},{"extension": "py", "date": "2020-03-23 00:34:03", "correct": "0", "upload": "def reconstruireChainePartielle(s,n):\n    res = \"\"\n    for i in range (s) :\n      res = res + n\n    return res", "user": "userdId_24", "attemptID": 2467, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-43.356804", "embeddingY": "-20.676163"},{"extension": "py", "date": "2020-03-02 02:55:12", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1<=annee2 and mois1<=mois2 and jour1<jour2:\n    return -1\n  elif annee1==annee2 or mois1==mois2 and jour1==jour2:\n    return 0\n  else:\n    return 1\n  \ncompareDates(10,1,2020,14,2,2020)\ncompareDates(14,2,2020,11,2,2020)\ncompareDates(10,1,2020,10,1,2020)", "user": "userdId_1", "attemptID": 2468, "exercise": "af7c1467ef9f7684d9ff58734067ae98", "exercise_name": "compareDates", "embeddingX": "87.08696", "embeddingY": "-11.767203"},{"extension": "py", "date": "2020-03-17 06:27:25", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n  res=0\n  for elem in mot:\n    if mot[elem]==lettre:\n      res=mot[i]\n  return res", "user": "userdId_7", "attemptID": 2469, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-19.04566", "embeddingY": "-30.794245"},{"extension": "py", "date": "2020-03-17 05:00:05", "correct": "1", "upload": "def reconstruireChainePartielle(s,n):\n    res=''\n    for i in range(0,len(s),n):\n        res=res+s[i]\n    return res", "user": "userdId_39", "attemptID": 2470, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-61.00755", "embeddingY": "-41.17182"},{"extension": "py", "date": "2020-04-05 09:18:01", "correct": "0", "upload": "def phrasePalindrome(phrase):\n    if phrase=='':\n      ok=True\n    else:\n      ok=True\n      i=0\n      j=-1\n      while i<len(phrase) and j>(-len(phrase)-1) and ok:\n        if phrase[i]=='':\n          i+=1\n        if phrase[j]=='':\n          j-=1\n        if phrase[i]!=phrase[j]:\n          ok=False\n        i+=1\n        j-=1\n    return ok", "user": "userdId_18", "attemptID": 2471, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "38.28104", "embeddingY": "40.461685"},{"extension": "py", "date": "2020-03-06 00:13:23", "correct": "0", "upload": "def maximum(liste):\n    res=0\n    for elem in liste:\n        if elem>res:\n        \tres=elem\n    for elem in liste:\n        if elem<0:\n            res=elem\n    return res", "user": "userdId_49", "attemptID": 2472, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "42.238155", "embeddingY": "-50.83878"},{"extension": "py", "date": "2020-03-02 23:28:22", "correct": "1", "upload": "def bissextile(annee):\n  if annee%400 == 0 or (annee%4 == 0 and annee%100 != 0) :\n    res = True\n  else :\n    res = False\n    \n  return res", "user": "userdId_17", "attemptID": 2473, "exercise": "a7d37636649c0ada991520788deeb2d0", "exercise_name": "bissextile", "embeddingX": "48.10853", "embeddingY": "1.9224907"},{"extension": "py", "date": "2020-04-21 02:34:21", "correct": "1", "upload": "def listeDecroissante(scores):\n    ok=True\n    i=0\n    while i<len(scores)-1 and ok:\n      if scores[i]<scores[i+1]:\n        ok=False\n      i+=1\n    return ok", "user": "userdId_11", "attemptID": 2474, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "20.434872", "embeddingY": "45.67418"},{"extension": "py", "date": "2020-03-07 00:54:35", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut1<debut2 and fin1>fin2:\n    res=False\n  elif fin1>=debut:\n    res=True\n  return res", "user": "userdId_8", "attemptID": 2475, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "60.02057", "embeddingY": "-22.961811"},{"extension": "py", "date": "2020-03-17 06:09:07", "correct": "0", "upload": "def distribution(liste,n):\n    res=[0]*n\n    for i in range(len(liste)):\n        if liste[i]==0:\n            res[0]=res[0]+1\n        elif liste[i]==1:\n            res[1]=res[1]+1\n        elif liste[i]==2:\n            res[2]=res[2]+1\n        elif liste[i]==3:\n            res[3]=res[3]+1\n    return res\n\n\n  \n  \n", "user": "userdId_28", "attemptID": 2476, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-16.817142", "embeddingY": "-58.20811"},{"extension": "py", "date": "2020-03-10 04:04:35", "correct": "0", "upload": "def sommeNbPairs(liste):\n  res=0\n  for x in (liste):\n    res=res+x\n  return res", "user": "userdId_8", "attemptID": 2477, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "-32.476955", "embeddingY": "4.5682635"},{"extension": "py", "date": "2020-03-09 08:52:54", "correct": "0", "upload": "def nbVoyelles(mot):\n    cpt=0\n    for lettre in mot:\n      if lettre==[\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"]:\n        cpt=cpt+1\n    return cpt\n  ", "user": "userdId_11", "attemptID": 2478, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "13.768172", "embeddingY": "-35.080387"},{"extension": "py", "date": "2020-04-07 03:36:03", "correct": "1", "upload": "def suiteAriGeo(liste):\n  if len(liste)<3:\n    ok=True\n  else:\n    ok=True\n    ecart1=liste[1]-liste[0]\n    ecart2=liste[2]-liste[1]\n    if ecart1==0 or ecart2==0:\n      a=1\n    else:\n      a=ecart2/ecart1\n    b=-a*liste[0]+liste[1]\n    i=1\n    while i<len(liste)-1 and ok:\n      if a*liste[i]+b!=liste[i+1]:\n        ok=False\n      i+=1\n  return ok", "user": "userdId_32", "attemptID": 2479, "exercise": "4c9665daf155b115fe13218141fa1aff", "exercise_name": "suiteAriGeo", "embeddingX": "35.974968", "embeddingY": "75.25265"},{"extension": "py", "date": "2020-03-12 22:01:50", "correct": "0", "upload": "def maximum(liste):\n  res=-50\n  for i in range(len(liste)):\n    if(liste[i])>res:\n      res=(liste[i])\n  return res", "user": "userdId_32", "attemptID": 2480, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-0.7295066", "embeddingY": "-65.07253"},{"extension": "py", "date": "2020-03-24 04:56:34", "correct": "0", "upload": "def quatrePlus100(liste):\n  i=0\n  res=[]\n  while i<len(liste):\n    if liste[i]>100:\n      res.append(liste[i])\n      i=i+1\n  return res\n", "user": "userdId_13", "attemptID": 2481, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-24.777506", "embeddingY": "33.14131"},{"extension": "py", "date": "2020-03-27 05:50:44", "correct": "0", "upload": "def quatrePlus100(liste):\n  res=[]\n  i=0\n  while i<len(l) and len(res)<4 :\n    if liste[i]>100 :\n      res.append(liste[i])\n    i=i+1\n  return res", "user": "userdId_15", "attemptID": 2482, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-30.103542", "embeddingY": "41.93209"},{"extension": "py", "date": "2020-02-29 05:50:03", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n    if debut1>debut2:\n      if debut1>fin2:\n        res=False\n      elif debut1<fin2:\n        res=True\n      else:\n        res=False\n    elif debut1<debut2:\n      if fin1>debut2:\n        res=True\n      elif fin1<debut2:\n        res=False\n      else:\n        res=False\n    else:\n      if fin1>fin2 or fin1<fin2:\n        res=True\n      else:\n        res=False\n    return res", "user": "userdId_18", "attemptID": 2483, "exercise": "6fd66bb2393fbf3809f1c6d04f3831f7", "exercise_name": "rendezVous", "embeddingX": "64.0966", "embeddingY": "-19.596027"},{"extension": "py", "date": "2020-03-12 22:14:42", "correct": "0", "upload": "def moyenne(liste):\n  if len (liste)==0:\n    res=None\n  else:\n    res=0\n    cpt=0\n    for elem in liste:\n      res=res+elem\n      cpt=cpt+1\n      res=elem/cpt\n  return res ", "user": "userdId_20", "attemptID": 2484, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-3.1146648", "embeddingY": "-8.51349"},{"extension": "py", "date": "2020-04-06 06:04:05", "correct": "0", "upload": "def motPalindrome(mot):\n  ok=True\n  i=0\n  j=len(mot)-1\n  while i<len(mot) and ok:\n    if i!=j:\n      ok=False\n    i=i+1\n    j=j+1\n  return ok", "user": "userdId_3", "attemptID": 2485, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "9.148531", "embeddingY": "52.51172"},{"extension": "py", "date": "2020-04-07 04:44:54", "correct": "1", "upload": "def sousChaine(s1,s2):\n  if s1 in s2:\n    res=True\n  else:\n    res=False\n  return res", "user": "userdId_26", "attemptID": 2486, "exercise": "a7cdd094daa2f0bfccc7a4ec419f7243", "exercise_name": "sousChaine", "embeddingX": "46.238644", "embeddingY": "-16.312105"},{"extension": "py", "date": "2020-04-09 10:01:04", "correct": "0", "upload": "def elemAri(n,u0,r):\n    res=u0+n*r\n    ", "user": "userdId_11", "attemptID": 2487, "exercise": "f239498950e974e29e01472749d9a09d", "exercise_name": "elemAri", "embeddingX": "-35.836662", "embeddingY": "17.740534"},{"extension": "py", "date": "2020-04-05 12:05:09", "correct": "0", "upload": "def suiteGeo(liste):\n    if liste==[] or len(liste)==1:\n      ok=True\n    else:\n      ok=True\n      ctePrec=liste[1]/liste[0]\n      cteAct=None\n      i=2\n      while i<len(liste) and ok:\n        cteAct=liste[i]/liste[i-1]\n        if cteAct!=ctePrec:\n          ok=False\n        ctePrec=cteAct\n        i+=1\n    return ok", "user": "userdId_18", "attemptID": 2488, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "41.75138", "embeddingY": "63.10175"},{"extension": "py", "date": "2020-04-06 02:47:13", "correct": "0", "upload": "def suiteGeo(liste):\n  ok=True\n  i=0\n  if len(liste)<=1 :\n    ok=True\n  else :\n    while i<(len(liste)-1) and ok :\n      if (liste[i]*liste[i+1])==0 :\n        ok=False\n      elif liste[i]!=(liste[0]*(liste[1]//liste[0])**i):\n        ok=False\n      i+=1\n  return ok", "user": "userdId_15", "attemptID": 2489, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "51.143337", "embeddingY": "46.09047"},{"extension": "py", "date": "2020-03-23 22:31:47", "correct": "0", "upload": "def quatrePlus100(liste):\n  res=[]\n  x=0\n  while len(res)<4 :\n    if liste[x]>100 :\n      res=res+[liste[x]]\n    x=x+1\n  return res", "user": "userdId_28", "attemptID": 2490, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-28.241013", "embeddingY": "37.46065"},{"extension": "py", "date": "2020-03-17 06:21:44", "correct": "0", "upload": "def permutationChaine(s):\n  res=''\n  for i in range(0,len(s)+1,2):\n    res=res+s[1+i]+s[i]\n  if len(s)%2!=0:\n    res=res+s[-1]\n  return res", "user": "userdId_25", "attemptID": 2491, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-46.940998", "embeddingY": "-47.636192"},{"extension": "py", "date": "2020-04-07 11:23:51", "correct": "0", "upload": "def suiteGeo(liste):\n  ok=True\n  i=0\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i]!=0:\n      q=liste[1]/liste[0]\n    if liste[i]!=0:\n      if liste[i+1]/liste[i]!=q:\n        ok=False\n    if liste[i]==0:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 2492, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "32.052895", "embeddingY": "63.7166"},{"extension": "py", "date": "2020-04-10 00:47:38", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i]!=0:\n      q=liste[i]/liste[0]\n      if liste[i+1]/liste[i]!=q:\n        ok=False\n    i=i+1\n  return ok", "user": "userdId_3", "attemptID": 2493, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "23.61402", "embeddingY": "60.716373"},{"extension": "py", "date": "2020-03-03 05:50:44", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(liste)==0:\n    res=None\n  else:\n    res=cpt\n    res=0\n    for elen in liste:\n      res=res+elem\n      cpt=cpt+1\n    res=res/cpt\n    return res", "user": "userdId_25", "attemptID": 2494, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "20.353357", "embeddingY": "-38.597393"},{"extension": "py", "date": "2020-04-12 05:44:48", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=liste[0]\n  return res", "user": "userdId_8", "attemptID": 2495, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-65.45682", "embeddingY": "19.57934"},{"extension": "py", "date": "2020-04-07 01:33:11", "correct": "0", "upload": "def prononcable(mot):\n  voy=('a','e','i','o','u','y')\n  con=('b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','z')\n  cptcon=0\n  cptvoy=0\n  res=True\n  for i in range(1-len(mot)):\n    if mot[i] in voy and mot[i+1] in voy:\n      cptvoy+=1\n    if mot[i] in con and mot[i+1] in con:\n      cptcon+=1\n    if cptcon>2 or cptvoy>2:\n      res=False\n  return res", "user": "userdId_16", "attemptID": 2496, "exercise": "6318b210c201fba050d60bc0913cb7ef", "exercise_name": "prononcable", "embeddingX": "-16.077068", "embeddingY": "-71.741425"},{"extension": "py", "date": "2020-04-12 05:44:31", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  liste[0]", "user": "userdId_8", "attemptID": 2497, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-67.26432", "embeddingY": "20.42286"},{"extension": "py", "date": "2020-03-24 04:28:31", "correct": "0", "upload": "def fusion(liste1,liste2):\n    if liste1==[]:\n      res=liste2\n    elif liste2==[]:\n      res=liste1\n    else:\n      res=[]\n      i=0\n      while i<len(liste1) and i<len(liste2):\n        if liste1[i]<liste2[i]:\n          res=res+[min(liste1)]+[min(liste2)]\n          liste1.remove(min(liste1))\n          liste2.remove(min(liste2))\n        elif liste1[i]>liste2[i]:\n          res=res+[min(liste2)]+[min(liste1)]\n          liste1.remove(min(liste1))\n          liste2.remove(min(liste2))\n        i=i+1\n      if len(liste1)>len(liste2):\n        while i<len(liste1):\n          res=res+[min(liste1)]\n          liste1.remove(min(liste1))\n          i=i+1\n      elif len(liste1)<len(liste2):\n        while i<len(liste2):\n          res=res+[min(liste2)]\n          liste2.remove(min(liste2))\n          i=i+1\n    return res", "user": "userdId_18", "attemptID": 2498, "exercise": "6613efb6c873b142dc2b6040c14eb616", "exercise_name": "fusion", "embeddingX": "-27.40467", "embeddingY": "54.52255"},{"extension": "py", "date": "2020-04-07 03:56:41", "correct": "0", "upload": "def elemAri(n,u0,r):\n  cpt=0\n  i=0\n  while i<n:\n    cpt=u0+r\n    i=i+1\n  return cpt\n  ", "user": "userdId_1", "attemptID": 2499, "exercise": "f239498950e974e29e01472749d9a09d", "exercise_name": "elemAri", "embeddingX": "-8.644501", "embeddingY": "26.083332"},{"extension": "py", "date": "2020-04-06 22:23:25", "correct": "0", "upload": "def motPalindrome(mot):\n    if len(mot)==0:\n      res=True\n    else:\n      res=True\n      i=0\n      while i<len(mot) and res==True:\n        if mot[i]==mot[-i]:\n          res=True\n        i+=1\n    return res\n", "user": "userdId_11", "attemptID": 2500, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "26.544367", "embeddingY": "44.185814"},{"extension": "py", "date": "2020-04-07 11:17:11", "correct": "0", "upload": "def suiteGeo(liste):\n  ok=True\n  i=0\n  if len(liste)==0 and len(liste)==1 and liste[i]!=0:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i]!=0:\n      q=liste[1]/liste[0]\n    if liste[i]!=0:\n      if liste[i+1]/liste[i]!=q:\n        ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 2501, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "29.30467", "embeddingY": "61.93168"},{"extension": "py", "date": "2020-03-13 00:35:02", "correct": "0", "upload": "def doubleLettre(mot):\n    for i in range(1,len(mot)):\n      if mot[i] == mot[i-1]:\n        return True\n      else:\n        return False", "user": "userdId_42", "attemptID": 2502, "exercise": "00da9cf1fa2b468d915724499459ed8f", "exercise_name": "doubleLettre", "embeddingX": "16.820246", "embeddingY": "-69.69933"},{"extension": "py", "date": "2020-04-12 10:16:12", "correct": "0", "upload": "def phrasePalindrome(phrase):\n    if len(phrase)==0:\n      res=True\n    else:\n      res=True\n      i=0\n      x=''\n      while i<len(phrase)//2 and res:\n        if phrase[i]!=phrase[-(i+1)]:\n          res=False\n        i+=1\n        if phrase[i]==x:\n          i+=1\n          res=True\n    return res", "user": "userdId_11", "attemptID": 2503, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "33.56401", "embeddingY": "34.956207"},{"extension": "py", "date": "2020-04-08 00:01:21", "correct": "0", "upload": "def suiteGeo(liste):\n  ok=True\n  i=0\n  if len(liste)<=1 :\n    ok=True\n  else :\n    while i<(len(liste)-1) and ok :\n      if liste[i]==0 :\n        Q=0\n      else :\n        Q=(liste[i+1]/liste[i])\n      if liste[i+1]!=(Q*liste[i]):\n        ok=False\n      i+=1\n  return ok", "user": "userdId_15", "attemptID": 2504, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "25.579027", "embeddingY": "69.499084"},{"extension": "py", "date": "2020-03-31 03:21:51", "correct": "1", "upload": "def fusion(liste1,liste2):\n    if liste1==[]:\n      res=liste2\n    elif liste2==[]:\n      res=liste1\n    else:\n      res=[]\n      i=0\n      j=0\n      while i<len(liste1) and j<len(liste2):\n        if liste1[i]<liste2[j]:\n          res.append(liste1[i])\n          i=i+1\n        else:\n          res.append(liste2[j])\n          j=j+1\n      while i<len(liste1):\n          res.append(liste1[i])\n          i=i+1\n      while j<len(liste2):\n          res.append(liste2[j])\n          j=j+1\n    return res\n    ", "user": "userdId_18", "attemptID": 2505, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-39.518932", "embeddingY": "50.256325"},{"extension": "py", "date": "2020-03-05 23:49:10", "correct": "0", "upload": "def somme(liste):\n  res=0\n  for elem in list:\n    res=res+elem\n  return res", "user": "userdId_20", "attemptID": 2506, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-31.34613", "embeddingY": "-13.294361"},{"extension": "py", "date": "2020-03-13 00:51:56", "correct": "0", "upload": "def sommeNPremiersEntiers(n):\n  if n<=0:\n    res=0\n  else:\n    elem=0\n    for elem in (n):\n      res=elem+n \n  return res", "user": "userdId_5", "attemptID": 2507, "exercise": "c315a540cf0bfb0182dc114c6f0eafd1", "exercise_name": "sommeNPremiersEntiers", "embeddingX": "31.524342", "embeddingY": "-36.950005"},{"extension": "py", "date": "2020-03-31 06:54:32", "correct": "1", "upload": "def stockerChiffres(nombre):\n  res=[]\n  while nombre!=0:\n    res.append(nombre%10)\n    nombre=nombre//10\n  if res==[]:\n    res.append(0)\n  return res", "user": "userdId_27", "attemptID": 2508, "exercise": "49a87f644f84a443327fb4315b47f249", "exercise_name": "stockerChiffres", "embeddingX": "42.288788", "embeddingY": "15.111855"},{"extension": "py", "date": "2020-04-01 05:53:25", "correct": "1", "upload": "def compare(chaine1,chaine2):\n  i=0\n  res=0\n  while res==0 and i<len(chaine1) and i<len(chaine2):\n    if chaine1[i]<chaine2[i]:\n      res=-1\n    elif chaine1[i]>chaine2[i]:\n      res=1\n    i=i+1\n  if res==0 and len(chaine1)>len(chaine2):\n    res=1\n  elif res==0 and len(chaine1)<len(chaine2):\n    res=-1\n  return res", "user": "userdId_12", "attemptID": 2509, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-24.872267", "embeddingY": "61.960598"},{"extension": "py", "date": "2020-04-12 07:00:26", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  if liste==[]:\n    res=True\n  c=[]\n  res=False\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n    c=[liste[0]*4]+c\n  return c", "user": "userdId_8", "attemptID": 2510, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-77.037285", "embeddingY": "10.613702"},{"extension": "py", "date": "2020-03-10 10:00:30", "correct": "0", "upload": "def maximum(liste):\n    if len(liste)==0:\n      max=None\n    else:\n      max=liste[0]\n      for i in range(1,len(liste)):\n        if liste[i]>max:\n          res=liste[i]\n    ", "user": "userdId_11", "attemptID": 2511, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "7.7453866", "embeddingY": "-69.30261"},{"extension": "py", "date": "2020-03-12 21:51:27", "correct": "1", "upload": "def nbVoyelles(mot):\n  cpt=0\n  for i in range(len(mot)):\n    if mot[i] in 'aeiouy':\n     cpt=cpt+1\n  return cpt", "user": "userdId_51", "attemptID": 2512, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-24.396034", "embeddingY": "-64.65636"},{"extension": "py", "date": "2020-03-19 23:59:55", "correct": "1", "upload": "def sousChaine(s,debut,longueur):\n  res=''\n  fin=debut+longueur\n  if fin>len(s):\n    fin=len(s)\n  for i in range(debut,fin):\n    res=res+s[i]\n  return res", "user": "userdId_2", "attemptID": 2513, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-71.10237", "embeddingY": "10.260234"},{"extension": "py", "date": "2020-04-12 10:23:59", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  ok=True\n  i=0\n  j=-1\n  while i<len(phrase) and j<-len(phrase) and ok:\n\n    if phrase[i]==' ':\n      phrase[i+1]\n    if phrase[j]==' ':\n      phrase[j-1]\n\n    if phrase[i]!=phrase[j]:\n      ok=False\n    i+=1\n    j-=1\n  return ok\n", "user": "userdId_38", "attemptID": 2514, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "5.3315973", "embeddingY": "45.433395"},{"extension": "py", "date": "2020-03-13 00:53:31", "correct": "0", "upload": "def plusLongueSuite(liste):\n  res=0\n  n1=liste[0]\n  for n2 in range (1,len(liste)):\n    if n1==n2:\n      res=res+1\n    n1=n2\n  \n  return res", "user": "userdId_15", "attemptID": 2515, "exercise": "deed004abb317b11778f7e8247197a40", "exercise_name": "plusLongueSuite", "embeddingX": "-2.487908", "embeddingY": "-41.36096"},{"extension": "py", "date": "2020-05-04 21:51:34", "correct": "0", "upload": "def minimum(liste):\n  if liste==[]:\n    res=None\n  else:\n    res=liste[0]\n    for i in range(1,len(liste)):\n      if liste[i]<liste[i+1]:\n        res=liste[i]\n  return res", "user": "userdId_8", "attemptID": 2516, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "26.476254", "embeddingY": "-71.61636"},{"extension": "py", "date": "2020-03-06 00:20:10", "correct": "0", "upload": "def maximum(liste):\n    res=0\n    for elem in liste:\n        if elem>res:\n        \tres=elem\n    return res", "user": "userdId_49", "attemptID": 2517, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "31.534746", "embeddingY": "-43.019035"},{"extension": "py", "date": "2020-03-15 03:43:52", "correct": "0", "upload": "def polynome(a,b,c):\n    res=0\n    det=b**2-4*a*c\n    if det>0:\n      x1=-b-det**0,5/2*a\n      x2=-b+det**0,5/2*a\n      res=x1,x2\n    elif det==0:\n      res=-b/2*a\n    else:\n      res=\"pas de solution\"\n    return res\n      \n \n\n ", "user": "userdId_21", "attemptID": 2518, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-53.792385", "embeddingY": "2.7976177"},{"extension": "py", "date": "2020-03-30 22:41:48", "correct": "1", "upload": "def indiceOccurrence(n,x,l):\n  trouve=0\n  i=0\n  while i<len(l) and trouve!=n:\n    if x==l[i]:\n      trouve=trouve+1\n    i=i+1\n  i=i-1\n  if trouve!=n:\n    i=None\n  return i\n", "user": "userdId_19", "attemptID": 2519, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-6.601585", "embeddingY": "80.08135"},{"extension": "py", "date": "2020-03-12 06:36:44", "correct": "0", "upload": "def maximum(liste):\n  res=liste[0]\n  if res<liste:\n    res=max\n  return res   ", "user": "userdId_20", "attemptID": 2520, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "38.11883", "embeddingY": "-60.38295"},{"extension": "py", "date": "2020-03-17 05:17:58", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  res=''\n  if debut+longueur>len(s):\n    fin=len(s)\n  else:\n    fin=debut+longueur\n  for i in range(debut,Fin):\n    res=res+s[i]\n  return res", "user": "userdId_23", "attemptID": 2521, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-79.0211", "embeddingY": "15.143921"},{"extension": "py", "date": "2020-03-13 00:54:38", "correct": "0", "upload": "def doubleLettre(mot):\n  res=False \n  c1=''\n  for c2 in mot:\n    if c1=='' and c2!='':\n      c1=c2\n    else:\n      res=True\n  return res\n      \n    \n\t", "user": "userdId_2", "attemptID": 2522, "exercise": "00da9cf1fa2b468d915724499459ed8f", "exercise_name": "doubleLettre", "embeddingX": "20.05845", "embeddingY": "-6.0783663"},{"extension": "py", "date": "2020-03-31 03:03:27", "correct": "0", "upload": "def fusion(liste1,liste2):\n  res=[]\n  i=0\n  j=0\n  while i<len(liste1) and j<len(liste2):\n    if liste1[i]<liste2[j]:\n      res.append(liste1[i])\n      i=i+1\n    else:\n      res.append(liste2[j])\n      j=j+1\n  if len(liste1)!=len(liste2):\n    if len(liste1)>len(liste2):\n      for k in range(len(liste2),len(liste1)):\n        res=res+liste1[k]\n    elif len(liste1)<len(liste2):\n      for k in range(len(liste1,len(liste2))):\n        res=res+liste2[k]\n  return res", "user": "userdId_12", "attemptID": 2523, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-36.734344", "embeddingY": "48.210373"},{"extension": "py", "date": "2020-03-31 03:38:20", "correct": "1", "upload": "def fusion(liste1,liste2):\n  res=[]\n  i=0\n  j=0\n  while i<len(liste1) and j<len(liste2):\n    if liste1[i]>liste2[j]:\n      res.append(liste2[j]) \n      j+=1\n    else: \n      res.append(liste1[i])\n      i+=1\n  while i<len(liste1):\n      res.append(liste1[i])\n      i+=1\n  while j<len(liste2):\n      res.append(liste2[j])\n      j+=1\n  return res ", "user": "userdId_21", "attemptID": 2524, "exercise": "6613efb6c873b142dc2b6040c14eb616", "exercise_name": "fusion", "embeddingX": "-42.649097", "embeddingY": "51.68158"},{"extension": "py", "date": "2020-03-22 07:56:21", "correct": "0", "upload": "def maximum(liste):\n  if liste==():\n    res=none\n  else: \n    res=liste[0]\n    for i in range(len(liste)):\n      if res<liste[i]:\n        res=liste[i]\n  return res", "user": "userdId_16", "attemptID": 2525, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "19.972418", "embeddingY": "-64.335014"},{"extension": "py", "date": "2020-04-12 10:45:13", "correct": "0", "upload": "def phrasePalindrome(phrase):\n    if len(phrase)==0:\n      res=True\n    else:\n      res=True\n      i=0\n      x=''\n      while i<len(phrase)//2 and res:\n        if phrase[i]!=phrase[-(i+1)]:\n          res=False\n          i+=1\n        if x:\n          i+=1\n    return res", "user": "userdId_11", "attemptID": 2526, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "31.253603", "embeddingY": "34.093544"},{"extension": "py", "date": "2020-03-19 05:51:09", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1<annee2:\n    if mois1<mois2:\n      if jour1<jour2:\n        res=-1\n  elif jour1==jour2 and mois1==mois2 and annee1==annee2:\n      res=0\n  else:\n    res=1\n  return res", "user": "userdId_34", "attemptID": 2527, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "79.03182", "embeddingY": "-24.385796"},{"extension": "py", "date": "2020-03-27 07:36:39", "correct": "0", "upload": "def quatrePlus100(liste):\n    res=0\n    i=0\n    while i!=4 :\n      if len(liste)>100 :\n        res=res+liste[i]\n        i=i+1\n    return res", "user": "userdId_24", "attemptID": 2528, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "0.23722906", "embeddingY": "-51.080093"},{"extension": "py", "date": "2020-03-10 04:04:14", "correct": "0", "upload": "def sommeNbPairs(liste):\n  res=0\n  for i in range(len(liste)):\n    res=res+liste[i]\n  return res", "user": "userdId_8", "attemptID": 2529, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "-45.540596", "embeddingY": "-34.73517"},{"extension": "py", "date": "2020-03-31 04:18:51", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n  cpt=0\n  trouve=False\n  i=0\n  while i<len(l) and trouve==False:\n    if l[i]==x:\n      cpt+=1\n    if cpt==n:\n      trouve=True\n    i+=1", "user": "userdId_13", "attemptID": 2530, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-3.708939", "embeddingY": "71.999504"},{"extension": "py", "date": "2020-04-12 05:34:11", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=False\n  c=[]\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    d=liste[0]+d\n    c.append(d)\n  return c", "user": "userdId_8", "attemptID": 2531, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-81.07447", "embeddingY": "12.278123"},{"extension": "py", "date": "2020-04-06 12:32:21", "correct": "0", "upload": "def s(liste):\n    if liste==[] or len(liste)==1:\n      ok1=True\n    else:\n      ok1=True\n      ctePrec=liste[1]-liste[0]\n      cteAct=None\n      i=2\n      while i<len(liste) and ok1:\n        cteAct=liste[i]-liste[i-1]\n        if liste[0]+i*ctePrec!=cteAct:\n          ok1=False\n        ctePrec=cteAct\n        i+=1\n    if liste==[] or len(liste)==1:\n      ok2=True\n    elif 0 in liste:\n      if liste[0]!=0:\n        ok2=True\n      while 0 in liste:\n        liste.remove(0)\n      if liste==[]:\n        ok2=True\n      else:\n        ok2=False\n    else:\n      ok2=True\n      i=1\n      while i<len(liste) and ok2:\n        cte=liste[i]/liste[i-1]\n        if liste[0]*cte**i!=liste[i]:\n          ok2=False\n        i+=1\n    ok3=True\n    trouve=False\n    i=0\n    while i>-len(liste)-1 and not trouve:\n      if liste[-i-1]!=0 and liste[-i-2]!=0:\n        cteGeo=(liste[-i-1])//liste[-i-2]\n        if cteGeo!=0:\n          cteAri=liste[-i-1]%cteGeo\n          trouve=True\n      i-=1\n    i=0\n    if cteGeo==1:\n      ok3=False\n    else:\n      while i<len(liste) and ok3:\n        if (cteGeo**i)*(liste[0]-cteAri/(1-cteGeo))+cteAri/(1-cteGeo)!=liste[i]:\n          ok3=False\n        i+=1\n    return ok1 or ok2 or ok3", "user": "userdId_18", "attemptID": 2532, "exercise": "4c9665daf155b115fe13218141fa1aff", "exercise_name": "suiteAriGeo", "embeddingX": "29.041916", "embeddingY": "84.39628"},{"extension": "py", "date": "2020-03-15 03:22:03", "correct": "0", "upload": "def polynome(a,b,c):\n    delta=(b**2)-(4*a*c)\n    if delta<0:\n      return(\"pas de solution\")\n    x=((-b-(sqrt(delta)))/(2*a))\n    y=((-b+(sqrt(delta)))/(2*a))\n    if delta>0:\n      return(x,y)\n    if delta==0:\n      return(x)\n \n\n ", "user": "userdId_21", "attemptID": 2533, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-51.261143", "embeddingY": "10.587023"},{"extension": "py", "date": "2020-03-17 05:44:28", "correct": "1", "upload": "def permutationChaine(s):\n  res=''\n  for i in range(0,len(s)-1,2):\n    res=res+s[i+1]+s[i]\n  if len(s)%2!=0:\n    res=res+s[-1]\n  return res", "user": "userdId_23", "attemptID": 2534, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-36.310196", "embeddingY": "-58.2892"},{"extension": "py", "date": "2020-03-31 03:39:40", "correct": "0", "upload": "def fusion(liste1,liste2):\n  res=[]\n  i=0\n  j=0\n  while i<len(liste1) and i<len(liste2):\n    if liste1[i]<liste2[j]:\n      res.append(liste1[i])\n      j=i+1\n    else:\n      res.append(liste1[i])\n      i=i+1\n      while j<len(liste2):\n        res.append(liste2[j])\n        j=j+1\n      while i<len(liste1):\n          res.append(liste1[i])\n          i=i+1\n  return res", "user": "userdId_36", "attemptID": 2535, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-40.302967", "embeddingY": "48.84084"},{"extension": "py", "date": "2020-03-22 23:20:15", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut2<=fin1 or fin2>=debut1:\n    res=True\n  else:\n    res=False\n  return res", "user": "userdId_8", "attemptID": 2536, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "54.55269", "embeddingY": "-21.98515"},{"extension": "py", "date": "2020-03-24 04:01:23", "correct": "0", "upload": "def compare(chaine1,chaine2):\n  i=0\n  while i<len(chaine1) and i<len(chaine2) and res==0:\n    if chaine1[i]>chaine2[i]:\n      res=-1\n    elif chaine1[i]<chaine2[i]:\n      res=1\n    i=i+1\n  return res", "user": "userdId_26", "attemptID": 2537, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-11.518962", "embeddingY": "43.324814"},{"extension": "py", "date": "2020-03-12 22:06:46", "correct": "0", "upload": "def moyenne(liste):\n  if len (liste)==0:\n    res=None\n  else:\n    res=0\n    cpt=0\n    for elem in liste:\n      res=res+elem\n      cpt=cpt+1\n      res=res%cpt\n  return res ", "user": "userdId_20", "attemptID": 2538, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-4.7910595", "embeddingY": "-3.6449382"},{"extension": "py", "date": "2020-04-19 09:26:09", "correct": "1", "upload": "def stockerChiffres(nombre):\n    res=[]\n    decomp=nombre\n    while decomp!=0:\n      res+=[decomp%10]\n      decomp=decomp//10\n    if res==[]:\n      res+=[0]\n    return res", "user": "userdId_11", "attemptID": 2539, "exercise": "49a87f644f84a443327fb4315b47f249", "exercise_name": "stockerChiffres", "embeddingX": "-2.7758608", "embeddingY": "20.743526"},{"extension": "py", "date": "2020-03-17 06:15:01", "correct": "0", "upload": "def permutationListe(liste,permutation):\n  res=[0]*(len(permutation))\n  for i in range(len(liste)):\n    res[permutation]=liste[i]\n  return res\n      \n      ", "user": "userdId_9", "attemptID": 2540, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-50.579277", "embeddingY": "-26.041798"},{"extension": "py", "date": "2020-03-15 01:40:52", "correct": "0", "upload": "def qualifJO(sexe,record,nbvictoires,champion):\n  if champion==True:\n    res=True\n  elif champion==False:\n    if sexe==M and record<12.0 and nbvictoires>=3:\n      res=True\n    elif sexe==F and record<15.0 and nbvictoires>=3:\n      res=True\n    else:\n      res=False\n  return res", "user": "userdId_8", "attemptID": 2541, "exercise": "78ec7738f3a7f3553d4a5c653534c32d", "exercise_name": "qualifJO", "embeddingX": "61.34259", "embeddingY": "-11.422512"},{"extension": "py", "date": "2020-04-06 04:46:05", "correct": "1", "upload": "def sousChaine(s1,s2):\n  if s1 in s2:\n    res=True\n  else:\n    res=False\n  return res", "user": "userdId_26", "attemptID": 2542, "exercise": "a7cdd094daa2f0bfccc7a4ec419f7243", "exercise_name": "sousChaine", "embeddingX": "46.23922", "embeddingY": "-16.294428"},{"extension": "py", "date": "2020-04-07 03:46:40", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  while nombre!=0:\n    nombre=nombre//10\n  if nombre==chiffre:\n    cpt=cpt+1\n  return cpt", "user": "userdId_50", "attemptID": 2543, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "21.044142", "embeddingY": "12.414185"},{"extension": "py", "date": "2020-03-06 00:38:11", "correct": "0", "upload": "def moyenne(liste):\n  res=0\n  cpt=0\n  if len(liste)==0:\n    moyenne=0\n  else:\n     for i in liste:\n       res=res+i\n       cpt=cpt+1\n  return res/cpt", "user": "userdId_14", "attemptID": 2544, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "1.1876055", "embeddingY": "-8.581141"},{"extension": "py", "date": "2020-03-24 06:15:49", "correct": "0", "upload": "def fusion(liste1,liste2):\n  res=\"liste1+liste2\"\n  res.sort()\n  return res", "user": "userdId_13", "attemptID": 2545, "exercise": "6613efb6c873b142dc2b6040c14eb616", "exercise_name": "fusion", "embeddingX": "-39.840065", "embeddingY": "-6.9846888"},{"extension": "py", "date": "2020-03-30 21:52:58", "correct": "0", "upload": "def fusion(liste1,liste2):\n  i=0\n  j=0\n  listefusion=[]\n  \n  while i<len(liste1) and j<len(liste2):\n    if liste1[i]>liste2[j]:\n      listefusion.append(liste2[j])\n      j=j+1\n    else:\n      listefusion.append(liste1[i])\n      i=i+1\n  if j==len(liste2):\n    while ind<len(liste1):\n      listefusion.append(liste1[ind])\n  if i==len(liste1):\n    while ind<len(liste2):\n      listefusion.append(liste2[ind])\n  \n  return listefusion\n    \n", "user": "userdId_19", "attemptID": 2546, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-33.668777", "embeddingY": "50.908924"},{"extension": "py", "date": "2020-03-30 00:15:13", "correct": "1", "upload": "def sousChaine(s,debut,longueur):\n  res = ''\n  fin = debut+longueur\n  if fin >len(s):\n    fin = len(s)\n  for i in range(debut,fin):\n    res+= s[i]\n  return res", "user": "userdId_6", "attemptID": 2547, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-79.14343", "embeddingY": "21.068766"},{"extension": "py", "date": "2020-04-08 00:18:25", "correct": "0", "upload": "def palindrome(phrase):\n  P=[]\n  i=0\n  c=True\n  for lettre in phrase:\n    if 'a'<=lettre<='z':\n      P.append(lettre)\n  while i<(len(P)/2) and c:\n    if P[i]!=P[len(P)-i-1]:\n      c=False\n    i=i+1\n  return c", "user": "userdId_19", "attemptID": 2548, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "15.907906", "embeddingY": "56.312256"},{"extension": "py", "date": "2020-04-08 04:10:08", "correct": "0", "upload": "def suiteAriGeo(liste):\n  if len(liste) <= 2:\n    res = True\n  else:\n    a = liste[1] // liste[0]\n    b = liste[1] % liste[0]\n    i = 2\n    trouve = False\n    while i <= len(liste) and trouve == False:\n      if not (((liste[i] // liste[i-1]) == a) and (liste[i] % liste[i-1]) == b):\n        trouve = True\n      i+=1\n    if trouve == False:\n      res = True\n    else:\n      res = False\n      \n    return res", "user": "userdId_42", "attemptID": 2549, "exercise": "4c9665daf155b115fe13218141fa1aff", "exercise_name": "suiteAriGeo", "embeddingX": "34.7857", "embeddingY": "27.648664"},{"extension": "py", "date": "2020-03-06 00:16:56", "correct": "0", "upload": "def maximum(liste):\n  res=liste[0]\n  for i in range(len(liste)) :\n     if liste[i]>res :\n        res=liste[i]\n  return res", "user": "userdId_24", "attemptID": 2550, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "0.6161212", "embeddingY": "-66.63136"},{"extension": "py", "date": "2020-03-22 05:31:54", "correct": "1", "upload": "def moyenne(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    num=0\n    for i in range(len(liste)):\n      num=num+liste[i]\n    res=num/len(liste)\n  return res", "user": "userdId_12", "attemptID": 2551, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-8.957578", "embeddingY": "-7.428047"},{"extension": "py", "date": "2020-04-05 04:15:12", "correct": "0", "upload": "def moyenne(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    s=0\n    for elem in liste:\n      s+=elem\n    res=s//len(liste)\n  return res", "user": "userdId_26", "attemptID": 2552, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-8.479613", "embeddingY": "-15.8758"},{"extension": "py", "date": "2020-04-11 05:27:58", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  res=0\n  while nombre!=0:\n    if nombre%10==chiffre:\n      nombre=nombre//10\n      res+=1\n  return res", "user": "userdId_8", "attemptID": 2553, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "25.209719", "embeddingY": "12.273978"},{"extension": "py", "date": "2020-03-09 05:35:19", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  \n  res=-1\n  for elem in jour1,mois1,annee1,jour2,mois2,annee2 :\n    \n    if (jour1,mois1,annee1<jour2,mois2,annee2):\n      res=res-1\n      \n    if (jour1,mois1,annee1==jour2,mois2,annee2):\n      res=res\n      \n    if (jour1,mois1,annee1<jour2,mois2,annee2):\n      res=res+1\n      \n  return res", "user": "userdId_23", "attemptID": 2554, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "-20.926085", "embeddingY": "-7.8025975"},{"extension": "py", "date": "2020-04-05 07:31:31", "correct": "0", "upload": "def nbSyllabes(mot):\n  voy='aeiouy'\n  if mot=='':\n    cpt=0\n  else:\n    cpt=0\n    if mot[0] in voy:\n      cpt+=1\n    for i in range(1,len(mot)):\n      if mot[i] in voy and mot[i-1] not in voy:\n        cpt+=1\n    if mot[-1]=='e' or (mot[-1] not in voy) and (mot[-2] not in voy):\n      cpt-=1\n    if cpt==0:\n      cpt+=1\n  return cpt", "user": "userdId_18", "attemptID": 2555, "exercise": "1c86bec0f4df503e23db53994f3d2991", "exercise_name": "nbSyllabes", "embeddingX": "-23.406876", "embeddingY": "-71.24552"},{"extension": "py", "date": "2020-04-12 06:04:29", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=False\n  c=liste[i]\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n  return c", "user": "userdId_8", "attemptID": 2556, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-79.66577", "embeddingY": "9.932256"},{"extension": "py", "date": "2020-03-12 09:29:48", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    return 0\n  cpt=0\n  for elem in mot:\n    if elem in (mot)=='aeiouy':\n      cpt=cpt+1\n  return cpt", "user": "userdId_1", "attemptID": 2557, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "7.55398", "embeddingY": "-32.133293"},{"extension": "py", "date": "2020-03-06 23:51:32", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if fin1>=debut2:\n    if debut1>=debut2 or fin1<=fin2:\n      res=True\n  else:\n    res=False\n  return res", "user": "userdId_8", "attemptID": 2558, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "54.645435", "embeddingY": "-20.601229"},{"extension": "py", "date": "2020-03-10 04:17:29", "correct": "0", "upload": "def sommeNPremiersEntiers(n):\n  res=1\n  if x in range(len(n)):\n    res=res+x\n  return res", "user": "userdId_8", "attemptID": 2559, "exercise": "c315a540cf0bfb0182dc114c6f0eafd1", "exercise_name": "sommeNPremiersEntiers", "embeddingX": "6.8263116", "embeddingY": "-19.76967"},{"extension": "py", "date": "2020-03-03 05:36:35", "correct": "0", "upload": "def nbVoyelles(mot):\n  res=0\n  for i in range(len(mot)):\n    res=res+mot[i]\n  return None", "user": "userdId_30", "attemptID": 2560, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-40.267418", "embeddingY": "-36.028168"},{"extension": "py", "date": "2020-03-31 06:02:47", "correct": "1", "upload": "def stockerChiffres(nombre):\n  res=[]\n  if nombre==0:\n    res=[0]\n  while nombre!=0:\n    res.append(nombre%10)\n    nombre=nombre//10\n  return res", "user": "userdId_13", "attemptID": 2561, "exercise": "49a87f644f84a443327fb4315b47f249", "exercise_name": "stockerChiffres", "embeddingX": "41.377205", "embeddingY": "12.967524"},{"extension": "py", "date": "2020-03-06 00:16:59", "correct": "0", "upload": "def maximum(liste):\n  res=liste [0]\n  for elem in liste:\n    if res<elem:\n      res=elem\n  return res", "user": "userdId_23", "attemptID": 2562, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "41.502712", "embeddingY": "-57.66831"},{"extension": "py", "date": "2020-03-17 05:23:54", "correct": "0", "upload": "def permutationChaine(s):\n    res=''\n    for i in range(0,len(s)-1,len(s)):\n        res=res+s[i]\n    return res", "user": "userdId_39", "attemptID": 2563, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-44.249435", "embeddingY": "-51.325073"},{"extension": "py", "date": "2020-05-04 21:22:13", "correct": "0", "upload": "def bissextile(annee):\n  res=False\n  if annee%4==0 and annee%100!=0 or anne%400==0:\n    res=True\n  return res", "user": "userdId_26", "attemptID": 2564, "exercise": "a7d37636649c0ada991520788deeb2d0", "exercise_name": "bissextile", "embeddingX": "48.523376", "embeddingY": "3.3000245"},{"extension": "py", "date": "2020-03-10 02:48:09", "correct": "0", "upload": "def nbOccurrencesLettre(lettre,mot):\n  if mot=='':\n    res=None\n  else:\n    res=0\n    for i in range(len(mot)):\n      if mot[i]==lettre:\n        res=res+1\n  return res\n", "user": "userdId_15", "attemptID": 2565, "exercise": "2864c9e5861229d2ff32570f6bc944fb", "exercise_name": "nbOccurrencesLettre", "embeddingX": "-20.65877", "embeddingY": "-42.54975"},{"extension": "py", "date": "2020-03-06 00:40:13", "correct": "1", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=liste[0]\n    for elem in liste:\n      if res<elem:\n        res=elem\n  return res", "user": "userdId_20", "attemptID": 2566, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "30.304287", "embeddingY": "-62.345383"},{"extension": "py", "date": "2020-03-14 03:47:40", "correct": "0", "upload": "def nombrePair(n):\n    elem=n\n    if elem%2==0:\n      res=True\n    else:\n      res=False\n    return None", "user": "userdId_14", "attemptID": 2567, "exercise": "3001254263845e9a478696f81a704d33", "exercise_name": "nombrePair", "embeddingX": "41.79248", "embeddingY": "-5.1624074"},{"extension": "py", "date": "2020-03-06 00:23:16", "correct": "0", "upload": "def maximum(liste):\n  res=(liste[0])\n  for elem in liste:\n     if res>elem:\n        res=elem\n  return res", "user": "userdId_23", "attemptID": 2568, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "31.9828", "embeddingY": "-46.66797"},{"extension": "py", "date": "2020-04-11 08:02:34", "correct": "0", "upload": "def sousChaine(s1,s2):\n  res=True\n  i=0\n  j=0\n  while i<len(s1) and j<len(s2) and s1[i]!=s2[j]:\n    j+=1\n  else:\n    while i<len(s1) and j<len(s2) and s1[i]==s2[j]:\n      if s1[i]==s2[j]:\n        res=True\n      i+=1\n      j+=1  \n  return res", "user": "userdId_8", "attemptID": 2569, "exercise": "4bdf8c9c5d020593e1771e4d3ae1ae0d", "exercise_name": "sousChaine", "embeddingX": "-4.7703023", "embeddingY": "58.75535"},{"extension": "py", "date": "2020-03-06 00:14:08", "correct": "0", "upload": "def nbVoyelles(mot,voyel):\n  if len(mot)==0:\n    voy=None\n  if len(voyel)==0:\n    voyel=None\n  else:\n    voy=0\n    for i in range(len(liste)):\n      if voyel[i]==liste[i]:\n        voy=voy+1\n  return voy", "user": "userdId_13", "attemptID": 2570, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-58.600758", "embeddingY": "4.2672505"},{"extension": "py", "date": "2020-04-07 03:42:03", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  ok=True\n  if 0 in liste:\n    ok=False\n  elif len(liste)>1:\n    raison=liste[-1]/liste[-2]\n    while i<len(liste)-1:\n      if liste[i+1]!=liste[i]*raison:\n        ok=False\n      i+=1\n  return ok", "user": "userdId_12", "attemptID": 2571, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "23.036873", "embeddingY": "73.604294"},{"extension": "py", "date": "2020-04-05 10:56:39", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  ok=True\n  i=0\n  j=0\n  while i<len(phrase)/2 and ok:\n    if phrase[i]==' ':\n      i+=1\n    elif phrase[j]==' ':\n      j-=1\n    ok=phrase[i]==phrase[j]\n    i+=1\n    j-=1\n  return ok", "user": "userdId_12", "attemptID": 2572, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "36.182865", "embeddingY": "41.0941"},{"extension": "py", "date": "2020-04-10 00:18:05", "correct": "0", "upload": "def suiteAriGeo(liste):\n  while i<len(liste):\n    a=liste[1]-liste[0]\n    b=liste[1]-liste[0]\n    if liste[i+1]==liste[i]*a:\n        b=0 and a==liste[1]/liste[0]\n    if liste[i+1]==liste[i]+b:\n      a=1 and b==liste[1]-liste[0]\n    i=i+1\n  \ndef verifSuiteAriGeo(liste,a,b):\n  ok=True\n  i=0\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=a*liste[i]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 2573, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "-50.022114", "embeddingY": "19.75231"},{"extension": "py", "date": "2020-03-13 00:46:56", "correct": "0", "upload": "def doubleLettre(mot):\n  res=0\n  l1=''\n  for l2 in mot:\n    if l1==l2:\n      res=res+1\n    l1=l2\n  \n  return res", "user": "userdId_15", "attemptID": 2574, "exercise": "00da9cf1fa2b468d915724499459ed8f", "exercise_name": "doubleLettre", "embeddingX": "14.773224", "embeddingY": "-7.7126093"},{"extension": "py", "date": "2020-04-12 12:12:53", "correct": "1", "upload": "def elemAri(n,u0,r):\n    res=0\n    x=0\n    while x<=n:\n      res=u0+n*r\n      x+=1\n    return res", "user": "userdId_11", "attemptID": 2575, "exercise": "f239498950e974e29e01472749d9a09d", "exercise_name": "elemAri", "embeddingX": "-9.314613", "embeddingY": "23.620413"},{"extension": "py", "date": "2020-03-27 05:52:25", "correct": "1", "upload": "def quatrePlus100(liste):\n  res=[]\n  i=0\n  while i<len(liste) and len(res)<4:\n    if liste[i]>100:\n      res=res+[liste[i]]\n    i=i+1\n  return res", "user": "userdId_34", "attemptID": 2576, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-27.021694", "embeddingY": "43.04547"},{"extension": "py", "date": "2020-03-23 22:42:41", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n    if jours1==jours2 and mois1==mois2 and annee1==annee2:\n      res=0\n    elif jours1<jours2 or mois1<mois2 or annee1<annee2:\n      res=-1 \n    else:\n      res=1\n    return res", "user": "userdId_9", "attemptID": 2577, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "73.0254", "embeddingY": "-26.563177"},{"extension": "py", "date": "2020-04-17 02:49:54", "correct": "1", "upload": "def nombrePair(n):\n  if n%2==0:\n    res=True \n  else: \n    res=False\n  return res\n", "user": "userdId_21", "attemptID": 2578, "exercise": "3001254263845e9a478696f81a704d33", "exercise_name": "nombrePair", "embeddingX": "43.563248", "embeddingY": "-4.076814"},{"extension": "py", "date": "2020-04-08 04:11:48", "correct": "0", "upload": "def suiteAriGeo(liste):\n  if len(liste) <= 2:\n    res = True\n  else:\n    a = liste[1] // liste[0]\n    b = liste[1] % liste[0]\n    i = 2\n    trouve = False\n    while i <= len(liste) and trouve == False:\n      if (((liste[i] // liste[i-1]) != a) or (liste[i] % liste[i-1]) != b):\n        trouve = True\n      i+=1\n    if trouve == False:\n      res = True\n    else:\n      res = False\n      \n    return res", "user": "userdId_42", "attemptID": 2579, "exercise": "4c9665daf155b115fe13218141fa1aff", "exercise_name": "suiteAriGeo", "embeddingX": "34.46353", "embeddingY": "27.938763"},{"extension": "py", "date": "2020-04-07 02:52:34", "correct": "1", "upload": "def produitScalaire(vec1,vec2):\n  res=0\n  i=0\n  while i<len(vec1) and i<len(vec2):\n    res=res+vec1[i]*vec2[i]\n    i=i+1\n  return res", "user": "userdId_50", "attemptID": 2580, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-15.789932", "embeddingY": "50.425365"},{"extension": "py", "date": "2020-03-03 05:11:37", "correct": "1", "upload": "def somme(liste):\n  res=0\n  for elem in (liste): \n    res=res+elem\n  return res", "user": "userdId_35", "attemptID": 2581, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-30.871237", "embeddingY": "2.2668312"},{"extension": "py", "date": "2020-03-05 22:15:28", "correct": "0", "upload": "def maximum(liste):\n  liste:[12,1,25,7]\n  res=0\t\n  for i in range(len(liste)):\n    if res<len(liste):\n      res=len(liste)\n  \n    return res\n  ", "user": "userdId_23", "attemptID": 2582, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "31.446165", "embeddingY": "-69.43603"},{"extension": "py", "date": "2020-04-07 04:05:50", "correct": "1", "upload": "def produitScalaire(vec1,vec2):\n  res=0\n  for i in range(len(vec1)) and range(len(vec2)):\n    res=res+(vec1[i]*vec2[i])\n  return res", "user": "userdId_16", "attemptID": 2583, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-34.015926", "embeddingY": "-42.12145"},{"extension": "py", "date": "2020-04-08 00:08:03", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  ok=False\n  i=0\n  j=0\n  while i<len(phrase)//2 and j<len(phrase)//2:\n    if phrase[i]==\" \":\n      i+=1\n      if phrase[i]!=phrase[-j-1]:\n        ok=False\n      else:\n        ok=True\n    elif phrase[-j]==\" \":\n      j+=1\n      if phrase[i]!=phrase[-j-1]:\n        ok=False\n      else:\n        ok=True\n    elif phrase[i]!=phrase[-j-1]:\n      ok=False\n    else:\n      ok=True\n    i+=1\n    j+=1\n  if phrase==\"\":\n    ok=True\n  return ok", "user": "userdId_13", "attemptID": 2584, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "36.760868", "embeddingY": "33.898556"},{"extension": "py", "date": "2020-03-06 00:17:56", "correct": "0", "upload": "def maximum(liste):\n  res=0\n  for i in range (len(liste)):\n    if (liste[i]):\n      res=(liste[i])\n  return res", "user": "userdId_45", "attemptID": 2585, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-39.658867", "embeddingY": "-40.240982"},{"extension": "py", "date": "2020-03-13 00:32:32", "correct": "1", "upload": "def sommeNPremiersEntiersPairs(n):\n  if n <= 0:\n    return 0\n  else:\n    sum = 0\n    for i in range(1,n+1):\n      if i%2 == 0:\n        sum += i\n    return sum", "user": "userdId_42", "attemptID": 2586, "exercise": "3030dc079e6607c253e89e8ef4784b74", "exercise_name": "sommeNPremiersEntiersPairs", "embeddingX": "30.682737", "embeddingY": "-10.678748"},{"extension": "py", "date": "2020-04-11 00:23:57", "correct": "1", "upload": "def verifSuiteAriGeo(liste,a,b):\n  i=0\n  c=True\n  while i<(len(liste)-1) and c:\n    if liste[i+1]!=a*liste[i]+b:\n      c=False\n    i=i+1\n  return c", "user": "userdId_19", "attemptID": 2587, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-77.27405", "embeddingY": "20.742487"},{"extension": "py", "date": "2020-04-05 08:42:48", "correct": "1", "upload": "def produitScalaire(vec1,vec2):\n    if vec1==[] or vec2==[]:\n      res=0\n    else:\n      res=0\n      for i in range(len(vec1)):\n        res+=vec1[i]*vec2[i]\n    return res\n      ", "user": "userdId_18", "attemptID": 2588, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-32.989353", "embeddingY": "-38.44012"},{"extension": "py", "date": "2020-03-23 01:57:20", "correct": "0", "upload": "def maximum(liste):\n    res=l[0]\n    for i in range (len(liste)):\n      if l[i]>res :\n        res=l[i]\n    return res", "user": "userdId_24", "attemptID": 2589, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "0.7278452", "embeddingY": "-67.35779"},{"extension": "py", "date": "2020-03-16 05:45:22", "correct": "0", "upload": "def doubleLettre(mot):\n  res=0\n  prec=''\n  for c in mot:\n    if prec==c:\n      dL=True\n    else:\n      res=False\n    prec=c\n  if dL==True:\n    res=True\n  return res", "user": "userdId_18", "attemptID": 2590, "exercise": "00da9cf1fa2b468d915724499459ed8f", "exercise_name": "doubleLettre", "embeddingX": "12.41932", "embeddingY": "-5.717426"},{"extension": "py", "date": "2020-03-07 03:05:50", "correct": "0", "upload": "def nbSyllabes(mot):\n  if len(mot)==0:\n    return 0\n  else:\n    if (mot[0] in 'aeiouy'):\n      cpt = 1\n    else:\n      cpt = 1\n    for i in range (0, len(mot)-1):\n      if (mot[i] in 'aeiouy') and not(mot[i+1] in 'aeiouy'):\n        cpt+=1\n    return cpt\n        ", "user": "userdId_6", "attemptID": 2591, "exercise": "1c86bec0f4df503e23db53994f3d2991", "exercise_name": "nbSyllabes", "embeddingX": "-29.235464", "embeddingY": "-69.85191"},{"extension": "py", "date": "2020-03-22 23:57:53", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    return None\n  compteur=0\n  for element in mot:\n    if element in 'aeiouy':\n      compteur=compteur+1\n  return compteur", "user": "userdId_34", "attemptID": 2592, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "7.0785513", "embeddingY": "-29.120535"},{"extension": "py", "date": "2020-03-10 04:29:24", "correct": "0", "upload": "def sommeNPremiersEntiersPairs(n):\n  res=0\n  for i in range(len(1,n+1)):\n    if liste[i]%2==0:\n      res=res+liste[i]\n  return res", "user": "userdId_8", "attemptID": 2593, "exercise": "3030dc079e6607c253e89e8ef4784b74", "exercise_name": "sommeNPremiersEntiersPairs", "embeddingX": "-39.525974", "embeddingY": "-26.314772"},{"extension": "py", "date": "2020-04-17 02:58:21", "correct": "0", "upload": "def somme(liste):\n  res=0\n  for i in liste: \n    res=res+res[i]\n  return res", "user": "userdId_21", "attemptID": 2594, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-53.808823", "embeddingY": "-12.350075"},{"extension": "py", "date": "2020-04-03 00:35:35", "correct": "0", "upload": "def listeSymetrique(l):\n  i=0\n  ok=True\n  while i<(len(l))/2 and ok:\n    if l[i]!=l[1-i]:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_12", "attemptID": 2595, "exercise": "8eb27aeda471a467e2223abebeca886e", "exercise_name": "listeSymetrique", "embeddingX": "25.76974", "embeddingY": "52.783123"},{"extension": "py", "date": "2020-05-04 22:30:12", "correct": "1", "upload": "def premiereOccurrenceLettre(lettre,mot):\n  res=None\n  i=0\n  while i<len(mot) and res==None:\n    if mot[i]==lettre:\n      res=i\n    i+=1\n  return res", "user": "userdId_8", "attemptID": 2596, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-20.133371", "embeddingY": "69.087395"},{"extension": "py", "date": "2020-04-12 08:23:57", "correct": "0", "upload": "def suiteAriGeo(liste):\n  i=0\n  while i<len(liste)-1:\n    a=liste[0]\n    b=liste[0]\n    if liste[i+1]==liste[i]+(liste[1]-liste[0]):\n      b=liste[1]-liste[0]\n    if liste[0]!=0:                        \n      if liste[i+1]==liste[i]*liste[1]/liste[0]:\n        a=liste[1]/liste[0]\n        b=0\n    if liste[i+1]==liste[i]*(liste[1]-liste[0])+liste[0]:\n      b=liste[0]\n    i=i+1\n  ok=True\n  i=0\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=a*liste[i]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 2597, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "35.487114", "embeddingY": "83.7853"},{"extension": "py", "date": "2020-03-12 22:15:50", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    for i in range(len(liste)):\n      if i>=res:\n        res=i\n  return res", "user": "userdId_35", "attemptID": 2598, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "4.520491", "embeddingY": "-58.582993"},{"extension": "py", "date": "2020-03-10 03:19:13", "correct": "0", "upload": "def qualifJO(sexe,record,nbvictoires,champion):\n    if sexe=='M':\n      if record<12.0 and nbvictoires>=3:\n          res=True\n      else:\n        if champion==True:\n          res=True\n        else:\n          res=False\n    else:\n      if record<15.0 and nbvictoires>=3:\n        res=True\n      else:\n        if champion==True:\n          res=True\n        else:\n          res=False\n    return res", "user": "userdId_18", "attemptID": 2599, "exercise": "78ec7738f3a7f3553d4a5c653534c32d", "exercise_name": "qualifJO", "embeddingX": "63.972054", "embeddingY": "-10.839858"},{"extension": "py", "date": "2020-04-06 03:19:39", "correct": "1", "upload": "def verifSuiteAriGeo(liste,a,b):\n  ok=True\n  i=0\n  if len(liste)<=1 :\n    ok=True\n  else :\n    while i<(len(liste)-1) and ok :\n      if liste[i+1]!=a*liste[i]+b :\n        ok=False\n      i+=1\n  return ok", "user": "userdId_15", "attemptID": 2600, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-70.81592", "embeddingY": "15.8254385"},{"extension": "py", "date": "2020-03-05 23:47:14", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    return 0\n  else:\n    for elem in mot:\n      res=0\n      if elem== mot[0] or mot[4] or mot[8] or mot[14] or mot[20] or mot[24]:\n        res=res+1\n        return res", "user": "userdId_14", "attemptID": 2601, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-15.489806", "embeddingY": "-54.70079"},{"extension": "py", "date": "2020-04-06 01:50:21", "correct": "0", "upload": "def produitScalaire(vec1,vec2):\n  if vec1 == []:\n    coordvec = [0,0]\n  if vec2 == []:\n    coordvec2 = [0,0]\n  else :\n    coordvec1 = [vec1[2]-vec1[0],vec1[1]-vec1[3]]\n    coordvec2 = [vec2[2]-vec2[0],vec2[1]-vec2[3]]\n    res = coordvec1[0]*coordvec2[0]+coordvec1[1]*coordvec2[1]\n  return res", "user": "userdId_17", "attemptID": 2602, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-22.105059", "embeddingY": "-16.552519"},{"extension": "py", "date": "2020-05-04 22:45:35", "correct": "0", "upload": "def prononcable(mot):\n  res=True\n  cpt=0\n  i=0\n  while i<len(mot) and res:\n    if mot[i] not in 'aeiouy':\n      cpt+=1\n    if mot[i] in 'aeiouy':\n      cpt=0\n    if cpt>=3:\n      res=False\n    i+=1\n  return res", "user": "userdId_26", "attemptID": 2603, "exercise": "6318b210c201fba050d60bc0913cb7ef", "exercise_name": "prononcable", "embeddingX": "14.464799", "embeddingY": "38.117966"},{"extension": "py", "date": "2020-03-05 23:34:53", "correct": "1", "upload": "def somme(liste):\n  res=0\n  for elem in liste:\n    res=res+elem\n  return res", "user": "userdId_13", "attemptID": 2604, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-30.21233", "embeddingY": "0.78819054"},{"extension": "py", "date": "2020-03-05 23:44:16", "correct": "0", "upload": "def nbVoyelles(mot):\n  res=0\n  for i in range(len(mot)):\n    if mot[i]==liste('aeyuio'):\n      res=res+1\n  return res", "user": "userdId_30", "attemptID": 2605, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-8.130003", "embeddingY": "-52.60732"},{"extension": "py", "date": "2020-04-16 23:26:26", "correct": "1", "upload": "def indiceInsertion(sc,scores):\n  i=0\n  trouve=False\n  cpt=0\n  while i<len(scores) and not trouve :\n    if sc>scores[i] :\n      trouve=True\n    else :\n      cpt+=1\n    i+=1\n  return cpt", "user": "userdId_15", "attemptID": 2606, "exercise": "f8a820b2bd54d18d36716e3d703858f7", "exercise_name": "indiceInsertion", "embeddingX": "0.39047065", "embeddingY": "58.774517"},{"extension": "py", "date": "2020-03-24 03:24:30", "correct": "0", "upload": "def quatrePlus100(l,x):\n  res=[]\n  i=0\n  while i<len(l) and len(res)<4:\n      if l[i]>x:\n         res=res+[l[i]]\n      i=i+1\n  return res", "user": "userdId_16", "attemptID": 2607, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-50.112267", "embeddingY": "12.730939"},{"extension": "py", "date": "2020-03-07 00:36:58", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1<annee2:\n    res=-1\n  if annee1>annee2:\n    res=1\n  elif mois1<mois2:\n      res=-1\n      if mois1>mois2:\n        res=1\n      elif jour1<jour2:\n        res=-1\n        if jour1>jour2:\n          res=1\n  else:\n    res=0\n  return res", "user": "userdId_8", "attemptID": 2608, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "80.89192", "embeddingY": "-32.808765"},{"extension": "py", "date": "2020-04-07 22:48:36", "correct": "0", "upload": "def suiteGeo(liste):\n  res = True\n  i = 0\n  if liste == [] or len(liste) == 1 :\n    res = True\n  else :\n    raison = liste[1]/liste[0]\n  while res and i < len(liste)-1 :\n    if liste[i]*raison != liste[i+1]:\n      res = False\n    i = i + 1\n  return res\n", "user": "userdId_17", "attemptID": 2609, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "30.818295", "embeddingY": "70.927155"},{"extension": "py", "date": "2020-03-27 05:25:24", "correct": "0", "upload": "def quatrePlus100(liste):\n  i=0\n  while i<4 and liste[i]>100:\n    res.append(liste[i])\n    i=i+1\n  return res", "user": "userdId_12", "attemptID": 2610, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-20.48091", "embeddingY": "46.161526"},{"extension": "py", "date": "2020-03-05 23:46:34", "correct": "0", "upload": "def moyenne(liste):\n  if len(liste)==0:\n    moy=None\n  else:\n    moy=0\n  for i in liste:\n    moy=moy+i\n  moy=moy/len(liste)\n  return moy", "user": "userdId_13", "attemptID": 2611, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-0.51605463", "embeddingY": "-17.261091"},{"extension": "py", "date": "2020-04-12 11:20:38", "correct": "1", "upload": "def suiteAri(liste):\n    if len(liste)==0:\n      res=True\n    else:\n      res=True\n      for i in range(1,len(liste)):\n        x=liste[1]-liste[0]\n        if liste[i]==liste[i-1]+x:\n          res=True\n        else:\n          res=False\n    return res\n      ", "user": "userdId_11", "attemptID": 2612, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "-15.857412", "embeddingY": "-64.604904"},{"extension": "py", "date": "2020-03-19 05:34:17", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if jour1<jour2 or mois1<mois2 or annee1<annee2:\n    res=-1\n    if jour1==jour2 or mois==mois2 or annee1==annee2:\n      res=0\n  else:\n    res=1\n  return res", "user": "userdId_34", "attemptID": 2613, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "77.51263", "embeddingY": "-26.81132"},{"extension": "py", "date": "2020-03-31 05:28:37", "correct": "1", "upload": "def maximum(liste):\n    if liste==[]:\n      res=None\n    else:\n      res=max(liste)\n    return res", "user": "userdId_18", "attemptID": 2614, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-16.401705", "embeddingY": "-16.853226"},{"extension": "py", "date": "2020-04-07 10:50:00", "correct": "0", "upload": "def suiteGeo(liste):\n  ok=True\n  i=1\n  if len(liste)==0 and len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i]==0:\n      ok=False\n    q=liste[1]/liste[0]\n    if liste[i+1]/liste[i]!=q:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 2615, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "27.809353", "embeddingY": "60.61347"},{"extension": "py", "date": "2020-04-07 11:19:57", "correct": "0", "upload": "def suiteGeo(liste):\n  ok=True\n  i=0\n  if len(liste)==0 and len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i]!=0:\n      q=liste[1]/liste[0]\n    if liste[i]!=0:\n      if liste[i+1]/liste[i]!=q:\n        ok=False\n    if liste[i]==0:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 2616, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "29.31685", "embeddingY": "61.58192"},{"extension": "py", "date": "2020-03-20 00:57:09", "correct": "0", "upload": "def distribution(liste,n):\n  res=[n+1]\n  for elem in liste:\n    if elem==res[elem]:\n      res[i]=res[i]+1\n  \n  return res\n\n", "user": "userdId_15", "attemptID": 2617, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-52.48969", "embeddingY": "-18.352436"},{"extension": "py", "date": "2020-03-02 09:21:24", "correct": "0", "upload": "def qualifJO(sexe,record,nbvictoires,champion):\n    res = False\n    if sexe == \"F\" or sexe == \"M\" and record > 0 and nbvictoires > 0 and type(champion) == bool:\n        \n        if champion == True: res = True\n\n        record_need = 12\n\n        if sexe == \"F\":\n            record_need = 15\n        print(record_need)\n        if record < record_need and nbvictoires >= 3:\n            res = True\n        \n    \n    return res", "user": "userdId_4", "attemptID": 2618, "exercise": "78ec7738f3a7f3553d4a5c653534c32d", "exercise_name": "qualifJO", "embeddingX": "67.51386", "embeddingY": "-11.599726"},{"extension": "py", "date": "2020-03-17 06:15:43", "correct": "0", "upload": "def sommeNPremiersEntiers(n):\n    if n<0:\n      res=0\n    else:\n      res=0\n      for elem in range(n):\n        res=res+elem\n    return res\n  ", "user": "userdId_11", "attemptID": 2619, "exercise": "c315a540cf0bfb0182dc114c6f0eafd1", "exercise_name": "sommeNPremiersEntiers", "embeddingX": "-14.788277", "embeddingY": "11.485262"},{"extension": "py", "date": "2020-03-03 05:41:34", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    for i in range(len(liste)):\n      res=range[0]\n      if liste[i]>res:\n        res=liste[i]\n  return res", "user": "userdId_8", "attemptID": 2620, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "4.9565806", "embeddingY": "-51.08978"},{"extension": "py", "date": "2020-03-06 23:36:03", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut1>=debut2 or fin1<=fin2:\n    res=True\n  elif fin1<debut2:\n    res=True\n  else:\n    res=False\n  return res", "user": "userdId_8", "attemptID": 2621, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "54.71032", "embeddingY": "-21.517385"},{"extension": "py", "date": "2020-04-12 11:22:57", "correct": "0", "upload": "def phrasePalindrome(phrase):\n    if len(phrase)==0:\n      res=True\n    else:\n      res=True\n      i=0\n      x=''\n      while i<len(phrase)//2 and res:\n        if phrase[i]==x:\n          i+=1\n        else:\n          if phrase[i]!=phrase[-(i+1)]:\n            res=False\n        i+=1\n    return res", "user": "userdId_11", "attemptID": 2622, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "33.97377", "embeddingY": "35.455753"},{"extension": "py", "date": "2020-03-12 23:36:18", "correct": "1", "upload": "def jourNuit(heure):\n  if heure > 24 or heure < 0 :\n    res = \"l'heure saisie est invalide\"\n  else :\n    if heure >= 5 and heure < 12 :\n      res = \"on est le matin \"\n    elif heure >= 12 and heure < 17 :\n      res = \"on est l'apr\u00e8s-midi \"\n    elif heure >=17 and heure < 21 :\n      res = \"on est le soir \"\n    else :\n      res = \"on est la nuit \"\n    if heure >= 6 and heure < 18 :\n      res = res + \"et il fait jour\"\n    else :\n      res = res + \"et il fait nuit\"\n  return res", "user": "userdId_17", "attemptID": 2623, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "78.4937", "embeddingY": "20.243305"},{"extension": "py", "date": "2020-04-12 10:23:34", "correct": "1", "upload": "def compteChiffre(chiffre,nombre):\n  res=0\n  if nombre==0:\n    res=1\n  while nombre!=0:\n    if nombre%10==chiffre:\n      res=res+1\n    nombre=nombre//10\n  \n  return res", "user": "userdId_38", "attemptID": 2624, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "21.755884", "embeddingY": "10.678285"},{"extension": "py", "date": "2020-03-17 06:43:31", "correct": "0", "upload": "def permutationListe(liste,permutation):\n  res=liste[n]\n  for elem in liste:\n    res[n]=liste[i]\n  return res", "user": "userdId_25", "attemptID": 2625, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-48.958572", "embeddingY": "-10.956546"},{"extension": "py", "date": "2020-03-14 22:01:53", "correct": "0", "upload": "def maximum(liste):\n  maxi=0\n  for v in range(liste):\n    if v>maxi:\n    \tmaxi=v\n    return maxi", "user": "userdId_21", "attemptID": 2626, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-40.395462", "embeddingY": "-21.45265"},{"extension": "py", "date": "2020-03-23 01:13:08", "correct": "0", "upload": "def prononcable(mot):\n  if mot=='':\n    res=True\n  else:\n    res=True\n    aux=''\n    for c in mot:\n      if c==aux:\n        res=False\n      aux=c\n    return res", "user": "userdId_27", "attemptID": 2627, "exercise": "6318b210c201fba050d60bc0913cb7ef", "exercise_name": "prononcable", "embeddingX": "17.366098", "embeddingY": "-5.5466423"},{"extension": "py", "date": "2020-03-10 03:14:32", "correct": "0", "upload": "def qualifJO(sexe,record,nbvictoires,champion):\n    if sexe=='M':\n      if record<12 and nbvictoires>=3:\n          res=True\n      else:\n        if champion==True:\n          res=True\n        else:\n          res=False\n    else:\n      if record<15 and nbvictoires>=3:\n        res=True\n      else:\n        if champion==True:\n          res=True\n        else:\n          res=False\n    return res", "user": "userdId_18", "attemptID": 2628, "exercise": "78ec7738f3a7f3553d4a5c653534c32d", "exercise_name": "qualifJO", "embeddingX": "65.209984", "embeddingY": "-11.531063"},{"extension": "py", "date": "2020-03-10 03:14:59", "correct": "0", "upload": "def jourNuit(heure):\n  if heure<0 or heure>24:\n    res=\"l'heure saisie est invalide\"\n  else:\n    if heure<5 or heure>=21:\n      res=\"on est la nuit\"\n    elif heure<12:\n      res=\"on est le matin\"\n    elif heure<17:\n      res=\"on est l'apr\u00e8s-midi\"\n    else:\n      res=\"on est le soir\"\n    if heure<6 or heure>=18:\n      res=res+\"et il fait nuit\"\n    else:\n      res=res+\"et il fait jour\"\n  return res        ", "user": "userdId_35", "attemptID": 2629, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "71.97505", "embeddingY": "15.03071"},{"extension": "py", "date": "2020-03-19 05:44:40", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if jour1<jour2 and mois1<mois2 and annee1<annee2:\n    res=-1\n  elif jour1==jour2 and mois1==mois2 and annee1==annee2:\n      res=0\n  else:\n    res=1\n  return res", "user": "userdId_34", "attemptID": 2630, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "79.57354", "embeddingY": "-24.791344"},{"extension": "py", "date": "2020-04-10 01:02:30", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  res=True\n  if len(liste)==0 or len(liste)==1:\n    res=True\n  while i<len(liste)-1 and res:\n    if liste[0]==0:\n      res=False\n    if liste[i]!=0:\n      q=liste[1]/liste[0]\n    if liste[i]!=0:\n      if liste[i+1]/liste[0]!=q:\n        res=False\n    if liste[i]==0 and liste[i+1]==0:\n      res=True\n    if liste[i]==0 and liste[i+1]==0:\n      res=True\n    i+=1\n  return res", "user": "userdId_26", "attemptID": 2631, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "35.226974", "embeddingY": "62.251484"},{"extension": "py", "date": "2020-03-17 06:42:05", "correct": "0", "upload": "def doubleLettre(mot):\n  c1=(0,len(mot),2)\n  c2=(1,len(mot),2)\n  for c1 in mot:\n    if c1!=c2:\n      res=False\n  else:\n    res=True\n  return res", "user": "userdId_8", "attemptID": 2632, "exercise": "00da9cf1fa2b468d915724499459ed8f", "exercise_name": "doubleLettre", "embeddingX": "19.008963", "embeddingY": "-3.0863872"},{"extension": "py", "date": "2020-03-20 00:00:35", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  res=\"\"\n  fin=debut+long\n  if fin>len(s):\n    fin=len(s)\n  for i in range(debut,fin):\n    res=res+s[i]\n  return None", "user": "userdId_20", "attemptID": 2633, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-85.1942", "embeddingY": "20.600243"},{"extension": "py", "date": "2020-03-05 21:54:29", "correct": "1", "upload": "def somme(liste):\n    res = 0\n    for elem in liste:\n    \tres = res + elem\n    return res", "user": "userdId_29", "attemptID": 2634, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-29.166786", "embeddingY": "3.2279036"},{"extension": "py", "date": "2020-04-12 12:23:05", "correct": "0", "upload": "def suiteGeo(liste):\n    if len(liste)==0 or len(liste)==1:\n      res=True\n    else:\n      res=True\n      for i in range(1,len(liste)):\n        if liste[i-1]==0:\n          res=False\n        else:\n          x=liste[1]/liste[0]\n          if x==0:\n            res=True\n          else:\n            if liste[i]!=liste[i-1]*x:\n              res=False\n    return res", "user": "userdId_11", "attemptID": 2635, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "-15.543103", "embeddingY": "-83.65652"},{"extension": "py", "date": "2020-04-12 06:43:33", "correct": "0", "upload": "def phrasePalindrome(phrase):\n    if len(phrase)==0:\n      res=True\n    else:\n      res=True\n      i=0\n      while i<len(phrase)//2 and res:\n        if phrase[i]!=phrase[-(i+1)] or phrase[i]=='':\n          res=False\n        i+=1\n    return res", "user": "userdId_11", "attemptID": 2636, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "29.941225", "embeddingY": "31.542171"},{"extension": "py", "date": "2020-04-07 23:54:04", "correct": "0", "upload": "def suiteGeo(liste):\n  ok=True\n  i=0\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i]==0:\n      ok=False\n    if liste[i]!=0:\n      q=liste[1]/liste[0]\n    if liste[i]!=0:\n      if liste[i+1]/liste[i]!=q:\n        ok=False\n    i=i+1\n  return ok", "user": "userdId_32", "attemptID": 2637, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "32.123016", "embeddingY": "63.697174"},{"extension": "py", "date": "2020-03-29 09:47:20", "correct": "1", "upload": "def distribution(liste,n):\n  res=[0]*(n+1)\n  for elem in liste:\n    res[elem]=res[elem]+1\n  return res", "user": "userdId_12", "attemptID": 2638, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-59.410675", "embeddingY": "-15.077231"},{"extension": "py", "date": "2020-03-22 10:48:03", "correct": "1", "upload": "def moyenne(liste):\n  if liste==[]:\n    res=None\n  else:\n    x=0\n    cpt=0\n    for i in liste:\n      x=x+i\n      cpt=cpt+1\n    res=x/cpt\n    return res", "user": "userdId_27", "attemptID": 2639, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-0.21760987", "embeddingY": "-5.696517"},{"extension": "py", "date": "2020-04-06 06:01:46", "correct": "0", "upload": "def motPalindrome(mot):\n  ok=True\n  i=0\n  return ok", "user": "userdId_3", "attemptID": 2640, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "9.448964", "embeddingY": "49.462387"},{"extension": "py", "date": "2020-04-14 06:01:11", "correct": "0", "upload": "def indiceInsertion(sc,scores):\n  res=0\n  i=0\n  while i<=len(joueurs):\n    if sc>scores[i]:\n      res=i\n    i=i+1\n  return res\n", "user": "userdId_28", "attemptID": 2641, "exercise": "f8a820b2bd54d18d36716e3d703858f7", "exercise_name": "indiceInsertion", "embeddingX": "-31.24028", "embeddingY": "53.800438"},{"extension": "py", "date": "2020-03-06 22:43:41", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n    res = None\n    if len(mot) > 0:\n        res = mot.index(lettre)\n    return res", "user": "userdId_4", "attemptID": 2642, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "8.697485", "embeddingY": "-53.907684"},{"extension": "py", "date": "2020-03-17 06:25:16", "correct": "0", "upload": "def maximum(liste):\n    if len(liste)==0:\n      res=0\n    else:\n      res=liste[0]\n    for elem in liste:\n        res<liste\n        res=elem\n    return res", "user": "userdId_22", "attemptID": 2643, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "14.893408", "embeddingY": "-60.325447"},{"extension": "py", "date": "2020-03-31 04:56:57", "correct": "1", "upload": "def qualifJO(sexe,record,nbvictoires,champion):\n    if sexe=='M':\n      if (record<12.0 and nbvictoires>=3) or champion==True:\n          res=True\n      else:\n          res=False\n    else:\n      if (record<15.0 and nbvictoires>=3) or champion==True:\n        res=True\n      else:\n        res=False\n    return res", "user": "userdId_18", "attemptID": 2644, "exercise": "891e7b0ed5fbddb755edc84d479bc1ef", "exercise_name": "qualifJO", "embeddingX": "64.00806", "embeddingY": "-10.133062"},{"extension": "py", "date": "2020-03-05 10:40:49", "correct": "0", "upload": "from math import *\n\ndef polynome(a,b,c):\n  d=b**2-4*a*c\n  if d <0:\n    return \"pas de solution\"\n  elif d==0:\n    x1==-b/2*a and x2==-b/2*a\n    return x1 and x2\n  elif d>0:\n    x3==(-b-(sqrt(d)))/2*a\n    x4==(-b+(sqrt(d)))/2*a\n    return x3 and x4\n\n    polynome(1,-1,0)\n    polynome(2,-4,2)\n    polynome(3,-2,10)", "user": "userdId_1", "attemptID": 2645, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-53.110764", "embeddingY": "9.048156"},{"extension": "py", "date": "2020-03-06 00:30:34", "correct": "1", "upload": "def moyenne(liste):\n  res=0\n  cpt=0\n  for elem in liste:\n    res=res+elem\n    cpt=cpt+1\n  if cpt==0:\n    res=None\n  else:\n    res=res/cpt\n  return res ", "user": "userdId_1", "attemptID": 2646, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-2.5275946", "embeddingY": "-6.9955044"},{"extension": "py", "date": "2020-03-05 22:09:52", "correct": "1", "upload": "def maximum(liste):\n  if len(liste)==0:\n  \treturn None\n  else :\n    max=liste[0]\n    for i in range(1,len(liste)):\n      if liste[i]>max:\n        max=liste[i]\n  return max", "user": "userdId_14", "attemptID": 2647, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "11.984457", "embeddingY": "-70.65645"},{"extension": "py", "date": "2020-03-10 04:28:01", "correct": "1", "upload": "def sommeNPremiersEntiers(n):\n  res=0\n  for x in range (1,n+1):\n    res=res+x\n  return res", "user": "userdId_25", "attemptID": 2648, "exercise": "c315a540cf0bfb0182dc114c6f0eafd1", "exercise_name": "sommeNPremiersEntiers", "embeddingX": "-18.99875", "embeddingY": "12.935197"},{"extension": "py", "date": "2020-03-10 04:09:40", "correct": "1", "upload": "def sommeNbPairs(liste):\n  res=0\n  for i in range(len(liste)):\n    if liste[i]%2==0:\n      res=res+liste[i]\n  return res", "user": "userdId_8", "attemptID": 2649, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "-19.838377", "embeddingY": "-56.86569"},{"extension": "py", "date": "2020-03-23 22:33:57", "correct": "0", "upload": "def quatrePlus100(liste):\n  res=[]\n  x=0\n  while len(res)<4 :\n    if (liste[x])>100 :\n      res=res+[liste[x]]\n    x=x+1\n  return res", "user": "userdId_28", "attemptID": 2650, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-28.174274", "embeddingY": "37.448906"},{"extension": "py", "date": "2020-06-02 22:59:51", "correct": "1", "upload": "def nbOccurrencesLettre(lettre,mot):\n  cpt=0\n  for i in range(len(mot)):\n    if mot[i]==lettre:\n      cpt+=1\n  return cpt", "user": "userdId_12", "attemptID": 2651, "exercise": "2864c9e5861229d2ff32570f6bc944fb", "exercise_name": "nbOccurrencesLettre", "embeddingX": "-21.017574", "embeddingY": "-38.744022"},{"extension": "py", "date": "2020-03-31 03:25:20", "correct": "0", "upload": "def fusion(liste1,liste2):\n  res=[]\n  i=0\n  j=0\n  while i<len(liste1) and j<len(liste2):\n    if liste1[i]<liste2[j]:\n      res=res+[liste1[i]]\n      i=i+1\n    elif liste2[j]<liste1[i]:\n      res=res+[liste2[j]]\n      j=j+1\n    else:\n      res=res+[liste1[i]]\n      res=res+[liste2[j]]\n\n  if i<len(liste1):\n    while i<len(liste1):\n      res=res+[liste1[i]]\n      i=i+1\n  else:\n    while j<len(liste2):\n      res=res+[liste2[j]]\n      j=j+1\n  return res", "user": "userdId_7", "attemptID": 2652, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-37.755833", "embeddingY": "53.87923"},{"extension": "py", "date": "2020-03-06 22:04:45", "correct": "1", "upload": "def maximum(liste):\n    res = None\n    if len(liste) > 0:\n        liste.sort()\n        res = liste[-1]\n    return res", "user": "userdId_4", "attemptID": 2653, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "8.028453", "embeddingY": "-56.40271"},{"extension": "py", "date": "2020-03-24 04:53:38", "correct": "0", "upload": "def quatrePlus100(liste):\n  i=0\n  res=[]\n  while i<len(liste):\n    if i>100:\n      res.append(liste[i])\n    i=i+1\n  return res\n", "user": "userdId_13", "attemptID": 2654, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-23.072088", "embeddingY": "35.472885"},{"extension": "py", "date": "2020-04-06 03:32:08", "correct": "0", "upload": "def suiteGeo(liste):\n  ok=True\n  i=0\n  if len(liste)<=1 :\n    ok=True\n  else :\n    while i<(len(liste)-1) and ok :\n      if liste[i]!=(liste[0]*(liste[i+1]//liste[i])**i):\n        ok=False\n      i+=1\n  return ok", "user": "userdId_15", "attemptID": 2655, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "51.98489", "embeddingY": "46.051964"},{"extension": "py", "date": "2020-03-24 06:12:59", "correct": "0", "upload": "def fusion(liste1,liste2):\n  liste1.extend(liste2)\n  liste1.sort()\n  return liste1", "user": "userdId_13", "attemptID": 2656, "exercise": "6613efb6c873b142dc2b6040c14eb616", "exercise_name": "fusion", "embeddingX": "-42.752033", "embeddingY": "10.022701"},{"extension": "py", "date": "2020-05-04 22:30:21", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n  res=None\n  i=0\n  while i<len(mot) and None:\n    if mot[i]==lettre:\n      res=i\n    i+=1\n  return res", "user": "userdId_8", "attemptID": 2657, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-14.186719", "embeddingY": "46.611115"},{"extension": "py", "date": "2020-03-23 22:44:13", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n    if jour1==jour2 and mois1==mois2 and annee1==annee2:\n      res=0\n    elif jour1<jour2 or mois1<mois2 or annee1<annee2:\n      res=-1 \n    else:\n      res=1\n    return res", "user": "userdId_9", "attemptID": 2658, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "78.8743", "embeddingY": "-25.822882"},{"extension": "py", "date": "2020-03-13 00:24:26", "correct": "1", "upload": "def qualifJO(sexe,record,nbvictoires,champion):\n    if sexe == 'M':\n        if record < 12 and nbvictoires >= 3 or champion:\n            return True\n        else:\n            return False\n    elif sexe == 'F':\n        if record < 15 and nbvictoires >= 3 or champion:\n            return True\n        else:\n            return False", "user": "userdId_42", "attemptID": 2659, "exercise": "78ec7738f3a7f3553d4a5c653534c32d", "exercise_name": "qualifJO", "embeddingX": "59.237103", "embeddingY": "-25.816736"},{"extension": "py", "date": "2020-04-08 02:31:58", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  res=True\n  if len(liste)==0:\n    res=True\n  else:\n    while i<len(liste)-1 and res==True:\n      if liste[i]!=0:\n        q=liste[i+1]/liste[i]\n        if liste[i+1]/liste[i]==q:\n          res=True\n        else:\n          res=False\n      else:\n        res=False\n      i=i+1\n  return res", "user": "userdId_26", "attemptID": 2660, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "30.1566", "embeddingY": "60.55772"},{"extension": "py", "date": "2020-03-10 04:03:53", "correct": "0", "upload": "def sommeNbPairs(liste):\n  res=0\n  for i in (liste):\n    res=res+liste[i]\n  return res", "user": "userdId_8", "attemptID": 2661, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "-54.605972", "embeddingY": "-13.387735"},{"extension": "py", "date": "2020-04-12 07:50:23", "correct": "0", "upload": "def suiteAriGeo(liste):\n  i=0\n  while i<len(liste)-1:\n    a=liste[i]-liste[i-1]\n    b=liste[i]-liste[i-1]\n    if liste[i+1]==liste[i]+b:\n      a=1\n    if liste[0]!=0:\n      if liste[i+1]==liste[1]/liste[0]:\n        b=0\n    i=i+1\n  ok=True\n  i=0\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=a*liste[i]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 2662, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "35.58985", "embeddingY": "80.452065"},{"extension": "py", "date": "2020-04-12 06:04:19", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=False\n  c=liste[0]\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n  return c", "user": "userdId_8", "attemptID": 2663, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-72.56653", "embeddingY": "17.606682"},{"extension": "py", "date": "2020-03-10 03:22:29", "correct": "0", "upload": "def jourNuit(heure):\n  if heure<0 or heure>24:\n    res=\"l'heure saisie est invalide\"\n  else:\n    if heure<5 or heure>=21:\n      res=\"on est la nuit\"\n    elif heure<12:\n      res=\"on est le matin\"\n    elif heure<17:\n      res=\"on est l'apres-midi\"\n    else:\n      res=\"on est le soir\"\n    if heure<6 and heure >=18:\n      res=res+\" et il fait jour\"\n    else:\n      res=res+\" et il fait nuit\"\n  return res", "user": "userdId_31", "attemptID": 2664, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "79.2974", "embeddingY": "19.386646"},{"extension": "py", "date": "2020-03-20 00:03:29", "correct": "1", "upload": "def permutationChaine(s):\n  res=''\n  for i in range(0,len(s)-1,2):\n    res=res+s[i+1]+s[i]\n  if (len(s)%2!=0):\n    res=res+s[-1]\n  return res", "user": "userdId_2", "attemptID": 2665, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-35.8503", "embeddingY": "-58.044006"},{"extension": "py", "date": "2020-03-22 04:41:46", "correct": "1", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if fin1<debut2 or fin2<debut1:\n    res=False\n  else:\n    res=True\n  return res", "user": "userdId_12", "attemptID": 2666, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "61.048313", "embeddingY": "-19.822016"},{"extension": "py", "date": "2020-03-07 00:52:33", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1<annee2:\n    res=-1\n  if annee1>annee2:\n    res=1\n  if mois1<mois2:\n    res=-1\n  if mois1>mois2:\n    res=1\n  if jour1<jour2:\n    res=-1\n  if jour1>jour2:\n    res=1\n  else:\n    res=0\n  return res", "user": "userdId_8", "attemptID": 2667, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "83.01157", "embeddingY": "-32.6628"},{"extension": "py", "date": "2020-03-13 00:58:10", "correct": "0", "upload": "def sommeNPremiersEntiersPairs(n):\n  somme=0\n  for i in range(1,n+1):\n    somme=somme+i\n    if elem%2==0:\n      somme=somme+elem\n  return somme\n    ", "user": "userdId_13", "attemptID": 2668, "exercise": "3030dc079e6607c253e89e8ef4784b74", "exercise_name": "sommeNPremiersEntiersPairs", "embeddingX": "27.908813", "embeddingY": "-10.62692"},{"extension": "py", "date": "2020-04-07 23:45:53", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  ok=True\n  i=0\n  while i<len(phrase)//2:\n    if phrase[i]==\" \" and phrase[-i]==\" \":\n      i+=1\n    elif phrase[i]==phrase[-i-1]:\n      ok=True\n      i+=1\n    else:\n      ok=False\n      i+=1\n  if phrase==\"\":\n    ok=True\n  return ok", "user": "userdId_13", "attemptID": 2669, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "28.867832", "embeddingY": "34.551086"},{"extension": "py", "date": "2020-04-09 08:56:15", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n    cpt=0\n    reste=nombre%10\n    while reste!=0:\n      reste=reste%10\n      if reste==chiffre:\n        cpt+=1\n    if cpt==0:\n      cpt=1\n    return cpt\n    ", "user": "userdId_11", "attemptID": 2670, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "11.33262", "embeddingY": "10.943285"},{"extension": "py", "date": "2020-03-06 00:37:25", "correct": "0", "upload": "def moyenne(liste):\n  res=0\n  cpt=0\n  if len(liste)==0:\n    moyenne=0\n  else:\n     for i in liste:\n       res=res+i\n       cpt=cpt+1\n  moyenne=res/cpt\n  return moyenne", "user": "userdId_14", "attemptID": 2671, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "1.0218109", "embeddingY": "-8.487063"},{"extension": "py", "date": "2020-04-05 10:05:21", "correct": "1", "upload": "def motPalindrome(mot):\n  res=True\n  i=0\n  while i<int(len(mot)/2) and res:\n    if mot[i]!=mot[-1-i]:\n      res=False\n    i+=1\n  return res", "user": "userdId_4", "attemptID": 2672, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "24.942747", "embeddingY": "40.527676"},{"extension": "py", "date": "2020-04-12 06:11:20", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=False\n  c=[]\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n    if c==liste:\n      res=True\n  return res", "user": "userdId_8", "attemptID": 2673, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-70.89445", "embeddingY": "28.43484"},{"extension": "py", "date": "2020-04-06 02:43:39", "correct": "1", "upload": "def compteChiffre(chiffre,nombre):\n  res = 0\n  if nombre == 0 and chiffre == 0 :\n    res = 1\n  while nombre != 0 :\n    if nombre%10 == chiffre :\n      res = res + 1\n    nombre = nombre//10  \n  return res", "user": "userdId_17", "attemptID": 2674, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "21.608627", "embeddingY": "10.024075"},{"extension": "py", "date": "2020-04-10 06:35:12", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n    cpt=0\n    for val in nombre:\n      if val==chiffre:\n        cpt+=1\n    return cpt\n  ", "user": "userdId_11", "attemptID": 2675, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-36.832237", "embeddingY": "-13.148722"},{"extension": "py", "date": "2020-03-17 05:23:17", "correct": "0", "upload": "def permutationChaine(s):\n  res=''\n  for i in range(0,len(s)-1,2):\n    res=res+s[i+1]+s[i]\n    if len(s)%2!=0:\n      res=res+s(-1)\n    return res\n    ", "user": "userdId_9", "attemptID": 2676, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-38.704823", "embeddingY": "-59.87157"},{"extension": "py", "date": "2020-03-31 05:34:42", "correct": "0", "upload": "def nbChiffres(nombre):\n  res=0\n  nb=nombre\n  cpt=1\n  while nb%10!=0:\n    cpt=cpt+1\n    nb=nb//10\n  return cpt\n    \n    ", "user": "userdId_28", "attemptID": 2677, "exercise": "3dcf332c003a1f3bf15df22ee17884a3", "exercise_name": "nbChiffres", "embeddingX": "0.55883056", "embeddingY": "17.29618"},{"extension": "py", "date": "2020-03-31 06:39:35", "correct": "0", "upload": "def doubleChiffre(nombre):\n  res=False\n  trouve=False\n  prec=0\n  while nombre!=0 and trouve==False:\n    com1=nombre%10\n    nombre=nombre//10\n    if com1==prec:\n      res=True\n    prec=com1  \n  return res", "user": "userdId_13", "attemptID": 2678, "exercise": "c83ea6acd3e9f6f5543e87d515e8a44a", "exercise_name": "doubleChiffre", "embeddingX": "11.181569", "embeddingY": "19.045984"},{"extension": "py", "date": "2020-03-03 05:02:22", "correct": "1", "upload": "def somme(liste):\n  res= 0\n  for i in range(len(liste)):\n    res= res + liste[i]\n  return res\n  ", "user": "userdId_7", "attemptID": 2679, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-43.54725", "embeddingY": "-36.507896"},{"extension": "py", "date": "2020-06-02 23:03:03", "correct": "1", "upload": "def premiereOccurrenceLettre(lettre,mot):\n  for i in range(len(mot)):\n    if mot[i]==lettre:\n      return i\n  ", "user": "userdId_12", "attemptID": 2680, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-17.974842", "embeddingY": "-45.385315"},{"extension": "py", "date": "2020-03-17 05:41:06", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  res=''\n  if debut+longueur>len(s):\n    res=debut+longueur\n  else:\n    if debut+longueur<len(s):\n      fin=debut=longueur\n  for i in range(debut,fin): \n      res=res+s[i]\n  return res", "user": "userdId_25", "attemptID": 2681, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-75.039856", "embeddingY": "21.04426"},{"extension": "py", "date": "2020-03-31 04:23:29", "correct": "0", "upload": "def indiceOccurence(n,x,l):\n  res=None\n  i=0\n  cpt=0\n  while i<len(l) and cpt!=n:\n      if l[i]==x:\n        cpt+=1\n      i+=1\n  if cpt==n:\n    res=i-1\n  return res\n    ", "user": "userdId_16", "attemptID": 2682, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-9.848969", "embeddingY": "75.47879"},{"extension": "py", "date": "2020-04-10 00:57:15", "correct": "0", "upload": "def suiteAriGeo(liste):\n  i=0\n  while i<len(liste)-1:\n    a=liste[1]-liste[0]\n    b=liste[i+1]-liste[i]*a\n    if liste[0]!=0:\n      a=liste[1]/liste[0]\n      if liste[i+1]==liste[i]*a:\n          b=0\n    if liste[i+1]==liste[i]+b:\n      a=1\n    i=i+1\n  i=0\n  ok=True\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  if liste[i]==0 and liste[i+1]==0:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=a*liste[i]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 2683, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "33.117455", "embeddingY": "81.20472"},{"extension": "py", "date": "2020-03-16 23:39:34", "correct": "1", "upload": "def qualifJO(sexe,record,nbvictoires,champion):\n  res=False\n  if sexe=='M':\n    if record<12 and nbvictoires>=3 or champion==True:\n      res=True  \n  else:\n    if record<15 and nbvictoires>=3 or champion==True:\n      res=True\n  return res", "user": "userdId_12", "attemptID": 2684, "exercise": "891e7b0ed5fbddb755edc84d479bc1ef", "exercise_name": "qualifJO", "embeddingX": "65.38519", "embeddingY": "-11.631764"},{"extension": "py", "date": "2020-03-03 06:17:05", "correct": "0", "upload": "def nbVoyelles(mot):\n  res=0\n  for c in mot:\n    if c in \"aeiouy\":\n      res=res+1\n    else:\n      res=0\n  return res", "user": "userdId_35", "attemptID": 2685, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "14.830768", "embeddingY": "-24.141203"},{"extension": "py", "date": "2020-03-31 03:48:28", "correct": "0", "upload": "def fusion(liste1,liste2):\n  res=[]\n  i=0\n  j=0\n  while i<len(liste1) and j<len(liste2):\n    if liste1[i]<liste2[j]:\n      res.append(liste1[i])\n      i=i+1\n    else:\n      res.append(liste2[j])\n      j=j+1\n      while j<len(liste2):\n        res.append(liste2[j])\n        j=j+1\n      while i<len(liste1):\n          res.append(liste1[i])\n          i=i+1\n  return res", "user": "userdId_36", "attemptID": 2686, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-40.693504", "embeddingY": "46.454857"},{"extension": "py", "date": "2020-03-02 23:27:38", "correct": "0", "upload": "def bissextile(annee):\n  if annee%400 == 0 or (annee%4 == 0 and annee%100 != 0) :\n    res = True\n  else :\n    res = False\n    \n  return None", "user": "userdId_17", "attemptID": 2687, "exercise": "a7d37636649c0ada991520788deeb2d0", "exercise_name": "bissextile", "embeddingX": "48.751053", "embeddingY": "2.185342"},{"extension": "py", "date": "2020-04-06 22:15:32", "correct": "0", "upload": "def motPalindrome(mot):\n    if len(mot)==0:\n      res=True\n    else:\n      ok=True\n      i=0\n      while i<len(mot) and ok:\n        ok=mot[i]==mot[-1]\n        i+=1\n    return ok", "user": "userdId_11", "attemptID": 2688, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "33.832737", "embeddingY": "43.81072"},{"extension": "py", "date": "2020-06-02 07:17:20", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n\tres=False\n\tif debut2<=debut1>=fin2:\n\t\tres=True\n\tif debut2<=fin2>=fin1:\n\t\tres=True\n\treturn res", "user": "userdId_3", "attemptID": 2689, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "52.273556", "embeddingY": "-21.361908"},{"extension": "py", "date": "2020-04-07 23:44:37", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  i=0\n  c=True\n  while i<(len(phrase)/2) and c:\n    if phrase[i]!=' ' or phrase[i]!=',' or phrase[i]!=\"'\":\n\n      if phrase[i]==phrase[len(phrase)-i-1]:\n        c=True\n      else:\n        c=False\n    i=i+1\n  if c==True:\n    return True\n  else:\n    return False", "user": "userdId_19", "attemptID": 2690, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "26.825157", "embeddingY": "51.706806"},{"extension": "py", "date": "2020-04-07 03:54:24", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  j=0\n  ok=True\n  raison=None\n  if len(liste)>1:\n    while i<len(liste) and liste[0]!=0 and raison==None:\n      raison=liste[i+1]/liste[i]\n      i+=1\n    while j<len(liste)-1 and ok:\n      if liste[i+1]!=liste[i]*raison:\n        ok=False\n      i+=1\n  return ok", "user": "userdId_12", "attemptID": 2691, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "22.355013", "embeddingY": "70.14011"},{"extension": "py", "date": "2020-04-16 21:12:18", "correct": "1", "upload": "def meilleurClassementJoueur(scores,joueurs,nom):\n  i=0\n  while i<len(scores):\n    if nom==joueurs[i]:\n      return i+1\n    i=i+1\n  return -1\n    ", "user": "userdId_1", "attemptID": 2692, "exercise": "be6ce0a06c5d396190024c7c681da95d", "exercise_name": "meilleurClassementJoueur", "embeddingX": "-13.394304", "embeddingY": "66.77448"},{"extension": "py", "date": "2020-03-12 23:57:24", "correct": "0", "upload": "def qualifJO(sexe,record,nbvictoires,champion):\n  res = True\n  if sexe == 'M':\n    if record > 12 or nbvictoires < 3 :\n      res = False\n      if champion == True :\n        res = True\n  else :\n    if record > 15 or nbvictoires < 3 :\n      res = False\n      if champion == True :\n        res = True\n  return res", "user": "userdId_17", "attemptID": 2693, "exercise": "78ec7738f3a7f3553d4a5c653534c32d", "exercise_name": "qualifJO", "embeddingX": "65.118515", "embeddingY": "-14.310606"},{"extension": "py", "date": "2020-03-10 01:57:45", "correct": "0", "upload": "def ecart(liste):\n    if len(liste)==0:\n      res=None\n    else:\n      res=liste[0]\n      max=liste[i]\n      min=liste[i]\n      for i in range(1,len(liste)):\n        if liste[i]<res:\n          min=liste[i]\n        if liste[i]>res:\n          max=liste[i]\n          res=max-min\n    return res\n      \n      ", "user": "userdId_9", "attemptID": 2694, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "13.461908", "embeddingY": "-53.471214"},{"extension": "py", "date": "2020-03-05 23:42:25", "correct": "1", "upload": "def maximum(liste):\n  if len (liste)==0:\n    res=None\n  else:\n    res=liste[0]\n    for i in range (1,len(liste)):\n      if liste[i]>res:\n        res=liste[i]\n  return res", "user": "userdId_13", "attemptID": 2695, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "0.1191347", "embeddingY": "-60.594395"},{"extension": "py", "date": "2020-03-19 23:38:14", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  res=\"\"\n  if longueur>=len(s):\n    longueur=longueur-(longueur-len(s))\n  for i in range(debut,longueur):\n    res=res+s[i]\n  return res\n", "user": "userdId_13", "attemptID": 2696, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-74.74801", "embeddingY": "27.061956"},{"extension": "py", "date": "2020-03-17 06:18:05", "correct": "0", "upload": "def distribution(liste,n):\n  res=liste[0]*n+1\n  for elem in liste:\n    res[elem]+=1\n  return res", "user": "userdId_23", "attemptID": 2697, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-62.757072", "embeddingY": "-9.514821"},{"extension": "py", "date": "2020-03-06 00:18:58", "correct": "0", "upload": "def nbVoyelles(mot):\n  voyel=\"aeiouy\"\n  if len(mot)==0:\n    voy=None\n  else:\n    voy=0\n    for i in range(mot):\n      if voyel[i] == mot[i]:\n        voy=voy+1\n  return voy", "user": "userdId_13", "attemptID": 2698, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-0.3193485", "embeddingY": "-43.74096"},{"extension": "py", "date": "2020-03-31 04:13:49", "correct": "1", "upload": "def indiceOccurrence(n,x,l):\n  res=None\n  trouve=False\n  cpt=0\n  i=0\n  while i<len(l) and trouve==False:\n    if l[i]==x:\n      cpt=cpt+1\n    if cpt==n:\n      trouve=True\n      res=i\n    i=i+1\n  return res", "user": "userdId_7", "attemptID": 2699, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "0.585564", "embeddingY": "74.375084"},{"extension": "py", "date": "2020-03-07 00:01:02", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut1>=debut2 or fin1<=fin2:\n     if fin1>=debut2:\n      res=True\n  else:\n    res=False\n  return res", "user": "userdId_8", "attemptID": 2700, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "53.95241", "embeddingY": "-21.193283"},{"extension": "py", "date": "2020-03-05 10:43:49", "correct": "0", "upload": "from math import *\n\ndef polynome(a,b,c):\n  d=b**2-4*a*c\n  if d <0:\n    return \"pas de solution\"\n  elif d==0:\n    x1==-b/2*a and x2==-b/2*a\n    return x1 and x2\n  elif d>0:\n    s1==(-b-(sqrt(d)))/2*a\n    s2==(-b+(sqrt(d)))/2*a\n    return s1 and s2\n\n    polynome(1,-1,0)\n    polynome(2,-4,2)\n    polynome(3,-2,10)", "user": "userdId_1", "attemptID": 2701, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-53.391846", "embeddingY": "10.74423"},{"extension": "py", "date": "2020-03-22 23:57:23", "correct": "0", "upload": "def nombrePair(n):\n  res=0\n  for x in range(n):\n    if x%2==0:\n      res=True\n    else:\n      res=False\n  return res", "user": "userdId_8", "attemptID": 2702, "exercise": "3001254263845e9a478696f81a704d33", "exercise_name": "nombrePair", "embeddingX": "31.735794", "embeddingY": "-7.3680496"},{"extension": "py", "date": "2020-03-16 05:28:49", "correct": "0", "upload": "def nbSyllabes(mot):\n    cpt=0\n    v=\"aeiouy\"\n    if mot[0] in v:\n        cpt+=1\n    for i in range(1,len(mot)):\n        if mot[i] in v and mot[i-1] not in v:\n            cpt+=1\n    if mot.endswith('e'):\n        cpt-=1\n    if cpt==0:\n        cpt+=1\n    if cpt=='':\n      cpt=0\n    return cpt\n    ", "user": "userdId_18", "attemptID": 2703, "exercise": "1c86bec0f4df503e23db53994f3d2991", "exercise_name": "nbSyllabes", "embeddingX": "-24.040577", "embeddingY": "-71.68206"},{"extension": "py", "date": "2020-04-12 11:36:29", "correct": "0", "upload": "def phrasePalindrome(phrase):\n    if len(phrase)==0:\n      res=True\n    else:\n      res=True\n      i=0\n      x=''\n      while i<len(phrase)//2 and res:\n        if phrase[i]!=phrase[-(i+1)]:\n          res=False\n        i+=1\n        if phrase[i]!=x or phrase[-(i+1)]!=x:\n          res=False\n          i+=1\n    return res", "user": "userdId_11", "attemptID": 2704, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "31.716677", "embeddingY": "31.212145"},{"extension": "py", "date": "2020-03-17 06:09:50", "correct": "0", "upload": "def distribution(liste,n):\n    res=[0]*n+1\n    for i in range(len(liste)):\n        if liste[i]==0:\n            res[0]=res[0]+1\n        elif liste[i]==1:\n            res[1]=res[1]+1\n        elif liste[i]==2:\n            res[2]=res[2]+1\n        elif liste[i]==3:\n            res[3]=res[3]+1\n    return res\n\n\n  \n  \n", "user": "userdId_28", "attemptID": 2705, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-57.23216", "embeddingY": "-5.7266693"},{"extension": "py", "date": "2020-04-10 07:01:04", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n    cpt=0\n    decomp=nombre%10\n    while decomp!=1:\n      decomp=decomp%10\n      if decomp==chiffre:\n        cpt+=1\n      else:\n        decomp=decomp%10\n    return cpt\n  ", "user": "userdId_11", "attemptID": 2706, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "11.306883", "embeddingY": "9.929495"},{"extension": "py", "date": "2020-03-12 08:31:04", "correct": "0", "upload": "def nombrePair(n):\n    res=0\n    if n in (0,2,4,6,8) :\n      res= True\n    else :\n      res= False\n    return res", "user": "userdId_24", "attemptID": 2707, "exercise": "3001254263845e9a478696f81a704d33", "exercise_name": "nombrePair", "embeddingX": "45.752735", "embeddingY": "-13.814502"},{"extension": "py", "date": "2020-03-31 05:56:32", "correct": "0", "upload": "def stockerChiffres(nombre):\n  res=[]\n  chiffre=0\n  nb=nombre\n  while nb:\n    chiffre=nb%10\n    res=res+[chiffre]\n    nb=nb//10\n  return res", "user": "userdId_7", "attemptID": 2708, "exercise": "49a87f644f84a443327fb4315b47f249", "exercise_name": "stockerChiffres", "embeddingX": "-1.7883449", "embeddingY": "14.987458"},{"extension": "py", "date": "2020-04-07 02:51:22", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n  trouve=False\n  i=0\n  cpt=0\n  while i<len(l) and not trouve:\n    if l[i]==x:\n      cpt+=1\n    if cpt==n:\n      trouve=True\n    i+=1\n  if trouve:\n    res=i-1\n  else:\n    res=None\n    return None", "user": "userdId_36", "attemptID": 2709, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-1.1683502", "embeddingY": "68.570694"},{"extension": "py", "date": "2020-06-02 22:56:16", "correct": "1", "upload": "def moyenne(liste):\n  if len(liste)!=0:\n    num=0\n    for elem in liste:\n  \t  num+=elem\n    res=num/len(liste)\n    return res\n    ", "user": "userdId_12", "attemptID": 2710, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-5.499486", "embeddingY": "-14.734314"},{"extension": "py", "date": "2020-03-06 00:51:07", "correct": "1", "upload": "def minimum(liste):\n    if len(liste)==0:\n        res=None\n    else:\n        res=liste[0]\n    for elem in liste:\n        if elem<res:\n          res=elem\n    return res", "user": "userdId_49", "attemptID": 2711, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "30.307589", "embeddingY": "-62.350388"},{"extension": "py", "date": "2020-03-08 21:23:30", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut1==debut2 or fin1==fin2:\n    return True\n  elif fin1>=debut2 and debut1<fin2:\n    return True\n  else:\n    return False", "user": "userdId_1", "attemptID": 2712, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "58.698994", "embeddingY": "-25.772095"},{"extension": "py", "date": "2020-03-07 00:54:57", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut1<debut2 and fin1>fin2:\n    res=False\n  elif fin1>=debut2:\n    res=True\n  return res", "user": "userdId_8", "attemptID": 2713, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "59.9994", "embeddingY": "-22.334436"},{"extension": "py", "date": "2020-03-12 21:50:17", "correct": "0", "upload": "def nbVoyelles(mot):\n  cpt=0\n  for i in range(len(mot)):\n    if mot[i] in 'aeiouy':\n     cpt=+1\n  return cpt", "user": "userdId_51", "attemptID": 2714, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-9.9106245", "embeddingY": "-55.38636"},{"extension": "py", "date": "2020-03-22 09:23:04", "correct": "0", "upload": "def moyenne(liste):\n  if liste==():\n    res=none\n  else:\n    x=0\n    for i in range(len(liste)):\n      x=x+liste[i]\n      res=x/len(liste)\n  return res", "user": "userdId_16", "attemptID": 2715, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-12.364938", "embeddingY": "-6.3013673"},{"extension": "py", "date": "2020-03-09 22:24:56", "correct": "0", "upload": "def jourNuit(heure):\n    res = \"\"\n    if heure>24 :\n        res = \"l'heure saisie est invalide\" \n    return res\n    \njourNuit(28)   ", "user": "userdId_44", "attemptID": 2716, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "65.46073", "embeddingY": "17.253849"},{"extension": "py", "date": "2020-04-06 03:59:23", "correct": "0", "upload": "def suiteGeo(liste):\n    if liste==[] or len(liste)==1:\n      ok=True\n    elif 0 in liste:\n      ok=False\n    else:\n      ok=True\n      i=1\n      while i<len(liste)+1 and ok:\n        cte=liste[i]/liste[i-1]\n        if liste[0]*cte**i!=liste[i+1]:\n          ok=False\n        ctePrec=cteAct\n        i+=1\n    return ok", "user": "userdId_18", "attemptID": 2717, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "39.772762", "embeddingY": "66.614975"},{"extension": "py", "date": "2020-03-17 05:53:20", "correct": "0", "upload": "def distribution(liste,n):\n    cpt=0*n+1\n    for elem in liste:\n        cpt[elem]=cpt[elem]+1\n    return cpt", "user": "userdId_39", "attemptID": 2718, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-60.87798", "embeddingY": "-9.79341"},{"extension": "py", "date": "2020-05-04 21:32:27", "correct": "1", "upload": "def semestreValide(ue1,ue2):\n  if ue1<10:\n    res=False\n  if ue1>=10 and ue2>=10 or ue1>=10 and ue2<10 and ue1+ue2>=20:\n    res=True\n  return res", "user": "userdId_26", "attemptID": 2719, "exercise": "70ae7ad6cf504e0fa8cedebd8e8a825f", "exercise_name": "semestreValide", "embeddingX": "67.83372", "embeddingY": "-1.5829338"},{"extension": "py", "date": "2020-03-13 00:35:55", "correct": "1", "upload": "def sommeNbPairs(liste):\n\tres=0\n\tfor nb in liste:\n\t\tif nb%2==0:\n\t\t\tres=res+nb\n\treturn res", "user": "userdId_19", "attemptID": 2720, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "29.766354", "embeddingY": "-19.168789"},{"extension": "py", "date": "2020-02-29 06:35:34", "correct": "1", "upload": "def nombrePair(n):\n    if(n==0 or n%2==00):\n      res=True\n    else:\n      res=False\n    return res", "user": "userdId_18", "attemptID": 2721, "exercise": "864911b08708fc8bae69311a8ddd3da7", "exercise_name": "nombrePair", "embeddingX": "44.5686", "embeddingY": "-0.10345846"},{"extension": "py", "date": "2020-04-07 04:23:50", "correct": "0", "upload": "def suiteAri(liste):\n  i=0\n  res=True\n  while i<len(liste)-1 and res==True:\n    r=liste[1]-liste[0]\n    if liste[i+1]-liste[i]==r:\n      res=True\n    else:\n      res=False\n  return res", "user": "userdId_26", "attemptID": 2722, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "13.801596", "embeddingY": "59.970104"},{"extension": "py", "date": "2020-03-03 05:12:58", "correct": "0", "upload": "def maximum(liste):\n  if (liste)==0:\n    res=None\n  else:\n    for i in range(1,len(liste)):\n      if liste[i] > res:\n        res=res\n  return res", "user": "userdId_30", "attemptID": 2723, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "5.5557313", "embeddingY": "-62.97931"},{"extension": "py", "date": "2020-04-03 00:34:42", "correct": "1", "upload": "def nombreSymetrique(nombre):\n  ok=True\n  l=[]\n  chiffre=0\n  i=0\n  j=-1\n  while nombre!=0 :\n    chiffre=nombre%10\n    l.append(chiffre)\n    nombre=nombre//10\n  \n  while i<(len(l)/2) and ok :\n    if l[i]!=l[j] :\n      ok=False\n    i+=1\n    j-=1\n  \n  return ok", "user": "userdId_15", "attemptID": 2724, "exercise": "fae4d6a34289cf5bf06f9d6d17e8547e", "exercise_name": "nombreSymetrique", "embeddingX": "31.6235", "embeddingY": "47.742474"},{"extension": "py", "date": "2020-03-31 06:44:35", "correct": "0", "upload": "def doubleChiffre(nombre):\n  res=False\n  trouve=False\n  prec=0\n  while nombre!=0 and trouve==False:\n    com1=nombre%10\n    nombre=nombre//10\n    if com1==prec:\n      res=True\n      trouve=True\n    prec=com1  \n  return res", "user": "userdId_13", "attemptID": 2725, "exercise": "c83ea6acd3e9f6f5543e87d515e8a44a", "exercise_name": "doubleChiffre", "embeddingX": "11.188686", "embeddingY": "19.066227"},{"extension": "py", "date": "2020-03-03 06:00:22", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if fin1>=debut2:\n    res=True\n  else:\n    if fin2>=debut1:\n      res=True\n    else:\n      res=False\n  return res", "user": "userdId_30", "attemptID": 2726, "exercise": "6fd66bb2393fbf3809f1c6d04f3831f7", "exercise_name": "rendezVous", "embeddingX": "52.324333", "embeddingY": "-19.26413"},{"extension": "py", "date": "2020-03-12 23:43:19", "correct": "0", "upload": "def jourNuit(heure):\n  if heure > 24 or heure < 0 :\n    res = \"l'heure saisie est invalide\"\n  else :\n    if heure < 5 :\n      res = \"on est la nuit \"\n    elif heure < 12 :\n      res = \"on est le matin \"\n    elif heure < 17 :\n      res = \"on est l'apr\u00e8s-midi \"\n    elif heure < 21 :\n      res = \"on est le soir \"\n    else :\n      res = \"on est la nuit\"\n    if heure >= 6 and heure < 18 :\n      res = res + \"et il fait jour\"\n    else :\n      res = res + \"et il fait nuit\"\n  return res", "user": "userdId_17", "attemptID": 2727, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "79.460884", "embeddingY": "19.986221"},{"extension": "py", "date": "2020-03-14 03:21:03", "correct": "0", "upload": "def moyenne(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=0\n    cpt=0\n    for i in len(liste):\n      res=res+i\n      cpt=cpt+1\n  res=res%cpt\n  return res", "user": "userdId_14", "attemptID": 2728, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "1.7343004", "embeddingY": "-44.437637"},{"extension": "py", "date": "2020-04-20 21:06:21", "correct": "0", "upload": "def nombresPremiers(n):\n  res = []\n  cpt = 2\n  isPrime = True\n  while len(res)<n:\n    while not isPrime:\n      cpt+=1\n      isPrime=True\n      for i in range(2,cpt):\n        if cpt%i==0:\n          isPrime=False\n    res.append(cpt)\n  return res", "user": "userdId_6", "attemptID": 2729, "exercise": "7eda5a2bd3cdd0a510f96448337384d9", "exercise_name": "nombresPremiers", "embeddingX": "-0.6747956", "embeddingY": "42.89343"},{"extension": "py", "date": "2020-03-01 11:09:44", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if fin1 <= debut2 :\n    return True\n  else:\n    return False\n  \n  ## -----------------------------------------\n  ## Dans le cas d'un seul return on utilisera\n  ##def rendezVous(debut1,fin1,debut2,fin2):\n  ## if fin1 <= debut2 :\n  ##  res = True\n  ## else:\n  ##  res = False\n  ## return res", "user": "userdId_42", "attemptID": 2730, "exercise": "6fd66bb2393fbf3809f1c6d04f3831f7", "exercise_name": "rendezVous", "embeddingX": "56.782475", "embeddingY": "-24.694872"},{"extension": "py", "date": "2020-04-16 23:09:24", "correct": "1", "upload": "def listeDecroissante(scores):\n  res = True\n  i = 0\n  while i < len(scores)-1 and res :\n    if scores[i] < scores[i+1] :\n      res = False\n    i = i + 1\n  return res ", "user": "userdId_17", "attemptID": 2731, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "18.224224", "embeddingY": "50.48151"},{"extension": "py", "date": "2020-03-06 00:38:43", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n  if len(mot)==0:\n    pos=0\n  else:\n    for elem in mot:\n      if lettre==elem:\n        pos=elem\n      else:\n        pos=None\n        \n  return pos", "user": "userdId_15", "attemptID": 2732, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-12.969425", "embeddingY": "-32.961876"},{"extension": "py", "date": "2020-03-27 06:09:32", "correct": "0", "upload": "def compare(chaine1,chaine2):\n  i=0\n  while res==0 and i<len(chaine1) or i<len(chaine2):\n    if chaine1[i]<chaine2[i]:\n      res=-1\n    elif chaine1[i]>chaine2[i]:\n      res=1\n    else:\n      res=0\n  return res", "user": "userdId_12", "attemptID": 2733, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-11.892977", "embeddingY": "42.429306"},{"extension": "py", "date": "2020-03-09 22:39:13", "correct": "0", "upload": "def nbVoyelles(mot):\n  res=0\n  for lettre in mot:\n    if elem in 'aeiouy':\n      res=res+1\n  return res", "user": "userdId_12", "attemptID": 2734, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "15.603437", "embeddingY": "-28.364931"},{"extension": "py", "date": "2020-03-31 00:07:59", "correct": "1", "upload": "def indiceOccurrence(n,x,l):\n  cpt=0\n  trouve=False\n  i=0\n  res=None\n  while i<len(l) and trouve==False:\n    if l[i]==x:\n      cpt=cpt+1\n    if cpt==n:\n      trouve=True\n    i=i+1\n    if trouve==True:\n      res=i-1\n    else:\n      res=None\n  return res\n\n      \n    ", "user": "userdId_28", "attemptID": 2735, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-0.35813853", "embeddingY": "74.59406"},{"extension": "py", "date": "2020-03-05 22:08:18", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None \n  else:\n    res=0\n    res=liste[0]\n    for i in range(1,len(liste)):\n      res=len(liste)>res\n      res=len(liste)  \n  return res", "user": "userdId_25", "attemptID": 2736, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "1.2869673", "embeddingY": "-59.297726"},{"extension": "py", "date": "2020-03-03 00:06:45", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if jour1 < jour2 and mois1 <= mois2 and annee1 <= annee2:\n    res= -1\n  elif jour1 == jour2 and mois1 == mois2 and annee1 == annee2:\n    res= 0\n  else:\n    res= 1\n    \n    return res\n  \n  assert compareDates(10, 1, 2020, 14, 2, 2020)== -1 , \"pb avec compareDates(10, 1, 2020, 14, 2, 2020)\"\n  assert compareDates(14, 2, 2020, 11, 2, 2020)== 1 , \"pb avec compareDates(14, 2, 2020, 11, 2, 2020)\"\n  assert compareDates(10, 1, 2020, 10, 1, 2020)== 0 , \"pb avec compareDates(10, 1, 2020, 10, 1, 2020)\"", "user": "userdId_7", "attemptID": 2737, "exercise": "af7c1467ef9f7684d9ff58734067ae98", "exercise_name": "compareDates", "embeddingX": "79.62714", "embeddingY": "-23.182571"},{"extension": "py", "date": "2020-03-09 08:39:18", "correct": "0", "upload": "def nbVoyelles(mot):\n    cpt=0\n    for i in range(len(mot)):\n      if mot[i]==voyelle:\n        cpt=cpt+1\n    return cpt\n  ", "user": "userdId_11", "attemptID": 2738, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-4.2075577", "embeddingY": "-42.256676"},{"extension": "py", "date": "2020-03-05 23:57:07", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    res=0\n  else:\n    for elem in mot:\n      res=0\n      if elem==o:\n        res=res+1\n  return res     ", "user": "userdId_14", "attemptID": 2739, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "0.4311412", "embeddingY": "-37.34072"},{"extension": "py", "date": "2020-04-05 12:05:52", "correct": "0", "upload": "def suiteGeo(liste):\n    if liste==[] or len(liste)==1:\n      ok=True\n    elif 0 in liste:\n      ok=False\n    else:\n      ok=True\n      ctePrec=liste[1]/liste[0]\n      cteAct=None\n      i=2\n      while i<len(liste) and ok:\n        cteAct=liste[i]/liste[i-1]\n        if cteAct!=ctePrec:\n          ok=False\n        ctePrec=cteAct\n        i+=1\n    return ok", "user": "userdId_18", "attemptID": 2740, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "41.507133", "embeddingY": "63.51622"},{"extension": "py", "date": "2020-03-10 04:28:52", "correct": "0", "upload": "def sommeNPremiersEntiersPairs(n):\n  res=0\n  for i in range(len(1,n+1)):\n    if liste[i]:\n      res=res+liste[i]\n  return res", "user": "userdId_8", "attemptID": 2741, "exercise": "3030dc079e6607c253e89e8ef4784b74", "exercise_name": "sommeNPremiersEntiersPairs", "embeddingX": "-39.51196", "embeddingY": "-26.352785"},{"extension": "py", "date": "2020-03-27 06:31:03", "correct": "0", "upload": "def compare (chaine1,chaine2):\n  i = 0\n  if len(chaine1) > len(chaine2):\n    res =  1\n  elif len(chaine1) < len(chaine2): \n    res = -1\n  else :\n    res = 0\n  while i < len(chaine1) and res == 0 :\n    if chaine1[i] < chaine2[i]:\n      res = -1\n    elif chaine1[i] > chaine2[i]:\n      res = 1\n    else :\n      res = 0\n    i = i + 1\n\n  return res ", "user": "userdId_17", "attemptID": 2742, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-22.25321", "embeddingY": "61.30676"},{"extension": "py", "date": "2020-03-20 00:21:08", "correct": "0", "upload": "def reconstruireChainePartielle(s,n):\n  res=\"\"\n  for i in range (0,len(s),n):\n    res=res+mot[i]\n  return res", "user": "userdId_1", "attemptID": 2743, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-58.732117", "embeddingY": "-39.234787"},{"extension": "py", "date": "2020-04-21 04:07:43", "correct": "0", "upload": "def listeMatchs(liste):\n  lmatchs=[]\n  i=0\n  j=i+1\n  while i<len(liste)-1:\n    lmatchs+=[(liste[i],liste[i+1])]\n    j+=1\n    if j>=len(listes):\n      i+=1\n      j=i+1\n  return lmatchs", "user": "userdId_18", "attemptID": 2744, "exercise": "7425aa41502a932ef1011f8e2538120a", "exercise_name": "listeMatchs", "embeddingX": "-22.79924", "embeddingY": "25.00367"},{"extension": "py", "date": "2020-03-12 23:51:30", "correct": "0", "upload": "def jourNuit(heure):\n  res=[]\n  if heure==5:\n      res='on est le matin et il fait nuit'\n  if heure<0:\n    res=\"l'heure saisie est invalide\"\n  if heure>24:\n    res=\"l'heure saisie est invalide\"\n  if 6<=heure<=18:\n    if 5<heure<=12:\n      res=\"on est le matin et il fait jour\"\n    elif 12<=heure<17:\n      res=\"on est l'apr\u00e8s-midi et il fait jour\"\n    elif 17<=heure<=18:\n      res=\"on est le soir et il fait jour\"\n  if 1<=heure<=5 or 19<=heure<=24:\n    if 1<=heure<=4:\n      res=\"on est la nuit et il fait nuit\"\n    elif 21<=heure<=24:\n      res=\"on est la nuit et il fait nuit\"\n    elif 19<=heure<=20:\n      res=\"on est le soir et il fait nuit\"\n  return res", "user": "userdId_13", "attemptID": 2745, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "68.6464", "embeddingY": "22.74048"},{"extension": "py", "date": "2020-03-12 06:37:52", "correct": "0", "upload": "def maximum(liste):\n  res=liste[0]\n  if res<liste:\n     liste=max\n  return res   ", "user": "userdId_20", "attemptID": 2746, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "38.123444", "embeddingY": "-60.380096"},{"extension": "py", "date": "2020-03-08 22:13:13", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1==annee2 and mois1==mois2 and jour1==jour2:\n    return 0\n  elif annee1<=annee2 and mois1<=mois2 and jour1<jour2:\n    return -1\n  elif annee1<annee2 and mois1>=mois2 and jour1>=jour2:\n    return -1\n  elif annee1<annee2 and mois1>=mois2 and jour1<=jour2:\n    return -1\n  elif annee1<=annee2 and mois1<mois2 and jour1>jour2:\n    return -1\n  else:\n    return 1", "user": "userdId_1", "attemptID": 2747, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "83.47858", "embeddingY": "-13.871084"},{"extension": "py", "date": "2020-04-29 01:50:18", "correct": "0", "upload": "def listeMatchs(liste):\n    if len(liste)>0:\n      res=[]\n      for i in range(len(liste)-1):\n        for j in range(i+1,len(liste)):\n          res.append([(liste[i],liste[j])])\n    return res\n        ", "user": "userdId_11", "attemptID": 2748, "exercise": "7425aa41502a932ef1011f8e2538120a", "exercise_name": "listeMatchs", "embeddingX": "-36.411343", "embeddingY": "-29.375109"},{"extension": "py", "date": "2020-03-31 06:24:03", "correct": "1", "upload": "def listeSymetrique(l):\n    trouve=True\n    i=0\n    j=-1\n    while i<len(l) and j>=-len(l) and trouve!=False:\n      if l[i]!=l[j]:\n        trouve=False\n      i=i+1\n      j=j-1\n    return trouve\n  \nl=[1,2,3,1]\n \n", "user": "userdId_28", "attemptID": 2749, "exercise": "8eb27aeda471a467e2223abebeca886e", "exercise_name": "listeSymetrique", "embeddingX": "22.950983", "embeddingY": "63.29707"},{"extension": "py", "date": "2020-03-27 05:33:43", "correct": "0", "upload": "def quatrePlus100(liste):\n  i=0\n  while i>len(liste):\n    res.append(liste[4])\n    i=i+1\n    return res", "user": "userdId_20", "attemptID": 2750, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-19.019762", "embeddingY": "31.852713"},{"extension": "py", "date": "2020-03-17 20:35:30", "correct": "1", "upload": "def reconstruireChainePartielle(s,n):\n  res=''\n  for i in range(0,len(s),n):\n    res=res+s[i]\n  return res", "user": "userdId_12", "attemptID": 2751, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-60.74578", "embeddingY": "-40.442837"},{"extension": "py", "date": "2020-03-06 00:04:26", "correct": "0", "upload": "def nbVoyelles(mot):\n  cpt=0\n  for i in range (len(a,e,i,o,u,y)):\n    cpt=cpt+1\n  return cpt", "user": "userdId_1", "attemptID": 2752, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-32.477726", "embeddingY": "-18.671034"},{"extension": "py", "date": "2020-04-08 00:40:07", "correct": "0", "upload": "def suiteAriGeo(liste):\n  a=0\n  b=0\n  if len(liste)>1:\n    suite=liste[0]\n    i=1\n    res=True\n  while i<len(liste)-1 and res==True:\n    suite=a*suite+b\n    if suite==liste[i]:\n      res=True\n    else:\n      res=False\n    i+=1\n  return res", "user": "userdId_34", "attemptID": 2753, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "11.312502", "embeddingY": "64.25644"},{"extension": "py", "date": "2020-04-07 01:34:07", "correct": "1", "upload": "def prononcable(mot):\n  voy=('a','e','i','o','u','y')\n  con=('b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','z')\n  cptcon=0\n  cptvoy=0\n  res=True\n  for i in range(len(mot)-1):\n    if mot[i] in voy and mot[i+1] in voy:\n      cptvoy+=1\n    if mot[i] in con and mot[i+1] in con:\n      cptcon+=1\n    if cptcon>2 or cptvoy>2:\n      res=False\n  return res", "user": "userdId_16", "attemptID": 2754, "exercise": "6318b210c201fba050d60bc0913cb7ef", "exercise_name": "prononcable", "embeddingX": "-16.03135", "embeddingY": "-71.727295"},{"extension": "py", "date": "2020-04-05 07:01:22", "correct": "1", "upload": "def prononcable(mot):\n    ok=True\n    voy=0\n    csn=0\n    i=0\n    while i<len(mot) and voy<4 and csn<4:\n      if mot[i] in 'aeiouy':\n        voy+=1\n        csn=0\n      else:\n        csn+=1\n        voy=0\n      i+=1\n    if voy>3 or csn>3:\n      ok=False\n    return ok", "user": "userdId_18", "attemptID": 2755, "exercise": "6318b210c201fba050d60bc0913cb7ef", "exercise_name": "prononcable", "embeddingX": "12.25925", "embeddingY": "39.368042"},{"extension": "py", "date": "2020-04-11 04:35:43", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  res=0\n  res.append(nombre%10)\n  for i in range(len(nombre)):\n    if nombre[i]==chiffre:\n      res+=1\n  return res", "user": "userdId_8", "attemptID": 2756, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-39.692596", "embeddingY": "-8.969802"},{"extension": "py", "date": "2020-03-06 00:53:05", "correct": "0", "upload": "def ecart(liste):\n\tif len(liste) == 0:\n\t\tres = None\n\telse:\n\t\tma = liste[0]\n\t\tmi = liste[0]\n\t\tfor i in range(len(liste)):\n\t\t\tif liste[i] > ma and liste[i] > mi:\n\t\t\t\tma = liste[i]\n\t\t\telse:\n\t\t\t\tmi = liste[i]\n\tres = ma - mi\n\treturn res", "user": "userdId_29", "attemptID": 2757, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "-3.3292277", "embeddingY": "-84.94673"},{"extension": "py", "date": "2020-03-17 05:28:03", "correct": "0", "upload": "def permutationChaine(s):\n  res=\"\"\n  for i in range(0,len(s)-1,2):\n    res=res+s[1+i]+s[i]\n  return res", "user": "userdId_8", "attemptID": 2758, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-44.234215", "embeddingY": "-50.25018"},{"extension": "py", "date": "2020-03-05 21:50:11", "correct": "1", "upload": "def nbOccurrencesLettre(lettre,mot):\n  n = 0\n  for i in mot:\n    if lettre == i:\n      n+=1\n  return n", "user": "userdId_6", "attemptID": 2759, "exercise": "2864c9e5861229d2ff32570f6bc944fb", "exercise_name": "nbOccurrencesLettre", "embeddingX": "-10.165933", "embeddingY": "-27.556559"},{"extension": "py", "date": "2020-04-05 03:42:53", "correct": "0", "upload": "def moyenne(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    s=0\n    for elem in liste:\n      s+=elem\n    res=s//len(liste)\n  return res", "user": "userdId_26", "attemptID": 2760, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-8.352578", "embeddingY": "-15.903231"},{"extension": "py", "date": "2020-03-06 00:41:16", "correct": "0", "upload": "def ecart(liste):\n  if len(liste)==0:\n    return None\n  max=liste[0]\n  for i in range (1,len(liste)):\n    if liste[i]>max:\n        max=liste[i]\n  min=liste[0]\n  for i in range(1,len(liste)):\n    if liste[i]<min:\n        min=liste[i]\n    res=max-min\n  return res\n  \n    ", "user": "userdId_1", "attemptID": 2761, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "14.2713175", "embeddingY": "-84.36367"},{"extension": "py", "date": "2020-04-07 03:21:43", "correct": "1", "upload": "def suiteAriGeo(liste):\n  if len(liste)<3:\n    ok=True\n  else:\n    ok=True\n    ecart1=liste[1]-liste[0]\n    ecart2=liste[2]-liste[1]\n    if ecart1==0 or ecart2==0:\n      a=1\n    else:\n      a=ecart2/ecart1\n    b=-a*liste[0]+liste[1]\n    if a*liste[2]+b!=liste[3]:\n      ok=False\n  return ok", "user": "userdId_18", "attemptID": 2762, "exercise": "4c9665daf155b115fe13218141fa1aff", "exercise_name": "suiteAriGeo", "embeddingX": "36.99727", "embeddingY": "76.05361"},{"extension": "py", "date": "2020-04-05 12:11:52", "correct": "1", "upload": "def motPalindrome(mot):\n  ok=True\n  i=0\n  j=len(mot)-1\n  while i<j and ok:\n    if mot[i]!=mot[j]:\n      ok=False\n    i+=1\n    j-=1\n  return ok", "user": "userdId_34", "attemptID": 2763, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "36.36965", "embeddingY": "46.69147"},{"extension": "py", "date": "2020-03-05 22:13:34", "correct": "0", "upload": "def maximum(liste):\n    max=liste[0]\n    for i in range(0,len(liste)):\n      if liste[i] > max:\n        max = liste[i]\n    return max", "user": "userdId_29", "attemptID": 2764, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "10.248159", "embeddingY": "-72.28744"},{"extension": "py", "date": "2020-03-31 05:17:36", "correct": "0", "upload": "def listeSymetrique(l):\n  i=0\n  ok=True\n  while i<len(l) and ok:\n    if l[i]!=l[i-1]:\n      ok=False\n    i=i+1\n  return ok\n", "user": "userdId_9", "attemptID": 2765, "exercise": "8eb27aeda471a467e2223abebeca886e", "exercise_name": "listeSymetrique", "embeddingX": "23.269121", "embeddingY": "50.891068"},{"extension": "py", "date": "2020-03-03 06:10:28", "correct": "1", "upload": "def minimum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=liste[0]\n    for i in range(len(liste)):\n      if liste[i]<res:\n        res=liste[i]\n  return res", "user": "userdId_8", "attemptID": 2766, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "27.394918", "embeddingY": "-68.38424"},{"extension": "py", "date": "2020-03-17 21:08:47", "correct": "0", "upload": "def permutationListe(liste,permutation):\n  res=[0]*len(liste)\n  for elem,valeur in permutation,liste:\n      res[elem]=valeur\n  return res", "user": "userdId_12", "attemptID": 2767, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-52.006557", "embeddingY": "-24.070951"},{"extension": "py", "date": "2020-04-12 05:40:12", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=False\n  c=[]\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n    c=range(0,len(liste)-1,1)+d\n  return c", "user": "userdId_8", "attemptID": 2768, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-66.22467", "embeddingY": "20.797014"},{"extension": "py", "date": "2020-03-31 02:56:54", "correct": "1", "upload": "def fusion(liste1,liste2):\n  i=0\n  j=0\n  res=[]\n  while i<len(liste1) and j<len(liste2):\n    if liste1[i]>liste2[j]:\n      res.append(liste2[j])\n      j = j + 1\n    else :\n      res.append(liste1[i])\n      i = i + 1\n  while j<len(liste2):\n    res.append(liste2[j])\n    j = j + 1\n  while i < len(liste1):\n    res.append(liste1[i])\n    i = i + 1\n  return res", "user": "userdId_52", "attemptID": 2769, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-35.11266", "embeddingY": "50.13678"},{"extension": "py", "date": "2020-04-07 04:19:17", "correct": "1", "upload": "def compteChiffre(c,n):\n  cpt=0\n  if c==n:\n    cpt+=1\n  else:\n    while n!=0:\n      if c==n%10:\n        cpt+=1\n      n=n//10\n  return cpt", "user": "userdId_30", "attemptID": 2770, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "22.93214", "embeddingY": "10.430802"},{"extension": "py", "date": "2020-03-02 09:14:35", "correct": "0", "upload": "def qualifJO(sexe,record,nbvictoires,champion):\n    res = False\n    if sexe == \"F\" or sexe == \"M\" and record > 0 and nbvictoires > 0 and type(champion) == bool:\n\t    if sexe == \"F\" and record < 15 or sexe == \"M\" and record < 12 and nbvictoires >= 3 or champion == True:\n         \tres = True\n        \n    \n    return res", "user": "userdId_4", "attemptID": 2771, "exercise": "78ec7738f3a7f3553d4a5c653534c32d", "exercise_name": "qualifJO", "embeddingX": "66.97948", "embeddingY": "-11.456374"},{"extension": "py", "date": "2020-03-17 06:13:14", "correct": "0", "upload": "def distribution(liste,n):\n  res=[0]*n+1\n  for i in range(len(liste)):\n                 res=liste[i]+1\n  return res", "user": "userdId_23", "attemptID": 2772, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-57.220695", "embeddingY": "-5.6999073"},{"extension": "py", "date": "2020-04-14 05:58:34", "correct": "0", "upload": "def indiceInsertion(sc,scores):\n  res=0\n  i=0\n  while i<len(joueurs):\n    if sc>scores[i]:\n      res=i\n    i=i+1\n  return res\n", "user": "userdId_28", "attemptID": 2773, "exercise": "f8a820b2bd54d18d36716e3d703858f7", "exercise_name": "indiceInsertion", "embeddingX": "-19.243061", "embeddingY": "59.198925"},{"extension": "py", "date": "2020-03-27 05:35:14", "correct": "0", "upload": "def quatrePlus100(liste):\n  i=0\n  while i>len(liste):\n    res.append(liste[i])\n    i=i+1\n  if i<4:\n    res=i\n  return res", "user": "userdId_20", "attemptID": 2774, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-20.762571", "embeddingY": "35.501404"},{"extension": "py", "date": "2020-04-03 00:17:38", "correct": "0", "upload": "def nbChiffres(nombre):\n  cpt=0\n  while nombre!=0:\n    nombre=nombre//10 \n    cpt+=1\n  if nombre==0:\n    cpt=1\n  return cpt", "user": "userdId_34", "attemptID": 2775, "exercise": "3dcf332c003a1f3bf15df22ee17884a3", "exercise_name": "nbChiffres", "embeddingX": "32.29292", "embeddingY": "13.836266"},{"extension": "py", "date": "2020-04-11 00:37:55", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  c=True\n  if len(liste)==0:\n    c=True\n  elif 0 in liste:\n    c=False\n  else:\n    a=liste[1]/liste[0]\n    while i<(len(liste)-1) and c:\n      if liste[i+1]/liste[i]!=a:\n        c=False\n      i=i+1\n  return c", "user": "userdId_19", "attemptID": 2776, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "28.096006", "embeddingY": "63.18507"},{"extension": "py", "date": "2020-03-05 21:34:51", "correct": "1", "upload": "def somme(liste):\n  res=0\n  for i in range (len(liste)):\n  \tres=res+liste[i]\n  return res", "user": "userdId_14", "attemptID": 2777, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-43.38411", "embeddingY": "-36.89837"},{"extension": "py", "date": "2020-03-01 12:14:06", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if fin1 >= debut2 or fin2 >= debut1 :\n    res = True\n  else:\n    res = False\n  return res", "user": "userdId_42", "attemptID": 2778, "exercise": "6fd66bb2393fbf3809f1c6d04f3831f7", "exercise_name": "rendezVous", "embeddingX": "54.565704", "embeddingY": "-19.961716"},{"extension": "py", "date": "2020-03-13 00:50:44", "correct": "0", "upload": "def doubleLettre(mot):\n  res=False\n  \n  for c in mot:\n    if c==c:\n      res=True\n      \n  return res", "user": "userdId_38", "attemptID": 2779, "exercise": "00da9cf1fa2b468d915724499459ed8f", "exercise_name": "doubleLettre", "embeddingX": "18.201555", "embeddingY": "-8.622699"},{"extension": "py", "date": "2020-03-31 04:22:10", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n  cpt=0\n  trouve=0\n  i=0  \n  while i<len(l) and trouve==False:\n    if l[i]==x:\n      cpt=cpt+1\n    if cpt==n:\n      trouve=True\n  i=i+1    \n#post-traitement\n  if trouve!=n:\n    i=-1\n  return i    ", "user": "userdId_39", "attemptID": 2780, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-1.3026308", "embeddingY": "76.17011"},{"extension": "py", "date": "2020-03-10 04:14:13", "correct": "0", "upload": "def nbSyllabes(mot):\n  if mot=='':\n    res=0\n  else:\n    res=0\n    Voyelles=['a','e','i','o','u','y']\n    ch=\"\"\n    for i in range(1,len(mot)):\n      if mot[i-1] not in Voyelles and mot[i] in Voyelles:\n        res=res+1\n      else:\n        ch=mot[i]\n    if mot[0] in Voyelles :\n      res=res+1\n    elif mot[-1] not in Voyelles:\n      res=res-1\n  return res\n    ", "user": "userdId_15", "attemptID": 2781, "exercise": "1c86bec0f4df503e23db53994f3d2991", "exercise_name": "nbSyllabes", "embeddingX": "-19.674421", "embeddingY": "-72.69597"},{"extension": "py", "date": "2020-03-02 07:33:05", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1<=annee2 and mois1<annee2 and jour1<jour2:\n    return -1\n  elif annee1==annee2 and mois1==mois2 and jour1==jour2:\n    return 0\n  elif annee1>=annee2 and mois1>mois2 and jour1>=jour2:\n    return 1\n  \ncompareDates(10,1,2020,14,2,2020)\ncompareDates(14,2,2020,11,2,2020)\ncompareDates(10,1,2020,10,1,2020)", "user": "userdId_1", "attemptID": 2782, "exercise": "af7c1467ef9f7684d9ff58734067ae98", "exercise_name": "compareDates", "embeddingX": "82.29327", "embeddingY": "-12.940638"},{"extension": "py", "date": "2020-04-11 07:21:09", "correct": "0", "upload": "def sousChaine(s1,s2):\n  res=True\n  i=0\n  j=0\n  while i<len(s1)==j<len(s2) and res:\n    res=True\n  else:\n    res=False\n  return res", "user": "userdId_8", "attemptID": 2783, "exercise": "4bdf8c9c5d020593e1771e4d3ae1ae0d", "exercise_name": "sousChaine", "embeddingX": "-4.5697665", "embeddingY": "49.093765"},{"extension": "py", "date": "2020-03-23 02:13:00", "correct": "0", "upload": "def sommeNbPairs(liste):\n    res=0\n    for i in range (len(liste)):\n      if i%2==0 :\n        res= res+[i]\n    return res", "user": "userdId_24", "attemptID": 2784, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "1.2228993", "embeddingY": "-47.547867"},{"extension": "py", "date": "2020-04-14 03:42:41", "correct": "0", "upload": "def listeDecroissante(scores):\n  i=0\n  res=True\n  while i < len(scores)-1:\n    if scores[i] < scores[i+1]:\n      res=False\n  i=i+1\n  return res", "user": "userdId_31", "attemptID": 2785, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "18.205444", "embeddingY": "45.731213"},{"extension": "py", "date": "2020-03-30 22:06:05", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n  i=0\n  j=0\n  res = -1\n  while j <3 and i < len(l):\n    if l[i] == x:\n      j+=1\n      if j == 3:\n        res = l[i+1]\n    i+=1\n  return(res)", "user": "userdId_4", "attemptID": 2786, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-7.4206166", "embeddingY": "71.5036"},{"extension": "py", "date": "2020-04-19 07:55:31", "correct": "1", "upload": "def indiceOccurrence(n,x,l):\n    cpt=0\n    res=0\n    i=0\n    while i<len(l) and cpt<n:\n      if l[i]==x:\n        cpt+=1\n      i+=1\n    if cpt==n:\n      res=i-1\n    else:\n      res=None\n    return res\n        ", "user": "userdId_11", "attemptID": 2787, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-8.627318", "embeddingY": "74.09717"},{"extension": "py", "date": "2020-03-24 04:55:39", "correct": "0", "upload": "def quatrePlus100(liste):\n  i=0\n  res=[]\n  while i<len(liste):\n    if liste[i]>100:\n      res.append(liste[i])\n      i=i+1\n  return res\n", "user": "userdId_13", "attemptID": 2788, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-24.777962", "embeddingY": "33.141388"},{"extension": "py", "date": "2020-04-07 22:22:08", "correct": "0", "upload": "def suiteGeo(liste):\n  ok=True\n  i=0\n  while i<len(liste)-1 and ok:\n    if liste[i]==0:\n      ok=False\n    if liste[i]!=0:\n      q=liste[0]*liste[1]\n    if liste[i]!=0:\n      if liste[i+1]/liste[i]!=q and q!=0:\n        ok=False\n    i=i+1\n  return ok\n    ", "user": "userdId_1", "attemptID": 2789, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "29.061625", "embeddingY": "67.99756"},{"extension": "py", "date": "2020-03-06 00:22:02", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n  if len(mot)==0:\n    pos=None\n  else:\n    for i in range(len(mot)):\n      if lettre==mot[i]:\n        pos=mot[i]\n      else:\n        pos=None\n        \n  return pos", "user": "userdId_15", "attemptID": 2790, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-17.913717", "embeddingY": "-40.3856"},{"extension": "py", "date": "2020-03-03 05:52:33", "correct": "1", "upload": "def minimum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=liste[0]\n    for i in range(len(liste)):\n      if liste[i]<res:\n        res=liste[i]\n  return res", "user": "userdId_30", "attemptID": 2791, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "27.075932", "embeddingY": "-68.85575"},{"extension": "py", "date": "2020-04-06 22:54:09", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  ok=True\n  i=0\n  while i<len(liste) and ok:\n    if liste[i]==a*liste[i+1]+b:\n      ok=False\n    prec=ok\n    i+=1\n  return ok", "user": "userdId_12", "attemptID": 2792, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-79.180695", "embeddingY": "21.081211"},{"extension": "py", "date": "2020-03-27 06:05:17", "correct": "1", "upload": "def quatrePlus100(liste):\n  res=[]\n  i=0\n  while i<len(liste)and len(res)<4:\n    if liste[i]>100:\n      res=res+[liste[i]]\n    i=i+1\n  return res", "user": "userdId_20", "attemptID": 2793, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-26.97912", "embeddingY": "42.99899"},{"extension": "py", "date": "2020-04-16 23:43:36", "correct": "0", "upload": "def indiceInsertion(sc,scores):\n  i=0\n  while i<len(scores)+1:\n    if sc>scores[i]:\n      return i\n    i=i+1", "user": "userdId_1", "attemptID": 2794, "exercise": "f8a820b2bd54d18d36716e3d703858f7", "exercise_name": "indiceInsertion", "embeddingX": "-16.39917", "embeddingY": "60.67512"},{"extension": "py", "date": "2020-05-11 00:27:10", "correct": "0", "upload": "def listeDecroissante(scores):\n  ok=True\n  i=0\n  if len(scores)>1:\n    while i<len(scores)-1:\n      if scores[i]>scores[i+1]:\n        ok=False\n      i=i+1\n  return ok", "user": "userdId_12", "attemptID": 2795, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "16.023727", "embeddingY": "49.189697"},{"extension": "py", "date": "2020-04-16 21:18:57", "correct": "0", "upload": "def indiceInsertion(sc,scores):\n  i=0\n  cpt=0\n  while i<len(scores):\n    if sc<score[i]:\n      cpt=cpt+1\n    i=i+1\n  return cpt", "user": "userdId_1", "attemptID": 2796, "exercise": "f8a820b2bd54d18d36716e3d703858f7", "exercise_name": "indiceInsertion", "embeddingX": "-12.860372", "embeddingY": "54.930218"},{"extension": "py", "date": "2020-03-31 05:41:11", "correct": "0", "upload": "def nbChiffres(nombre):\n  res=0\n  nb=nombre\n  cpt=1\n  while nb!=0:\n    cpt=cpt+1\n    nb=nb//10\n  return cpt\n    \n    ", "user": "userdId_28", "attemptID": 2797, "exercise": "3dcf332c003a1f3bf15df22ee17884a3", "exercise_name": "nbChiffres", "embeddingX": "0.43558657", "embeddingY": "18.202446"},{"extension": "py", "date": "2020-03-19 06:06:29", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if jour1<jour2 or mois1<mois2 or annee1<annee2:\n    res=-1\n  elif jour1==None or mois1==None or annee1==None or jour2==None or mois2==None or annee2==None:\n    res=None\n  elif jour1==jour2 and mois1==mois2 and annee1==annee2:\n      res=0\n  else:\n    res=1\n  return res", "user": "userdId_34", "attemptID": 2798, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "76.59652", "embeddingY": "-24.74202"},{"extension": "py", "date": "2020-03-03 05:39:41", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    for i in range(len(liste)):\n      res==range[0]\n      if liste[i]>res:\n        res=liste[i]\n  return res", "user": "userdId_8", "attemptID": 2799, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "4.8918214", "embeddingY": "-51.929977"},{"extension": "py", "date": "2020-03-17 06:37:08", "correct": "0", "upload": "def qualifJO(sexe,record,nbvictoires,champion):\n  if nbvictoires>3:\n    res=True\n  else:\n    res=False\n  return res\n  ", "user": "userdId_9", "attemptID": 2800, "exercise": "891e7b0ed5fbddb755edc84d479bc1ef", "exercise_name": "qualifJO", "embeddingX": "52.473164", "embeddingY": "-11.600759"},{"extension": "py", "date": "2020-03-17 00:05:37", "correct": "0", "upload": "def doubleLettre(mot):\n  if mot=='':\n    res=None\n  else:\n    prec=''\n    res=False\n    for lettre in mot:\n      if lettre==prec:\n        res=True\n      prec=lettre\n  return res", "user": "userdId_12", "attemptID": 2801, "exercise": "00da9cf1fa2b468d915724499459ed8f", "exercise_name": "doubleLettre", "embeddingX": "17.43737", "embeddingY": "-6.2084036"},{"extension": "py", "date": "2020-04-16 21:49:02", "correct": "1", "upload": "def rendezVous(d1,f1,d2,f2):\n  if d1>f2 or d2>f1:\n    res=False\n  else:\n    res=True\n  return res", "user": "userdId_21", "attemptID": 2802, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "64.175865", "embeddingY": "-22.368347"},{"extension": "py", "date": "2020-03-12 21:59:42", "correct": "1", "upload": "def minimum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=liste[0]\n    for i in range(len(liste)):\n      if liste[i]<res:\n        res=liste[i]\n  return res", "user": "userdId_20", "attemptID": 2803, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "27.132727", "embeddingY": "-68.971924"},{"extension": "py", "date": "2020-03-12 23:46:41", "correct": "0", "upload": "def jourNuit(heure):\n  res=0\n  if heure<0:\n    res=\"l'heure saisie est invalide\"\n  if heure>24:\n    res=\"l'heure saisie est invalide\"\n  if 6<=heure<=18:\n    if 5<=heure<=12:\n      res=\"on est le matin et il fait jour\"\n    if 12<=heure<=17:\n      res=\"on est l'apr\u00e8s-midi et il fait jour\"\n    if 17<=heure<=18:\n      res=\"on est le soir et il fait jour\"\n  if 1<=heure<=5 or 19<=heure<=24:\n    if 1<=heure<=4:\n      res=\"on est la nuit et il fait nuit\"\n    if 21<=heure<=24:\n      res=\"on est la nuit et il fait nuit\"\n    if 19<=heure<=20:\n      res=\"on est le soir et il fait nuit\"\n    return res", "user": "userdId_13", "attemptID": 2804, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "69.47429", "embeddingY": "23.895002"},{"extension": "py", "date": "2020-04-07 20:40:25", "correct": "0", "upload": "def suiteAri(liste):\n  res=0\n  for i in liste:\n    if liste[i]%liste[i+1]==0:\n      res=False\n    elif liste[i]%liste[i+1]!=liste[i+1]%liste[i+2]:\n      res=False\n    else:\n      res=True\n  return res", "user": "userdId_3", "attemptID": 2805, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "34.039085", "embeddingY": "-24.118782"},{"extension": "py", "date": "2020-03-23 00:41:21", "correct": "0", "upload": "def reconstruireChainePartielle(s,n):\n    res = \"\"\n    for i in s :\n      res = res + s[i]\n    return res", "user": "userdId_24", "attemptID": 2806, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-34.758682", "embeddingY": "2.0987484"},{"extension": "py", "date": "2020-03-05 23:40:48", "correct": "0", "upload": "def maximum(liste):\n  res='None'\n  for elem in liste :\n   res=res>elem\n  return res", "user": "userdId_24", "attemptID": 2807, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "33.38356", "embeddingY": "-42.50471"},{"extension": "py", "date": "2020-04-06 12:00:38", "correct": "1", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=True\n  i=1\n  while i<len(liste):\n    if liste[i]!=a*liste[i-1]+b:\n      res=False\n    i+=1\n  return res\ndef suiteAri(liste):\n  i=1\n  a=1\n  b=0\n  while i<len(liste):\n    if liste[i]!=liste[i-1]:\n      b=liste[i]-liste[i-1]\n    i+=1 \n  return verifSuiteAriGeo(liste,a,b)", "user": "userdId_27", "attemptID": 2808, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "15.117705", "embeddingY": "78.25199"},{"extension": "py", "date": "2020-04-13 22:29:01", "correct": "0", "upload": "def indiceInsertion(sc,scores):\n  i=0\n  c=True\n  res=0\n  while i<len(scores) and c:\n    if sc>=scores[i]:\n      res=i+1\n      c=False\n    i+=1\n  return res", "user": "userdId_19", "attemptID": 2809, "exercise": "f8a820b2bd54d18d36716e3d703858f7", "exercise_name": "indiceInsertion", "embeddingX": "-1.0268419", "embeddingY": "56.00202"},{"extension": "py", "date": "2020-03-06 00:05:25", "correct": "0", "upload": "def maximum(liste):\n  res=max\n  for i in range (len(liste)):\n    res=i<res\n  return res", "user": "userdId_45", "attemptID": 2810, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "32.148693", "embeddingY": "-71.781624"},{"extension": "py", "date": "2020-03-06 00:04:34", "correct": "1", "upload": "def moyenne(liste):\n  if len (liste)==0:\n    res=None\n  else:\n    res=0\n    cpt=0\n    for elem in liste:\n      res= res+elem\n      cpt= cpt+1\n    res= res/cpt\n  return res\n", "user": "userdId_13", "attemptID": 2811, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-3.7743225", "embeddingY": "-8.719541"},{"extension": "py", "date": "2020-04-07 20:09:41", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  chiffre=int(chiffre)\n  nombre=int(nombre)\n  for i in range(nombre):\n    if nombre[i]==chiffre:\n      cpt=cpt+1\n    i=i+1\n  return cpt", "user": "userdId_3", "attemptID": 2812, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-24.673014", "embeddingY": "-28.39881"},{"extension": "py", "date": "2020-03-14 22:03:57", "correct": "0", "upload": "def maximum(liste):\n  maxi = liste[0]\n  for i in liste:\n    if i >= maxi:\n    \tmaxi = i\n  return maxi", "user": "userdId_21", "attemptID": 2813, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "35.90466", "embeddingY": "-47.51369"},{"extension": "py", "date": "2020-04-03 00:29:02", "correct": "0", "upload": "def doubleChiffre(nombre):\n  res=False\n  compare=nombre%10\n  while nombre!=0 and res:\n    nombre=nombre//10\n    if nombre%10==compare:\n      res=True\n  return res", "user": "userdId_12", "attemptID": 2814, "exercise": "c83ea6acd3e9f6f5543e87d515e8a44a", "exercise_name": "doubleChiffre", "embeddingX": "13.89172", "embeddingY": "19.995651"},{"extension": "py", "date": "2020-03-09 22:05:51", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n    if mot == '':\n      return None\n    elif lettre not in mot:\n      return None\n    else:\n      listeoccur = []\n      cpt = 0\n      for c in mot:\n        if c == lettre:\n          listeoccur.append(cpt)\n          cpt += 1\n      return listeoccur[0]", "user": "userdId_42", "attemptID": 2815, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-9.692842", "embeddingY": "-23.832178"},{"extension": "py", "date": "2020-03-27 05:38:47", "correct": "0", "upload": "def quatrePlus100(liste):\n  i=0\n  res=[]\n  while i<len(liste) and i<=4:\n    if liste[i]>100:\n      res=res+l[i]\n    i=i+1\n  return res", "user": "userdId_1", "attemptID": 2816, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-28.835533", "embeddingY": "40.623573"},{"extension": "py", "date": "2020-03-05 23:44:16", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    return 0\n  else:\n    for elem in mot:\n      res=0\n      if elem==a or e or i or o or u or y:\n        res=res+1\n        return res", "user": "userdId_14", "attemptID": 2817, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "0.51411396", "embeddingY": "-33.978874"},{"extension": "py", "date": "2020-04-13 21:49:48", "correct": "1", "upload": "def verifSuiteAriGeo(liste,a,b):\n  ok=True\n  n=1\n  while n<len(liste) and ok:\n    if liste[n]!=liste[n-1]*a+b:\n      ok=False\n    n+=1\n  return ok\ndef suiteAri(liste):\n  res=True\n  if len(liste)>1:\n    r=liste[1]-liste[0]\n    res=verifSuiteAriGeo(liste,1,r)\n  return res\n", "user": "userdId_8", "attemptID": 2818, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "14.8967495", "embeddingY": "75.0062"},{"extension": "py", "date": "2020-03-09 09:07:38", "correct": "0", "upload": "def nbVoyelles(mot):\n    cpt=0\n    for lettre in mot:\n      if lettre==\"a\":\n        cpt=cpt+1\n      if lettre==\"e\":\n        cpt=cpt+1\n      if lettre==\"i\":\n        cpt=cpt=1\n      if lettre==\"o\":\n        cpt=cpt+1\n      if lettre==\"u\":\n        cpt=cpt+1\n      if lettre==\"y\":\n        cpt=cpt+1\n    return cpt\n  ", "user": "userdId_11", "attemptID": 2819, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "1.963596", "embeddingY": "-24.144775"},{"extension": "py", "date": "2020-04-12 06:18:29", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=False\n  c=[]\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n  return c", "user": "userdId_8", "attemptID": 2820, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-77.71992", "embeddingY": "11.67922"},{"extension": "py", "date": "2020-03-03 05:43:13", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    for i in range(len(liste)):\n      res=range[0]\n      if liste[i]>res:\n        res=liste[i]\n  return res", "user": "userdId_8", "attemptID": 2821, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "4.9731317", "embeddingY": "-51.090954"},{"extension": "py", "date": "2020-03-03 04:57:24", "correct": "0", "upload": "def somme(liste):\n  res= 0\n  for elem in liste:\n    res= res + elem\n    return res\n  ", "user": "userdId_7", "attemptID": 2822, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-25.970781", "embeddingY": "4.976301"},{"extension": "py", "date": "2020-04-06 04:04:08", "correct": "0", "upload": "def suiteAri(liste):\n    if liste==[]:\n      ok1=True\n    else:\n      ok1=True\n      ctePrec=liste[1]-liste[0]\n      cteAct=None\n      i=2\n      while i<len(liste) and ok:\n        cteAct=liste[i]-liste[i-1]\n        if cteAct!=ctePrec:\n          ok1=False\n        ctePrec=cteAct\n        i+=1\n    return ok1\n\ndef suiteGeo(liste):\n    if liste==[] or len(liste)==1:\n      ok2=True\n    elif 0 in liste:\n      ok2=False\n    else:\n      ok2=True\n      i=1\n      while i<len(liste) and ok:\n        cte=liste[i]/liste[i-1]\n        if liste[0]*cte**i!=liste[i]:\n          ok2=False\n        i+=1\n    return ok2\n\ndef suiteAriGeo(liste):\n    return ok1 or ok2", "user": "userdId_18", "attemptID": 2823, "exercise": "4c9665daf155b115fe13218141fa1aff", "exercise_name": "suiteAriGeo", "embeddingX": "-38.3261", "embeddingY": "15.250354"},{"extension": "py", "date": "2020-03-10 21:40:12", "correct": "0", "upload": "def ecart(liste):\n  res1=liste[0]\n  yres2=liste[0]\n  for i in range(1,len(liste)):\n    if liste[i]>res1:\n      res1=liste[i]\n    if liste[i]<res2:\n      res2=liste[i]\n  res=res1-res2\n  return res", "user": "userdId_14", "attemptID": 2824, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "0.8120631", "embeddingY": "-81.23044"},{"extension": "py", "date": "2020-03-02 23:40:14", "correct": "1", "upload": "def compareDates(jour1, mois1, annee1, jour2, mois2, annee2):\n    if (jour1 < jour2) or (mois1 < mois2) or (annee1 < annee2) and not (\n            (jour1 > jour2) or (mois1 > mois2) or (annee1 > annee2)):\n        res = -1\n    if (jour1 == jour2) and (mois1 == mois2) and (annee1 == annee2):\n        res = 0\n    if (jour1 > jour2) or (mois1 > mois2) or (annee1 > annee2) and not (\n            (jour1 < jour2) or (mois1 < mois2) or (annee1 < annee2)):\n        res = 1\n    return res", "user": "userdId_42", "attemptID": 2825, "exercise": "af7c1467ef9f7684d9ff58734067ae98", "exercise_name": "compareDates", "embeddingX": "81.55337", "embeddingY": "-26.09041"},{"extension": "py", "date": "2020-04-12 04:45:20", "correct": "1", "upload": "def elemAri(n,u0,r):\n    res=0\n    x=0\n    while x<=n:\n      res=u0+n*r\n      x+=1\n    return res\n      ", "user": "userdId_11", "attemptID": 2826, "exercise": "f239498950e974e29e01472749d9a09d", "exercise_name": "elemAri", "embeddingX": "-9.311888", "embeddingY": "23.625675"},{"extension": "py", "date": "2020-04-03 00:41:56", "correct": "0", "upload": "def stockerChiffres(nombres):\n  res=[]\n  if nombres==0:\n    res=0\n  while nombres!=0:\n    res.append(nombres%10)\n    nombres=nombres//10\n  return res", "user": "userdId_5", "attemptID": 2827, "exercise": "49a87f644f84a443327fb4315b47f249", "exercise_name": "stockerChiffres", "embeddingX": "41.991947", "embeddingY": "14.615387"},{"extension": "py", "date": "2020-04-07 03:02:47", "correct": "1", "upload": "def motPalindrome(mot):\n  i=0\n  ok=True\n  while i<len(mot) and ok:\n    if mot[i]!=mot[-i-1]:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_50", "attemptID": 2828, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "23.274506", "embeddingY": "50.892895"},{"extension": "py", "date": "2020-04-14 03:31:50", "correct": "0", "upload": "def listeDecroissante(scores):\n  res=[]\n  for i in range(len(scores)-1):\n    if scores[i]>scores[i+1]:\n      res=True\n    else:\n      res=False\n  return res", "user": "userdId_7", "attemptID": 2829, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "-7.858363", "embeddingY": "-69.347694"},{"extension": "py", "date": "2020-03-05 22:12:02", "correct": "1", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None \n  else:\n    res=0\n    res=liste[0]\n    for i in range(1,len(liste)):\n      if liste [i]>res:\n        res=liste [i]\n  return res", "user": "userdId_25", "attemptID": 2830, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-0.37531888", "embeddingY": "-60.19153"},{"extension": "py", "date": "2020-03-17 05:13:11", "correct": "1", "upload": "def sousChaine(s,debut,longueur):\n    res=''\n    fin=debut+longueur\n    if debut+longueur>len(s):\n        fin=len(s)\n    for i in range(debut,fin):\n        res=res+s[i]\n    return res", "user": "userdId_39", "attemptID": 2831, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-71.7805", "embeddingY": "23.78248"},{"extension": "py", "date": "2020-03-05 23:49:43", "correct": "0", "upload": "def somme(liste):\n  res=0\n  for elem in list:\n   res=res+elem\n  return res", "user": "userdId_20", "attemptID": 2832, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-31.728962", "embeddingY": "-13.032492"},{"extension": "py", "date": "2020-04-07 23:39:54", "correct": "0", "upload": "def phrasePalindrome(m):\n  res=True\n  i=0\n  j=0\n  while i<len(m) and j<len(m) and res:\n    if m[i]==' ':\n      i+=1\n    elif m[-1-j]==' ':\n      j+=1\n    if i==j:\n      if m[i]!=m[-1-j]:\n        res=False\n    i+=1\n    j+=1\n  return res", "user": "userdId_30", "attemptID": 2833, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "35.95498", "embeddingY": "38.384808"},{"extension": "py", "date": "2020-04-07 20:11:57", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  chiffre=str(chiffre)\n  nombre=str(nombre)\n  for i in nombre:\n    if nombre[i]==chiffre:\n      cpt=cpt+1\n    i=i+1\n  return cpt", "user": "userdId_3", "attemptID": 2834, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-25.112871", "embeddingY": "-27.6153"},{"extension": "py", "date": "2020-03-23 00:38:05", "correct": "0", "upload": "def reconstruireChainePartielle(s,n):\n    res = \"\"\n    for i in s (s,n) :\n      res = res + i\n    return res", "user": "userdId_24", "attemptID": 2835, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-44.968033", "embeddingY": "-20.136595"},{"extension": "py", "date": "2020-04-07 03:59:31", "correct": "0", "upload": "def elemAri(n,u0,r):\n  cpt=0\n  i=0\n  while i<n:\n    cpt=u0+r\n  i=i+1\n  return cpt\n  ", "user": "userdId_1", "attemptID": 2836, "exercise": "f239498950e974e29e01472749d9a09d", "exercise_name": "elemAri", "embeddingX": "-8.000682", "embeddingY": "26.096664"},{"extension": "py", "date": "2020-03-09 22:26:58", "correct": "1", "upload": "def sommeNPremiersEntiers(n):\n   res=0\n   for x in range(1,n+1):\n      res+=x\n   return res\n", "user": "userdId_55", "attemptID": 2837, "exercise": "c315a540cf0bfb0182dc114c6f0eafd1", "exercise_name": "sommeNPremiersEntiers", "embeddingX": "-18.915442", "embeddingY": "16.122505"},{"extension": "py", "date": "2020-04-05 11:08:54", "correct": "1", "upload": "def suiteGeo(liste):\n    res = True\n    if len(liste)>1:\n        if  liste[0] == 0:\n            q = 0\n        else:\n            q = liste[1]/liste[0]    \n        res=verifSuiteAriGeo(liste,q,0)\n\n    return res\n  \n  \n  \n  \ndef verifSuiteAriGeo(liste,a,b):\n    res=True\n    n=1\n    while n<len(liste) and res:\n        if liste[n]!=liste[n-1]*a+b:\n            res=False\n        n+=1\n    return res", "user": "userdId_4", "attemptID": 2838, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "-3.469356", "embeddingY": "-72.35514"},{"extension": "py", "date": "2020-04-08 04:31:18", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  for i in range(len(nombre)):\n    if nombre[i]==chiffre:\n      cpt+=1\n  return cpt\n\n", "user": "userdId_11", "attemptID": 2839, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-36.028107", "embeddingY": "-17.497267"},{"extension": "py", "date": "2020-03-04 00:17:16", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1<=annee2 and mois1<=mois2 and jour1<jour2:\n    return -1\n  elif annee1==annee2 and mois1==mois2 and jour1==jour2:\n    return 0\n  elif annee1<annee2 and mois1<=mois2 and jour1<=jour2:\n    return -1\n  elif annee1<=annee2 and mois1<mois2 and jour1<=jour2:\n    return -1\n  else :\n    return 1", "user": "userdId_32", "attemptID": 2840, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "87.402", "embeddingY": "-13.216975"},{"extension": "py", "date": "2020-03-20 00:55:06", "correct": "0", "upload": "def distribution(liste,n):\n  res=[]\n  for elem in liste:\n    if elem==res[i]:\n      res[i]=res[i]+1\n  \n  return res", "user": "userdId_15", "attemptID": 2841, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-52.54635", "embeddingY": "-18.281992"},{"extension": "py", "date": "2020-03-10 21:39:43", "correct": "0", "upload": "def ecart(liste):\n  res1=liste[0]\n  yres2=liste[0]\n  for i in range(1,len(liste)):\n    if liste[i]>x:\n      x=liste[i]\n    if liste[i]<y:\n      y=liste[i]\n  res=x-y\n  return res", "user": "userdId_14", "attemptID": 2842, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "0.7988466", "embeddingY": "-80.93704"},{"extension": "py", "date": "2020-03-27 06:31:30", "correct": "0", "upload": "def compare (chaine1,chaine2):\n  i = 0\n  if len(chaine1) < len(chaine2):\n    res =  1\n  elif len(chaine1) > len(chaine2): \n    res = -1\n  else :\n    res = 0\n  while i < len(chaine1) and res == 0 :\n    if chaine1[i] < chaine2[i]:\n      res = -1\n    elif chaine1[i] > chaine2[i]:\n      res = 1\n    else :\n      res = 0\n    i = i + 1\n\n  return res ", "user": "userdId_17", "attemptID": 2843, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-22.402866", "embeddingY": "61.288517"},{"extension": "py", "date": "2020-03-23 00:46:53", "correct": "0", "upload": "def reconstruireChainePartielle(s,n):\n    res = \"\"\n    for i in range (len(s),n) :\n      res = res + [i]\n    return res", "user": "userdId_24", "attemptID": 2844, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-61.048717", "embeddingY": "-35.91093"},{"extension": "py", "date": "2020-04-11 07:02:04", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  res=True\n  i=0\n  while i<len(phrase) and res:\n    if phrase[i]==' ':\n      i-=1\n    if phrase[i]!=phrase[-i-1]:\n      res=False\n    i+=1\n  return res", "user": "userdId_8", "attemptID": 2845, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "29.716637", "embeddingY": "41.10572"},{"extension": "py", "date": "2020-04-08 02:28:18", "correct": "1", "upload": "def nextConway(s):\n    cpt = 0\n    valeur = s[0]\n    res = \"\"\n    for elem in s:\n        if elem == valeur:\n            cpt = cpt + 1\n        else:\n            res = res + str(cpt) + str(valeur)\n            cpt = 1\n            valeur = elem\n    res = res + str(cpt) + str(valeur)\n    return res", "user": "userdId_17", "attemptID": 2846, "exercise": "a580c32690609356dae4401b3c89a3b8", "exercise_name": "nextConway", "embeddingX": "8.105995", "embeddingY": "-5.5152206"},{"extension": "py", "date": "2020-04-11 06:16:27", "correct": "1", "upload": "def phrasePalindrome(phrase):\n  i=0\n  j=-1\n  ok=True\n  while i<len(phrase)/2 and j<len(phrase)/2 and ok:\n    if phrase[i]==' ':\n      i+=1\n    if phrase[j]==' ':\n      j-=1\n    elif phrase[i]!=phrase[j]:\n      ok=False\n    i+=1\n    j-=1\n  return ok", "user": "userdId_16", "attemptID": 2847, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "36.615074", "embeddingY": "40.784374"},{"extension": "py", "date": "2020-03-10 04:27:01", "correct": "0", "upload": "def sommeNPremiersEntiersPairs(n):\n    res=0\n    for x in range(1,n+1,2):\n        if x%2==0:\n            res=res+x\n    return None", "user": "userdId_39", "attemptID": 2848, "exercise": "3030dc079e6607c253e89e8ef4784b74", "exercise_name": "sommeNPremiersEntiersPairs", "embeddingX": "31.211895", "embeddingY": "-11.739525"},{"extension": "py", "date": "2020-04-06 07:17:33", "correct": "1", "upload": "def elemGeo(n,u0,q):\n  res=u0\n  for i in range(n):\n    res=res*q\n  return res", "user": "userdId_27", "attemptID": 2849, "exercise": "d7c83a7fb9b49e28804e55955ad06968", "exercise_name": "elemGeo", "embeddingX": "-27.32968", "embeddingY": "15.788732"},{"extension": "py", "date": "2020-03-27 07:36:14", "correct": "0", "upload": "def quatrePlus100(liste):\n    res=0\n    i=0\n    while i!=4 :\n      if len(liste)>100 :\n        res=res+liste[i]\n        i=i+1\n    return res", "user": "userdId_24", "attemptID": 2850, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "0.23788588", "embeddingY": "-51.08012"},{"extension": "py", "date": "2020-03-13 00:50:00", "correct": "1", "upload": "def sommeNPremiersEntiersPairs(n):\n  res=0\n  for i in range(2,n+1,2):\n      res=res+i\n    \n  return res", "user": "userdId_38", "attemptID": 2851, "exercise": "3030dc079e6607c253e89e8ef4784b74", "exercise_name": "sommeNPremiersEntiersPairs", "embeddingX": "-18.472513", "embeddingY": "12.488935"},{"extension": "py", "date": "2020-03-17 05:14:00", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  res=''\n  if debut+longueur>len(s):\n    fin=len(s)\n  else:\n    fin=debut+longueur\n  for i in range(debut,Fin):\n    res=res+s[i]\n  return res", "user": "userdId_23", "attemptID": 2852, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-76.1531", "embeddingY": "17.63255"},{"extension": "py", "date": "2020-03-02 02:56:37", "correct": "1", "upload": "def semestreValide(ue1,ue2):\n  if ue1>=10 :\n    a=ue1+ue2\n    if a>=20 :\n      res=True\n  else :\n    res=False\n  return res", "user": "userdId_15", "attemptID": 2853, "exercise": "70ae7ad6cf504e0fa8cedebd8e8a825f", "exercise_name": "semestreValide", "embeddingX": "65.42272", "embeddingY": "-0.0039933138"},{"extension": "py", "date": "2020-03-23 21:55:55", "correct": "0", "upload": "def sommeNPremiersEntiers(n):\n    if n<0:\n      res=0\n    else:\n      for elem in range(n+1):\n        res=res+elem\n    return res\n        ", "user": "userdId_11", "attemptID": 2854, "exercise": "c315a540cf0bfb0182dc114c6f0eafd1", "exercise_name": "sommeNPremiersEntiers", "embeddingX": "27.588373", "embeddingY": "-55.593204"},{"extension": "py", "date": "2020-03-27 06:23:24", "correct": "0", "upload": "def compare(chaine1,chaine2):\n  res=0\n  i=0\n  if len(chaine1)<len(chaine2):\n    while i<len(chaine1) and res==0:\n      if chaine1[i]<chaine2[i]:\n        res=-1\n      if chaine1[i]>chaine2[i]:\n        res=1\n      if chaine1[i]==chaine2[i]:\n        res=0\n      i=i+1\n  else:\n    while i<len(chaine2) and res==0:\n      if chaine1[i]<chaine2[i]:\n        res=-1\n      if chaine1[i]>chaine2[i]:\n        res=1\n      if chaine1[i]==chaine2[i]:\n        res=0\n      i=i+1\n    \n  return res\n", "user": "userdId_19", "attemptID": 2855, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-22.756327", "embeddingY": "60.754814"},{"extension": "py", "date": "2020-04-12 07:04:07", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  if liste==[]:\n    res=True\n  c=[]\n  res=False\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n    c=[liste[0]]%10+c\n  return c", "user": "userdId_8", "attemptID": 2856, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-67.61503", "embeddingY": "20.6449"},{"extension": "py", "date": "2020-04-06 15:15:01", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  i=0\n  for i in range(nombre):\n    if 'nombre[i]'=='chiffre':\n      cpt=cpt+1\n    i=i+1\n  return cpt", "user": "userdId_3", "attemptID": 2857, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-18.342344", "embeddingY": "-22.355759"},{"extension": "py", "date": "2020-03-23 00:40:15", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=[]\n    for i in range(len(liste)):\n      if res<liste[i]:\n        res=liste[i]\n  return res", "user": "userdId_8", "attemptID": 2858, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "25.101597", "embeddingY": "-71.95526"},{"extension": "py", "date": "2020-03-16 05:47:33", "correct": "0", "upload": "def doubleLettre(mot):\n  res=0\n  prec=''\n  for c in mot:\n    if prec==c:\n      dL=True\n    else:\n      dL=False\n    prec=c\n  if dL==True:\n    res=True\n  else:\n    res=False\n  return res", "user": "userdId_18", "attemptID": 2859, "exercise": "00da9cf1fa2b468d915724499459ed8f", "exercise_name": "doubleLettre", "embeddingX": "12.123987", "embeddingY": "-5.6676717"},{"extension": "py", "date": "2020-03-12 21:57:15", "correct": "0", "upload": "def maximum(liste):\n  res=l[0]\n  for elem in liste:\n    if res<elem:\n      res=elem\n  return res", "user": "userdId_23", "attemptID": 2860, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "43.40615", "embeddingY": "-60.347176"},{"extension": "py", "date": "2020-03-20 00:07:17", "correct": "0", "upload": "def sousChaine(s,d,l):\n  res=\"\"\n  for j in range(d,d+l,1):\n    res=res+j\n\n  return res\n", "user": "userdId_5", "attemptID": 2861, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-77.15521", "embeddingY": "16.255379"},{"extension": "py", "date": "2020-03-31 05:06:14", "correct": "1", "upload": "def listeSymetrique(l):\n  ok=True\n  i=0\n  while i<len(l) and ok:\n    if l[i]!=l[-i-1]:\n      ok=False\n    i+=1\n  return ok", "user": "userdId_13", "attemptID": 2862, "exercise": "8eb27aeda471a467e2223abebeca886e", "exercise_name": "listeSymetrique", "embeddingX": "22.93115", "embeddingY": "40.88371"},{"extension": "py", "date": "2020-04-08 00:46:58", "correct": "1", "upload": "def elemGeo(n,u0,r):\n  i=0\n  res=u0\n  while i!=n:\n    res=res*r\n    i+=1\n  return res", "user": "userdId_13", "attemptID": 2863, "exercise": "d7c83a7fb9b49e28804e55955ad06968", "exercise_name": "elemGeo", "embeddingX": "-8.248648", "embeddingY": "22.601017"},{"extension": "py", "date": "2020-04-03 00:11:33", "correct": "1", "upload": "def nbChiffres(nombre):\n  cpt=0\n  if nombre==0 :\n    cpt=1\n  else :\n    while nombre!=0 :\n      nombre=nombre//10\n      cpt+=1\n  \n  return cpt", "user": "userdId_15", "attemptID": 2864, "exercise": "3dcf332c003a1f3bf15df22ee17884a3", "exercise_name": "nbChiffres", "embeddingX": "32.268475", "embeddingY": "14.062439"},{"extension": "py", "date": "2020-03-03 06:10:15", "correct": "0", "upload": "def minimum(liste):\n  if len(liste)==0:\n    res=0\n  else:\n    res=liste[0]\n    for i in range(len(liste)):\n      if liste[i]<res:\n        res=liste[i]\n  return res", "user": "userdId_8", "attemptID": 2865, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "27.756273", "embeddingY": "-69.30252"},{"extension": "py", "date": "2020-04-11 04:58:18", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  res=0\n  while nombre!=0:\n    if chiffre==nombre//10:\n      res+=1\n    nombre-=nombre//10\n  return res", "user": "userdId_8", "attemptID": 2866, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "23.71833", "embeddingY": "12.845669"},{"extension": "py", "date": "2020-03-23 00:42:44", "correct": "0", "upload": "def reconstruireChainePartielle(s,n):\n    res = \"\"\n    for i in s (s,n) :\n      res = res + i\n    return res", "user": "userdId_24", "attemptID": 2867, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-44.96556", "embeddingY": "-20.139782"},{"extension": "py", "date": "2020-03-17 05:11:36", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  fin= debut+longueur\n  if fin>len(s):\n    fin=debut+longueur\n  for i in range(debut,fin):\n      res=res+s[i]\n  return res", "user": "userdId_9", "attemptID": 2868, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-78.21975", "embeddingY": "12.233697"},{"extension": "py", "date": "2020-04-13 21:48:01", "correct": "0", "upload": "def listeDecroissante(scores):\n  ok=True\n  i=0\n  while i<len(scores)-1:\n    if scores[i]>scores[i+1]:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 2869, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "16.038965", "embeddingY": "49.167473"},{"extension": "py", "date": "2020-04-12 06:59:45", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  if liste==[]:\n    res=True\n  c=[]\n  res=False\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n  return c\n  c=[liste[0]/len(liste)]+c\n  return c", "user": "userdId_8", "attemptID": 2870, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-66.97788", "embeddingY": "19.911674"},{"extension": "py", "date": "2020-03-22 08:47:37", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n    if annee1<annee2:\n      res=-1\n    elif annee1>annee2: \n      res=1\n    else:\n      if mois1<mois2:\n        res=-1\n      if mois1>mois2:\n        res=1\n      else:\n        if jour1<jour2:\n          res=-1\n        if jour1>jour2:\n          res=1\n        else:\n          res=0\n    return res\n      ", "user": "userdId_47", "attemptID": 2871, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "82.38079", "embeddingY": "-33.14943"},{"extension": "py", "date": "2020-04-11 05:58:58", "correct": "1", "upload": "def compteChiffre(chiffre,nombre):\n  if (chiffre or nombre)==0:\n    res=1\n  else:\n    res=0\n    while nombre!=0:\n      nombre=nombre//10\n      if nombre%10==chiffre:\n        res+=1\n  return res", "user": "userdId_8", "attemptID": 2872, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "23.50698", "embeddingY": "9.922639"},{"extension": "py", "date": "2020-03-14 22:14:45", "correct": "0", "upload": "def maximum(liste):\n    n = len(liste)\n    maxi = liste[0]\n    for i in range(1,n):\n      if lise[i] >= maxi:\n    \t  maxi = liste[i]\n    return maxi", "user": "userdId_21", "attemptID": 2873, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-5.2834573", "embeddingY": "-55.97257"},{"extension": "py", "date": "2020-03-22 08:49:03", "correct": "0", "upload": "def minimum(liste):\n  if liste==():\n    res=none\n  else:\n      res=liste[0]\n      for i in range(len(liste)):\n        if res>liste[i]:\n          res=liste[i]\n  return res", "user": "userdId_16", "attemptID": 2874, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "2.9527273", "embeddingY": "-67.12321"},{"extension": "py", "date": "2020-04-29 01:52:03", "correct": "0", "upload": "def listeMatchs(liste):\n    if len(liste)>0:\n      res=[]\n      l=()\n      for i in range(len(liste)-1):\n        for j in range(i+1,len(liste)):\n          l=(liste[i],liste[j])\n          res+=[l]\n        ", "user": "userdId_11", "attemptID": 2875, "exercise": "7425aa41502a932ef1011f8e2538120a", "exercise_name": "listeMatchs", "embeddingX": "-36.507786", "embeddingY": "-28.07109"},{"extension": "py", "date": "2020-04-07 23:38:31", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  ok=False\n  i=0\n  while i<len(phrase)//2:\n    if phrase[i]==\" \" and phrase[-i]==\" \":\n      ok=True\n    elif phrase[i]!=phrase[-i-1]:\n      ok=False\n    else:\n      ok=True\n    i+=1\n  if phrase==\"\":\n    ok=True\n  return ok", "user": "userdId_13", "attemptID": 2876, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "28.450064", "embeddingY": "36.037495"},{"extension": "py", "date": "2020-03-30 22:05:06", "correct": "0", "upload": "def nb_occurrence(n,x,l):\n  i=0\n  j=0\n  res = -1\n  while j <3:\n    print(l[i] , x,i)\n    if l[i] == x:\n      j+=1\n      if j == 3:\n        res = l[i+1]\n    i+=1\n  return(res)", "user": "userdId_4", "attemptID": 2877, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-8.385352", "embeddingY": "70.421"},{"extension": "py", "date": "2020-04-06 04:03:08", "correct": "0", "upload": "def motPalindrom(mot):\n  i=0\n  res=True\n  while i<len(mot) and res==True:\n    pl=mot[i]\n    dl=mot[i-1]\n    if pl==dl:\n        res=True\n    else:\n        res=False\n    i+=1\n  return res", "user": "userdId_26", "attemptID": 2878, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "9.701746", "embeddingY": "60.50176"},{"extension": "py", "date": "2020-04-06 05:16:02", "correct": "1", "upload": "def motPalindrome(mot):\n  res=True\n  i=0\n  j=len(mot)-1\n  while i<len(mot):\n    if mot[i]!=mot[j]:\n      res=False\n    i+=1\n    j-=1\n  return res", "user": "userdId_27", "attemptID": 2879, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "36.83707", "embeddingY": "46.395638"},{"extension": "py", "date": "2020-04-02 23:52:44", "correct": "1", "upload": "def doubleChiffre(nombre):\n  res = False\n  a = nombre%10\n  nombre = nombre//10\n  while nombre != 0 and not res :\n    b = nombre%10\n    nombre = nombre//10\n    if a == b :\n      res = True\n    else :\n      a = b\n  return res", "user": "userdId_17", "attemptID": 2880, "exercise": "c83ea6acd3e9f6f5543e87d515e8a44a", "exercise_name": "doubleChiffre", "embeddingX": "11.222209", "embeddingY": "21.27213"},{"extension": "py", "date": "2020-04-12 05:35:55", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=False\n  c=[]\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n    d=liste[0]+d\n  return c", "user": "userdId_8", "attemptID": 2881, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-70.44635", "embeddingY": "25.911043"},{"extension": "py", "date": "2020-03-17 05:14:47", "correct": "1", "upload": "def sousChaine(s,debut,longueur):\n  res=\"\"\n  if debut+longueur>len(s):\n    fin=len(s)\n  else:\n    fin=debut+longueur\n  for i in range(debut,fin):\n    res=res+s[i]\n  return res  ", "user": "userdId_35", "attemptID": 2882, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-84.994385", "embeddingY": "18.165895"},{"extension": "py", "date": "2020-03-23 01:59:03", "correct": "0", "upload": "def nbVoyelles(mot):\n    res=0\n    for i in range (len(mot)) :\n      if liste[i] =='a,e,i,o,u,y' :\n        res=res+1\n    return res", "user": "userdId_24", "attemptID": 2883, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-3.7423062", "embeddingY": "-42.64618"},{"extension": "py", "date": "2020-04-17 03:08:34", "correct": "0", "upload": "def nbVoyelles(mot):\n  cpt=0\n  for i in mot: \n    if lettre in 'aeiouy':\n      cpt=cpt+1\n  return cpt", "user": "userdId_21", "attemptID": 2884, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "15.61231", "embeddingY": "-28.366177"},{"extension": "py", "date": "2020-03-02 07:38:18", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1<=annee2 and mois1<=mois2 and jour1<jour2:\n    return -1\n  elif annee1!=annee2 and mois1!=mois2 and jour1!=jour2:\n    return 0\n  elif annee1>=annee2 and mois1>=mois2 and jour1>jour2:\n    return 1\n  \ncompareDates(10,1,2020,14,2,2020)\ncompareDates(14,2,2020,11,2,2020)\ncompareDates(10,1,2020,10,1,2020)", "user": "userdId_1", "attemptID": 2885, "exercise": "af7c1467ef9f7684d9ff58734067ae98", "exercise_name": "compareDates", "embeddingX": "87.332634", "embeddingY": "-17.327477"},{"extension": "py", "date": "2020-04-05 10:32:20", "correct": "1", "upload": "def elemAri(n,u0,r):\n    return u0+n*r", "user": "userdId_4", "attemptID": 2886, "exercise": "f239498950e974e29e01472749d9a09d", "exercise_name": "elemAri", "embeddingX": "-35.521397", "embeddingY": "20.748558"},{"extension": "py", "date": "2020-03-02 07:24:50", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1<=annee2 and mois1<=annee2 and jour1<=jour2:\n    return -1\n  elif annee1==annee2 and mois1==mois2 and jour1==jour2:\n    return 0\n  else:\n    return 1\n  \ncompareDates(10,1,2020,14,2,2020)\ncompareDates(14,2,2020,11,2,2020)\ncompareDates(10,1,2020,10,1,2020)", "user": "userdId_1", "attemptID": 2887, "exercise": "af7c1467ef9f7684d9ff58734067ae98", "exercise_name": "compareDates", "embeddingX": "89.12636", "embeddingY": "-10.961312"},{"extension": "py", "date": "2020-05-04 21:13:41", "correct": "1", "upload": "def nombrePair(n):\n  res=False\n  if n%2==0:\n    res=True\n  return res", "user": "userdId_8", "attemptID": 2888, "exercise": "3001254263845e9a478696f81a704d33", "exercise_name": "nombrePair", "embeddingX": "44.103523", "embeddingY": "-3.2038429"},{"extension": "py", "date": "2020-03-17 06:11:19", "correct": "0", "upload": "def maximum(liste):\n    if len(liste)==0:\n      res=none\n    else:\n      res=liste[0]\n      for elem in liste:\n        res=elem", "user": "userdId_22", "attemptID": 2889, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-3.7712297", "embeddingY": "-36.577156"},{"extension": "py", "date": "2020-03-31 06:50:57", "correct": "0", "upload": "def doubleChiffre(nombre):\n  trouve=False\n  chPrec=None\n  while nombre!=0:\n    chiffre=nombre%10\n    if chPrec==nombre:\n      trouve=True\n    nombre=nombre//10\n    chPrec=chiffre\n  return trouve", "user": "userdId_9", "attemptID": 2890, "exercise": "c83ea6acd3e9f6f5543e87d515e8a44a", "exercise_name": "doubleChiffre", "embeddingX": "8.313863", "embeddingY": "17.494331"},{"extension": "py", "date": "2020-04-08 00:43:21", "correct": "0", "upload": "def suiteAriGeo(liste):\n  ok=True\n  i=0\n  j=0\n  R=0\n  if len(liste)<=1 :\n    ok=True\n  else :\n    for elem in (liste) :\n        Q=(liste[1]/liste[0])\n        R=(liste[1]-liste[0])\n    while j<(len(liste)-1) :\n      if liste[j+1]==liste[j]+R :\n        Q=1\n      elif liste[j+1]==Q*liste[j] :\n        R=0\n      j+=1\n      \n    while i<(len(liste)-1) and ok :\n      if liste[i+1]!=Q*liste[i]+R :\n        ok=False\n      i+=1\n  return ok", "user": "userdId_15", "attemptID": 2891, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "44.76103", "embeddingY": "56.25296"},{"extension": "py", "date": "2020-03-10 04:29:19", "correct": "1", "upload": "def sommeNPremiersEntiers(n):\n  res=0\n  for i in range(n+1):\n    res=res+i\n  return res", "user": "userdId_35", "attemptID": 2892, "exercise": "c315a540cf0bfb0182dc114c6f0eafd1", "exercise_name": "sommeNPremiersEntiers", "embeddingX": "-19.714985", "embeddingY": "13.584362"},{"extension": "py", "date": "2020-03-04 10:49:38", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2) :\n  if(debut1,fin1,debut2,fin2)in '1,10,7,20' :\n     res=True\n  if(debut1,fin1,debut2,fin2)in '1,7,10,20' :\n     res=False\n  if(debut1,fin1,debut2,fin2)in '20,25,10,20' :\n     res=True\n   \n  return res\n  ", "user": "userdId_39", "attemptID": 2893, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "-68.74868", "embeddingY": "34.500214"},{"extension": "py", "date": "2020-03-31 06:21:53", "correct": "0", "upload": "def doubleChiffre(nombre):\n  res=False\n  com=0\n  while nombre!=0:\n    com=nombre%10\n    nombre=nombre//10\n    if com in nombre:\n      res=True\n  return res", "user": "userdId_13", "attemptID": 2894, "exercise": "c83ea6acd3e9f6f5543e87d515e8a44a", "exercise_name": "doubleChiffre", "embeddingX": "15.220311", "embeddingY": "6.622414"},{"extension": "py", "date": "2020-03-06 00:42:38", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(liste)==0:\n    res=None\n  else:\n    for mot in \"aeiouy\":\n      res=res+1\n  \n  return res", "user": "userdId_5", "attemptID": 2895, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "20.349936", "embeddingY": "-38.52964"},{"extension": "py", "date": "2020-04-02 23:33:00", "correct": "0", "upload": "def listeSymetrique(l):\n  i=0\n  j=-1\n  ok=True\n  while i<(len(l))/2 and j>(-len(l))/2 and ok:\n    if l[i]!=l[j]:\n      ok=False\n    i=i+1\n    j=j-1\n  return ok", "user": "userdId_12", "attemptID": 2896, "exercise": "8eb27aeda471a467e2223abebeca886e", "exercise_name": "listeSymetrique", "embeddingX": "25.143118", "embeddingY": "62.70739"},{"extension": "py", "date": "2020-04-12 08:37:43", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n    cpt=0\n    x=nombre//10\n    decomp=nombre\n    while decomp!=0:\n      if x==chiffre:\n        cpt+=1\n        decomp=decomp%10\n        x=decomp//10\n      else:\n        decomp=decomp%10\n        x=decomp//10\n    if cpt==0:\n      cpt=1\n    return cpt", "user": "userdId_11", "attemptID": 2897, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "6.9271836", "embeddingY": "16.544483"},{"extension": "py", "date": "2020-03-05 21:48:41", "correct": "1", "upload": "def ecart(liste):\n  if len(liste)==0:\n    return None\n  else:\n    max = liste[0]\n    min = liste[0]\n    for i in range(1,len(liste)):\n      if liste[i]>max:\n        max = liste[i]\n      elif liste[i]<min:\n        min = liste[i]   \n  return (max-min)", "user": "userdId_6", "attemptID": 2898, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "14.253977", "embeddingY": "-81.895676"},{"extension": "py", "date": "2020-03-06 23:40:17", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut1>=debut2 or fin1<=fin2:\n    if fin1>=debut2:\n      res=True\n  else:\n    res=False\n  return res", "user": "userdId_8", "attemptID": 2899, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "53.96655", "embeddingY": "-21.055948"},{"extension": "py", "date": "2020-03-27 05:51:49", "correct": "1", "upload": "def quatrePlus100(liste):\n  res=[]\n  i=0\n  while i<len(liste) and len(res)<4:\n    if liste[i]>100:\n      res.append(liste[i])\n    i=i+1\n  return res", "user": "userdId_30", "attemptID": 2900, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-26.001385", "embeddingY": "40.926888"},{"extension": "py", "date": "2020-04-03 01:03:55", "correct": "0", "upload": "def doubleChiffre(nombre):\n  res=0\n  x=nombre%10\n  while nombre>=10:\n    y=x//10\n    if x==y:\n      res=True\n    else:\n      res=False\n  return res", "user": "userdId_14", "attemptID": 2901, "exercise": "c83ea6acd3e9f6f5543e87d515e8a44a", "exercise_name": "doubleChiffre", "embeddingX": "6.154052", "embeddingY": "8.911896"},{"extension": "py", "date": "2020-04-12 12:20:34", "correct": "0", "upload": "def suiteGeo(liste):\n    if len(liste)==0 or len(liste)==1:\n      res=True\n    else:\n      res=True\n      for i in range(1,len(liste)):\n        if liste[i-1]==0:\n          res=False\n        else:\n          x=liste[1]/liste[0]\n          if liste[i+1]!=x*liste[i]:\n            res=False\n    return res", "user": "userdId_11", "attemptID": 2902, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "-15.553661", "embeddingY": "-83.71851"},{"extension": "py", "date": "2020-04-06 05:31:39", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  i=0\n  mot=[]\n  phrs=[]\n  mts=True\n  res=True\n  while i<len(phrase):\n    if phrase[i]!=\" \" and mts==True:\n      mot+=phrase[i]\n    elif phrase[i]==\" \":\n      mts=False\n    elif phrase[i]!=\" \":\n      phrs+=phrase[i]\n    i+=1\n  while i<len(mot) and res==True:\n    if mot[i]==phrs[-i-1]:\n      res=True\n    else:\n      res=False\n  return res", "user": "userdId_26", "attemptID": 2903, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "40.803005", "embeddingY": "35.146637"},{"extension": "py", "date": "2020-04-08 00:44:26", "correct": "0", "upload": "def suiteAriGeo(liste):\n  ok=True\n  i=0\n  j=0\n  R=0\n  if len(liste)<=1 :\n    ok=True\n  else :\n    for elem in (liste) :\n      if liste[0]==0 :\n        Q=1\n      else :\n        Q=(liste[1]/liste[0])\n        R=(liste[1]-liste[0])\n    while j<(len(liste)-1) :\n      if liste[j+1]==liste[j]+R :\n        Q=1\n      elif liste[j+1]==Q*liste[j] :\n        R=0\n      j+=1\n      \n    while i<(len(liste)-1) and ok :\n      if liste[i+1]!=Q*liste[i]+R :\n        ok=False\n      i+=1\n  return ok", "user": "userdId_15", "attemptID": 2904, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "44.26494", "embeddingY": "56.27879"},{"extension": "py", "date": "2020-03-31 04:07:29", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n  cpt=0\n  i=0\n  while i<len(l) and cpt<n:\n    if l[i]==x:\n      cpt=cpt+1\n    i=i+1\n  if cpt==0:\n    res=None\n  else:\n    res=[l[cpt]]\n  return res", "user": "userdId_12", "attemptID": 2905, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-6.634774", "embeddingY": "77.60277"},{"extension": "py", "date": "2020-03-31 06:05:32", "correct": "1", "upload": "def stockerChiffres(nombre):\n  res=[]\n  if nombre==0:\n    res=[0]\n  while nombre!=0:\n    res.append(nombre%10)\n    nombre=nombre//10\n  return res", "user": "userdId_8", "attemptID": 2906, "exercise": "49a87f644f84a443327fb4315b47f249", "exercise_name": "stockerChiffres", "embeddingX": "40.939983", "embeddingY": "13.512501"},{"extension": "py", "date": "2020-03-17 06:16:43", "correct": "0", "upload": "def permutationListe(liste,permutation):\n  res=[0]*(len(permutation))\n  for i in range(len(liste)):\n    res[liste]=liste[i]\n  return res\n      \n      ", "user": "userdId_9", "attemptID": 2907, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-50.576836", "embeddingY": "-26.087458"},{"extension": "py", "date": "2020-03-03 05:16:17", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    for i in range(len(liste)):\n      if liste[i]>i:\n        res=liste[i]\n  return res", "user": "userdId_30", "attemptID": 2908, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "2.710854", "embeddingY": "-63.23363"},{"extension": "py", "date": "2020-03-09 08:09:05", "correct": "1", "upload": "def somme(liste):\n    res=0\n    for elem in liste:\n      res=res+elem\n    return res\n  \n ", "user": "userdId_11", "attemptID": 2909, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-30.51648", "embeddingY": "2.6122823"},{"extension": "py", "date": "2020-04-06 00:02:22", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  ok=True\n  i=0\n  j=0\n  while i<j and ok:\n    if phrase[i]!=phrase[-j-1]:\n      ok=False\n      if phrase[i]=='':\n        i=i+1\n      if phrase[j]=='':\n        j=j-1\n    i=i+1\n    j=j-1\n  return ok\n\n  ", "user": "userdId_1", "attemptID": 2910, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "-1.10887", "embeddingY": "47.767326"},{"extension": "py", "date": "2020-03-27 06:08:30", "correct": "0", "upload": "def compare(chaine1,chaine2):\n  i=0\n  while res==0 and i<len(chaine1) and i<len(chaine2):\n    if chaine1[i]<chaine2[i]:\n      res=-1\n    elif chaine1[i]>chaine2[i]:\n      res=1\n    else:\n      res=0\n  return res", "user": "userdId_12", "attemptID": 2911, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-11.403106", "embeddingY": "42.67644"},{"extension": "py", "date": "2020-04-06 22:34:04", "correct": "0", "upload": "def elemAri(n,u0,r):\n  res=0\n  for i in range(0,n):\n    res=res+(u0+r)\n  return res", "user": "userdId_12", "attemptID": 2912, "exercise": "f239498950e974e29e01472749d9a09d", "exercise_name": "elemAri", "embeddingX": "-21.16052", "embeddingY": "16.03793"},{"extension": "py", "date": "2020-04-05 03:30:26", "correct": "1", "upload": "def nbVoyelles(mot):\n  res=0\n  for elem in mot:\n    if elem in 'aeiouy':\n      res+=1\n  return res", "user": "userdId_26", "attemptID": 2913, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "12.633162", "embeddingY": "-24.764517"},{"extension": "py", "date": "2020-03-23 22:27:57", "correct": "0", "upload": "def quatrePlus100(liste):\n  res=[]\n  i=0\n  while len(res)<4 :\n    if liste[i]>100 :\n      res=res+[liste[i]]\n    i=i+1\n  return res", "user": "userdId_28", "attemptID": 2914, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-28.205372", "embeddingY": "37.42633"},{"extension": "py", "date": "2020-03-20 00:14:11", "correct": "0", "upload": "def distribution(liste,n):\n  cpt=[]*(n+1)\n  for elem in l:\n    cpt[elem]=cpt[elem]+1\n  return res\n", "user": "userdId_13", "attemptID": 2915, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-61.3019", "embeddingY": "-11.780948"},{"extension": "py", "date": "2020-03-12 23:42:05", "correct": "0", "upload": "def jourNuit(heure):\n  Error=\"l'heure saisie est invalide\"\n  Time=\"on est\"\n  if heure<=0 or heure>=24:\n    res=Error\n  elif heure>=5 and heure<12:\n    res=Time+' le matin'\n    if heure>=6 and heure<=18:\n      res=res+' et il fait jour'\n    else:\n      res=res+' et il fait nuit'\n  elif heure>=12 and heure<17:\n    res=Time+\" l'apr\u00e8s-midi et il fait jour\"\n  elif heure>=17 and heure<21:\n    res=Time+' le soir'\n    if heure>=6 and heure<=18:\n      res=res+' et il fait jour'\n    else:\n      res=res+' et il fait nuit'\n  else:\n    res=Time+' la nuit et il fait nuit'\n  return res\n    \n  \n    ", "user": "userdId_2", "attemptID": 2916, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "80.261314", "embeddingY": "15.128029"},{"extension": "py", "date": "2020-06-02 22:07:44", "correct": "1", "upload": "def bissextile(annee):\n  if annee%4==0 and annee%100!=0 or annee%400==0:\n    return True\n  else:\n    return False", "user": "userdId_12", "attemptID": 2917, "exercise": "a7d37636649c0ada991520788deeb2d0", "exercise_name": "bissextile", "embeddingX": "51.06974", "embeddingY": "-0.13883862"},{"extension": "py", "date": "2020-03-22 12:32:18", "correct": "0", "upload": "def maximum(liste):\n  maxVal=liste[0]\n  for i in range(0,len(liste)+1): \n    if liste[i]>maxVal:\n      maxVal=liste[i]\t\n  return maxVal", "user": "userdId_21", "attemptID": 2918, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-2.9278946", "embeddingY": "-64.93815"},{"extension": "py", "date": "2020-04-11 05:48:21", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  res=0\n  while nombre!=0:\n    nombre=nombre//10\n    if nombre%10==chiffre:\n      res+=1\n  return res", "user": "userdId_8", "attemptID": 2919, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "22.821272", "embeddingY": "10.425254"},{"extension": "py", "date": "2020-03-22 11:48:11", "correct": "0", "upload": "def maximum(liste):\n  max=liste[0]\n  for x in liste: \n    if x>max:\n      max=x\n  return max", "user": "userdId_21", "attemptID": 2920, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "32.351902", "embeddingY": "-53.05131"},{"extension": "py", "date": "2020-04-07 03:07:28", "correct": "1", "upload": "def suiteAri(liste):\n  res=True\n  i=0\n  while i<len(liste)-1 and res==True:\n    r=liste[0]-liste[1]\n    if liste[i]-liste[i+1]==r:\n      res=True\n    else:\n      res=False\n    i+=1\n  return res", "user": "userdId_26", "attemptID": 2921, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "33.179638", "embeddingY": "52.946293"},{"extension": "py", "date": "2020-04-06 06:02:59", "correct": "1", "upload": "def phrasePalindrome(phrase):\n  res=True\n  i=0\n  j=len(phrase)-1\n  while i<len(phrase):\n    if phrase[i]==' ':\n      i+=1\n    if phrase[j]==' ':\n      j-=1\n    if phrase[i]!=phrase[j]:\n      res=False\n    i+=1\n    j-=1\n  return res", "user": "userdId_27", "attemptID": 2922, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "38.49585", "embeddingY": "43.077473"},{"extension": "py", "date": "2020-04-16 21:08:13", "correct": "0", "upload": "def meilleurClassementJoueur(scores,joueurs,nom):\n  i=0\n  while i<len(score):\n    if nom==joueur[i]:\n      return [i]\n    i=i+1", "user": "userdId_1", "attemptID": 2923, "exercise": "be6ce0a06c5d396190024c7c681da95d", "exercise_name": "meilleurClassementJoueur", "embeddingX": "-5.1005535", "embeddingY": "41.4419"},{"extension": "py", "date": "2020-03-15 06:18:15", "correct": "1", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n    if debut2>fin1 or debut1>fin2:\n      res=False\n    else:\n      res=True\n    return res", "user": "userdId_21", "attemptID": 2924, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "64.04483", "embeddingY": "-22.478653"},{"extension": "py", "date": "2020-04-12 08:36:04", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n    cpt=0\n    x=nombre%10\n    decomp=nombre\n    while decomp!=0 and x:\n      if x==chiffre:\n        cpt+=1\n        decomp=decomp//10\n        x=decomp%10\n      else:\n        decomp=decomp//10\n        x=decomp%10\n    if cpt==0:\n      cpt=1\n    return cpt", "user": "userdId_11", "attemptID": 2925, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "8.533612", "embeddingY": "14.609694"},{"extension": "py", "date": "2020-03-17 05:49:20", "correct": "0", "upload": "def maximum(liste):\n    res=0\n    if len (liste)==0:\n          res=none\n    else:\n         res=liste[0]\n         for elem in liste:\n             res=elem\n          \n    return res", "user": "userdId_22", "attemptID": 2926, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-3.4180176", "embeddingY": "-36.021015"},{"extension": "py", "date": "2020-03-20 00:27:38", "correct": "0", "upload": "def permutationChaine(s):\n  res=''\n  if len(s)<1:\n  \tres=''\n  else:\n    for i in range(0,len(s)-1,2):\n      res=res+s[i+1]\n      res=res+s[i]\n    if ((len(s)-1)//2)!=((len(s)-1)/2): \n      return res\n    else:\n      l=len(s)\n      res=res+s[l-1]\n      return res", "user": "userdId_40", "attemptID": 2927, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-40.920166", "embeddingY": "-56.972992"},{"extension": "py", "date": "2020-03-31 06:41:42", "correct": "1", "upload": "def stockerChiffres(nombre):\n  res=[]\n  while nombre!=0:\n    res.append(nombre%10)\n    nombre=nombre//10\n  if res==[]:\n    res.append(0)\n  return res", "user": "userdId_21", "attemptID": 2928, "exercise": "49a87f644f84a443327fb4315b47f249", "exercise_name": "stockerChiffres", "embeddingX": "42.387463", "embeddingY": "15.097556"},{"extension": "py", "date": "2020-04-05 12:13:09", "correct": "1", "upload": "def phrasePalindrome(phrase):\n    res = True\n    i=0\n    j=len(phrase)-1\n    \n    while i<j and res:\n        if phrase[i]==' ':\n            i+=1\n        elif phrase[j]==' ':\n            j-=1\n        elif phrase[i]!=phrase[j]:\n            res=False\n        else:\n            i+=1\n            j-=1\n            \n    return res", "user": "userdId_4", "attemptID": 2929, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "37.72982", "embeddingY": "42.003918"},{"extension": "py", "date": "2020-04-08 00:03:35", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  res=0\n  for i in range(nombre):\n    if i==chiffre:\n      res=res+1\n  return res", "user": "userdId_2", "attemptID": 2930, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-19.54367", "embeddingY": "-25.3684"},{"extension": "py", "date": "2020-03-12 08:14:10", "correct": "0", "upload": "def nbOccurrencesLettre(lettre,mot):\n  if len(mot)==0:\n    return 0\n  Cpt=0\n  for i in range (len(mot)):\n    if mot[i]==lettre:\n      Cpt=Cpt+1\n    return Cpt\n    ", "user": "userdId_1", "attemptID": 2931, "exercise": "2864c9e5861229d2ff32570f6bc944fb", "exercise_name": "nbOccurrencesLettre", "embeddingX": "-21.716524", "embeddingY": "-41.130413"},{"extension": "py", "date": "2020-03-24 05:58:57", "correct": "1", "upload": "def compare(chaine1,chaine2):\n  res=0\n  i=0\n  while i<len(chaine1) and i<len(chaine2) and res==0:\n    if chaine1[i]<chaine2[i]:\n      res=-1\n    elif chaine1[i]>chaine2[i]:\n      res=1\n    i+=1\n  if res==0 :\n    if len(chaine1)<len(chaine2):\n      res=-1\n    elif len(chaine1)>len(chaine2):\n      res=1\n  return res", "user": "userdId_8", "attemptID": 2932, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-20.154942", "embeddingY": "65.11576"},{"extension": "py", "date": "2020-03-19 05:14:18", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if jour1<jour2 or mois1<mois2 or annee1<annee2:\n    res=-1\n    if jour1==jour2 or mois1==mois2 or annee1==annee2:\n      res=1\n  else:\n    res=0\n  return res", "user": "userdId_34", "attemptID": 2933, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "78.258385", "embeddingY": "-27.148088"},{"extension": "py", "date": "2020-04-07 20:13:38", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  chiffre=str(chiffre)\n  nombre=str(nombre)\n  while i<len(nombre):\n    if chiffre==nombre[i]:\n      cpt=cpt+1\n    i=i+1\n  return cpt", "user": "userdId_3", "attemptID": 2934, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-12.033591", "embeddingY": "39.68091"},{"extension": "py", "date": "2020-03-16 05:28:29", "correct": "0", "upload": "def nbSyllabes(mot):\n    cpt=0\n    v='aeiouy'\n    if mot[0] in v:\n        cpt += 1\n    for i in range(1,len(mot)):\n        if mot[i] in v and mot[i-1] not in v:\n            cpt+=1\n    if mot.endswith('e'):\n        cpt-=1\n    if cpt==0:\n        cpt+=1\n    if cpt=='':\n      cpt=0\n    return cpt\n    ", "user": "userdId_18", "attemptID": 2935, "exercise": "1c86bec0f4df503e23db53994f3d2991", "exercise_name": "nbSyllabes", "embeddingX": "-24.041794", "embeddingY": "-71.67769"},{"extension": "py", "date": "2020-03-06 00:06:54", "correct": "0", "upload": "def maximum(liste):\n  res=0\n  for i in range(len(liste)):\n      res=res+liste[i] \n  return len", "user": "userdId_41", "attemptID": 2936, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-42.266113", "embeddingY": "-37.798756"},{"extension": "py", "date": "2020-04-07 05:38:36", "correct": "0", "upload": "def suiteAri(liste):\n  ok=True\n  i=0\n  if len(liste)==0:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=liste[i+1]+(liste[i+1]-liste[i]):\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 2937, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "20.346754", "embeddingY": "52.867413"},{"extension": "py", "date": "2020-04-12 08:19:39", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n    cpt=0\n    x=nombre%10\n    decomp=nombre\n    while decomp!=0:\n      if x==chiffre:\n        cpt+=1\n        decomp=decomp//10\n        x=decomp%10\n      else:\n        decomp=decomp//10\n        x=decomp%10\n    if cpt==0:\n      cpt=1\n    return cpt", "user": "userdId_11", "attemptID": 2938, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "7.1431284", "embeddingY": "15.126683"},{"extension": "py", "date": "2020-03-23 01:17:52", "correct": "0", "upload": "def prononcable(mot):\n  res=True\n  aux=''\n  for c in mot:\n    if c==aux:\n      res=False\n    aux=c\n  return res", "user": "userdId_27", "attemptID": 2939, "exercise": "6318b210c201fba050d60bc0913cb7ef", "exercise_name": "prononcable", "embeddingX": "17.407812", "embeddingY": "-5.6603603"},{"extension": "py", "date": "2020-04-29 01:52:33", "correct": "1", "upload": "def listeMatchs(liste):\n    if len(liste)>0:\n      res=[]\n      l=()\n      for i in range(len(liste)-1):\n        for j in range(i+1,len(liste)):\n          l=(liste[i],liste[j])\n          res+=[l]\n      return res\n    return []\n  \n        ", "user": "userdId_11", "attemptID": 2940, "exercise": "7425aa41502a932ef1011f8e2538120a", "exercise_name": "listeMatchs", "embeddingX": "-36.506207", "embeddingY": "-28.129528"},{"extension": "py", "date": "2020-03-15 01:41:17", "correct": "0", "upload": "def qualifJO(sexe,record,nbvictoires,champion):\n  if champion==True:\n    res=True\n  else:\n    if sexe==M and record<12.0 and nbvictoires>=3:\n      res=True\n    elif sexe==F and record<15.0 and nbvictoires>=3:\n      res=True\n    else:\n      res=False\n  return res", "user": "userdId_8", "attemptID": 2941, "exercise": "78ec7738f3a7f3553d4a5c653534c32d", "exercise_name": "qualifJO", "embeddingX": "61.423035", "embeddingY": "-11.343504"},{"extension": "py", "date": "2020-03-17 06:46:02", "correct": "0", "upload": "def permutationListe(liste,permutation):\n  res=liste[0]\n  for elem in liste:\n    res[permutation]=liste[0]\n  return res", "user": "userdId_25", "attemptID": 2942, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-50.242737", "embeddingY": "-15.7774105"},{"extension": "py", "date": "2020-03-13 00:55:00", "correct": "0", "upload": "def sommeNPremiersEntiers(n):\n  res=0\n  for elem in range(1,len(n)) :\n    res=res+n\n  return res", "user": "userdId_1", "attemptID": 2943, "exercise": "c315a540cf0bfb0182dc114c6f0eafd1", "exercise_name": "sommeNPremiersEntiers", "embeddingX": "-39.64956", "embeddingY": "-25.169502"},{"extension": "py", "date": "2020-04-08 00:04:15", "correct": "1", "upload": "def suiteGeo(liste):\n  i = 0\n  j = 0\n  raison = 0\n  if liste == [] or len(liste) == 1 :\n    res = True\n  else :\n    res = True \n  while raison == 0 and j < len(liste) - 1 :\n    if liste[j] != 0 :\n       raison = liste[j+1]/liste[j]\n    j = j + 1\n  while res and i < len(liste) - 1 :\n    if liste[i]*raison != liste[i+1]:\n      res = False\n    i = i + 1\n  return res\n", "user": "userdId_17", "attemptID": 2944, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "31.80993", "embeddingY": "73.42312"},{"extension": "py", "date": "2020-03-23 02:01:40", "correct": "0", "upload": "def minimum(liste):\n    for i in range (len(liste)) :\n      if liste [i] > res :\n        res= liste[i]\n    return res", "user": "userdId_24", "attemptID": 2945, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "4.6685004", "embeddingY": "-63.915775"},{"extension": "py", "date": "2020-03-17 05:11:47", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  res=''\n  if debut+longueur>len(s):\n    res=res+fin\n  for i in range(debut,debut+longueur):\n      res=res+s[i]\n  return res", "user": "userdId_25", "attemptID": 2946, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-74.47983", "embeddingY": "16.177011"},{"extension": "py", "date": "2020-03-31 03:37:40", "correct": "1", "upload": "def fusion(liste1,liste2):\n  res=[]\n  i=0\n  j=0\n  while i<len(liste1) and j<len(liste2):\n    if liste1[i]>liste2[j]:\n      res.append(liste2[j])\n      j=j+1\n    else: \n      res.append(liste1[i])\n      i=i+1\n  while i<len(liste1):\n    res.append(liste1[i])\n    i=i+1\n  while j<len(liste2):\n    res.append(liste2[j])\n    j=j+1\n  return res", "user": "userdId_21", "attemptID": 2947, "exercise": "6613efb6c873b142dc2b6040c14eb616", "exercise_name": "fusion", "embeddingX": "-38.31118", "embeddingY": "47.678215"},{"extension": "py", "date": "2020-03-03 04:58:35", "correct": "1", "upload": "def somme(liste):\n  res = 0\n  for elem in liste :\n  \tres = res + elem \n  return res", "user": "userdId_17", "attemptID": 2948, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-28.760803", "embeddingY": "3.1316748"},{"extension": "py", "date": "2020-04-09 11:20:13", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  j=0\n  ok=True\n  raison=None\n  if len(liste)>1:\n    while i<len(liste) and liste[0]!=0 and raison==None:\n      raison=liste[i+1]/liste[i]\n      i+=1\n    while j<len(liste)-1 and ok:\n      ok=liste[j+1]==liste[j]*raison\n      j+=1\n  return ok", "user": "userdId_12", "attemptID": 2949, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "22.403395", "embeddingY": "70.07387"},{"extension": "py", "date": "2020-04-09 08:58:53", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n    cpt=0\n    decomp=nombre%10\n    while decomp!=1:\n      decomp=decomp%10\n      if decomp==chiffre:\n        cpt+=1\n    if cpt==0:\n      cpt=1\n    return cpt\n    ", "user": "userdId_11", "attemptID": 2950, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "11.303015", "embeddingY": "9.955618"},{"extension": "py", "date": "2020-03-19 23:28:35", "correct": "0", "upload": "def reconstruireChainePartielle(s,n):\n  if s=='':\n    res=s\n  for i in range(0,s,n):\n    res=res+s[i]\n  return res", "user": "userdId_2", "attemptID": 2951, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-21.485996", "embeddingY": "-24.006681"},{"extension": "py", "date": "2020-04-08 00:18:23", "correct": "1", "upload": "def compteChiffre(chiffre,nombre):\n  res=0\n  if nombre==0:\n    res=1\n  else:\n    while nombre!=0:\n      chiffre2=nombre%10\n      if chiffre2==chiffre:\n        res=res+1\n      nombre=nombre//10\n  return res", "user": "userdId_2", "attemptID": 2952, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "15.773883", "embeddingY": "12.3496"},{"extension": "py", "date": "2020-03-30 00:07:08", "correct": "0", "upload": "def permutationChaine(s):\n  res=''\n  for i in range(0,len(s)-1,2):\n    res+=s[i+1]\n    res+=s[i]\n  return s", "user": "userdId_6", "attemptID": 2953, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-42.005997", "embeddingY": "-51.213627"},{"extension": "py", "date": "2020-03-02 07:39:41", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1<=annee2 and mois1<=mois2 or jour1<jour2:\n    return -1\n  elif annee1==annee2 and mois1==mois2 and jour1==jour2:\n    return 0\n  elif annee1>=annee2 and mois1>=mois2 and jour1>jour2:\n    return 1\n  \ncompareDates(10,1,2020,14,2,2020)\ncompareDates(14,2,2020,11,2,2020)\ncompareDates(10,1,2020,10,1,2020)", "user": "userdId_1", "attemptID": 2954, "exercise": "af7c1467ef9f7684d9ff58734067ae98", "exercise_name": "compareDates", "embeddingX": "83.32567", "embeddingY": "-15.406827"},{"extension": "py", "date": "2020-03-15 03:11:04", "correct": "0", "upload": "def doubleLettre(mot):\n  l1=\" \"\n  for l2 in mot:\n    if l1==\" \" and l2!=\" \":\n      res=True\n    else:\n      res=False\n      l2=l1\n  return res", "user": "userdId_8", "attemptID": 2955, "exercise": "00da9cf1fa2b468d915724499459ed8f", "exercise_name": "doubleLettre", "embeddingX": "20.095964", "embeddingY": "-6.2608223"},{"extension": "py", "date": "2020-03-05 23:51:52", "correct": "0", "upload": "def maximum(liste):\n  res=max\n  for i in range (len(liste)):\n    res=res<i\n  return res", "user": "userdId_45", "attemptID": 2956, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "32.16417", "embeddingY": "-71.79929"},{"extension": "py", "date": "2020-04-11 07:37:44", "correct": "0", "upload": "def sousChaine(s1,s2):\n  res=True\n  i=0\n  j=0\n  while i!=j:\n    i+=1\n    j+=i  \n  while i<len(s1) and j<len(s2) and res:\n    if s1[i]==s2[j]:\n      res=True\n  else:\n    res=False\n  return res", "user": "userdId_8", "attemptID": 2957, "exercise": "4bdf8c9c5d020593e1771e4d3ae1ae0d", "exercise_name": "sousChaine", "embeddingX": "-3.1478524", "embeddingY": "59.523216"},{"extension": "py", "date": "2020-03-10 03:16:11", "correct": "0", "upload": "def jourNuit(heure):\n    if heure<0 or heure>24:\n      res=\"l'heure saisie est invalide\"\n    else:\n      if heure<5 or heure>21:\n        res=\"on est la nuit\"\n      elif heure<12:\n        res=\"on est le matin\"\n      elif heure<17:\n        res=\"on est l'apres midi\"\n      else:\n        res=\"on est le soir\"\n      if heure<6 or heure>=18:\n        res=res+\" et il fait nuit\"\n      else:\n        res=res+\" et il fait jour\"\n    return res", "user": "userdId_9", "attemptID": 2958, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "71.619026", "embeddingY": "13.14034"},{"extension": "py", "date": "2020-04-02 23:32:46", "correct": "1", "upload": "def listeSymetrique(l):\n  ok=True\n  i=0\n  j=-1\n  while i<(len(l)/2) and ok :\n    if l[i]!=l[j] :\n      ok=False\n    i+=1\n    j-=1\n  \n  return ok", "user": "userdId_15", "attemptID": 2959, "exercise": "8eb27aeda471a467e2223abebeca886e", "exercise_name": "listeSymetrique", "embeddingX": "32.649124", "embeddingY": "46.464764"},{"extension": "py", "date": "2020-03-06 00:40:13", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0 :\n    res=0\n  else:\n    for elem in mot :\n      if (['a','e','i','o','u','y']) in mot :\n        res=res+1\n    return res", "user": "userdId_24", "attemptID": 2960, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "11.207266", "embeddingY": "-37.177532"},{"extension": "py", "date": "2020-03-06 00:13:11", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    return None\n  cpt=0\n  if lettre in 'aeiouy':\n    cpt=cpt+1\n  return cpt", "user": "userdId_1", "attemptID": 2961, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "4.36192", "embeddingY": "-34.86746"},{"extension": "py", "date": "2020-03-29 22:31:09", "correct": "0", "upload": "def fusion(liste1,liste2):\n  res= liste1 + liste2\n  for i in range(len(res)):\n    for j in range(0,len(res)-i-1):\n      if res[j]>res[j+1]:\n        res[j],res[j+1] = res[j+1], res[j]\n  return res", "user": "userdId_6", "attemptID": 2962, "exercise": "6613efb6c873b142dc2b6040c14eb616", "exercise_name": "fusion", "embeddingX": "-11.262376", "embeddingY": "-66.13231"},{"extension": "py", "date": "2020-03-30 22:37:21", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n  trouve=0\n  i=0\n  while i<len(l) and trouve!=n:\n    if x==l[i]:\n      trouve=trouve+1\n    i=i+1\n  if trouve!=n:\n    i=None\n  return i", "user": "userdId_19", "attemptID": 2963, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-6.706478", "embeddingY": "79.86672"},{"extension": "py", "date": "2020-04-08 07:40:05", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n    cpt=0\n    decomp=nombre//10\n    while decomp!=0:\n      if chiffre in 'decomp':\n        cpt+=1\n    return cpt\n  ", "user": "userdId_11", "attemptID": 2964, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "15.128466", "embeddingY": "9.590206"},{"extension": "py", "date": "2020-04-07 03:05:09", "correct": "1", "upload": "def motPalindrome(mot):\n  i=0\n  res=True\n  while i <len(mot) and res==True:\n    if mot[i] != mot[-i-1]:\n      res=False\n    i=i+1\n  return res", "user": "userdId_31", "attemptID": 2965, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "22.955671", "embeddingY": "52.545208"},{"extension": "py", "date": "2020-03-19 23:56:57", "correct": "0", "upload": "def reconstruireChainePartielle(o,n):\n  res=\"\"\n  for i in range(len(o),n):\n    res=res+o[i]\n  return res", "user": "userdId_20", "attemptID": 2966, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-59.227375", "embeddingY": "-35.96537"},{"extension": "py", "date": "2020-04-05 12:07:21", "correct": "1", "upload": "def nextConway(s):\n    res = \"\"\n    nb = 1\n    for i in range(len(s)-1):\n        if s[i] == s[i+1]:\n            nb+=1\n        else:\n            res += str(nb)+s[i]\n            nb = 1\n    if len(s)>1:\n        res+= str(nb)+s[i+1]\n    else:\n        res+= str(nb)+s[0]\n    return res", "user": "userdId_4", "attemptID": 2967, "exercise": "a580c32690609356dae4401b3c89a3b8", "exercise_name": "nextConway", "embeddingX": "-28.2408", "embeddingY": "-57.741932"},{"extension": "py", "date": "2020-04-05 09:12:41", "correct": "0", "upload": "def phrasePalindrome(phrase):\n    if phrase=='':\n      ok=True\n    else:\n      ok=True\n      i=0\n      j=-1\n      while i<len(phrase) and j>(-len(phrase)-1) and ok:\n        if phrase[i]!=phrase[j]:\n          ok=False\n        i+=1\n        j-=1\n        if phrase[i]=='':\n          i+=1\n        if phrase[j]=='':\n          j-=1\n    return ok", "user": "userdId_18", "attemptID": 2968, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "38.327404", "embeddingY": "40.44042"},{"extension": "py", "date": "2020-03-05 23:51:10", "correct": "0", "upload": "def maximum(liste):\n  res=0\n  for i in range(len(liste)):\n    if res<i:\n      res=i\n    \n      \n    return res", "user": "userdId_5", "attemptID": 2969, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "31.345192", "embeddingY": "-69.43353"},{"extension": "py", "date": "2020-04-03 00:53:55", "correct": "1", "upload": "def stockerChiffres(nombre):\n    res=[]\n    if nombre==0:\n      res=[0]\n    else:\n      while nombre!=0:\n        res.append(nombre%10)\n        nombre=nombre//10\n    return res\n  ", "user": "userdId_43", "attemptID": 2970, "exercise": "49a87f644f84a443327fb4315b47f249", "exercise_name": "stockerChiffres", "embeddingX": "41.527306", "embeddingY": "13.446841"},{"extension": "py", "date": "2020-04-12 06:46:30", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  if liste==[]:\n    res=True\n  c=[]\n  res=False\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n    c=[liste[0]]+c\n  return c", "user": "userdId_8", "attemptID": 2971, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-77.55088", "embeddingY": "15.207666"},{"extension": "py", "date": "2020-04-06 02:37:44", "correct": "1", "upload": "def motPalindrome(mot):\n  res = True\n  i = 0\n  while i < len(mot)/2 and res == True :\n    if mot[i] != mot[len(mot)-i-1] :\n      res = False\n    i = i + 1\n  return res", "user": "userdId_17", "attemptID": 2972, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "27.20162", "embeddingY": "52.895916"},{"extension": "py", "date": "2020-03-06 00:00:16", "correct": "0", "upload": "def nbVoyelles(mot):\n  cpt=0\n  if elem in liste =={a,e,i,o,u,y}:\n    cpt=cpt+1\n  return cpt", "user": "userdId_1", "attemptID": 2973, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "7.5687375", "embeddingY": "-15.699138"},{"extension": "py", "date": "2020-03-14 10:15:21", "correct": "0", "upload": "def nbVoyelles(mot):\n    if lettre in mot == 'aeiouy':\n      res=res+1\n    return res", "user": "userdId_21", "attemptID": 2974, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "10.100944", "embeddingY": "-21.343712"},{"extension": "py", "date": "2020-04-14 05:02:55", "correct": "1", "upload": "def indiceInsertion(sc,scores):#exo 8\n  i=0\n  while i<len(scores):\n    if sc>=scores[i]:\n      return i\n    i=i+1\n  return i", "user": "userdId_7", "attemptID": 2975, "exercise": "f8a820b2bd54d18d36716e3d703858f7", "exercise_name": "indiceInsertion", "embeddingX": "-17.176376", "embeddingY": "61.97965"},{"extension": "py", "date": "2020-03-31 04:13:26", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n  cpt=0\n  i=0\n  res=None\n  while i<len(l) and cpt<n:\n    if l[i]==x:\n      cpt=cpt+1\n    i=i+1\n  if cpt!=0:\n    res=i\n  return res", "user": "userdId_12", "attemptID": 2976, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-5.626251", "embeddingY": "77.70314"},{"extension": "py", "date": "2020-06-02 21:28:38", "correct": "1", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut1>fin2 or debut2>fin1:\n    return False\n  else:\n    return True", "user": "userdId_12", "attemptID": 2977, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "63.03424", "embeddingY": "-24.73353"},{"extension": "py", "date": "2020-03-22 09:59:02", "correct": "0", "upload": "def bissextile(annee):\n\tif annee%4==0:\n\t\tres=True \n\telif annee%100!=0:\n\t\tres=False\n\telif annee%400==0:\n\t\tres=True\n\treturn res", "user": "userdId_21", "attemptID": 2978, "exercise": "a7d37636649c0ada991520788deeb2d0", "exercise_name": "bissextile", "embeddingX": "45.431084", "embeddingY": "-3.9506955"},{"extension": "py", "date": "2020-04-12 06:13:48", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=liste[10]\n  return res", "user": "userdId_8", "attemptID": 2979, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-75.47858", "embeddingY": "15.8024235"},{"extension": "py", "date": "2020-04-03 00:24:27", "correct": "1", "upload": "def nbChiffres(nombre):\n  cpt=0\n  if nombre==0:\n    cpt=1\n  else:\n    while nombre!=0:\n      nombre=nombre//10\n      cpt=cpt+1\n  return cpt\n", "user": "userdId_43", "attemptID": 2980, "exercise": "3dcf332c003a1f3bf15df22ee17884a3", "exercise_name": "nbChiffres", "embeddingX": "32.007084", "embeddingY": "11.580381"},{"extension": "py", "date": "2020-05-04 21:41:57", "correct": "1", "upload": "def maximum(liste):\n  if liste==[]:\n    res=None\n  else:\n    res=liste[0]\n    for i in range(1,len(liste)-1):\n      if liste[i]>res:\n        res=liste[i]\n  return res", "user": "userdId_26", "attemptID": 2981, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-6.723374", "embeddingY": "-67.29826"},{"extension": "py", "date": "2020-04-07 04:40:03", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  res=True\n  while i<len(liste)-1 and res==True:\n    if liste[0]==0:\n      res=False\n    else:\n      r=liste[1]/liste[0]\n      if liste[i+1]/liste[i]==r:\n        res=True\n      else:\n        res=False\n    i+=1\n  return res", "user": "userdId_26", "attemptID": 2982, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "35.150223", "embeddingY": "54.583504"},{"extension": "py", "date": "2020-04-07 03:17:35", "correct": "0", "upload": "def suiteAriGeo(liste):\n  if len(liste)<3:\n    ok=True\n  else:\n    ok=True\n    ecart1=liste[1]-liste[0]\n    ecart2=liste[2]-liste[1]\n    a=ecart2/ecart1\n    b=-a*liste[0]+liste[1]\n    if a*liste[2]+b!=liste[3]:\n      ok=False\n  return ok", "user": "userdId_18", "attemptID": 2983, "exercise": "4c9665daf155b115fe13218141fa1aff", "exercise_name": "suiteAriGeo", "embeddingX": "37.450443", "embeddingY": "76.20782"},{"extension": "py", "date": "2020-04-08 02:30:55", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  res=True\n  if len(liste)==0:\n    res=True\n  while i<len(liste)-1 and res==True:\n    if liste[i]!=0:\n      q=liste[i+1]/liste[i]\n      if liste[i+1]/liste[i]==q:\n        res=True\n      else:\n        res=False\n    else:\n      res=False\n    i=i+1\n  return res", "user": "userdId_26", "attemptID": 2984, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "29.585148", "embeddingY": "60.3074"},{"extension": "py", "date": "2020-03-05 21:56:58", "correct": "1", "upload": "def somme(liste):\n  res=0\n  for elem in liste:\n    res=res+elem\n  return res", "user": "userdId_23", "attemptID": 2985, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-28.735779", "embeddingY": "0.6698071"},{"extension": "py", "date": "2020-03-12 22:04:31", "correct": "0", "upload": "def ecart(liste):\n  res=0\n  x=0\n  y=0\n  if len(liste)==0:\n    res=None\n  if len(liste)==1:\n    res=0\n  else:\n    x=liste[0]\n    y=x\n    for i in range(len(liste)):\n      if liste[i]>x:\n        x=liste[i]\n      else:\n        y=liste[i]\n    res=x-y\n    return res", "user": "userdId_14", "attemptID": 2986, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "-1.3152298", "embeddingY": "-82.05124"},{"extension": "py", "date": "2020-03-13 00:41:32", "correct": "1", "upload": "def sommeNPremiersEntiers(n):\n  if n<0:\n    return 0\n  else:\n    n=(n*(n+1))/2\n  return n\n    ", "user": "userdId_1", "attemptID": 2987, "exercise": "c315a540cf0bfb0182dc114c6f0eafd1", "exercise_name": "sommeNPremiersEntiers", "embeddingX": "64.56406", "embeddingY": "11.249741"},{"extension": "py", "date": "2020-02-29 05:51:08", "correct": "1", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n    if debut1>debut2:\n      if debut1>fin2:\n        res=False\n      elif debut1<fin2:\n        res=True\n      else:\n        res=True\n    elif debut1<debut2:\n      if fin1>debut2:\n        res=True\n      elif fin1<debut2:\n        res=False\n      else:\n        res=True\n    else:\n      res=True\n    return res", "user": "userdId_18", "attemptID": 2988, "exercise": "6fd66bb2393fbf3809f1c6d04f3831f7", "exercise_name": "rendezVous", "embeddingX": "64.05691", "embeddingY": "-19.61113"},{"extension": "py", "date": "2020-03-20 00:24:44", "correct": "0", "upload": "def permutationListe(liste,permutation):\n  if len(liste)==len(permutation):\n    for i in range(len(liste)):\n      liste[permutation[i]]=liste[i]\n  return liste", "user": "userdId_12", "attemptID": 2989, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-53.428585", "embeddingY": "-29.452713"},{"extension": "py", "date": "2020-03-06 00:54:51", "correct": "0", "upload": "def ecart(liste):\n   if len(liste)==0:\n      lol=None\n   return lol", "user": "userdId_14", "attemptID": 2990, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "12.84894", "embeddingY": "-50.57641"},{"extension": "py", "date": "2020-03-12 08:26:46", "correct": "1", "upload": "def somme(liste):\n  if len(liste)==0:\n    return 0\n  res=0\n  for elem in liste:\n    res=res+elem\n  return res", "user": "userdId_1", "attemptID": 2991, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-0.08163878", "embeddingY": "-19.468014"},{"extension": "py", "date": "2020-03-06 00:31:22", "correct": "1", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  else :   \n    res=liste[0]\n    for i in range(len(liste)) :\n       if liste[i]>res :\n          res=liste[i]\n  return res", "user": "userdId_24", "attemptID": 2992, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "0.8474973", "embeddingY": "-62.805637"},{"extension": "py", "date": "2020-03-06 00:11:08", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    res=0\n  else:\n    for elem in mot:\n      res=0\n      if elem=='a':\n        res=res+1\n  return res     ", "user": "userdId_14", "attemptID": 2993, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "2.719597", "embeddingY": "-26.72785"},{"extension": "py", "date": "2020-03-07 00:39:57", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1<annee2:\n    res=-1\n  if annee1>annee2:\n    res=1\n  elif mois1<mois2:\n      res=-1\n      if mois1>mois2:\n        res=1\n      elif jour1<jour2:\n        res=-1\n        if jour1>jour2:\n          res=1\n  else:\n    res=0\n  return res", "user": "userdId_8", "attemptID": 2994, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "80.7882", "embeddingY": "-32.980522"},{"extension": "py", "date": "2020-03-09 11:54:19", "correct": "1", "upload": "def nbOccurrencesLettre(lettre,mot):\n  cpt=0\n  for elem in mot:\n    if elem==lettre:\n      cpt=cpt+1\n  return cpt\n\n  ", "user": "userdId_11", "attemptID": 2995, "exercise": "2864c9e5861229d2ff32570f6bc944fb", "exercise_name": "nbOccurrencesLettre", "embeddingX": "-12.311957", "embeddingY": "-27.882458"},{"extension": "py", "date": "2020-04-10 00:47:28", "correct": "0", "upload": "def suiteAriGeo(liste):\n  i=0\n  while i<len(liste)-1:\n    a=liste[1]-liste[0]\n    b=liste[1]-liste[0]\n    if liste[0]!=0:\n      a=liste[1]/liste[0]\n      if liste[i+1]==liste[i]*a:\n          b=0\n    if liste[i+1]==liste[i]+b:\n      a=1\n    i=i+1\n  i=0\n  ok=True\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=a*liste[i]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 2996, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "33.621002", "embeddingY": "81.22286"},{"extension": "py", "date": "2020-04-06 03:50:02", "correct": "0", "upload": "def motPalindrom(mot):\n  i=0\n  good=True\n  if len(mot)==0:\n    res=True\n  else:\n    while i<len(mot)-1 and good==True:\n      l1=mot[i]\n      l2=mot[i+1]\n      if l1 in 'aeiouy' and l2 in 'bcdfghjklmnpqrstvxz' or l1 in 'bcdfghjklmnpqrstvxz' and l2 in 'aeiouy':\n        res=True\n      else:\n        res=False\n        good=False\n  return res", "user": "userdId_26", "attemptID": 2997, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "10.92532", "embeddingY": "60.596718"},{"extension": "py", "date": "2020-03-17 06:21:25", "correct": "0", "upload": "def permutationChaine(s):\n  res=''\n  for i in range(0,len(s)+1,2):\n    res=res+s[n+i]+s[i]\n  if len(s)%2!=0:\n    res=res+s[-1]\n  return res", "user": "userdId_25", "attemptID": 2998, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-48.45916", "embeddingY": "-47.072525"},{"extension": "py", "date": "2020-03-20 00:30:28", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n    res=''\n    fin=debut+longueur\n    if fin>len(mot):\n      fin=len(mot)\n    for i in range (debut,fin):\n      res=res+mot[i]\n    return res", "user": "userdId_1", "attemptID": 2999, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-72.872025", "embeddingY": "27.400135"},{"extension": "py", "date": "2020-04-10 03:32:47", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  ok=True\n  if len(liste)>1 and 0 in liste:\n    ok=False\n  elif len(liste)>1:\n    while i>-len(liste):\n      if liste[-i-1]/liste[-i-2]!=liste[-i-3]/liste[-i-2]:\n        ok=False\n      i+=1\n  return ok", "user": "userdId_12", "attemptID": 3000, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "17.508656", "embeddingY": "31.848297"},{"extension": "py", "date": "2020-03-10 02:53:54", "correct": "1", "upload": "def premiereOccurrenceLettre(lettre,mot):\n  if mot=='':\n    cpt=None\n  else:\n    cpt=0\n    for i in range(len(mot)):\n      if mot[i]!=lettre:\n        cpt=cpt+1\n      else:\n        return cpt\n  ", "user": "userdId_15", "attemptID": 3001, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-21.859907", "embeddingY": "-44.335056"},{"extension": "py", "date": "2020-03-24 06:02:43", "correct": "0", "upload": "def compare(chaine1,chaine2):\n    if chaine1=='':\n      res=-1\n    elif chaine2=='':\n      res=1\n    else:\n      res=0\n      i=0\n      while i<len(chaine1) and i<len(chaine2) and res==0:\n        if chaine1[i]<chaine2[i]:\n          res=-1\n        elif chaine1[i]>chaine2[i]:\n          res=1\n        i=i+1\n      mmlttr=0\n      if res==0:\n        i=0\n        for i in range(len(chaine1)):\n          if chaine1[i]==chaine2[i]:\n            mmlttr=mmlttr+1\n      if len(chaine1)>len(chaine2):\n        if len(chaine2)==mmlttr:\n          res=1\n      elif len(chaine1)<len(chaine2):\n        if len(chaine1)==mmlttr:\n          res=-1\n    return res", "user": "userdId_18", "attemptID": 3002, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-29.509686", "embeddingY": "62.79811"},{"extension": "py", "date": "2020-03-06 00:15:26", "correct": "1", "upload": "def nbOccurrencesLettre(lettre,mot):\n  cpt=0\n  if len(mot)==0:\n    cpt=0\n  else:\n    for elem in mot:\n      if lettre==elem:\n        cpt=cpt+1\n  return cpt", "user": "userdId_15", "attemptID": 3003, "exercise": "2864c9e5861229d2ff32570f6bc944fb", "exercise_name": "nbOccurrencesLettre", "embeddingX": "-11.474291", "embeddingY": "-30.076818"},{"extension": "py", "date": "2020-03-05 23:44:50", "correct": "0", "upload": "def maximum(liste):\n    max=0\n    if i>max in liste:\n      max=elem\n    return max\n    ", "user": "userdId_46", "attemptID": 3004, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "8.667828", "embeddingY": "-20.965029"},{"extension": "py", "date": "2020-04-12 07:52:17", "correct": "0", "upload": "def suiteAriGeo(liste):\n  i=0\n  a=0\n  b=0\n  while i<len(liste)-1:\n    if liste[i+1]==liste[i]+b:\n      a=1\n    if liste[0]!=0:\n      if liste[i+1]==liste[1]/liste[0]:\n        a=liste[1]/liste[0]\n        b=0\n    i=i+1\n  ok=True\n  i=0\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=a*liste[i]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 3005, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "35.58555", "embeddingY": "80.39823"},{"extension": "py", "date": "2020-03-05 21:32:05", "correct": "0", "upload": "def somme(liste):\n  if len(liste)==0:\n    res=0\n  else:\n    res=0\n    for i in range(len(liste)):\n      res=res+liste[i]\n    return res", "user": "userdId_30", "attemptID": 3006, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-20.15547", "embeddingY": "-52.278637"},{"extension": "py", "date": "2020-03-09 21:56:16", "correct": "1", "upload": "def qualifJO(sexe,record,nbvictoires,champion):\n  if champion:\n    return True\n  elif nbvictoires <3:\n    return False\n  else:\n    if sexe=='M':\n      if record<12:\n        return True\n    else:\n      if record<15:\n        return True\n    return False", "user": "userdId_6", "attemptID": 3007, "exercise": "78ec7738f3a7f3553d4a5c653534c32d", "exercise_name": "qualifJO", "embeddingX": "60.887585", "embeddingY": "-26.983885"},{"extension": "py", "date": "2020-03-12 23:54:25", "correct": "0", "upload": "def jourNuit(heure):\n\tif heure<0 or heure>24:\n\t\tn=\"l'heure saisie est invalide\"\n\tif 6<=heure<=18:\n\t\tn='et il fait jour'\n\t\tif 6<=heure<=12:\n\t\t\tn='on est le matin '+n\n\t\tif 13<=heure<=17:\n\t\t\tn=\"on est l'apr\u00e8s-midi \"+n\n\t\telse:\n\t\t\tn='on est le soir '+n\n\tif heure<=5 or heure>=19:\n\t\tn='et il fait nuit'\n\t\tif heure<=5:\n\t\t\tn='on est la nuit '+n\n\t\tif heure==5:\n\t\t\tn='on est le matin '+n\n\t\tif 19<=heure<=21:\n\t\t\tn='on est le soir '+n\n\t\telse:\n\t\t\tn='on est la nuit '+n\n\t\n\t\t\n", "user": "userdId_19", "attemptID": 3008, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "69.48658", "embeddingY": "20.507444"},{"extension": "py", "date": "2020-04-07 03:34:03", "correct": "1", "upload": "def sousChaine(s1,s2):\n  Trouve=False\n  i=0\n  if s1=='':\n    Trouve=True\n  while i<len(s1) and i<len(s2):\n    ok=False\n    if s1 in s2:\n      Trouve=True\n    i=i+1\n  return Trouve\n", "user": "userdId_1", "attemptID": 3009, "exercise": "a7cdd094daa2f0bfccc7a4ec419f7243", "exercise_name": "sousChaine", "embeddingX": "0.07340994", "embeddingY": "52.032764"},{"extension": "py", "date": "2020-03-10 04:22:47", "correct": "1", "upload": "def sommeNPremiersEntiers(n):\n  res= 0\n  if n < 0:\n    res=0\n  else:\n    for i in range(n+1):\n      res= res + i\n  return res", "user": "userdId_7", "attemptID": 3010, "exercise": "c315a540cf0bfb0182dc114c6f0eafd1", "exercise_name": "sommeNPremiersEntiers", "embeddingX": "-14.581455", "embeddingY": "12.168759"},{"extension": "py", "date": "2020-04-05 12:16:04", "correct": "1", "upload": "def phrasePalindrome(phrase):\n    res = True\n    i=0\n    j=len(phrase)-1\n    \n    while i<j and res:\n        if phrase[i]==' ':\n            i+=1\n        elif phrase[j]==' ':\n            j-=1\n        elif phrase[i]!=phrase[j]:\n            res=False\n        else:\n            i+=1\n            j-=1\n            \n    return res", "user": "userdId_4", "attemptID": 3011, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "37.724773", "embeddingY": "41.99823"},{"extension": "py", "date": "2020-04-14 06:04:35", "correct": "0", "upload": "def indiceInsertion(sc,scores):\n  res=0\n  i=0\n  while i<len(scores) and sc>scores:\n    res=i\n    i=i+1\n  return res\n", "user": "userdId_28", "attemptID": 3012, "exercise": "f8a820b2bd54d18d36716e3d703858f7", "exercise_name": "indiceInsertion", "embeddingX": "-16.170362", "embeddingY": "44.93309"},{"extension": "py", "date": "2020-04-06 00:01:32", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  ok=True\n  i=0\n  j=0\n  while i<j and ok:\n    if phrase[i]!=phrase[-j-1]:\n      ok=False\n      if phrase[i]=='':\n        i=i+1\n      if phrase[i]=='':\n        j=j-1\n    i=i+1\n    j=j-1\n  return ok\n\n  ", "user": "userdId_1", "attemptID": 3013, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "-1.1051962", "embeddingY": "47.764683"},{"extension": "py", "date": "2020-03-31 04:10:16", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n  cpt=0\n  trouve=False\n  i=0\n  while i<len(l) and trouve==False:\n    if l[i]==x:\n      cpt+=1\n    if cpt==n:\n      trouve=True\n    i+=1\n    \n", "user": "userdId_21", "attemptID": 3014, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-3.7052042", "embeddingY": "71.99497"},{"extension": "py", "date": "2020-03-05 22:08:58", "correct": "1", "upload": "def maximum(liste):\n  if len(liste)==0:\n  \treturn None\n  else :\n    max=liste[0]\n    for i in range(1,len(liste)):\n      if liste[i]>max:\n        max=liste[i]\n    return max", "user": "userdId_14", "attemptID": 3015, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "12.281356", "embeddingY": "-70.82975"},{"extension": "py", "date": "2020-03-05 23:39:12", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=none\n  else:\n    res=liste[0]\n    for i in range (1,len(liste)):\n      if liste[i]>res:\n        res=liste[i]\n  return max", "user": "userdId_13", "attemptID": 3016, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-3.782008", "embeddingY": "-59.69491"},{"extension": "py", "date": "2020-04-14 03:57:45", "correct": "0", "upload": "def listeDecroissante(scores):\n  ok=False\n  while i<len(liste) and not ok:\n    if liste[i]>liste[i+1]:\n      res=True\n    else:\n      res=ok\n  return ok", "user": "userdId_21", "attemptID": 3017, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "-1.33014", "embeddingY": "42.92851"},{"extension": "py", "date": "2020-04-06 03:45:10", "correct": "1", "upload": "def suiteGeo(liste):\n  res=True\n  if len(liste)>1:\n    if liste[0]==0:\n      q=0\n    else:\n      q=liste[1]/liste[0]\n    res=verifSuiteAriGeo(liste,q,0)\n  return res\n\ndef verifSuiteAriGeo(liste,a,b):\n  ok=True\n  n=1\n  while n<len(liste) and ok:\n    if liste[n]!=liste[n-1]*a+b:\n      ok=False\n    n+=1\n  return ok", "user": "userdId_6", "attemptID": 3018, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "13.766863", "embeddingY": "72.30855"},{"extension": "py", "date": "2020-03-22 23:58:37", "correct": "0", "upload": "def nombrePair(n):\n  res=False\n  for x in range(n):\n    res=x%2==True\n  return res", "user": "userdId_8", "attemptID": 3019, "exercise": "3001254263845e9a478696f81a704d33", "exercise_name": "nombrePair", "embeddingX": "32.240677", "embeddingY": "-7.8839526"},{"extension": "py", "date": "2020-04-07 01:17:06", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  suite=liste[0]\n  i=1\n  res=True\n  while i<len(liste) and res==True:\n    suite=a*suite+b\n    if suite==liste[i]:\n      res=True\n    else:\n      res=False\n    i+=1\n  return res\n    \n    \n    ", "user": "userdId_26", "attemptID": 3020, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-72.19163", "embeddingY": "28.762276"},{"extension": "py", "date": "2020-03-30 22:00:00", "correct": "1", "upload": "def listeSymetrique(l):\n  i=0\n  while i<len(l):\n    if l[i]!=l[-(1+i)]:\n      return False\n    i+=1\n  return True", "user": "userdId_6", "attemptID": 3021, "exercise": "8eb27aeda471a467e2223abebeca886e", "exercise_name": "listeSymetrique", "embeddingX": "18.132448", "embeddingY": "42.675247"},{"extension": "py", "date": "2020-03-13 00:53:01", "correct": "1", "upload": "def sommeNbPairs(liste):\n  res=0\n  if len(liste)==0:\n    res=0\n  for elem in liste:\n    if elem%2==0:\n      res=res+elem\n  return res", "user": "userdId_14", "attemptID": 3022, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "29.064997", "embeddingY": "-18.39476"},{"extension": "py", "date": "2020-04-11 00:39:00", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  c=True\n  if len(liste)==0:\n    c=True\n  if 0 in liste:\n    c=False\n  if len(liste)>0:\n    a=liste[1]/liste[0]\n    while i<(len(liste)-1) and c:\n      if liste[i+1]/liste[i]!=a:\n        c=False\n      i=i+1\n  return c", "user": "userdId_19", "attemptID": 3023, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "27.787771", "embeddingY": "63.365177"},{"extension": "py", "date": "2020-04-08 00:42:14", "correct": "0", "upload": "def suiteAriGeo(liste):\n  ok=True\n  i=0\n  j=0\n  R=0\n  if len(liste)<=1 :\n    ok=True\n  else :\n    for elem in (liste) :\n      if liste[0]==0 :\n        Q=1\n      else :\n        Q=(liste[1]/liste[0])\n        R=(liste[1]-liste[0])\n    while j<(len(liste)-1) :\n      if liste[j+1]==liste[j]+R :\n        Q=1\n      elif liste[j+1]==Q*liste[j] :\n        R=0\n      j+=1\n      \n    while i<(len(liste)-1) and ok :\n      if liste[i+1]!=Q*liste[i]+R :\n        ok=False\n      i+=1\n  return ok", "user": "userdId_15", "attemptID": 3024, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "44.256943", "embeddingY": "56.268562"},{"extension": "py", "date": "2020-04-10 03:28:06", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  ok=True\n  if len(liste)>1 and 0 in liste:\n    ok=False\n  elif len(liste)>1:\n    raison=liste[-1]/liste[-2]\n    while i<len(liste)-1:\n      if liste[i+1]!=liste[i]*raison:\n        ok=False\n      i+=1\n  return ok", "user": "userdId_12", "attemptID": 3025, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "23.06194", "embeddingY": "73.09809"},{"extension": "py", "date": "2020-03-31 06:32:18", "correct": "0", "upload": "def doubleChiffre(nombre):\n  res=False\n  prec=0\n  while nombre!=0 and not res:\n    prec=nombre%10\n    nombre=nombre//10\n    if nombre==prec:\n      res=True\n  return res", "user": "userdId_8", "attemptID": 3026, "exercise": "c83ea6acd3e9f6f5543e87d515e8a44a", "exercise_name": "doubleChiffre", "embeddingX": "12.7568865", "embeddingY": "21.138128"},{"extension": "py", "date": "2020-04-16 23:39:01", "correct": "0", "upload": "def meilleurScoreJoueur(score,joueur):\n  i=0\n  if joueur[i] not in joueur:\n    return 0\n  else:\n   while i<len(joueur)-1:\n    if score[i+1]>score[i]:\n      return joueur[i+1]\n    i=i+1\n  return joueur\n", "user": "userdId_5", "attemptID": 3027, "exercise": "c96fadc94086276f98451a798b3bb730", "exercise_name": "meilleurScoreJoueur", "embeddingX": "-56.484356", "embeddingY": "10.455492"},{"extension": "py", "date": "2020-03-31 04:15:31", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n  cpt=0\n  trouve=0\n  i=0  \n  while i<len(l) and trouve==False:\n    if l[i]==x:\n      cpt=cpt+1\n    if cpt==n:\n      trouve=True\n    i=i+1    \n#post-traitement\n  if trouve!=n:\n    i=-1\n  return i    ", "user": "userdId_39", "attemptID": 3028, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-2.174968", "embeddingY": "76.58529"},{"extension": "py", "date": "2020-03-02 03:08:48", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1-annee2<0:\n    return -1 \n  else:\n    if mois1-mois2<0:\n      return -1\n    else:\n      if jour1-jour2<0:\n        return -1\n      elif jour1-jour2!=0:\n        return 0\n      else:\n        return 1\n      \ncompareDates(10,1,2020,14,2,2020)\ncompareDates(14,2,2020,11,2,2020)\ncompareDates(10,1,2020,10,1,2020)", "user": "userdId_1", "attemptID": 3029, "exercise": "af7c1467ef9f7684d9ff58734067ae98", "exercise_name": "compareDates", "embeddingX": "91.087685", "embeddingY": "-15.820973"},{"extension": "py", "date": "2020-03-05 06:43:42", "correct": "0", "upload": "from math import sqrt\ndef polynome(a,b,c):\n  x=0\n  delta=b**2-(4*a*c)\n  if delta>0 :\n    x=(-b-sqrt(delta))/2*a,(-b+sqrt(delta))/2-a\n  elif delta==0 :\n    x=-b/2*a\n  else :\n    x='pas de solution'\n  return x\n\n    \n", "user": "userdId_28", "attemptID": 3030, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-55.178947", "embeddingY": "13.993989"},{"extension": "py", "date": "2020-03-06 00:18:28", "correct": "0", "upload": "def maximum(liste):\n  res=0\n  for i in range (len(liste)):\n    if (liste[i])>res:\n      res=(liste[i])\n  return res", "user": "userdId_45", "attemptID": 3031, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-1.2360401", "embeddingY": "-64.975555"},{"extension": "py", "date": "2020-03-06 00:34:19", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    voy=None\n  else:\n    voy=0\n    for i in mot:\n      if mot in [\"a\",\"e\",\"i\",\"o\",\"u\",\"y\"]:\n        voy=voy+1\n  return voy", "user": "userdId_13", "attemptID": 3032, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "12.683125", "embeddingY": "-35.797676"},{"extension": "py", "date": "2020-04-03 00:32:56", "correct": "0", "upload": "def stockerChiffres(nombre):\n  i=0\n  res=[]\n  if nombre==0:\n    res=[0]\n  while nombre!=0:\n    res=res+[nombre//10]\n    i+=1\n  return res", "user": "userdId_1", "attemptID": 3033, "exercise": "49a87f644f84a443327fb4315b47f249", "exercise_name": "stockerChiffres", "embeddingX": "-2.9169838", "embeddingY": "20.82792"},{"extension": "py", "date": "2020-04-12 10:01:30", "correct": "0", "upload": "def phrasePalindrome(phrase):\n    if len(phrase)==0:\n      res=True\n    else:\n      res=True\n      i=0\n      x=''\n      while i<len(phrase)//2 and res:\n        if phrase[i]!=phrase[-(i+1)] or x:\n          res=False\n        if phrase[i]=='':\n            res=False\n        i+=1\n    return res", "user": "userdId_11", "attemptID": 3034, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "31.615814", "embeddingY": "31.139633"},{"extension": "py", "date": "2020-04-13 21:25:06", "correct": "0", "upload": "def suiteAri(liste):\n  res=True\n  if len(liste)>1:\n    r=liste[1]-liste[0]\n  res=verifSuiteAriGeo(liste,1,r)\n  return res", "user": "userdId_8", "attemptID": 3035, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "-5.6208043", "embeddingY": "-73.25916"},{"extension": "py", "date": "2020-03-06 00:13:20", "correct": "1", "upload": "def moyenne(liste):\n    if liste==[]:\n        return None\n    else:\n        somme=0\n        nbtermes=0\n        for elem in liste:\n          somme=somme+elem\n          nbtermes=nbtermes+1\n        moy=somme/nbtermes\n        return moy", "user": "userdId_2", "attemptID": 3036, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-0.5273236", "embeddingY": "-5.7604394"},{"extension": "py", "date": "2020-03-27 05:34:00", "correct": "0", "upload": "def quatrePlus100(liste):\n  i=0\n  while i>len(liste):\n    res.append(liste[i])\n    i=i+1\n    return res", "user": "userdId_20", "attemptID": 3037, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-19.026983", "embeddingY": "31.85727"},{"extension": "py", "date": "2020-04-06 22:18:06", "correct": "0", "upload": "def motPalindrome(mot):\n    if len(mot)==0:\n      res=True\n    else:\n      res=True\n      i=0\n      while i<len(mot) and res:\n        if mot[i]==mot[-1]:\n          res=True\n        i+=1\n    return res\n", "user": "userdId_11", "attemptID": 3038, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "26.288044", "embeddingY": "44.14885"},{"extension": "py", "date": "2020-04-07 23:39:29", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  res=0\n  i=0\n  if nombre==0:\n    res=0\n  while nombre!=0:\n    if chiffre==nombre%10:\n      res=res+1\n    i=i+1\n    nombre=nombre//10\n  return res\n", "user": "userdId_19", "attemptID": 3039, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "15.784704", "embeddingY": "12.698366"},{"extension": "py", "date": "2020-04-02 23:59:50", "correct": "1", "upload": "def listeSymetrique(l):\n  ok=True\n  i=0\n  while i<len(l)/2 and ok:\n    if l[i]!=l[-1-i]:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_14", "attemptID": 3040, "exercise": "8eb27aeda471a467e2223abebeca886e", "exercise_name": "listeSymetrique", "embeddingX": "25.719719", "embeddingY": "52.75889"},{"extension": "py", "date": "2020-03-22 14:27:47", "correct": "0", "upload": "def sommeNPremiersEntiersPairs(n):\n    res=0\n    for n in range(1,n+1):\n      if n%2==0:\n        res=res+1\n    return res", "user": "userdId_21", "attemptID": 3041, "exercise": "3030dc079e6607c253e89e8ef4784b74", "exercise_name": "sommeNPremiersEntiersPairs", "embeddingX": "33.933006", "embeddingY": "-11.561052"},{"extension": "py", "date": "2020-03-03 23:44:49", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut2<fin1<fin2 or debut1<fin2<fin1:\n    return True\n  else:\n    return False\n    \n", "user": "userdId_19", "attemptID": 3042, "exercise": "6fd66bb2393fbf3809f1c6d04f3831f7", "exercise_name": "rendezVous", "embeddingX": "60.276028", "embeddingY": "-27.297012"},{"extension": "py", "date": "2020-04-06 03:33:46", "correct": "1", "upload": "def produitScalaire(vec1,vec2):\n  res=0\n  i=0\n  while i<len(vec1) and i<len(vec2):\n    p1=vec1[i]\n    p2=vec2[i]\n    res=res+p1*p2\n    i=i+1\n  return res\n", "user": "userdId_26", "attemptID": 3043, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-14.466187", "embeddingY": "51.913345"},{"extension": "py", "date": "2020-03-10 03:27:11", "correct": "1", "upload": "def jourNuit(heure):\n  if heure<0 or heure>24:\n    res=\"l'heure saisie est invalide\"\n  else:\n    if heure<5 or heure>=21:\n      res=\"on est la nuit\"\n    elif heure<12:\n      res=\"on est le matin\"\n    elif heure<17:\n      res=\"on est l'apr\u00e8s-midi\"\n    else:\n      res=\"on est le soir\"\n    if heure<6 or heure >=18:\n      res=res+\" et il fait nuit\"\n    else:\n      res=res+\" et il fait jour\"\n  return res", "user": "userdId_31", "attemptID": 3044, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "72.39762", "embeddingY": "15.699583"},{"extension": "py", "date": "2020-03-06 00:32:02", "correct": "0", "upload": "def nbOccurrencesLettre(lettre,mot):\n    res=0\n    for i in mot:\n      if lettre in mot:\n        res=res+1\n      return res", "user": "userdId_2", "attemptID": 3045, "exercise": "2864c9e5861229d2ff32570f6bc944fb", "exercise_name": "nbOccurrencesLettre", "embeddingX": "12.153669", "embeddingY": "-27.509626"},{"extension": "py", "date": "2020-03-13 00:39:34", "correct": "1", "upload": "def sommeNbPairs(liste):\n  if liste==0:\n    res=0\n  else:\n    res=0\n    for n in (liste):\n      if n%2==0:\n        res=res+n\n    return res", "user": "userdId_5", "attemptID": 3046, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "29.29975", "embeddingY": "-18.196833"},{"extension": "py", "date": "2020-03-12 23:55:59", "correct": "0", "upload": "def jourNuit(heure):\n  \n  if heure<0 or heure>24 :\n    res=\"l'heure saisie est invalide\"\n  else : \n    if heure>=6 and heure<18 :\n      res1=\"il fait jour\"\n    else :\n      res1=\"il fait nuit\"\n      res=res1+\" et \"\n  \n  if heure>=5 and heure<12 :\n    res2=\"on est le matin\"\n  elif heure>=12 and heure<17 :\n    res2=\"on est l'apr\u00e8s-midi\"\n  elif heure>=17 and heure<21 :\n    res2=\"on est le soir\"\n  else :\n    res2=\"on est la nuit\"\n    res=res+res2\n    \n  return res", "user": "userdId_15", "attemptID": 3047, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "81.04432", "embeddingY": "16.065176"},{"extension": "py", "date": "2020-03-20 03:59:32", "correct": "0", "upload": "def reconstruirePartielle(s,n):\n  res =''\n  for i in range (0,len(s),n):\n    res = res + s[i]\n  return res", "user": "userdId_32", "attemptID": 3048, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-59.577084", "embeddingY": "-38.03417"},{"extension": "py", "date": "2020-04-11 07:26:20", "correct": "0", "upload": "def sousChaine(s1,s2):\n  res=True\n  i=0\n  j=0\n  while i<len(s1) in j<len(s2) and res:\n    res=True\n  else:\n    res=False\n  return res", "user": "userdId_8", "attemptID": 3049, "exercise": "4bdf8c9c5d020593e1771e4d3ae1ae0d", "exercise_name": "sousChaine", "embeddingX": "-4.038575", "embeddingY": "48.043583"},{"extension": "py", "date": "2020-03-23 00:38:58", "correct": "1", "upload": "def premiereOccurrenceLettre(lettre,mot):\n  if mot=='':\n    pos=None\n  else:\n    for i in range(len(mot)):\n      if lettre==mot[i]:\n        pos=i\n        return pos", "user": "userdId_27", "attemptID": 3050, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-17.638433", "embeddingY": "-41.92901"},{"extension": "py", "date": "2020-04-13 22:16:00", "correct": "1", "upload": "scores=[352100,325410,312785,220199,127853]\n\ndef listeDecroissante(scores):\n  res=True\n  i=0\n  while i<len(scores)-1 and res:\n    if scores[i]<=scores[i+1]:\n      res=False\n    i=i+1\n  return res", "user": "userdId_28", "attemptID": 3051, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "16.56082", "embeddingY": "56.561382"},{"extension": "py", "date": "2020-02-29 06:12:29", "correct": "1", "upload": "def polynome(a,b,c):\n    import math\n    delta=(b**2)-(4*a*c)\n    if delta>0:\n      x1=(-b+(math.sqrt(delta)))/(2*a)\n      x2=(-b-(math.sqrt(delta)))/(2*a)\n      return (x1,x2)\n    elif delta==0:\n      x0=-b/(2*a)\n      return x0\n    else:\n      return 'pas de solution'", "user": "userdId_18", "attemptID": 3052, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-51.8629", "embeddingY": "6.4854074"},{"extension": "py", "date": "2020-03-05 22:19:38", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0 :\n      res=None \n  else:\n    res=0\n    res=liste[0]\n    for i in range (1,len(liste)):\n      if liste [i]>res:\n        res=liste\n  return res", "user": "userdId_25", "attemptID": 3053, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "0.81718117", "embeddingY": "-57.63248"},{"extension": "py", "date": "2020-03-03 05:35:32", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    for i in liste:\n      if res<liste[i]:\n        res=liste[i]\n  return res", "user": "userdId_8", "attemptID": 3054, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "25.674812", "embeddingY": "-62.58582"},{"extension": "py", "date": "2020-03-20 00:51:43", "correct": "0", "upload": "def permutationListe(liste,permutation):\n    res = [0]*len(liste)\n    for i in range (len(liste)) :\n      for elem in permutation :\n        if elem == i :\n          res[elem] = liste[i]\n    return res", "user": "userdId_17", "attemptID": 3055, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-27.110231", "embeddingY": "-33.442738"},{"extension": "py", "date": "2020-03-17 06:45:57", "correct": "0", "upload": "def permutationListe(liste,permutation):\n  res=liste[0]\n  for elem in liste:\n    res[permutation]=liste[0]\n  return res", "user": "userdId_25", "attemptID": 3056, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-50.206295", "embeddingY": "-15.782236"},{"extension": "py", "date": "2020-03-24 04:57:28", "correct": "0", "upload": "def quatrePlus100(liste):\n  i=0\n  res=[]\n  while i<len(liste) and i<4:\n    if liste[i]>100:\n      res.append(liste[i])\n    i=i+1\n  return res\n", "user": "userdId_13", "attemptID": 3057, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-25.717524", "embeddingY": "39.917492"},{"extension": "py", "date": "2020-04-07 04:13:10", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=True\n  i=1\n  while i<len(liste):\n    if liste[i]!=a*liste[i-1]+b:\n      res=False\n    i+=1\n  return res\ndef suiteAriGeo(liste):\n  i=1\n  a=1\n  b=0\n  res=True\n  while i<len(liste):\n    if liste[i-1]==0:\n      i+=1\n    else:\n      if liste[i]!=liste[i-1]:\n        a=liste[i]//liste[i-1]\n        b=liste[i]-a*liste[i-1]\n        res=verifSuiteAriGeo(liste,a,b)\n    i+=1 \n  return res", "user": "userdId_27", "attemptID": 3058, "exercise": "4c9665daf155b115fe13218141fa1aff", "exercise_name": "suiteAriGeo", "embeddingX": "14.125193", "embeddingY": "78.99372"},{"extension": "py", "date": "2020-03-20 01:01:19", "correct": "1", "upload": "def distribution(liste,n):\n  liste2=[0]*(n+1)\n  for i in liste:\n    liste2[i]=liste2[i]+1\n  return liste2\n  \n              \n                 \n", "user": "userdId_2", "attemptID": 3059, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-59.277573", "embeddingY": "-15.460755"},{"extension": "py", "date": "2020-04-12 07:15:14", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  if liste==[]:\n    res=True\n  c=[]\n  f=[]\n  res=False\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n    e=liste[0]\n    f.append(e)\n    f.extend(c)\n  if f==liste:\n    res=True\n  return res", "user": "userdId_8", "attemptID": 3060, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-76.298744", "embeddingY": "20.724062"},{"extension": "py", "date": "2020-03-31 04:04:48", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n  trouve=False\n  i=0\n  cpt=0\n  while i<len(liste) and not trouve:\n    if liste[i]==x:\n      cpt=cpt+1\n    if cpt==n:\n     trouve=True\n    i=i+1\n  res=i-1\n  return res", "user": "userdId_50", "attemptID": 3061, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-2.26756", "embeddingY": "44.21464"},{"extension": "py", "date": "2020-03-12 08:34:48", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    return 0\n  cpt=0\n  for lettre in mot:\n    if lettre in mot=='aeiouy':\n      cpt=cpt+1\n    return cpt\n  ", "user": "userdId_1", "attemptID": 3062, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "6.0766773", "embeddingY": "-32.55858"},{"extension": "py", "date": "2020-03-05 21:54:26", "correct": "1", "upload": "def somme(liste):\n  res=0\n  for elem in liste:\n    res=res+elem\n  return res", "user": "userdId_25", "attemptID": 3063, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-27.925903", "embeddingY": "1.3919721"},{"extension": "py", "date": "2020-04-13 22:20:24", "correct": "1", "upload": "def meilleurClassementJoueur(scores,joueurs,nom):\n  c=True\n  i=0\n  if nom in joueurs:\n    while i< len(joueurs) and c:\n      if nom==joueurs[i]:\n        res=i+1\n        c=False\n      i+=1\n  else:\n    res=-1\n  return res\n", "user": "userdId_19", "attemptID": 3064, "exercise": "be6ce0a06c5d396190024c7c681da95d", "exercise_name": "meilleurClassementJoueur", "embeddingX": "-5.667337", "embeddingY": "70.63385"},{"extension": "py", "date": "2020-03-27 05:36:00", "correct": "0", "upload": "def quatrePlus100(liste):\n  i=0\n  while i>len(liste):\n    res.append(liste[i])\n    i=i+1\n  if liste[i]>4:\n    res=i\n  return res", "user": "userdId_20", "attemptID": 3065, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-19.286236", "embeddingY": "34.845074"},{"extension": "py", "date": "2020-03-16 04:06:55", "correct": "0", "upload": "def minimum(liste):\n    res=liste[0]\n    for i in liste:\n      if liste[i]<res:\n        res=liste[i]\n    return res", "user": "userdId_18", "attemptID": 3066, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "40.195877", "embeddingY": "-59.182552"},{"extension": "py", "date": "2020-03-23 21:05:28", "correct": "0", "upload": "def quatrePlus100(l):\n  res=[]\n  for i in l:\n    if (i>100):\n      res=res+l[i]\n  return res", "user": "userdId_48", "attemptID": 3067, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "28.233465", "embeddingY": "-43.276768"},{"extension": "py", "date": "2020-03-03 05:23:14", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    for i in (liste):\n      if res<liste[i]:\n        res=liste[i]\n  return res", "user": "userdId_8", "attemptID": 3068, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "25.64697", "embeddingY": "-62.615456"},{"extension": "py", "date": "2020-04-05 12:08:45", "correct": "1", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  if nombre==0 and cpt==0:\n    cpt=1\n  while nombre>0:\n    if nombre%10==chiffre:\n      cpt+=1\n    nombre=int(nombre/10)\n  return cpt", "user": "userdId_4", "attemptID": 3069, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "24.688541", "embeddingY": "6.374688"},{"extension": "py", "date": "2020-04-03 00:02:02", "correct": "0", "upload": "def nombreSymetrique (nombre):\n  liste = stockerChiffres(nombre)\n  res = listeSymetrique(liste)\n  return res", "user": "userdId_17", "attemptID": 3070, "exercise": "fae4d6a34289cf5bf06f9d6d17e8547e", "exercise_name": "nombreSymetrique", "embeddingX": "-43.25338", "embeddingY": "15.789007"},{"extension": "py", "date": "2020-03-03 06:15:51", "correct": "0", "upload": "def nbVoyelles(mot):\n  res=0\n  for lettre in range(len(mot)):\n    if lettre in [\"aeiouy\"]:\n       res=res+mot[lettre]\n  return res", "user": "userdId_25", "attemptID": 3071, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-2.9371574", "embeddingY": "-50.00026"},{"extension": "py", "date": "2020-03-30 21:41:17", "correct": "0", "upload": "def fusion(liste1,liste2):\n  i=0\n  j=0\n  listefusion=[]\n  while i<=len(liste1) and j<=len(liste2):\n    if liste1[i]>liste2[j]:\n      listefusion.append(liste2[j])\n      j=j+1\n    else:\n      listefusion.append(liste1[i])\n      i=i+1\n  if len(liste1)>0 and len(liste2)>0:\n    if max(liste1)>max(liste2):\n      for ind in range (i,len(liste1)):\n        listefusion.append(liste1[ind])\n\n    if max(liste2)>max(liste1):\n      for ind in range (j,len(liste2)):\n        listefusion.append(liste2[ind])\n\n  return listefusion\n  \n", "user": "userdId_19", "attemptID": 3072, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-31.739954", "embeddingY": "53.218002"},{"extension": "py", "date": "2020-04-11 06:39:07", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  res=True\n  i=0\n  while i<len(phrase) and res:\n    if phrase[i]!=phrase[-i-1]:\n      res=False\n    elif len(phrase)%2!=0:\n        res=True\n  return res", "user": "userdId_8", "attemptID": 3073, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "20.667395", "embeddingY": "39.910606"},{"extension": "py", "date": "2020-04-11 05:56:36", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  res=0\n  while nombre!=0:\n    nombre=nombre//10\n    if nombre%10==chiffre:\n      res+=1\n  if chiffre==0 or nombre==0:\n    res=1\n  return res", "user": "userdId_8", "attemptID": 3074, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "23.439543", "embeddingY": "9.792417"},{"extension": "py", "date": "2020-03-10 08:57:34", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n\tif jour1<jour2 or mois1<mois2 or annee1<annee2: \n\t\tres=-1\n\telif jour1>jour2 or mois1>mois2 or annee1>annee2:\n\t\tres=1\n\telse:\n\t\tres=0\n\treturn res", "user": "userdId_37", "attemptID": 3075, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "80.098145", "embeddingY": "-29.501709"},{"extension": "py", "date": "2020-06-02 21:58:48", "correct": "1", "upload": "def polynome(a,b,c):\n  import math\n  delta=b**2-4*a*c\n  if delta>0:\n    x1=(-b+(math.sqrt(delta)))/2*a\n    x2=(-b-(math.sqrt(delta)))/2*a\n    return (x1,x2)\n  elif delta==0:\n    x=(-b)/(2*a)\n    return x\n  else:\n    return 'pas de solution'", "user": "userdId_12", "attemptID": 3076, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-51.26201", "embeddingY": "5.3259454"},{"extension": "py", "date": "2020-04-07 23:38:16", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  res=0\n  i=i+1\n  while nombre>0:\n    if chiffre==nombre%10:\n      res=res+1\n    i=i+1\n    nombre=nombre//10\n  return res\n", "user": "userdId_19", "attemptID": 3077, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-22.36636", "embeddingY": "9.49711"},{"extension": "py", "date": "2020-03-06 00:02:35", "correct": "0", "upload": "def nbVoyelles(mot):\n  cpt=0\n  for i in range (len(liste))=={a,e,i,o,u,y}:\n    cpt=cpt+1\n  return cpt", "user": "userdId_1", "attemptID": 3078, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-28.513933", "embeddingY": "-19.713026"},{"extension": "py", "date": "2020-04-16 23:10:38", "correct": "1", "upload": "def meilleurScoreJoueur(scores,joueurs,nom):\n  score = 0\n  i = 0\n  while i < len(scores) and score == 0:\n    if nom == joueurs[i] :\n      score = scores[i]\n    i = i + 1\n  return score", "user": "userdId_17", "attemptID": 3079, "exercise": "c96fadc94086276f98451a798b3bb730", "exercise_name": "meilleurScoreJoueur", "embeddingX": "-7.5840716", "embeddingY": "78.72027"},{"extension": "py", "date": "2020-03-09 22:07:04", "correct": "0", "upload": "def bissextile(annee):\n  if anne%100>0:\n    res=False\n  else:\n    res=True\n  return res", "user": "userdId_12", "attemptID": 3080, "exercise": "a7d37636649c0ada991520788deeb2d0", "exercise_name": "bissextile", "embeddingX": "21.625668", "embeddingY": "-37.236744"},{"extension": "py", "date": "2020-03-12 23:50:59", "correct": "0", "upload": "def jourNuit(heure):\n  res=[]\n  if heure<0:\n    res=\"l'heure saisie est invalide\"\n  if heure>24:\n    res=\"l'heure saisie est invalide\"\n  if 6<=heure<=18:\n    if 5<heure<=12:\n      res=\"on est le matin et il fait jour\"\n    elif 12<=heure<=17:\n      res=\"on est l'apr\u00e8s-midi et il fait jour\"\n    elif 17<=heure<=18:\n      res=\"on est le soir et il fait jour\"\n  if 1<=heure<=5 or 19<=heure<=24:\n    if 1<=heure<=4:\n      res=\"on est la nuit et il fait nuit\"\n    elif 21<=heure<=24:\n      res=\"on est la nuit et il fait nuit\"\n    elif 19<=heure<=20:\n      res=\"on est le soir et il fait nuit\"\n  return res", "user": "userdId_13", "attemptID": 3081, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "70.7189", "embeddingY": "23.856907"},{"extension": "py", "date": "2020-04-06 04:01:11", "correct": "0", "upload": "def suiteGeo(liste):\n    if liste==[] or len(liste)==1:\n      ok=True\n    elif 0 in liste:\n      ok=False\n    else:\n      ok=True\n      i=1\n      while i<len(liste)+1 and ok:\n        cte=liste[i]/liste[i-1]\n        if liste[0]*cte**i!=liste[i]:\n          ok=False\n        i+=1\n    return ok", "user": "userdId_18", "attemptID": 3082, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "39.632793", "embeddingY": "66.07848"},{"extension": "py", "date": "2020-04-12 12:13:55", "correct": "0", "upload": "def elemGeo(n,u0,q):\n    res=0\n    x=0\n    while x<=n:\n      res=u0*q**n\n    return res", "user": "userdId_11", "attemptID": 3083, "exercise": "d7c83a7fb9b49e28804e55955ad06968", "exercise_name": "elemGeo", "embeddingX": "-10.88112", "embeddingY": "22.76176"},{"extension": "py", "date": "2020-04-12 10:02:04", "correct": "0", "upload": "def phrasePalindrome(phrase):\n    if len(phrase)==0:\n      res=True\n    else:\n      res=True\n      i=0\n      x=phrase-''\n      while i<len(phrase)//2 and res and x:\n        if phrase[i]!=phrase[-(i+1)]:\n          res=False\n        if phrase[i]=='':\n            res=False\n        i+=1\n    return res", "user": "userdId_11", "attemptID": 3084, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "3.2929907", "embeddingY": "-40.32647"},{"extension": "py", "date": "2020-03-20 00:14:31", "correct": "0", "upload": "def distribution(liste,n):\n  cpt=[]*(n+1)\n  for elem in liste:\n    cpt[elem]=cpt[elem]+1\n  return res\n", "user": "userdId_13", "attemptID": 3085, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-61.364624", "embeddingY": "-11.671061"},{"extension": "py", "date": "2020-03-19 05:36:08", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if jour1<jour2 or mois1<mois2 or annee1<annee2:\n    res=-1\n  elif jour1==jour2 and mois==mois2 and annee1==annee2:\n      res=0\n  else:\n    res=1\n  return res", "user": "userdId_34", "attemptID": 3086, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "77.62879", "embeddingY": "-26.274982"},{"extension": "py", "date": "2020-03-20 00:53:24", "correct": "0", "upload": "def permutationChaine(s):\n  res=\"\"\n  for i in range(0,len(s)-1,2):\n    res=res+s[i+1]+s[i]\n  if len(s)%2!=0:\n    res=res+s[-i]\n  return res", "user": "userdId_20", "attemptID": 3087, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-35.80879", "embeddingY": "-58.73734"},{"extension": "py", "date": "2020-03-06 00:09:47", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    return None\n  cpt=0\n  for elem in mot==a,e,i,o,u,y:\n    cpt=cpt+1\n  return cpt", "user": "userdId_1", "attemptID": 3088, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "5.3150554", "embeddingY": "-44.271225"},{"extension": "py", "date": "2020-03-10 02:45:58", "correct": "0", "upload": "def nbOccurrencesLettre(lettre,mot):\n  if mot=='':\n    res=None\n  for i in range(mot):\n    if mot[i]==lettre:\n      res=res+1\n  return res", "user": "userdId_15", "attemptID": 3089, "exercise": "2864c9e5861229d2ff32570f6bc944fb", "exercise_name": "nbOccurrencesLettre", "embeddingX": "-21.544962", "embeddingY": "-23.358759"},{"extension": "py", "date": "2020-03-03 06:23:22", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if jour1<jour2:\n    if mois1<mois2:\n      if annee1<=annee2:\n        res=-1\n  else:\n    if jour1>jour2:\n      if mois1>mois2:\n        if annee1>=annee2:\n          res=1\n    else:\n      if jour1==jour2:\n        if jour1==jour2:\n          if annee1==annee2:\n            res=0\n  return res", "user": "userdId_30", "attemptID": 3090, "exercise": "af7c1467ef9f7684d9ff58734067ae98", "exercise_name": "compareDates", "embeddingX": "78.121735", "embeddingY": "-19.858232"},{"extension": "py", "date": "2020-04-11 07:08:03", "correct": "1", "upload": "def phrasePalindrome(phrase):\n  res=True\n  i=0\n  while i<len(phrase) and res:\n    if phrase[i]==' ':\n      i+=1\n    if phrase[-i-1]==' ':\n      i+=1\n    elif phrase[i]!=phrase[-i-1]:\n      res=False\n    i+=1\n  return res", "user": "userdId_8", "attemptID": 3091, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "29.118286", "embeddingY": "39.844803"},{"extension": "py", "date": "2020-04-13 21:13:13", "correct": "0", "upload": "def meilleurScoreJoueur(scores,joueurs,nom):\n  cpt = 0\n  while cpt<len(joueurs):\n    if joueurs[cpt]==nom:\n      return scores[cpt]\n  return 0", "user": "userdId_6", "attemptID": 3092, "exercise": "c96fadc94086276f98451a798b3bb730", "exercise_name": "meilleurScoreJoueur", "embeddingX": "-11.595066", "embeddingY": "67.3626"},{"extension": "py", "date": "2020-04-07 20:41:00", "correct": "0", "upload": "def suiteAri(liste):\n  res=0\n  i=1\n  for i in liste:\n    if liste[i+1]%liste[i]==0:\n      res=False\n    elif liste[i]%liste[i+1]!=liste[i+1]%liste[i+2]:\n      res=False\n    else:\n      res=True\n  return res", "user": "userdId_3", "attemptID": 3093, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "34.157684", "embeddingY": "-24.19776"},{"extension": "py", "date": "2020-03-12 10:34:34", "correct": "0", "upload": "def maximum(liste):\n  res=liste[0]\n  for i in list(range(4)):\n    if res<list(i):\n      res=list(i)\n  else:\n    if lis(i)<res:\n      res=res\n  return res     ", "user": "userdId_20", "attemptID": 3094, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "28.74363", "embeddingY": "-71.67742"},{"extension": "py", "date": "2020-03-10 03:21:42", "correct": "0", "upload": "def jourNuit(heure):\n  if heure<0 or heure>24:\n    res=\"l'heure saisie est invalide\"\n  else:\n    if heure<5 or heure>=21:\n      res=\"on est la nuit\"\n    elif heure<12:\n      res=\"on est le matin\"\n    elif heure<17:\n      res=\"on est l'apres-midi\"\n    else:\n      res=\"on est le soir\"\n    if heure<6 and heure >=18:\n      res=res+\" et il fait jour\"\n    else:\n      res=res+\" il fait nuit\"\n  return res", "user": "userdId_31", "attemptID": 3095, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "79.31767", "embeddingY": "19.35409"},{"extension": "py", "date": "2020-03-23 00:55:08", "correct": "0", "upload": "def sommeNPremiersEntiersPairs(n):\n    if n<0:\n      res=0\n    else:\n      for x in range(n):\n        if x%2==0:\n          res=res+x\n    return res\n  ", "user": "userdId_11", "attemptID": 3096, "exercise": "3030dc079e6607c253e89e8ef4784b74", "exercise_name": "sommeNPremiersEntiersPairs", "embeddingX": "28.079369", "embeddingY": "-13.383466"},{"extension": "py", "date": "2020-03-24 03:24:20", "correct": "0", "upload": "def quatrePlus100(liste):\n  res=[]\n  cpt=0\n  i=0\n  while i<len(l) and cpt!=4:\n    if l[i]>100:\n      res=res+[l[i]]\n      cpt=cpt+1\n    i=i+1\n  return res", "user": "userdId_27", "attemptID": 3097, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-32.118397", "embeddingY": "43.357056"},{"extension": "py", "date": "2020-03-23 02:12:21", "correct": "0", "upload": "def sommeNbPairs(liste):\n    res=0\n    for i in range (len(liste)):\n      if i%2==0 :\n        res= res+liste[i]\n    return res", "user": "userdId_24", "attemptID": 3098, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "-19.467232", "embeddingY": "-55.971634"},{"extension": "py", "date": "2020-03-31 05:14:31", "correct": "0", "upload": "def distribution(liste,n):\n    cpts=[0]*(n+1)\n    for elem in liste:\n      cpts[elem]=cpts[elem]+1\n    return res", "user": "userdId_18", "attemptID": 3099, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-60.338516", "embeddingY": "-15.047896"},{"extension": "py", "date": "2020-04-07 04:26:51", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  ok=True\n  i=0\n  while i<len(liste) and ok:\n    if liste[i]!=a*liste[i-1]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 3100, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-72.17516", "embeddingY": "28.852232"},{"extension": "py", "date": "2020-03-31 06:22:12", "correct": "1", "upload": "def stockerChiffres(nombre):\n  res=[]\n  if nombre==0:\n    res=[0]\n  while nombre!=0:\n    res.append(nombre%10)\n    nombre=nombre//10\n  return res", "user": "userdId_13", "attemptID": 3101, "exercise": "49a87f644f84a443327fb4315b47f249", "exercise_name": "stockerChiffres", "embeddingX": "41.815918", "embeddingY": "13.165632"},{"extension": "py", "date": "2020-03-05 23:48:55", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n    return None\n  else:\n    max=liste[0]\n    for i in range (1,len(liste)):\n     if liste[i]>max:\n      max=liste[i]\n      return max", "user": "userdId_1", "attemptID": 3102, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "12.250943", "embeddingY": "-70.165565"},{"extension": "py", "date": "2020-03-17 05:11:28", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  res=\"\"\n  fin=debut+longueur\n  if fin>len(s):\n    fin=len(s)\n  for i in range(len(fin)):\n    res=res+fin[i]\n  return res", "user": "userdId_8", "attemptID": 3103, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-71.22829", "embeddingY": "19.148846"},{"extension": "py", "date": "2020-04-05 09:14:23", "correct": "1", "upload": "def produitScalaire(vec1,vec2):\n  res=0\n  vec3=[0]*len(vec1)\n  for i in range(len(vec1)):\n    vec3[i]=vec1[i]*vec2[i]\n  for elem in vec3:\n    res+=elem\n  return res", "user": "userdId_12", "attemptID": 3104, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-52.81919", "embeddingY": "-35.05862"},{"extension": "py", "date": "2020-04-08 07:50:55", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n    cpt=0\n    decomp=nombre%10\n    while decomp!=1:\n      if chiffre in decomp:\n        cpt+=1\n    return cpt", "user": "userdId_11", "attemptID": 3105, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "14.895779", "embeddingY": "9.038953"},{"extension": "py", "date": "2020-04-09 11:23:05", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  ok=True\n  if 0 in liste:\n    ok=False\n  if len(liste)>1:\n    raison=liste[-1]/liste[-2]\n    while i<len(liste)-1:\n      if liste[i+1]!=liste[i]*raison:\n        ok=False\n      i+=1\n  return ok", "user": "userdId_12", "attemptID": 3106, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "23.02467", "embeddingY": "73.60745"},{"extension": "py", "date": "2020-03-10 03:17:34", "correct": "0", "upload": "def jourNuit(heure):\n    if heure<0 or heure>24:\t\n        res=\"l'heure saisie est invalide\"\n    else:#l'heure est valide\n        if heure<5 or heure>=21:\n    \t    res= \"On est la nuit\"\n        elif heure<12:\n            res= \"On est le matin\"\n        elif heure<17:\n            res= \"On est l'apr\u00e8s-midi\"\n        else:\n            res= \"On est le soir\"\n        if heure <6 or heure >=18:\n            res=res+\" et il fait nuit\"\n        else:\n            res=res +\" et il fait jour\"\n    return res", "user": "userdId_39", "attemptID": 3107, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "71.266884", "embeddingY": "14.483034"},{"extension": "py", "date": "2020-04-12 04:27:16", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=False\n  c=[]\n  for i in range(len(liste)):\n    c=a*liste[i]+b\n  return c", "user": "userdId_8", "attemptID": 3108, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-65.2553", "embeddingY": "21.053879"},{"extension": "py", "date": "2020-03-22 10:52:36", "correct": "1", "upload": "def somme(liste):\n  res=0\n  for i in liste:\n    res=res+i\n  return res", "user": "userdId_27", "attemptID": 3109, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-29.070162", "embeddingY": "2.281627"},{"extension": "py", "date": "2020-04-11 00:26:32", "correct": "0", "upload": "def suiteAri(liste):\n  i=0\n  c=True\n  while i<(len(liste)-1) and c:\n    if liste[i+2]-liste[i+1]!=liste[i+1]+liste[i]:\n      c=False\n    i=i+1\n  return c", "user": "userdId_19", "attemptID": 3110, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "19.695204", "embeddingY": "51.49795"},{"extension": "py", "date": "2020-03-30 22:06:47", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n  i=0\n  j=0\n  res = -1\n  while j <3 and i < len(l):\n    if l[i] == x:\n      j+=1\n      if j == 3:\n        res = l[i+1]\n    i+=1\n    if res == -1: res = None\n  return(res)", "user": "userdId_4", "attemptID": 3111, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-7.4315767", "embeddingY": "71.49112"},{"extension": "py", "date": "2020-03-14 03:53:50", "correct": "0", "upload": "def bissextile(annee):\n  if annee%4==0 and annee%400==0:\n    res=True\n  else:\n    res=False\n    return res", "user": "userdId_14", "attemptID": 3112, "exercise": "a7d37636649c0ada991520788deeb2d0", "exercise_name": "bissextile", "embeddingX": "47.111485", "embeddingY": "-1.666694"},{"extension": "py", "date": "2020-04-13 21:46:33", "correct": "1", "upload": "def meilleurScoreJoueur(scores,joueurs,nom):\n  res=0\n  for i in range (len(joueurs)):\n    if nom==joueurs[i]:\n      if scores[i]>res:\n        res=scores[i]\n  return res", "user": "userdId_19", "attemptID": 3113, "exercise": "c96fadc94086276f98451a798b3bb730", "exercise_name": "meilleurScoreJoueur", "embeddingX": "-23.50084", "embeddingY": "-36.792286"},{"extension": "py", "date": "2020-03-10 04:21:14", "correct": "1", "upload": "def sommeNPremiersEntiers(n):\n  res=0\n  for x in range(0,n+1):\n    res=res+x\n  return res", "user": "userdId_31", "attemptID": 3114, "exercise": "c315a540cf0bfb0182dc114c6f0eafd1", "exercise_name": "sommeNPremiersEntiers", "embeddingX": "-18.79466", "embeddingY": "13.794937"},{"extension": "py", "date": "2020-04-03 00:03:51", "correct": "1", "upload": "def listeSymetrique(l):\n  res = True\n  i = 0\n  while i < len(l)/2 and res == True :\n    if l[i] != l[len(l)-i-1] :\n      res = False\n    i = i + 1\n  return res\n\ndef stockerChiffres(nombre):\n  if nombre == 0 :\n    res = [0]\n  else :\n    res = []\n  while nombre != 0 :\n    res.append (nombre%10)\n    nombre = nombre//10\n  return res\n\ndef nombreSymetrique (nombre):\n  liste = stockerChiffres(nombre)\n  res = listeSymetrique(liste)\n  return res", "user": "userdId_17", "attemptID": 3115, "exercise": "fae4d6a34289cf5bf06f9d6d17e8547e", "exercise_name": "nombreSymetrique", "embeddingX": "29.61958", "embeddingY": "58.584972"},{"extension": "py", "date": "2020-03-17 05:37:57", "correct": "0", "upload": "def permutationChaine(s):\n    res=''\n    for i in range(0,len(s)-1,2):\n        res=res+s[i+1]+s[i]\n    if res%2 !=0:\n        res=res+s[-1]\n    return res", "user": "userdId_39", "attemptID": 3116, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-38.550003", "embeddingY": "-62.594296"},{"extension": "py", "date": "2020-03-17 05:52:01", "correct": "0", "upload": "def distribution(liste,n):\n    cpt=0*n+1\n    for elem in liste:\n        cpt[elem]=cpt[elem]+1\n    return cpt", "user": "userdId_39", "attemptID": 3117, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-60.916096", "embeddingY": "-9.755318"},{"extension": "py", "date": "2020-04-08 02:45:25", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  res=True\n  while i<len(liste) and res==True:\n    if liste[i]!=0 and len(liste)>=2:\n      listetest=[liste[0]]\n      q=liste[1]/liste[0]\n      u=liste[0]*q**i\n      listetest=listetest+u\n      if liste[i]==listetest[i]:\n        res=True\n      else:\n        res=False\n    else:\n      res=False\n    i=i+1\n  return res", "user": "userdId_26", "attemptID": 3118, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "35.24719", "embeddingY": "69.05103"},{"extension": "py", "date": "2020-03-16 01:55:37", "correct": "1", "upload": "def bissextile(annee):\n    if annee%4==0 and annee%100!=0:\n      res=True\n    elif annee%400==0:\n      res=True\n    else:\n      res=False\n    return res", "user": "userdId_16", "attemptID": 3119, "exercise": "a7d37636649c0ada991520788deeb2d0", "exercise_name": "bissextile", "embeddingX": "47.79874", "embeddingY": "-0.28084323"},{"extension": "py", "date": "2020-03-14 09:36:29", "correct": "1", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n    if debut1>fin2 or fin1<debut2:\n      res=False \n    else: \n      res=True\n    return res", "user": "userdId_21", "attemptID": 3120, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "62.049995", "embeddingY": "-20.38133"},{"extension": "py", "date": "2020-04-12 11:20:28", "correct": "1", "upload": "def elemGeo(n,u0,q):\n    res=0\n    x=0\n    while x<=n:\n      res=u0*q**n\n      x+=1\n    return res", "user": "userdId_11", "attemptID": 3121, "exercise": "d7c83a7fb9b49e28804e55955ad06968", "exercise_name": "elemGeo", "embeddingX": "-10.660838", "embeddingY": "22.864662"},{"extension": "py", "date": "2020-04-12 04:06:52", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  for elem in liste:\n    res=a*elem+b\n  return res", "user": "userdId_8", "attemptID": 3122, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-66.59913", "embeddingY": "22.442642"},{"extension": "py", "date": "2020-04-06 04:00:15", "correct": "0", "upload": "def suiteGeo(liste):\n    if liste==[] or len(liste)==1:\n      ok=True\n    elif 0 in liste:\n      ok=False\n    else:\n      ok=True\n      i=0\n      while i<len(liste)+1 and ok:\n        cte=liste[i+1]/liste[i]\n        if liste[0]*cte**i!=liste[i+1]:\n          ok=False\n        i+=1\n    return ok", "user": "userdId_18", "attemptID": 3123, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "39.68623", "embeddingY": "66.162094"},{"extension": "py", "date": "2020-04-11 08:10:39", "correct": "1", "upload": "def elemGeo(n,u0,q):\n  return u0*q**n", "user": "userdId_8", "attemptID": 3124, "exercise": "d7c83a7fb9b49e28804e55955ad06968", "exercise_name": "elemGeo", "embeddingX": "-39.922157", "embeddingY": "19.70298"},{"extension": "py", "date": "2020-04-10 00:27:53", "correct": "0", "upload": "def suiteAriGeo(liste):\n  i=0\n  while i<len(liste)-1:\n    a=liste[1]/liste[0]\n    b=liste[1]-liste[0]\n    if liste[i+1]==liste[i]*a:\n        b=0 and a==liste[1]/liste[0]\n    if liste[i+1]==liste[i]+b:\n      a=1 and b==liste[1]-liste[0]\n    i=i+1\n  i=0\n  ok=True\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=a*liste[i]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 3125, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "32.233932", "embeddingY": "74.507996"},{"extension": "py", "date": "2020-03-03 00:06:51", "correct": "0", "upload": "def jourNuit(heure):\n  if heure > 24 or heure < 0 :\n    res = (\"l'heure saisie est invalide\")\n  elif heure >= 6 and heure < 18 :\n    if heure >= 5 and heure < 12 :\n      res = (\"on est le matin et il fait jour\")\n    elif heure > 12 and heure < 17 :\n      res = (\"on est l'apr\u00e8s-midi et il fait jour\")\n    else :\n      res = (\"on est le soir et il fait jour\")\n  else :\n    if heure >= 5 and heure < 12 :\n      res = (\"on est le matin et il fait nuit\")\n    elif heure > 12 and heure < 17 :\n      res = (\"on est l'apr\u00e8s-midi et il fait nuit\")\n    elif heure > 17 and heure < 21 :\n      res = (\"on est le soir et il fait nuit\")\n    else :\n      res = (\"on est la nuit et il fait nuit\")\n  return res", "user": "userdId_17", "attemptID": 3126, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "76.79812", "embeddingY": "20.902748"},{"extension": "py", "date": "2020-03-10 03:16:10", "correct": "0", "upload": "def jourNuit(heure):\n  if heure<0 or heure >24:\n    res=\"l'heure saisie est invalide\"\n  else:\n    if heure<5:\n      res=\"on est la nuit\"\n    elif heure<12:\n      res=\"on est le matin\" \n    elif heure<17:\n      res=\"on est l'apres midi\"\n    elif heure<21:\n      res=\"on est la soir\"\n    if heure<6 or heure>18:\n      res=res+\" et il fait nuit\"\n    else:\n      res=res+\" et il fait jour\"\n  return res", "user": "userdId_16", "attemptID": 3127, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "71.68392", "embeddingY": "11.870313"},{"extension": "py", "date": "2020-03-05 21:34:07", "correct": "0", "upload": "def somme(liste):\n  res=0\n  for i in range(len(liste)):\n  \tres=res+liste[i]\n  return None", "user": "userdId_14", "attemptID": 3128, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-40.919403", "embeddingY": "-36.108704"},{"extension": "py", "date": "2020-03-05 23:48:02", "correct": "0", "upload": "def maximum(liste):\n  res=liste[0]\n  for i in range (len(liste)):\n    res=res<i\n  return res", "user": "userdId_45", "attemptID": 3129, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "31.647758", "embeddingY": "-71.55067"},{"extension": "py", "date": "2020-03-12 21:50:36", "correct": "0", "upload": "def nbVoyelles(mot):\n  res=0\n  for i in range(len(mot)):\n    if mot[i] in 'aeiouy':\n      res=res+1\n  return None", "user": "userdId_46", "attemptID": 3130, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-24.490414", "embeddingY": "-64.37062"},{"extension": "py", "date": "2020-04-07 23:52:37", "correct": "0", "upload": "def motPalindrome(mot):\n  res=False\n  if mot=='':\n    res=True\n  else:\n    mot2=''\n    for i in mot:\n      mot2=i+mot2\n    if mot1==mot2:\n      res=True\n  return res\n  ", "user": "userdId_2", "attemptID": 3131, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "15.483521", "embeddingY": "-4.259475"},{"extension": "py", "date": "2020-03-06 00:21:47", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n  if len(mot)==0:\n    pos=None\n  else:\n    for i in range(len(mot)):\n      if lettre==liste[i]:\n        pos=liste[i]\n      else:\n        pos=None\n        \n  return pos", "user": "userdId_15", "attemptID": 3132, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-17.85706", "embeddingY": "-36.437775"},{"extension": "py", "date": "2020-03-02 07:39:50", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1<=annee2 and mois1<=mois2 and jour1<jour2:\n    return -1\n  elif annee1==annee2 and mois1==mois2 and jour1==jour2:\n    return 0\n  elif annee1>=annee2 and mois1>=mois2 and jour1>jour2:\n    return 1\n  \ncompareDates(10,1,2020,14,2,2020)\ncompareDates(14,2,2020,11,2,2020)\ncompareDates(10,1,2020,10,1,2020)", "user": "userdId_1", "attemptID": 3133, "exercise": "af7c1467ef9f7684d9ff58734067ae98", "exercise_name": "compareDates", "embeddingX": "83.10783", "embeddingY": "-14.498003"},{"extension": "py", "date": "2020-03-23 21:02:18", "correct": "0", "upload": "def quatrePlus100(l):\n  res=0\n  for i in range (len(l)):\n    if (i>100):\n      res=res+l[i]\n  return res", "user": "userdId_48", "attemptID": 3134, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-2.2965322", "embeddingY": "-53.52346"},{"extension": "py", "date": "2020-04-06 16:14:50", "correct": "0", "upload": "def suiteAri(liste):\n    if len(liste == 0):\n        res = True\n    else:\n        test = liste[1]-liste[0]\n        if len(liste) >= 3:\n            for i in range(2,len(liste)):\n                if liste[i]-liste[i-1] == test:\n                    res = True\n                else:\n                    res = False\n        else:\n            res = True\n    return res", "user": "userdId_42", "attemptID": 3135, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "14.4690895", "embeddingY": "-47.448223"},{"extension": "py", "date": "2020-03-02 02:36:52", "correct": "1", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if fin1>=debut2 and debut1<fin2:\n    return True\n  else:\n    return False\n  \nrendezVous(1,10,7,20)\nrendezVous(1,7,10,20)", "user": "userdId_1", "attemptID": 3136, "exercise": "6fd66bb2393fbf3809f1c6d04f3831f7", "exercise_name": "rendezVous", "embeddingX": "58.172318", "embeddingY": "-25.532017"},{"extension": "py", "date": "2020-04-05 03:39:49", "correct": "0", "upload": "def moyenne(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    s=0\n    for elem in liste:\n      s+=elem\n    res=s//len(liste)\n  return res", "user": "userdId_26", "attemptID": 3137, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-8.787578", "embeddingY": "-15.692136"},{"extension": "py", "date": "2020-03-05 23:35:42", "correct": "1", "upload": "def somme(liste):\n  res=0\n  for elem in liste:\n    res=res+elem\n  return res", "user": "userdId_12", "attemptID": 3138, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-28.290525", "embeddingY": "2.9231882"},{"extension": "py", "date": "2020-03-06 00:40:55", "correct": "1", "upload": "def nbOccurrencesLettre(lettre,mot):\n    if len(mot) == 0:\n      res = 0\n    else:\n      res = 0\n      for l in mot:\n        if l == lettre:\n          res+=1\n    return res", "user": "userdId_29", "attemptID": 3139, "exercise": "2864c9e5861229d2ff32570f6bc944fb", "exercise_name": "nbOccurrencesLettre", "embeddingX": "-9.765466", "embeddingY": "-28.809603"},{"extension": "py", "date": "2020-03-10 04:19:00", "correct": "0", "upload": "def sommeNPremiersEntiers(n):\n  res=0\n  for i in range(len(1,n)):\n    res=res+n[i]\n  return res", "user": "userdId_8", "attemptID": 3140, "exercise": "c315a540cf0bfb0182dc114c6f0eafd1", "exercise_name": "sommeNPremiersEntiers", "embeddingX": "-39.638603", "embeddingY": "-25.132626"},{"extension": "py", "date": "2020-03-31 03:37:13", "correct": "0", "upload": "def fusion(liste1,liste2):\n  res=[]\n  i=0\n  j=0\n  while i<len(liste1) and i<len(liste2):\n    if liste1[i]<liste2[j]:\n      res.append(liste1[i])\n      j=i+1\n    else:\n      res.append(liste1[i])\n      i=i+1\n      while j<len(liste2):\n        res.append(liste2[j])\n        j=j+1\n      \n      while i<len(liste1):\n          res.append(liste1[i])\n          i=i+1\n  return res", "user": "userdId_36", "attemptID": 3141, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-40.268875", "embeddingY": "48.80138"},{"extension": "py", "date": "2020-03-06 00:39:24", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0 :\n    res=0\n  else:\n    for elem in mot :\n      if mot (['a','e','i','o','u','y']) :\n        res=res+1\n    return res", "user": "userdId_24", "attemptID": 3142, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "6.6654835", "embeddingY": "-42.86301"},{"extension": "py", "date": "2020-04-06 06:04:55", "correct": "0", "upload": "def motPalindrome(mot):\n  ok=True\n  i=0\n  j=len(mot)-1\n  while i<len(mot) and ok:\n    if i!=j:\n      ok=False\n    i=i+1\n    j=j+1\n  return ok", "user": "userdId_3", "attemptID": 3143, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "9.134", "embeddingY": "52.540543"},{"extension": "py", "date": "2020-04-07 23:29:28", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  res=True\n  if liste[i]==0:\n    res=False\n  while i<len(liste)-1 and res==True:\n    q=liste[i+1]/liste[i]\n    if liste[i+1]/liste[i]==q:\n      res=True\n    else:\n      res=False\n    i+=1\n  return res\n", "user": "userdId_34", "attemptID": 3144, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "35.119404", "embeddingY": "54.568466"},{"extension": "py", "date": "2020-03-13 00:50:00", "correct": "1", "upload": "def sommeNPremiersEntiers(n):\n  res=0\n  for i in range(n+1):\n    res=res+i\n  return res", "user": "userdId_2", "attemptID": 3145, "exercise": "c315a540cf0bfb0182dc114c6f0eafd1", "exercise_name": "sommeNPremiersEntiers", "embeddingX": "-19.74478", "embeddingY": "13.581558"},{"extension": "py", "date": "2020-04-07 10:34:13", "correct": "1", "upload": "def suiteAri(liste):\n  ok=True\n  i=0\n  while i<len(liste)-1 and ok:\n    r=liste[1]-liste[0]\n    if liste[i+1]-liste[i]!=r:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 3146, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "20.063072", "embeddingY": "59.595245"},{"extension": "py", "date": "2020-03-17 06:15:51", "correct": "0", "upload": "def permutationListe(liste,permutation):\n  res=[0]*(len(permutation))\n  for i in range(len(liste)):\n    res[i]=liste[i] \n  return res", "user": "userdId_35", "attemptID": 3147, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-50.644093", "embeddingY": "-30.474545"},{"extension": "py", "date": "2020-03-12 07:30:06", "correct": "1", "upload": "def nombrePair(n):\n  if n%2==0:\n    return True\n  else:\n    return False", "user": "userdId_1", "attemptID": 3148, "exercise": "3001254263845e9a478696f81a704d33", "exercise_name": "nombrePair", "embeddingX": "50.603477", "embeddingY": "-2.4707663"},{"extension": "py", "date": "2020-04-14 03:57:20", "correct": "0", "upload": "def listeDecroissante(scores):\n  ok=False\n  while i<len(liste) and not ok:\n    if liste[i]>liste[i+1]:\n      res=True\n    else:\n      res=ok\n    return ok", "user": "userdId_21", "attemptID": 3149, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "-1.3220817", "embeddingY": "42.92905"},{"extension": "py", "date": "2020-04-05 03:39:17", "correct": "0", "upload": "def moyenne(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    s=0\n    for elem in liste:\n      s+=elem\n    res=s//len(liste)\n  return res", "user": "userdId_26", "attemptID": 3150, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-8.538189", "embeddingY": "-15.421956"},{"extension": "py", "date": "2020-03-13 00:55:51", "correct": "1", "upload": "def sommeNPremiersEntiers(n):\n  if n<=0:\n    res=0\n  else:\n    res=0\n    for elem in range(1,n+1):\n      res=res+elem \n  return res", "user": "userdId_5", "attemptID": 3151, "exercise": "c315a540cf0bfb0182dc114c6f0eafd1", "exercise_name": "sommeNPremiersEntiers", "embeddingX": "-16.60488", "embeddingY": "12.0306835"},{"extension": "py", "date": "2020-03-22 23:26:24", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut1<fin2 or debut2<fin1:\n    res=False\n  else:\n    res=True", "user": "userdId_9", "attemptID": 3152, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "60.900562", "embeddingY": "-19.257757"},{"extension": "py", "date": "2020-04-06 08:43:31", "correct": "0", "upload": "def suiteGeo(liste):\n    if liste==[] or len(liste)==1:\n      ok=True\n    elif 0 in liste:\n      while 0 in liste:\n        liste.remove(0)\n      if liste==[]:\n        ok=True\n      else:\n        ok=False\n    else:\n      ok=True\n      i=1\n      while i<len(liste) and ok:\n        cte=liste[i]/liste[i-1]\n        if liste[0]*cte**i!=liste[i]:\n          ok=False\n        i+=1\n    return ok", "user": "userdId_18", "attemptID": 3153, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "41.294117", "embeddingY": "67.563736"},{"extension": "py", "date": "2020-03-12 23:50:55", "correct": "0", "upload": "def jourNuit(heure):\n  Error=\"l'heure saisie est invalide\"\n  Time=\"on est\"\n  if heure<0 or heure>24:\n    res=Error\n  elif heure>=5 and heure<12:\n    res=Time+' le matin'\n    if heure>=6:\n      res=res+' et il fait jour'\n    else:\n      res=res+' et il fait nuit'\n  elif heure>=12 and heure<17:\n    res=Time+\" l'apr\u00e8s-midi et il fait jour\"\n  elif heure>=17 and heure<21:\n    res=Time+' le soir'\n    if heure<=18:\n      res=res+' et il fait jour'\n    else:\n      res=res+' et il fait nuit'\n  else:\n    res=Time+' la nuit et il fait nuit'\n  return res\n    \n  \n    ", "user": "userdId_2", "attemptID": 3154, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "80.80511", "embeddingY": "15.286719"},{"extension": "py", "date": "2020-03-19 23:59:09", "correct": "0", "upload": "def reconstruireChainePartielle(s,n):\n  res=\"\"\n  for i in range(0,len(s),n):\n    res=res+s[i]\n    return res", "user": "userdId_34", "attemptID": 3155, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-59.482258", "embeddingY": "-39.40887"},{"extension": "py", "date": "2020-03-13 00:02:00", "correct": "0", "upload": "def jourNuit(heure):\n  \n  if heure<0 or heure>24 :\n    res=\"l'heure saisie est invalide\"\n  else : \n    if heure>=6 and heure<18 :\n      res=\" et il fait jour\"\n    else :\n      res=\" et il fait nuit\"\n      if heure>=5 and heure<12 :\n        res=\"on est le matin\"+res\n      elif heure>=12 and heure<17 :\n        res=\"on est l'apr\u00e8s-midi\"+res\n      elif heure>=17 and heure<21 :\n        res=\"on est le soir\"+res\n      else :\n        res=\"on est la nuit\"+res\n    \n  return res", "user": "userdId_15", "attemptID": 3156, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "78.04896", "embeddingY": "19.931341"},{"extension": "py", "date": "2020-03-08 21:34:30", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1==annee2 and mois1==mois2 and jour1==jour2:\n    return 0\n  elif annee1<annee2 and mois1<mois2 and jour1<jour2:\n    return -1\n  else:\n    return 1", "user": "userdId_1", "attemptID": 3157, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "88.93225", "embeddingY": "-14.120667"},{"extension": "py", "date": "2020-03-22 09:24:13", "correct": "0", "upload": "def moyenne(liste):\n  if liste==():\n    res=none\n  else:\n    x=0\n    for i in range(len(liste)):\n      x=x+liste[i]\n    res=x/len(liste)\n  return res", "user": "userdId_16", "attemptID": 3158, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-12.334389", "embeddingY": "-6.284836"},{"extension": "py", "date": "2020-04-11 05:58:16", "correct": "1", "upload": "def compteChiffre(chiffre,nombre):\n  if chiffre==0 or nombre==0:\n    res=1\n  else:\n    res=0\n    while nombre!=0:\n      nombre=nombre//10\n      if nombre%10==chiffre:\n        res+=1\n  return res", "user": "userdId_8", "attemptID": 3159, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "23.418636", "embeddingY": "9.946916"},{"extension": "py", "date": "2020-03-24 03:46:06", "correct": "0", "upload": "def compare(chaine1,chaine2):\n    i=0\n    while chaine1[i]==chaine2[i]:\n      i=i+1\n    if chaine1[i]>chaine2[i]:\n      res=1\n    elif chaine1[i]<chaine2[i]:\n      res=-1\n    else:\n      res=0\n    return res", "user": "userdId_18", "attemptID": 3160, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-25.253284", "embeddingY": "58.53714"},{"extension": "py", "date": "2020-03-02 08:14:47", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if fin>=debut2 and debut1<fin2:\n    return True\n  else:\n    return False", "user": "userdId_1", "attemptID": 3161, "exercise": "6fd66bb2393fbf3809f1c6d04f3831f7", "exercise_name": "rendezVous", "embeddingX": "50.65726", "embeddingY": "-28.81965"},{"extension": "py", "date": "2020-04-06 01:18:16", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  ok=True\n  i=0\n  if len(liste)<=1 :\n    ok=True\n  else :\n    while i<(len(liste)-1) and ok :\n      if (a*liste[i]+b)!=liste[i+1] :\n        ok=False\n  return ok", "user": "userdId_15", "attemptID": 3162, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-78.19736", "embeddingY": "25.634104"},{"extension": "py", "date": "2020-04-12 05:36:57", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n    if len(liste)==0:\n      res=True\n    else:\n      res=True\n      i=0\n      while i<len(liste):\n        if liste[i+1]==a*liste[i]+b:\n          res=True\n        else:\n          res=False\n      return res\n    ", "user": "userdId_11", "attemptID": 3163, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-79.706825", "embeddingY": "25.418844"},{"extension": "py", "date": "2020-03-03 06:15:09", "correct": "0", "upload": "def nbVoyelles(mot):\n  res=0\n  for lettre in range(len(mot)):\n    if lettre in \"aeiouy\":\n       res=res+mot[lettre]\n  return res", "user": "userdId_25", "attemptID": 3164, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-6.0515027", "embeddingY": "-47.77161"},{"extension": "py", "date": "2020-03-22 11:46:19", "correct": "0", "upload": "def maximum(liste):\n  max=l[1]\n  for x in liste: \n    if x>max:\n      max=x\n    return max", "user": "userdId_21", "attemptID": 3165, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "31.964684", "embeddingY": "-51.94846"},{"extension": "py", "date": "2020-04-07 03:55:49", "correct": "1", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  nb=nombre\n  if nombre==0:\n    cpt=cpt+1\n  while nombre!=0:\n    nb=nombre%10\n    nombre=nombre//10\n    if chiffre==nb:\n      cpt=cpt+1\n  return cpt", "user": "userdId_7", "attemptID": 3166, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "15.683434", "embeddingY": "12.389987"},{"extension": "py", "date": "2020-04-06 06:14:03", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  for i in range(min(len(nombre))):\n    if chiffre==nombre:\n      cpt=cpt+1\n  return cpt", "user": "userdId_3", "attemptID": 3167, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-36.981735", "embeddingY": "-17.686714"},{"extension": "py", "date": "2020-03-13 00:36:17", "correct": "0", "upload": "def sommeNbPairs(liste):\n  if liste==0:\n    res=0\n  else:\n    for n in (liste):\n      if liste[n]%2==0:\n        res=res+liste[n]\n    return res", "user": "userdId_5", "attemptID": 3168, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "31.317333", "embeddingY": "-23.119854"},{"extension": "py", "date": "2020-03-20 00:15:29", "correct": "0", "upload": "def distribution(liste,n):\n  res=[]\n  cpt=[0]*(n+1)\n  for elem in liste:\n    cpt[elem]=cpt[elem]+1\n  return res\n", "user": "userdId_13", "attemptID": 3169, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-60.656433", "embeddingY": "-16.01482"},{"extension": "py", "date": "2020-03-06 00:58:06", "correct": "1", "upload": "def ecart(liste):\n\tif len(liste) == 0:\n\t\tres = None\n\telse:\n\t\tma = liste[0]\n\t\tmi = liste[0]\n\t\tfor i in range(len(liste)):\n\t\t\tif liste[i] > ma and liste[i] > mi:\n\t\t\t\tma = liste[i]\n\t\t\telif liste[i] < ma and liste[i]< mi:\n\t\t\t\tmi = liste[i]\n\t\tres = ma - mi\n\treturn res", "user": "userdId_29", "attemptID": 3170, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "-2.1437747", "embeddingY": "-84.9856"},{"extension": "py", "date": "2020-03-30 22:05:30", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n  i=0\n  j=0\n  res = -1\n  while j <3:\n    if l[i] == x:\n      j+=1\n      if j == 3:\n        res = l[i+1]\n    i+=1\n  return(res)", "user": "userdId_4", "attemptID": 3171, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-8.3926935", "embeddingY": "70.4836"},{"extension": "py", "date": "2020-04-07 03:44:45", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  \n  if len(liste)==1 and liste[0]!=0:\n    res=True\n  elif len(liste)>=1 and liste[0]==0:\n    res=False\n  elif len(liste)==0:\n    res=True\n  else:\n    end=False\n    while i<len(liste)-1 and end==False:\n      r=liste[i]/liste[i+1]\n      if liste[i]/liste[i+1]==r:\n        res=True\n      else:\n        res=False\n        end=True\n      i+=1\n  return res\n  ", "user": "userdId_26", "attemptID": 3172, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "38.989742", "embeddingY": "58.77711"},{"extension": "py", "date": "2020-03-05 22:04:31", "correct": "0", "upload": "def maximum(liste):\n  if len(liste):\n    res=none\n  else:\n      res=0\n      for i in range(1,len(liste)):\n        res=len(liste)>res\n        res=len(liste)  \n  return ", "user": "userdId_25", "attemptID": 3173, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-5.8077903", "embeddingY": "-42.434513"},{"extension": "py", "date": "2020-03-19 23:57:53", "correct": "1", "upload": "def reconstruireChainePartielle(s,n):\n  res=''\n  for i in range(0,len(s),n):\n    res=res+s[i]\n  return res", "user": "userdId_2", "attemptID": 3174, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-59.8629", "embeddingY": "-40.698544"},{"extension": "py", "date": "2020-04-08 02:47:19", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  res=True\n  listetest=[]\n  while i<len(liste) and res==True:\n    if liste[i]!=0 and len(liste)>=2:\n      listetest=[liste[0]]\n      q=liste[1]/liste[0]\n      u=liste[0]*q**i\n      listetest.append(u)\n      if liste[i]==listetest[i]:\n        res=True\n      else:\n        res=False\n    else:\n      res=False\n    i=i+1\n  return res", "user": "userdId_26", "attemptID": 3175, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "34.452637", "embeddingY": "68.83609"},{"extension": "py", "date": "2020-04-06 06:15:34", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  i=0\n  for i in nombre:\n    if chiffre==nombre[i]:\n      cpt=cpt+1\n    i=i+1\n  return cpt", "user": "userdId_3", "attemptID": 3176, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-36.614693", "embeddingY": "-14.0027895"},{"extension": "py", "date": "2020-03-12 06:26:21", "correct": "0", "upload": "def somme(liste):\n  res=0\n  for i in len(liste):\n    res=res+len(liste)\n  return res", "user": "userdId_20", "attemptID": 3177, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-39.15234", "embeddingY": "-24.183117"},{"extension": "py", "date": "2020-03-03 02:40:14", "correct": "1", "upload": "def semestreValide(ue1, ue2):\n    if ue1 >= 10 and ue2 >= 10:\n        return True\n    elif ue1 >= 10:\n        if ((ue1 + ue2) / 2) >= 10:\n            return True\n    else:\n        return False", "user": "userdId_42", "attemptID": 3178, "exercise": "70ae7ad6cf504e0fa8cedebd8e8a825f", "exercise_name": "semestreValide", "embeddingX": "69.53625", "embeddingY": "-0.09411166"},{"extension": "py", "date": "2020-04-12 03:51:45", "correct": "1", "upload": "def sousChaine(s1,s2):\n    res=False\n    if s1 in s2:\n      res=True\n    return res", "user": "userdId_16", "attemptID": 3179, "exercise": "4bdf8c9c5d020593e1771e4d3ae1ae0d", "exercise_name": "sousChaine", "embeddingX": "46.21339", "embeddingY": "-16.254301"},{"extension": "py", "date": "2020-03-05 22:04:46", "correct": "0", "upload": "def maximum(liste):\n    res=0\n    for elen in liste:\n     \tif elen>0:\n        \tres=elen\n    return res", "user": "userdId_49", "attemptID": 3180, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "30.631544", "embeddingY": "-42.20518"},{"extension": "py", "date": "2020-03-09 22:54:06", "correct": "0", "upload": "def ecart(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    max=lste[0]\n    min=liste[0]\n    for i in range(len(liste)):\n      if liste[i]>max:\n        max=liste[i]\n    for i in range(len(liste)):\n      if liste[i]<min:\n        min=liste[i]\n    res=max-min\n    return res", "user": "userdId_12", "attemptID": 3181, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "8.043232", "embeddingY": "-68.66939"},{"extension": "py", "date": "2020-04-11 05:25:19", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  res=0\n  while nombre!=0:\n    if nombre[i]==chiffre:\n      nombre=nombre//10\n      res+=1\n  return res", "user": "userdId_8", "attemptID": 3182, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "19.583752", "embeddingY": "10.870302"},{"extension": "py", "date": "2020-03-22 05:49:20", "correct": "1", "upload": "def ecart(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    grand=liste[0]\n    petit=liste[0]\n    for i in range(len(liste)):\n      if liste[i]>grand:\n        grand=liste[i]\n      if liste[i]<petit:\n        petit=liste[i]\n    res=grand-petit\n    return res", "user": "userdId_12", "attemptID": 3183, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "-0.30096295", "embeddingY": "-84.153694"},{"extension": "py", "date": "2020-03-12 09:42:46", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n  if len(liste)==0:\n    return None\n  cpt=0\n  for i in range (len(liste)):\n    if lettre in mot:\n      cpt=liste[i]\n  return cpt", "user": "userdId_1", "attemptID": 3184, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "20.337957", "embeddingY": "-38.618534"},{"extension": "py", "date": "2020-03-31 04:23:29", "correct": "0", "upload": "def nbChiffres(nombre):\n  nombre = str(nombre)\n  i = 0\n  res = 0\n  while i < len(nombre):\n    res = res + 1\n  return res", "user": "userdId_17", "attemptID": 3185, "exercise": "3dcf332c003a1f3bf15df22ee17884a3", "exercise_name": "nbChiffres", "embeddingX": "-40.92143", "embeddingY": "42.379593"},{"extension": "py", "date": "2020-04-07 04:01:36", "correct": "1", "upload": "def motPalindrome(mot):\n  res=True\n  i=0\n  while i<len(mot) and res:\n    if mot[i]!=mot[-1-i]:\n      res=False\n    i+=1\n  return res", "user": "userdId_30", "attemptID": 3186, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "22.896162", "embeddingY": "40.809433"},{"extension": "py", "date": "2020-03-03 06:06:29", "correct": "1", "upload": "def nbVoyelles(mot):\n  res=0\n  for lettre in mot:\n    if lettre in \"aeiouy\":\n      res=res+1\n  return res", "user": "userdId_8", "attemptID": 3187, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "16.155596", "embeddingY": "-24.783773"},{"extension": "py", "date": "2020-03-12 06:52:56", "correct": "0", "upload": "def maximum(liste):\n  res=liste[0]\n  for i in range:\n     if res<i:\n      return i\n  else:\n    return res", "user": "userdId_20", "attemptID": 3188, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "42.92969", "embeddingY": "-57.031513"},{"extension": "py", "date": "2020-03-31 03:00:11", "correct": "0", "upload": "def fusion(liste1,liste2):\n  res=[]\n  i=0\n  j=0\n  while i<len(liste1) and j<len(liste2):\n    if liste1[i]<liste2[j]:\n      res.append(liste1[i])\n    else:\n      res.append(liste2[j])\n    i+=1\n    j+=1\n    return res", "user": "userdId_13", "attemptID": 3189, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-41.61697", "embeddingY": "52.775963"},{"extension": "py", "date": "2020-03-23 00:22:40", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  res=[]\n  for i in range(len(liste)):\n    if liste[i]+1>liste[i]:\n      res=liste[i]+1\n  return res", "user": "userdId_8", "attemptID": 3190, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-8.891643", "embeddingY": "-62.67994"},{"extension": "py", "date": "2020-03-12 22:04:47", "correct": "0", "upload": "def moyenne(liste):\n  if len (liste)==0:\n    res=None\n  else:\n    res=liste[0]\n    cpt=liste[0]\n    for elem in range(len(liste)):\n      res=res+elem\n      cpt=cpt+1\n      res=res%cpt\n  return res ", "user": "userdId_20", "attemptID": 3191, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-7.432487", "embeddingY": "-3.551055"},{"extension": "py", "date": "2020-04-07 02:39:59", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  i=0\n  end=False\n  res=True\n  while i<len(phrase) and end==False:\n    if phrase[i]==\" \":\n      end=True\n    elif phrase[i]==phrase[-i-1]:\n      res=True\n    elif phrase[-i-1]==\" \":\n      if phrase[i]==phrase[-i-2]:\n        res=True\n    else:\n      res=False\n    i+=1\n    return res\n   ", "user": "userdId_34", "attemptID": 3192, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "34.504463", "embeddingY": "40.816307"},{"extension": "py", "date": "2020-03-31 06:09:57", "correct": "1", "upload": "def stockerChiffres(nombre):\n  res=[]\n  while nombre!=0:\n    res.append(nombre%10)\n    nombre=nombre//10\n  if res==[]:\n    res=[0]\n  return res", "user": "userdId_9", "attemptID": 3193, "exercise": "49a87f644f84a443327fb4315b47f249", "exercise_name": "stockerChiffres", "embeddingX": "40.994263", "embeddingY": "13.810946"},{"extension": "py", "date": "2020-03-27 06:23:51", "correct": "0", "upload": "def compare(chaine1,chaine2):\n  i=0\n  res=0\n  while res==0 and i<len(chaine1) and i<len(chaine2):\n    if chaine1[i]<chaine2[i]:\n      res=-1\n    elif chaine1[i]>chaine2[i]:\n      res=1\n    i=i+1\n  return res", "user": "userdId_12", "attemptID": 3194, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-24.935184", "embeddingY": "61.236473"},{"extension": "py", "date": "2020-04-06 22:54:46", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  ok=True\n  i=0\n  while i<len(liste)-1 and ok:\n    if liste[i]==a*liste[i+1]+b:\n      ok=False\n    prec=ok\n    i+=1\n  return ok", "user": "userdId_12", "attemptID": 3195, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-86.049", "embeddingY": "19.78897"},{"extension": "py", "date": "2020-03-06 00:05:07", "correct": "1", "upload": "def moyenne(liste):\n  if liste==[]:\n    return None\n  else:\n    S=0\n    nbNotes=0\n    for elem in liste:\n      S=S+elem\n      nbNotes=nbNotes+1\n      \n  return S/nbNotes", "user": "userdId_15", "attemptID": 3196, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-1.5151204", "embeddingY": "-6.209481"},{"extension": "py", "date": "2020-04-05 09:12:19", "correct": "0", "upload": "def phrasePalindrome(phrase):\n    if phrase=='':\n      ok=True\n    else:\n      ok=True\n      i=0\n      j=-1\n      while i<len(phrase) and j>(-len(phrase)-1) and ok:\n        if phrase[i]!=phrase[j] and phrase[i]!='' and phrase[j]!='':\n          ok=False\n        i+=1\n        j-=1\n        if phrase[i]=='':\n          i+=1\n        if phrase[j]=='':\n          j-=1\n    return ok", "user": "userdId_18", "attemptID": 3197, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "38.289574", "embeddingY": "40.38497"},{"extension": "py", "date": "2020-03-17 20:49:35", "correct": "1", "upload": "def distribution(liste,n):\n  cpt=[0]*(n+1)\n  for elem in liste:\n    cpt[elem]=cpt[elem]+1\n  return cpt", "user": "userdId_12", "attemptID": 3198, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-58.78626", "embeddingY": "-15.281173"},{"extension": "py", "date": "2020-03-20 00:42:08", "correct": "0", "upload": "def Permutation(mot):\n  res=\"\"\n  for k in range(0,len(mot),2):\n    res=mot[k+1]+mot[k]\n\n  return res", "user": "userdId_5", "attemptID": 3199, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-44.56954", "embeddingY": "-47.46217"},{"extension": "py", "date": "2020-03-08 23:09:43", "correct": "0", "upload": "from math import sqrt \n\ndef polynome(a,b,c):\n  d=b**2-(4*a*c)\n  if d<0:\n    return 'pas de solution'\n  elif d==0:\n    solution=-b/(2*a)\n    return solution\n  else:\n    if d>0:\n      solution1=(-b-(sqrt(d)))/(2*a)\n      solution2=(-b+(sqrt(d)))/(2*a)\n      return solution1 and solution2", "user": "userdId_1", "attemptID": 3200, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-56.2312", "embeddingY": "9.842211"},{"extension": "py", "date": "2020-04-07 23:38:09", "correct": "0", "upload": "def suiteGeo(liste):\n  ok=True\n  i=0\n  q=liste[1]/liste[0]\n  while i<len(liste)-1 and ok:\n    if liste[i]!=0:\n      if liste[i+1]/liste[i]!=q:\n        ok=False\n    i=i+1\n  return ok\n", "user": "userdId_1", "attemptID": 3201, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "23.772987", "embeddingY": "60.079346"},{"extension": "py", "date": "2020-03-08 23:14:38", "correct": "0", "upload": "from math import sqrt \n\ndef polynome(a,b,c):\n  d=b**2-(4*a*c)\n  if d<0:\n    return 'pas de solution'\n  elif d==0:\n    solution=-b/(2*a)\n    return solution\n  else:\n    if d>0:\n      solution1=((-b-sqrt(d))/(2*a))\n      solution2=((-b+sqrt(d))/(2*a))\n      return solution1 and solution2", "user": "userdId_1", "attemptID": 3202, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-51.33825", "embeddingY": "6.174701"},{"extension": "py", "date": "2020-04-07 04:13:05", "correct": "0", "upload": "def suiteGeo(liste):\n  if len(liste)==0:\n    res=True\n  elif len(liste)==1 and liste[0]!=0:\n    res=True\n  else:\n    if liste[0]==0:\n      res=False\n    else:\n      i=0\n      End=False\n      while i<len(liste)-1 and End==False:\n        r=liste[1]/liste[0]\n        if liste[i+1]/liste[i]==r:\n          res=True\n        else:\n          res=False\n          End=True\n        i+=1\n  return res", "user": "userdId_26", "attemptID": 3203, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "39.535713", "embeddingY": "59.307552"},{"extension": "py", "date": "2020-03-05 06:44:48", "correct": "0", "upload": "from math import sqrt\ndef polynome(a,b,c):\n  x=0\n  delta=b**2-(4*a*c)\n  if delta>0 :\n    x=(-b-sqrt(delta))/(2*a),(-b+sqrt(delta))/(2-a)\n  elif delta==0 :\n    x=(-b)/(2*a)\n  else :\n    x='pas de solution'\n  return x\n\n    \n", "user": "userdId_28", "attemptID": 3204, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-50.46084", "embeddingY": "8.877112"},{"extension": "py", "date": "2020-03-06 00:39:42", "correct": "0", "upload": "def moyenne(liste):\n  res=0\n  cpt=0\n  if len(liste)==0:\n    res=0\n  else:\n     for i in liste:\n       res=res+i\n       cpt=cpt+1\n  res=res%cpt\n  return res", "user": "userdId_14", "attemptID": 3205, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-4.6719017", "embeddingY": "-4.601213"},{"extension": "py", "date": "2020-04-07 04:21:43", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  ok=True\n  i=0\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=a*liste[i-1]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 3206, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-74.133125", "embeddingY": "27.399343"},{"extension": "py", "date": "2020-05-04 22:46:10", "correct": "0", "upload": "def prononcable(mot):\n  res=True\n  cpt=0\n  i=0\n  while i<len(mot) and res:\n    if mot[i] not in 'aeiouy':\n      cpt+=1\n    elif mot[i] in 'aeiouy':\n      cpt=0\n    if cpt>3:\n      res=False\n    i+=1\n  return res", "user": "userdId_26", "attemptID": 3207, "exercise": "6318b210c201fba050d60bc0913cb7ef", "exercise_name": "prononcable", "embeddingX": "14.162885", "embeddingY": "38.55619"},{"extension": "py", "date": "2020-04-07 02:41:37", "correct": "1", "upload": "def phrasePalindrome(phrase):\n  i=0\n  end=False\n  res=True\n  while i<len(phrase) and end==False:\n    if phrase[i]==\" \":\n      end=True\n    elif phrase[i]==phrase[-i-1]:\n      res=True\n    elif phrase[-i-1]==\" \":\n      if phrase[i]==phrase[-i-2]:\n        res=True\n    else:\n      res=False\n    i+=1\n  return res\n   ", "user": "userdId_34", "attemptID": 3208, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "34.49289", "embeddingY": "40.77787"},{"extension": "py", "date": "2020-03-09 21:52:02", "correct": "1", "upload": "def nombrePair(n):\n  if n%2==0:\n    res=True\n  else:\n    res=False\n  return res", "user": "userdId_12", "attemptID": 3209, "exercise": "3001254263845e9a478696f81a704d33", "exercise_name": "nombrePair", "embeddingX": "43.62404", "embeddingY": "-3.7527187"},{"extension": "py", "date": "2020-04-10 00:45:57", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i]==0:\n      ok=False\n    if liste[i]!=0:\n      q=liste[i]/liste[0]\n      if liste[i+1]/liste[i]!=q:\n        ok=False\n    i=i+1\n  return ok", "user": "userdId_3", "attemptID": 3210, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "29.446615", "embeddingY": "60.87328"},{"extension": "py", "date": "2020-03-06 00:06:31", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    res=0\n  else:\n    for elem in mot:\n      res=0\n      if elem=='a' or 'e' or 'i' or 'o' or 'u' or 'y':\n        res=res+1\n  return res     ", "user": "userdId_14", "attemptID": 3211, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "4.812052", "embeddingY": "-25.866625"},{"extension": "py", "date": "2020-04-08 00:50:57", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res = True\n  i = 0\n  while res and i < len(liste)-1:\n    if liste[i+1] != (a*liste[i]+b) :\n      res = False\n    i = i + 1\n  return res\n\ndef suiteAriGeo(liste):\n  if len(liste) < 3 :\n    res = True\n  else :\n    ecart1 = liste[1]-liste[0]\n    ecart2 = liste[2]-liste[1]\n  if ecart1 == 0 or ecart2 == 0 :\n    res = False\n  else :\n    a = ecart2/ecart1\n    b = liste[1]-a*liste[0]\n    res = verifSuiteAriGeo(liste,a,b)\n  return res\n", "user": "userdId_17", "attemptID": 3212, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "16.646126", "embeddingY": "70.84808"},{"extension": "py", "date": "2020-04-12 03:55:06", "correct": "1", "upload": "def sousChaine(s1,s2):\n  res=None\n  if s1 in s2:\n    res=True\n  else:\n    res=False\n  return res", "user": "userdId_8", "attemptID": 3213, "exercise": "4bdf8c9c5d020593e1771e4d3ae1ae0d", "exercise_name": "sousChaine", "embeddingX": "46.093597", "embeddingY": "-17.53688"},{"extension": "py", "date": "2020-03-05 22:05:42", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n  \treturn None\n  else :\n    max=(liste)[0]\n    \n\n    return None", "user": "userdId_14", "attemptID": 3214, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "12.877805", "embeddingY": "-67.48413"},{"extension": "py", "date": "2020-04-12 06:16:19", "correct": "0", "upload": "def suiteGeo(liste):\n    if len(liste)==0:\n      res=True\n    else:\n      res=True\n      for i in range(1,len(liste)):\n        if liste[i]==0:\n          res=False\n        else:\n          x=liste[1]/liste[0]\n          if liste[i]==liste[i-1]*x:\n            res=True\n          else:\n            res=False\n    return res", "user": "userdId_11", "attemptID": 3215, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "-15.178089", "embeddingY": "-82.35667"},{"extension": "py", "date": "2020-04-12 07:15:52", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  if liste==[]:\n    res=True\n  c=[]\n  f=[]\n  res=False\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n    e=liste[0]\n  f.append(e)\n  f.extend(c)\n  return f", "user": "userdId_8", "attemptID": 3216, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-73.7664", "embeddingY": "24.504946"},{"extension": "py", "date": "2020-04-16 23:50:33", "correct": "0", "upload": "def indiceInsertion(sc,scores):\n  for i in range(len(scores)):\n    if sc>scores[i]:\n      return i\n    if sc<scores[i]:\n      return i+1", "user": "userdId_1", "attemptID": 3217, "exercise": "f8a820b2bd54d18d36716e3d703858f7", "exercise_name": "indiceInsertion", "embeddingX": "-18.317305", "embeddingY": "-46.83667"},{"extension": "py", "date": "2020-03-20 00:53:01", "correct": "0", "upload": "def permutationListe(liste,permutation):\n  res=[]\n  for i in range(permutation):\n    res.insert(permutation(i),liste(i))\n\n  return res", "user": "userdId_13", "attemptID": 3218, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-42.204636", "embeddingY": "-16.727997"},{"extension": "py", "date": "2020-03-24 06:47:40", "correct": "0", "upload": "def fusion(liste1,liste2):\n  res=[]\n  i=0\n  while i<len(liste1)+len(liste2) and len(res)<len(liste1)+len(liste2):\n    if liste1[i]>liste2[i]:\n      res=res+[liste2[i]]\n    elif liste1[i]==liste2[i]:\n      res=res+[liste1[i]]+[liste2[i]]\n    else:\n      res=res+[liste1[i]]\n    i=i+1\n  return res", "user": "userdId_26", "attemptID": 3219, "exercise": "6613efb6c873b142dc2b6040c14eb616", "exercise_name": "fusion", "embeddingX": "-25.18727", "embeddingY": "54.136875"},{"extension": "py", "date": "2020-04-10 00:15:11", "correct": "0", "upload": "def suiteAriGeo(liste):\n  a=liste[1]-liste[0]\n  b=liste[1]-liste[0]\n  if liste[i+1]==liste[i]*a:\n      b=0 and a==liste[1]/liste[0]\n  if liste[i+1]==liste[i]+b:\n    a=1 and b==liste[1]-liste[0]\n          \ndef verifSuiteAriGeo(liste,a,b):\n  ok=True\n  i=0\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=a*liste[i]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 3220, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "-47.80545", "embeddingY": "-11.118824"},{"extension": "py", "date": "2020-04-07 03:52:50", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  nb=nombre\n  while nombre!=0:\n    nb=nombre%10\n    nombre=nombre//10\n    if chiffre==nb:\n      cpt=cpt+1\n  return cpt", "user": "userdId_7", "attemptID": 3221, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "15.671868", "embeddingY": "12.414922"},{"extension": "py", "date": "2020-03-10 03:16:23", "correct": "0", "upload": "def jourNuit(heure):\n  if (heure<0 or heure>24) :\n    res=\"l'heure saisie est invalide\"\n  else :\n    if (heure>=5 or heure>=21) :\n      res=\"on est la nuit\"\n    elif (heure<12) :\n        res=\"on est le matin\"\n    elif (heure<17) :\n      \tres=\"on est l'apr\u00e8s-midi\"\n    else :\n        res=\"on est le soir\"\n    if (heure<6 or heure>=18) :\n        res=res+\" et il fait nuit\"\n    else :\n      \tres=res+\" et il fait jour\"\n\n  return res", "user": "userdId_27", "attemptID": 3222, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "73.91992", "embeddingY": "15.601366"},{"extension": "py", "date": "2020-03-17 05:13:33", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  res=''\n  if debut+longueur>len(s):\n    fin=len(s)\n  else:\n    fin=debut+longueur\n  for i in range(debut,Fin):\n    res=res+s[i]\n  return res", "user": "userdId_23", "attemptID": 3223, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-78.391266", "embeddingY": "19.230349"},{"extension": "py", "date": "2020-03-10 21:10:46", "correct": "0", "upload": "def ecart(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=0\n    max=0\n    min=0\n    for i in range(len(liste)):\n      if liste[i]<res:\n        min=liste[i]\n      if liste[i]>res:\n        max=liste[i]\n        res=max-min\n    return res", "user": "userdId_9", "attemptID": 3224, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "13.272528", "embeddingY": "-83.368454"},{"extension": "py", "date": "2020-03-12 08:42:05", "correct": "0", "upload": "def bissextile(annee):\n    if annee%4==0 :\n      res=True \n    else :\n      res=False\n      if annee%400==0 :\n        res=True\n      else :\n        res=False\n    return res", "user": "userdId_24", "attemptID": 3225, "exercise": "a7d37636649c0ada991520788deeb2d0", "exercise_name": "bissextile", "embeddingX": "44.463474", "embeddingY": "-3.3374605"},{"extension": "py", "date": "2020-04-12 10:32:18", "correct": "0", "upload": "def elemGeo(n,u0,q):\n  q=1\n  for i in range(n):\n    q=q*n\n  res=u0*q\n  \n  return res", "user": "userdId_38", "attemptID": 3226, "exercise": "d7c83a7fb9b49e28804e55955ad06968", "exercise_name": "elemGeo", "embeddingX": "-27.517485", "embeddingY": "16.438042"},{"extension": "py", "date": "2020-04-10 00:52:40", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  ok=False\n  i=0\n  j=0\n  while i<len(phrase)//2 and j<len(phrase)//2:\n    if phrase[i]==\" \":\n      i=i+1\n    elif phrase[-j]==\" \":\n      j=j-1\n    elif phrase[i]!=phrase[-j-1]:\n      ok=False\n    i=i+1\n    j=j-1\n  if phrase==\"\":\n    ok=True\n  return ok", "user": "userdId_3", "attemptID": 3227, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "43.299007", "embeddingY": "43.432686"},{"extension": "py", "date": "2020-03-31 04:04:07", "correct": "1", "upload": "def indiceOccurrence(n,x,l):\n    if l==[] or x not in l:\n      cpt=None\n    else:\n      trouve=False\n      cpt=-1\n      i=0\n      while i<len(l) and not trouve:\n        if x==l[i] and n!=0:\n          n-=1\n        if n==0:\n          trouve=True\n        cpt+=1\n        i+=1\n      if n!=0:\n        cpt=None\n    return cpt", "user": "userdId_18", "attemptID": 3228, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "2.4862034", "embeddingY": "79.12534"},{"extension": "py", "date": "2020-03-03 05:34:10", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    for i in (liste):\n      if res < liste[i]:\n        res = liste[i]\n  return res", "user": "userdId_8", "attemptID": 3229, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "25.663511", "embeddingY": "-62.61289"},{"extension": "py", "date": "2020-03-31 05:41:22", "correct": "0", "upload": "def nbChiffres(nombre):\n  res=0\n  nb=nombre\n  cpt=0\n  while nb!=0:\n    cpt=cpt+1\n    nb=nb//10\n  return cpt\n    \n    ", "user": "userdId_28", "attemptID": 3230, "exercise": "3dcf332c003a1f3bf15df22ee17884a3", "exercise_name": "nbChiffres", "embeddingX": "0.43719566", "embeddingY": "18.194584"},{"extension": "py", "date": "2020-03-22 09:40:54", "correct": "1", "upload": "def nombrePair(n):\n  if n%2==0:\n    res=True\n  else:\n    res=False\n  return res", "user": "userdId_21", "attemptID": 3231, "exercise": "3001254263845e9a478696f81a704d33", "exercise_name": "nombrePair", "embeddingX": "44.500626", "embeddingY": "-3.6113896"},{"extension": "py", "date": "2020-03-16 00:54:45", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut2<fin1:\n    res=True\n  else:\n      res=False\n  return res", "user": "userdId_16", "attemptID": 3232, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "52.832794", "embeddingY": "-16.269114"},{"extension": "py", "date": "2020-04-13 23:45:18", "correct": "1", "upload": "def listeDecroissante(scores):\n  res=True\n  if scores==[]:\n    res=True\n  for i in range(len(scores)-1):\n    if scores[i]<=scores[i+1]:\n      res=False\n  return res", "user": "userdId_8", "attemptID": 3233, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "-9.25811", "embeddingY": "-68.625984"},{"extension": "py", "date": "2020-03-06 00:12:01", "correct": "1", "upload": "def ecart(liste):\n\tif len(liste)==0:\n\t\tres=None\n\telse:\n\t\tma=max(liste)\n\t\tmi=min(liste)\n\t\tres=max(liste)-min(liste)\n\treturn res\n\n    ", "user": "userdId_19", "attemptID": 3234, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "11.422369", "embeddingY": "-44.616714"},{"extension": "py", "date": "2020-04-06 15:20:26", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  i=0\n  for i in nombre:\n    if nombre[i]==chiffre:\n      cpt=cpt+1\n    i=i+1\n  return cpt", "user": "userdId_3", "attemptID": 3235, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-36.38796", "embeddingY": "-13.9494915"},{"extension": "py", "date": "2020-03-10 04:07:31", "correct": "0", "upload": "def sommeNPremiersEntiersPairs(n):\n    res=0\n    for i in range(n,0,-2):\n      res=res+i\n    return res", "user": "userdId_18", "attemptID": 3236, "exercise": "3030dc079e6607c253e89e8ef4784b74", "exercise_name": "sommeNPremiersEntiersPairs", "embeddingX": "-18.814167", "embeddingY": "8.3780575"},{"extension": "py", "date": "2020-04-14 03:57:48", "correct": "1", "upload": "def meilleurScoreJoueur(scores,joueurs,nom):\n  i=0\n  while i<len(joueurs):\n    if nom==joueurs[i]:\n      return scores[i]\n    i=i+1\n  return 0", "user": "userdId_7", "attemptID": 3237, "exercise": "c96fadc94086276f98451a798b3bb730", "exercise_name": "meilleurScoreJoueur", "embeddingX": "-13.009746", "embeddingY": "66.80392"},{"extension": "py", "date": "2020-04-12 04:47:38", "correct": "1", "upload": "def elemGeo(n,u0,q):\n    res=0\n    x=0\n    while x<=n:\n      res=u0*q**n\n      x+=1\n    return res", "user": "userdId_11", "attemptID": 3238, "exercise": "d7c83a7fb9b49e28804e55955ad06968", "exercise_name": "elemGeo", "embeddingX": "-10.650881", "embeddingY": "22.869509"},{"extension": "py", "date": "2020-03-19 23:21:00", "correct": "1", "upload": "def reconstruireChainePartielle(s,n):\n  res=\"\"\n  for i in range (0,len(s),n):\n    res=res+s[i]\n    \n  return res", "user": "userdId_38", "attemptID": 3239, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-60.79341", "embeddingY": "-41.27833"},{"extension": "py", "date": "2020-03-22 05:28:59", "correct": "1", "upload": "def nbVoyelles(mot):\n  res=0\n  for lettre in mot:\n    if lettre in 'aeiouy':\n      res=res+1\n  return res", "user": "userdId_12", "attemptID": 3240, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "16.36592", "embeddingY": "-24.525019"},{"extension": "py", "date": "2020-03-27 06:37:29", "correct": "0", "upload": "def compare(chaine1,chaine2):\n  res=0\n  i=0\n  while i<len(chaine1) and i<len(chaine2):\n    if chaine[i]<chaine2[i]:\n      res=res-1\n    else:\n      res=res+1\n  return res", "user": "userdId_14", "attemptID": 3241, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-12.871661", "embeddingY": "54.940075"},{"extension": "py", "date": "2020-03-06 00:00:15", "correct": "1", "upload": "def somme(liste):\n    res = 0\n    for nb in liste:\n      res = res + nb\n    return res", "user": "userdId_29", "attemptID": 3242, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-26.712666", "embeddingY": "2.003465"},{"extension": "py", "date": "2020-04-05 23:20:26", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  ok=True\n  l=[]\n  i0=0\n  i=0\n  j=len(l)-1\n  while i0<len(phrase) :\n    if i0!='':\n      l.append(phrase[i0])\n    i0+=1\n      \n  while i<j and ok :\n    if l[i]!=l[j] :\n      ok=False\n    i+=1\n    j-=1\n  return ok", "user": "userdId_15", "attemptID": 3243, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "42.540676", "embeddingY": "37.697582"},{"extension": "py", "date": "2020-04-12 11:20:33", "correct": "1", "upload": "def verifSuiteAriGeo(liste,a,b):\n    if len(liste)==0:\n      res=True\n    else:\n      res=True\n      for i in range(1,len(liste)):\n        if liste[i]==a*liste[i-1]+b:\n          res=True\n        else:\n          res=False\n    return res\n    ", "user": "userdId_11", "attemptID": 3244, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-78.48577", "embeddingY": "7.9143763"},{"extension": "py", "date": "2020-03-17 06:19:14", "correct": "1", "upload": "def qualifJO(sexe,record,nbvictoires,champion):\n  if champion==True:\n    res=True\n  else:\n    if sexe=='M' and record<12.0 and nbvictoires>=3:\n      res=True\n    elif sexe=='F' and record<15.0 and nbvictoires>=3:\n      res=True\n    else:\n      res=False\n  return res", "user": "userdId_8", "attemptID": 3245, "exercise": "891e7b0ed5fbddb755edc84d479bc1ef", "exercise_name": "qualifJO", "embeddingX": "63.964413", "embeddingY": "-10.852304"},{"extension": "py", "date": "2020-04-14 04:27:05", "correct": "0", "upload": "def meilleurScoreJoueur(scores,joueurs,nom):\n  res=0\n  trouve=False\n  i=0\n  while i<len(score) and not trouve:\n    if nom==listejoueur[i]:\n       res=score[i]\n       trouve=True     \n    i=i+1\n  return res", "user": "userdId_39", "attemptID": 3246, "exercise": "c96fadc94086276f98451a798b3bb730", "exercise_name": "meilleurScoreJoueur", "embeddingX": "-2.2425642", "embeddingY": "44.23225"},{"extension": "py", "date": "2020-04-06 09:17:16", "correct": "0", "upload": "def suiteGeo(liste):\n  if liste==[] or len(liste)==1:\n    ok = True\n  elif 0 in liste:\n    ok = False\n  else:\n    ok = True\n    i = 1\n    cte = liste[i]/liste[i-1]\n    while i<len(liste) and ok:\n      if liste[i]/liste[i-1]!=cte:\n        ok = False\n      i+=1\n  return ok ", "user": "userdId_6", "attemptID": 3247, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "40.66749", "embeddingY": "63.927227"},{"extension": "py", "date": "2020-04-01 06:23:06", "correct": "0", "upload": "def nbOccurrencesLettre(lettre,mot):\n  res=0\n  for elem in mot:\n    if elem==lettre:\n      res=res+1\n  return None", "user": "userdId_12", "attemptID": 3248, "exercise": "2864c9e5861229d2ff32570f6bc944fb", "exercise_name": "nbOccurrencesLettre", "embeddingX": "-12.337295", "embeddingY": "-28.886517"},{"extension": "py", "date": "2020-03-31 04:02:16", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n  trouve=False\n  i=0\n  cpt=0\n  while i<len(liste) and not trouve:\n    if liste[i]==x:\n      i=i+1\n      cpt=cpt+1\n    if cpt==n:\n     trouve=True\n  res=i\n  return res", "user": "userdId_50", "attemptID": 3249, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-2.2602236", "embeddingY": "44.217297"},{"extension": "py", "date": "2020-03-06 00:46:42", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(liste)==0:\n    res=0\n  else:\n      i=\"a,e,i,o,u,y\"\n      if i in mot:\n        res=res+1\n  return res             \n\n      \n    ", "user": "userdId_33", "attemptID": 3250, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "20.334059", "embeddingY": "-38.588837"},{"extension": "py", "date": "2020-03-09 22:09:57", "correct": "0", "upload": "def bissextile(annee):\n  res=0\n  if annee%100>0:\n    if annee%4==0 and annee%400==0:\n      res=False\n  else:\n    res=True\n  return res", "user": "userdId_12", "attemptID": 3251, "exercise": "a7d37636649c0ada991520788deeb2d0", "exercise_name": "bissextile", "embeddingX": "47.238808", "embeddingY": "-2.8689916"},{"extension": "py", "date": "2020-03-17 06:09:48", "correct": "0", "upload": "def permutationListe(liste,permutation):\n  res=[0]*(len(liste)+1)\n  for i in liste:\n    permutation[i]=liste[i] \n  return res", "user": "userdId_35", "attemptID": 3252, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-56.136864", "embeddingY": "-17.20046"},{"extension": "py", "date": "2020-04-06 14:51:14", "correct": "0", "upload": "def produitScalaire(vec1,vec2):\n  res=0\n  for i in range(len(vec1),len(vec2)):\n    res=res+(vec1[i]*vec2[i])\n  return res", "user": "userdId_3", "attemptID": 3253, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-43.73171", "embeddingY": "-29.280088"},{"extension": "py", "date": "2020-04-13 22:32:04", "correct": "1", "upload": "def nextConway(s):\n  res=''\n  prec=None\n  cpt=0\n  for c in s:\n    if c==prec:\n      cpt+=1\n    else:\n      if prec:\n        res+=str(cpt)+str(prec)\n      cpt=1\n    prec=c\n  if prec:\n    res+=str(cpt)+str(prec)\n  return res", "user": "userdId_8", "attemptID": 3254, "exercise": "a580c32690609356dae4401b3c89a3b8", "exercise_name": "nextConway", "embeddingX": "6.992833", "embeddingY": "-6.434403"},{"extension": "py", "date": "2020-03-17 05:39:33", "correct": "0", "upload": "def permutationChaine(s):\n  res=\"\"\n  for i in range(0,len(s)-1,2):\n    res=res+s[1+i]+s[i]\n  if len(s)-1%2!=0:\n    res=res+s[i-1]\n  return res", "user": "userdId_8", "attemptID": 3255, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-34.1883", "embeddingY": "-58.001568"},{"extension": "py", "date": "2020-03-17 04:55:09", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  res=0\n  fin=debut+longueur\n  if longueur>len(s):\n    fin=len(s)\n  for i in range(debut,fin):\n    res=res+s[i]\n  return res", "user": "userdId_12", "attemptID": 3256, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-69.42886", "embeddingY": "16.138662"},{"extension": "py", "date": "2020-03-22 13:27:43", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n  if len(i)==0:\n    res=NONE\n  else: \n    res=0\n    for l in mot:\n      if l==lettre:\n        res=mot[l]\n  return res", "user": "userdId_21", "attemptID": 3257, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "20.348276", "embeddingY": "-38.625942"},{"extension": "py", "date": "2020-03-24 05:14:11", "correct": "1", "upload": "def quatrePlus100(liste):\n    res=[]\n    i=0\n    while i<len(liste)and len(res)<4:\n      if liste[i]>100:\n        res.append(liste[i])\n      i=i+1\n    return res", "user": "userdId_9", "attemptID": 3258, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-26.024202", "embeddingY": "40.92539"},{"extension": "py", "date": "2020-06-02 21:56:10", "correct": "0", "upload": "def polynome(a,b,c):\n  import math\n  delta=b**2-4*a*c\n  if delta>0:\n    x1=(-b+(math.sqrt(delta)))/2*a\n    x2=(-b-(math.sqrt(delta)))/2*a\n    return (x1,x2)\n  elif delta==0:\n    x=(-b)/a\n    return x\n  else:\n    return 'pas de solution'", "user": "userdId_12", "attemptID": 3259, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-50.089783", "embeddingY": "11.462534"},{"extension": "py", "date": "2020-03-31 03:43:02", "correct": "0", "upload": "def fusion(liste1,liste2):\n  res=[]\n  i=0\n  j=0\n  while i<len(liste1) and i<len(liste2):\n    if liste1[i]<liste2[j]:\n      res.append(liste1[i])\n      i=i+1\n    else:\n      res.append(liste2[i])\n      j=j+1\n      while j<len(liste2):\n        res.append(liste2[j])\n        j=j+1\n      while i<len(liste1):\n          res.append(liste1[i])\n          i=i+1\n  return res", "user": "userdId_36", "attemptID": 3260, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-40.671627", "embeddingY": "46.467167"},{"extension": "py", "date": "2020-03-10 21:39:20", "correct": "0", "upload": "def ecart(liste):\n  x=liste[0]\n  y=liste[0]\n  for i in range(1,len(liste)):\n    if liste[i]>x:\n      x=liste[i]\n    if liste[i]<y:\n      y=liste[i]\n  res=x-y\n  return res", "user": "userdId_14", "attemptID": 3261, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "0.6776407", "embeddingY": "-82.52838"},{"extension": "py", "date": "2020-04-07 03:31:38", "correct": "0", "upload": "def sousChaine(s1,s2):\n  Trouve=False\n  i=0\n  while i<len(s1) and i<len(s2):\n    ok=False\n    if s1 in s2:\n      Trouve=True\n    i=i+1\n  return Trouve\n", "user": "userdId_1", "attemptID": 3262, "exercise": "a7cdd094daa2f0bfccc7a4ec419f7243", "exercise_name": "sousChaine", "embeddingX": "-0.15673544", "embeddingY": "51.863213"},{"extension": "py", "date": "2020-04-10 01:03:27", "correct": "0", "upload": "def suiteAriGeo(liste):\n  i=0\n  while i<len(liste)-1:\n    if i!=0:\n      a=liste[1]/liste[0]\n    b=liste[i+1]-liste[i]*a\n    if liste[0]!=0:\n      a=liste[1]/liste[0]\n      if liste[i+1]==liste[i]*a:\n          b=0\n    if liste[i+1]==liste[i]+b:\n      a=1\n    i=i+1\n  i=0\n  ok=True\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=a*liste[i]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 3263, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "31.646055", "embeddingY": "82.53009"},{"extension": "py", "date": "2020-03-29 09:37:17", "correct": "1", "upload": "def permutationChaine(s):\n  res=''\n  for i in range(0,len(s)-1,2):\n    res=res+s[i+1]+s[i]\n  if len(s)%2!=0:\n    res=res+s[-1]\n  return res", "user": "userdId_12", "attemptID": 3264, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-36.52873", "embeddingY": "-58.42987"},{"extension": "py", "date": "2020-04-06 22:35:55", "correct": "1", "upload": "def elemAri(n,u0,r): \n  return u0+r*n", "user": "userdId_12", "attemptID": 3265, "exercise": "f239498950e974e29e01472749d9a09d", "exercise_name": "elemAri", "embeddingX": "-35.47147", "embeddingY": "20.735367"},{"extension": "py", "date": "2020-03-02 23:56:55", "correct": "1", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut1 < debut2:\n    if debut1 <= debut2 and debut2 <= fin1:\n      res= True\n    else:\n      res= False\n      \n  else:\n    if debut2 <= debut1 and debut1 <= fin2:\n      res= True\n    else:\n      res= False\n      \n  return res\n      \n\n\nassert rendezVous(1, 10, 7, 20)== True\nassert rendezVous(1, 7, 10,20)== False", "user": "userdId_7", "attemptID": 3266, "exercise": "6fd66bb2393fbf3809f1c6d04f3831f7", "exercise_name": "rendezVous", "embeddingX": "57.60379", "embeddingY": "-18.62747"},{"extension": "py", "date": "2020-04-05 10:54:58", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  ok=True\n  i=0\n  j=0\n  while i<len(phrase) and ok:\n    if phrase[i]==' ':\n      i+=1\n    elif phrase[j]==' ':\n      j-=1\n    ok=phrase[i]==phrase[j]\n    i+=1\n    j-=1\n  return ok", "user": "userdId_12", "attemptID": 3267, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "36.03879", "embeddingY": "41.212116"},{"extension": "py", "date": "2020-03-04 05:01:16", "correct": "1", "upload": "def somme(liste):\n    if len(liste)==0:\n      res=0\n    else:\n      res=0\n      for i in liste:\n        res=res+i\n    return res", "user": "userdId_18", "attemptID": 3268, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-0.08188364", "embeddingY": "-19.473791"},{"extension": "py", "date": "2020-04-06 15:19:10", "correct": "0", "upload": "def compteChiffre(x,y):\n  cpt=0\n  i=0\n  for i in range(x):\n    if x[i]==y:\n      cpt=cpt+1\n    i=i+1\n  return cpt", "user": "userdId_3", "attemptID": 3269, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-20.72727", "embeddingY": "-30.677122"},{"extension": "py", "date": "2020-03-17 05:40:34", "correct": "1", "upload": "def distribution(liste,n):\n  cpt=[0]*(n+1)\n  for elem in liste:\n    cpt[elem]+=1\n  return cpt\n  \n    ", "user": "userdId_9", "attemptID": 3270, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-64.964775", "embeddingY": "-12.085155"},{"extension": "py", "date": "2020-04-06 04:04:34", "correct": "0", "upload": "def motPalindrom(mot):\n  i=0\n  res=True\n  while i<len(mot) and res==True:\n    pl=mot[i]\n    dl=mot[-i-1]\n    if pl==dl:\n        res=True\n    else:\n        res=False\n    i+=1\n  return res", "user": "userdId_26", "attemptID": 3271, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "9.699926", "embeddingY": "60.485775"},{"extension": "py", "date": "2020-04-07 02:44:29", "correct": "1", "upload": "def verifSuiteAriGeo(liste,a,b):\n  ok=True\n  i=0\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=a*liste[i]+b:\n      ok=False\n    i+=1\n  return ok", "user": "userdId_12", "attemptID": 3272, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-70.042404", "embeddingY": "27.191763"},{"extension": "py", "date": "2020-03-09 05:32:16", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  \n  res=0\n  for elem in jour1,mois1,annee1,jour2,mois2,annee2 :\n    \n    if (jour1,mois1,annee1<jour2,mois2,annee2):\n      res=res-1\n      \n    if (jour1,mois1,annee1==jour2,mois2,annee2):\n      res=res\n      \n    if (jour1,mois1,annee1<jour2,mois2,annee2):\n      res=res+1\n      \n  return res", "user": "userdId_23", "attemptID": 3273, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "-20.488884", "embeddingY": "-7.688859"},{"extension": "py", "date": "2020-04-07 03:31:44", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  res=True\n  if liste[0]<1:\n    res=False\n  elif len(liste)==1 and liste[0]!=0:\n    res=True\n  else:\n    if len(liste)>1 and liste[0]==0:\n      res=False\n    while i<len(liste)-1 and res==True:\n      r=liste[0]/liste[1]\n      if liste[i]/liste[i+1]==r:\n        res=True\n      else:\n        res=False\n        i+=1\n  return res\n  ", "user": "userdId_26", "attemptID": 3274, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "35.589603", "embeddingY": "55.648922"},{"extension": "py", "date": "2020-03-03 06:20:24", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut1 and fin1 in debut2 and fin2:\n    return True\n  else:\n    return False", "user": "userdId_8", "attemptID": 3275, "exercise": "6fd66bb2393fbf3809f1c6d04f3831f7", "exercise_name": "rendezVous", "embeddingX": "-59.834652", "embeddingY": "23.754805"},{"extension": "py", "date": "2020-03-19 23:30:08", "correct": "0", "upload": "def reconstruireChainePartielle(s,n):\n  if s=='':\n    res=s\n  for i in range(0,s,n):\n    res=res+i\n  return res", "user": "userdId_2", "attemptID": 3276, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-21.501286", "embeddingY": "-24.00113"},{"extension": "py", "date": "2020-04-07 04:32:10", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  res=0\n  cpt=1\n  l=[]\n  decomp=nombre\n  while decomp!=0:\n    l.append(decomp%10)\n    decomp=decomp//10\n    cpt=cpt+1\n  for i in range(cpt):\n    if l[i]==chiffre:\n      res=res+1\n  return res", "user": "userdId_31", "attemptID": 3277, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "7.475134", "embeddingY": "2.3572404"},{"extension": "py", "date": "2020-03-06 00:16:43", "correct": "0", "upload": "def maximum(liste):\n  res=liste\n  for elem in liste:\n    if res<elem:\n      res=elem\n  return res", "user": "userdId_23", "attemptID": 3278, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "41.234787", "embeddingY": "-55.10663"},{"extension": "py", "date": "2020-03-31 05:37:29", "correct": "0", "upload": "def nbChiffres(nombre):\n  res=0\n  nb=nombre\n  cpt=0\n  while nb%10:\n    cpt=cpt+1\n    nb=nb//10\n  return cpt\n    \n    ", "user": "userdId_28", "attemptID": 3279, "exercise": "3dcf332c003a1f3bf15df22ee17884a3", "exercise_name": "nbChiffres", "embeddingX": "-1.1719171", "embeddingY": "15.381824"},{"extension": "py", "date": "2020-03-31 03:31:13", "correct": "1", "upload": "def fusion(liste1,liste2):\n  res=[]\n  i=0\n  j=0\n  while i<len(liste1) and j<len(liste2):\n    if liste1[i]<liste2[j]:\n     res.append(liste1[i])\n     i=i+1\n    else:\n     res.append(liste2[j])\n     j=j+1\n  while j<len(liste2):\n     res.append(liste2[j])\n     j=j+1\n  while i<len(liste1):\n      res.append(liste1[i])\n      i=i+1\n  return res", "user": "userdId_50", "attemptID": 3280, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-39.55692", "embeddingY": "49.292667"},{"extension": "py", "date": "2020-03-17 06:25:42", "correct": "0", "upload": "def maximum(liste):\n    if len(liste)==0:\n      res=0\n    else:\n      res=liste[0]\n    for elem in liste:\n        res>liste\n        res=elem\n    return res", "user": "userdId_22", "attemptID": 3281, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "14.824244", "embeddingY": "-60.32386"},{"extension": "py", "date": "2020-06-02 07:21:09", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n\tres=False\n\tif debut2<=debut1:\n\t\tif fin2>=debut1:\n\t\t\tres=True\n\tif debut2<=fin1:\n\t\tif fin2>=fin1:\n\t\t\tres=True\n\treturn res", "user": "userdId_3", "attemptID": 3282, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "52.161587", "embeddingY": "-21.134214"},{"extension": "py", "date": "2020-04-07 23:42:51", "correct": "1", "upload": "def motPalindrome(mot):\n  palindrome=True\n  i=0\n  while i<len(mot) and palindrome==True:\n    if mot[i]!=mot[-i-1]:\n      palindrome=False\n    i=i+1\n  return palindrome", "user": "userdId_5", "attemptID": 3283, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "22.939138", "embeddingY": "52.53506"},{"extension": "py", "date": "2020-04-12 06:55:30", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  if liste==[]:\n    res=True\n  c=[]\n  res=False\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n  return c\n  c=[liste[0]]+c\n  return c", "user": "userdId_8", "attemptID": 3284, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-72.4196", "embeddingY": "18.49723"},{"extension": "py", "date": "2020-03-02 21:32:27", "correct": "0", "upload": "def bissextile(annee):\n  if annee%400 == 0 :\n    res = True\n  else :\n    res = False\n  return res", "user": "userdId_17", "attemptID": 3285, "exercise": "a7d37636649c0ada991520788deeb2d0", "exercise_name": "bissextile", "embeddingX": "44.48133", "embeddingY": "-4.059338"},{"extension": "py", "date": "2020-03-27 05:35:23", "correct": "0", "upload": "def quatrePlus100(liste):\n  i=0\n  while i>len(liste):\n    res.append(liste[i])\n    i=i+1\n  if i>4:\n    res=i\n  return res", "user": "userdId_20", "attemptID": 3286, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-19.451956", "embeddingY": "34.861626"},{"extension": "py", "date": "2020-03-02 02:59:16", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1<=annee2 and mois1<=mois2 and jour1<jour2:\n    return -1\n  elif annee1==annee2 and mois1==mois2 and jour1==jour2:\n    return 0\n  elif annee1>annee2 and mois1>mois2 and jour1>jour2:\n    return 1\n  else:\n    return 1\n  \ncompareDates(10,1,2020,14,2,2020)\ncompareDates(14,2,2020,11,2,2020)\ncompareDates(10,1,2020,10,1,2020)", "user": "userdId_1", "attemptID": 3287, "exercise": "af7c1467ef9f7684d9ff58734067ae98", "exercise_name": "compareDates", "embeddingX": "86.12643", "embeddingY": "-14.664929"},{"extension": "py", "date": "2020-04-12 05:10:29", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=False\n  c=[]\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n  return c", "user": "userdId_8", "attemptID": 3288, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-79.07083", "embeddingY": "19.088491"},{"extension": "py", "date": "2020-03-06 00:58:02", "correct": "1", "upload": "def ecart(liste):\n\tif len(liste) == 0:\n\t\tres = None\n\telse:\n\t\tma = liste[0]\n\t\tmi = liste[0]\n\t\tfor i in range(len(liste)):\n\t\t\tif liste[i] > ma and liste[i] > mi:\n\t\t\t\tma = liste[i]\n\t\t\telif liste[i] < ma and liste[i]< mi:\n\t\t\t\tmi = liste[i]\n\t\tres = ma - mi\n\treturn res", "user": "userdId_29", "attemptID": 3289, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "-2.1259882", "embeddingY": "-84.97038"},{"extension": "py", "date": "2020-03-10 04:10:30", "correct": "0", "upload": "def SommeNbPairs(liste):\n  res=0\n  for x in liste:\n    if x%2==0:\n      res=res+x\n  return res", "user": "userdId_31", "attemptID": 3290, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "-22.252365", "embeddingY": "9.056031"},{"extension": "py", "date": "2020-03-10 04:29:45", "correct": "0", "upload": "def sommeNPremiersEntiersPairs(n):\n  res=0\n  for i in range(1,n+1):\n    if liste[i]%2==0:\n      res=res+liste[i]\n  return res", "user": "userdId_8", "attemptID": 3291, "exercise": "3030dc079e6607c253e89e8ef4784b74", "exercise_name": "sommeNPremiersEntiersPairs", "embeddingX": "27.689802", "embeddingY": "-10.512835"},{"extension": "py", "date": "2020-03-05 22:09:18", "correct": "0", "upload": "def prononcable(mot):\n  if len(mot)<4:\n    return True\n  else:\n    voyelles = 'aeiouy'\n    cpt=0\n    laLettrePrecedenteEstUneVoyelle = mot[0] in 'aeiouy'\n    for i in mot :\n      if i in 'aeiouy' == laLettrePrecedenteEstUneVoyelle:\n        cpt+=1\n        if cpt == 4:\n          return False\n      else:\n        cpt = 0\n        laLettrePrecedenteEstUneVoyelle = not laLettrePrecedenteEstUneVoyelle \n    return True", "user": "userdId_6", "attemptID": 3292, "exercise": "6318b210c201fba050d60bc0913cb7ef", "exercise_name": "prononcable", "embeddingX": "14.877463", "embeddingY": "-13.358475"},{"extension": "py", "date": "2020-03-22 08:26:49", "correct": "1", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n    if fin2>=debut1 and fin1>=debut2:\n      res=True  \n    else :\n      res= False\n    return res ", "user": "userdId_47", "attemptID": 3293, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "51.078724", "embeddingY": "-24.16162"},{"extension": "py", "date": "2020-03-06 00:28:04", "correct": "0", "upload": "def minimum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=liste[0]\n    for i in range(1,len(liste)):\n      if i<liste[i]:\n        res=liste[i]\n  return res", "user": "userdId_14", "attemptID": 3294, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "26.139256", "embeddingY": "-68.86973"},{"extension": "py", "date": "2020-03-02 03:08:35", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1-annee2<0:\n    return -1 \n  else:\n    if mois1-mois2<0:\n      return -1\n    else:\n      if jour1-jour2<0:\n        return -1\n      elif jour1-jour2==0:\n        return 0\n      else:\n        return 1\n      \ncompareDates(10,1,2020,14,2,2020)\ncompareDates(14,2,2020,11,2,2020)\ncompareDates(10,1,2020,10,1,2020)", "user": "userdId_1", "attemptID": 3295, "exercise": "af7c1467ef9f7684d9ff58734067ae98", "exercise_name": "compareDates", "embeddingX": "91.09948", "embeddingY": "-15.729828"},{"extension": "py", "date": "2020-03-20 01:04:56", "correct": "0", "upload": "def distribution(liste,n):\n  res=[]\n  for i in range(0,n):\n    b=1\n    res.append(0)\n    for a in liste:\n      if a==i:\n        res[i]=b\n        b=b+1\n  return res", "user": "userdId_40", "attemptID": 3296, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "7.276036", "embeddingY": "-0.5113987"},{"extension": "py", "date": "2020-04-06 00:28:41", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  ok=True\n  i=0\n  j=0\n  l=[]\n  while j<len(phrase) :\n    if 'a'<= phrase[j] and phrase[j]<='z' and phrase[j]!='' :\n      l.append(phrase[j])\n    j+=1\n\n  while i<len(l):\n    if phrase[i]!=phrase[-i-1]:\n      ok=False\n    i+=1\n  return ok", "user": "userdId_15", "attemptID": 3297, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "43.571415", "embeddingY": "36.469303"},{"extension": "py", "date": "2020-03-31 07:08:00", "correct": "0", "upload": "def nombreSymetrique(nombre):\n  nr=[]\n  if nombre==0:\n    nr=[0]\n  while nombre!=0:\n    res.append(nombre%10)\n    nombre=nombre//10\n  res=True\n  i=0\n  while i<len(nr)//2 and res:\n    if nr[i]!=nr[-i-1]:\n      res=False\n    i+=1\n  return res", "user": "userdId_8", "attemptID": 3298, "exercise": "fae4d6a34289cf5bf06f9d6d17e8547e", "exercise_name": "nombreSymetrique", "embeddingX": "41.94322", "embeddingY": "17.277838"},{"extension": "py", "date": "2020-03-05 23:50:10", "correct": "0", "upload": "def nbVoyelles(mot):\n    Voy=[a,e,u,i,o,y]\n    res=0\n    for i in mot:\n      if i in Voy:\n        res=res+1\n    return res", "user": "userdId_2", "attemptID": 3299, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-49.162746", "embeddingY": "-4.5233984"},{"extension": "py", "date": "2020-04-08 04:15:17", "correct": "0", "upload": "def suiteAriGeo(liste):\n  if len(liste) <= 2:\n    res = True\n  elif liste[0] == 0:\n    res = True\n  else:\n    a = liste[1] // liste[0]\n    b = liste[1] % liste[0]\n    i = 2\n    trouve = False\n    while i < len(liste) and trouve == False:\n      if (((liste[i] // liste[i-1]) != a) or (liste[i] % liste[i-1]) != b):\n        trouve = True\n      i+=1\n    if trouve == False:\n      res = True\n    else:\n      res = False\n      \n  return res", "user": "userdId_42", "attemptID": 3300, "exercise": "4c9665daf155b115fe13218141fa1aff", "exercise_name": "suiteAriGeo", "embeddingX": "34.17296", "embeddingY": "28.211327"},{"extension": "py", "date": "2020-03-05 23:52:04", "correct": "0", "upload": "def somme(liste):\n  res=0\n  for i in range(len(liste)):\n    res=res+liste[i]", "user": "userdId_1", "attemptID": 3301, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-44.329952", "embeddingY": "-34.4829"},{"extension": "py", "date": "2020-04-14 05:33:46", "correct": "1", "upload": "def nbOccurrencesJoueur(joueurs,nom):\n  i=0\n  res=0\n  for i in range(len(joueurs)):\n    if nom==joueurs[i]:\n      res=res+1\n    if nom not in joueurs:\n      res=0\n  return res", "user": "userdId_28", "attemptID": 3302, "exercise": "00ee5faf82e54951fbdb2ba2656f7ae7", "exercise_name": "nbOccurrencesJoueur", "embeddingX": "-20.367233", "embeddingY": "-41.287037"},{"extension": "py", "date": "2020-03-05 23:46:01", "correct": "0", "upload": "def maximum(liste):\n  res=0\n  for i in range(len(liste)) :\n    if liste[i]>res :\n      res=res+liste[i]\n    else :\n      res=None\n  return res", "user": "userdId_24", "attemptID": 3303, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-1.6441176", "embeddingY": "-57.605873"},{"extension": "py", "date": "2020-02-29 06:11:02", "correct": "0", "upload": "def polynome(a,b,c):\n    import math\n    delta=(b**2)-(4*a*c)\n    if delta>0:\n      x1=(-b-(math.sqrt(delta)))/(2*a)\n      x2=(-b+(math.sqrt(delta)))/(2*a)\n      print(x1,x2)\n    elif delta==0:\n      x0=-b/(2*a)\n      print(x0)\n    else:\n      print('pas de solution')", "user": "userdId_18", "attemptID": 3304, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-52.91601", "embeddingY": "6.3910465"},{"extension": "py", "date": "2020-03-05 23:57:38", "correct": "1", "upload": "def moyenne(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=0\n    cpt=0\n    for i in range(len(liste)):\n      cpt=cpt+1\n      res=res+liste[i]\n    res=res/cpt\n  return res", "user": "userdId_30", "attemptID": 3305, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-8.780661", "embeddingY": "-7.5314226"},{"extension": "py", "date": "2020-03-17 03:09:16", "correct": "1", "upload": "def reconstruireChainePartielle(s,n):\n  res=''\n  for i in range (0,len(s),n):\n    res=res+s[i]\n  return res", "user": "userdId_10", "attemptID": 3306, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-60.65046", "embeddingY": "-41.6467"},{"extension": "py", "date": "2020-04-05 23:58:10", "correct": "1", "upload": "def elemAri(n,u0,r):\n    return u0+n*r", "user": "userdId_18", "attemptID": 3307, "exercise": "f239498950e974e29e01472749d9a09d", "exercise_name": "elemAri", "embeddingX": "-35.505417", "embeddingY": "20.73928"},{"extension": "py", "date": "2020-04-06 15:01:10", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  ok=True\n  cpt=0\n  i=0\n  while i<len(nombre) and ok:\n    if nombre[i]==chiffre:\n      cpt=cpt+1\n    i=i+1\n  return cpt", "user": "userdId_3", "attemptID": 3308, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-3.2893088", "embeddingY": "45.9029"},{"extension": "py", "date": "2020-03-06 00:24:20", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n\tres = 0\n\tfor l in range(0,len(mot)):\n\t\tres = mot[l]\n    \n\treturn res", "user": "userdId_29", "attemptID": 3309, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-35.937126", "embeddingY": "-19.03759"},{"extension": "py", "date": "2020-03-06 00:19:19", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    return None\n  cpt=0\n  for lettre in mot:\n    if lettre in 'aeiouy':\n      cpt=cpt+1\n  return cpt", "user": "userdId_1", "attemptID": 3310, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "7.1243806", "embeddingY": "-29.094442"},{"extension": "py", "date": "2020-03-17 05:18:14", "correct": "0", "upload": "def permutationChaine(s):\n  res=''\n  for i in range(0,len(s)-1,2):\n    if x%2!=0:\n      res=res+s(-1)\n    return res\n    ", "user": "userdId_9", "attemptID": 3311, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-36.778217", "embeddingY": "-63.765354"},{"extension": "py", "date": "2020-03-16 05:28:01", "correct": "0", "upload": "def nbSyllabes(mot):\n    cpt=0\n    v='aeiouy'\n    if mot[0] in v:\n        cpt+=1\n    for i in range(1,len(mot)):\n        if mot[i] in v and mot[i-1] not in v:\n            cpt+=1\n    if mot.endswith('e'):\n        cpt-=1\n    if cpt==0:\n        cpt+=1\n    if cpt=='':\n      cpt=0\n    return cpt\n    ", "user": "userdId_18", "attemptID": 3312, "exercise": "1c86bec0f4df503e23db53994f3d2991", "exercise_name": "nbSyllabes", "embeddingX": "-24.040121", "embeddingY": "-71.67885"},{"extension": "py", "date": "2020-03-12 21:55:46", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=0\n    for i in range(len(liste)):\n      if liste[i]>res:\n        res=liste[i]\n  return res", "user": "userdId_25", "attemptID": 3313, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "0.62441146", "embeddingY": "-62.209282"},{"extension": "py", "date": "2020-04-06 04:28:48", "correct": "1", "upload": "def compteChiffre(chiffre,nombre):\n  nbr=str(nombre)\n  chffre=str(chiffre)\n  i=0\n  res=0\n  while i<len(nbr):\n    if chffre==nbr[i]:\n      res+=1\n    i+=1\n  return res", "user": "userdId_26", "attemptID": 3314, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-7.9371505", "embeddingY": "65.218414"},{"extension": "py", "date": "2020-03-24 03:52:10", "correct": "0", "upload": "def compare(chaine1,chaine2):\n    i=0\n    while i<len(chaine1) and i<len(chaine2) and chaine1[i]==chaine2[i]:\n      i=i+1\n    if chaine1[i]>chaine2[i]:\n      res=1\n    elif chaine1[i]<chaine2[i]:\n      res=-1\n    else:\n      res=0\n    return res", "user": "userdId_18", "attemptID": 3315, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-24.456501", "embeddingY": "58.89327"},{"extension": "py", "date": "2020-03-10 04:08:34", "correct": "0", "upload": "def sommeNPremiersEntiersPairs(n):\n    res=0\n    for i in range(n,0,-2):\n      res=res+i\n    return res", "user": "userdId_18", "attemptID": 3316, "exercise": "3030dc079e6607c253e89e8ef4784b74", "exercise_name": "sommeNPremiersEntiersPairs", "embeddingX": "-18.814373", "embeddingY": "8.378436"},{"extension": "py", "date": "2020-03-02 07:57:05", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1<annee2 and mois1<annee2 and jour1<jour2:\n    return -1\n  elif annee1==annee2 and mois1==mois2 and jour1==jour2:\n    return 0\n  else:\n    return 1\n  \ncompareDates(10,1,2020,14,2,2020)\ncompareDates(14,2,2020,11,2,2020)\ncompareDates(10,1,2020,10,1,2020)", "user": "userdId_1", "attemptID": 3317, "exercise": "af7c1467ef9f7684d9ff58734067ae98", "exercise_name": "compareDates", "embeddingX": "90.01297", "embeddingY": "-12.905875"},{"extension": "py", "date": "2020-03-24 06:20:34", "correct": "0", "upload": "def fusion(liste1,liste2):\n  liste3=liste1.append(liste2)\n  liste3.sort()\n  return res", "user": "userdId_13", "attemptID": 3318, "exercise": "6613efb6c873b142dc2b6040c14eb616", "exercise_name": "fusion", "embeddingX": "-40.60414", "embeddingY": "-8.755907"},{"extension": "py", "date": "2020-04-08 00:03:50", "correct": "0", "upload": "def suiteGeo(liste):\n  ok=True\n  i=0\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i]!=0:\n      q=liste[1]/liste[0]\n    if liste[i]!=0:\n      if liste[i+1]/liste[i]!=q:\n        ok=False\n    i=i+1\n  return ok\n", "user": "userdId_1", "attemptID": 3319, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "31.667809", "embeddingY": "63.73026"},{"extension": "py", "date": "2020-03-06 00:00:16", "correct": "0", "upload": "def moyenne(liste):\n  somme=0\n  for elem in liste:\n    somme=somme+elem\n  moy=somme/len(liste)\n  return moy\n\n  ", "user": "userdId_2", "attemptID": 3320, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-21.39019", "embeddingY": "-1.1663359"},{"extension": "py", "date": "2020-04-14 05:50:15", "correct": "0", "upload": "def meilleurClassementJoueur(scores,joueurs,nom):\n  MS=1\n  i=0\n  while i<len(joueurs) and nom!=joueurs[i]:\n    MS=MS+1\n    i=i+1\n    if nom not in joueurs:\n      MS=0\n  return MS", "user": "userdId_28", "attemptID": 3321, "exercise": "be6ce0a06c5d396190024c7c681da95d", "exercise_name": "meilleurClassementJoueur", "embeddingX": "-9.256176", "embeddingY": "81.60144"},{"extension": "py", "date": "2020-03-31 03:03:23", "correct": "0", "upload": "def fusion(liste1,liste2):\n  res=[]\n  i=0\n  j=0\n  while i<len(liste1) and j<len(liste2):\n    if liste[i]<liste[j]:\n     res.append(i)\n     i=i+1\n    if liste[i]>=liste[j]:\n     res.append(j)\n     j=j+1\n\n  return res", "user": "userdId_50", "attemptID": 3322, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-39.752842", "embeddingY": "52.62075"},{"extension": "py", "date": "2020-04-08 04:14:12", "correct": "0", "upload": "def suiteAriGeo(liste):\n  if len(liste) <= 2:\n    res = True\n  elif liste[0] == 0:\n    res = True\n  else:\n    a = liste[1] // liste[0]\n    b = liste[1] % liste[0]\n    i = 2\n    trouve = False\n    while i < len(liste) and trouve == False:\n      if (((liste[i] // liste[i-1]) != a) or (liste[i] % liste[i-1]) != b):\n        trouve = True\n      i+=1\n    if trouve == False:\n      res = True\n    else:\n      res = False\n      \n    return res", "user": "userdId_42", "attemptID": 3323, "exercise": "4c9665daf155b115fe13218141fa1aff", "exercise_name": "suiteAriGeo", "embeddingX": "34.267593", "embeddingY": "28.135124"},{"extension": "py", "date": "2020-03-13 00:45:41", "correct": "0", "upload": "def sommeNPremiersEntiers(n):\n  if n<0:\n    return 0\n  else:\n    res=0\n  for i in range (len(n)):\n    res=res+n[i]\n  return res\n      \n    ", "user": "userdId_1", "attemptID": 3324, "exercise": "c315a540cf0bfb0182dc114c6f0eafd1", "exercise_name": "sommeNPremiersEntiers", "embeddingX": "32.090252", "embeddingY": "-68.24459"},{"extension": "py", "date": "2020-04-07 23:27:01", "correct": "0", "upload": "def motPalindrome(mot):\n  i=0\n  c=True\n  while i<(len(mot)/2) and c:\n    if mot[i]==mot[len(mot)-i-1]:\n      c=True\n    else:\n      c=False\n  if c==True:\n    return True\n  else:\n    return False\n    \n    \n\n", "user": "userdId_19", "attemptID": 3325, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "28.542347", "embeddingY": "51.46541"},{"extension": "py", "date": "2020-04-03 01:10:18", "correct": "1", "upload": "def doubleChiffre(nombre):\n  trouve=False\n  prec=None\n  while nombre!=0 and not trouve:\n    if prec==nombre%10:\n      trouve=True\n    prec=nombre%10\n    nombre=nombre//10\n  return trouve", "user": "userdId_1", "attemptID": 3326, "exercise": "c83ea6acd3e9f6f5543e87d515e8a44a", "exercise_name": "doubleChiffre", "embeddingX": "12.752257", "embeddingY": "21.31196"},{"extension": "py", "date": "2020-03-01 23:12:02", "correct": "1", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut1>=debut2 and debut1<=fin2 :\n    res=True\n  elif debut2>=debut1 and debut2<=fin1 :\n    res=True\n  else :\n    res=False\n  return res", "user": "userdId_15", "attemptID": 3327, "exercise": "6fd66bb2393fbf3809f1c6d04f3831f7", "exercise_name": "rendezVous", "embeddingX": "52.07517", "embeddingY": "-23.961716"},{"extension": "py", "date": "2020-03-31 06:19:49", "correct": "1", "upload": "def doubleChiffre(nombre):\n  trouve=False\n  while nombre!=0:\n    x=nombre%10\n    nombre=nombre//10\n    y=nombre%10\n    if x==y:\n      trouve=True\n  return trouve", "user": "userdId_27", "attemptID": 3328, "exercise": "c83ea6acd3e9f6f5543e87d515e8a44a", "exercise_name": "doubleChiffre", "embeddingX": "8.297932", "embeddingY": "17.431452"},{"extension": "py", "date": "2020-04-11 00:23:05", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  i=0\n  c=True\n  while i<(len(liste)+2) and c:\n    if liste[i+1]!=a*liste[i]+b:\n      c=False\n    i=i+1\n  return c", "user": "userdId_19", "attemptID": 3329, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-86.52383", "embeddingY": "19.132837"},{"extension": "py", "date": "2020-03-13 00:03:50", "correct": "0", "upload": "def jourNuit(heure):\n\tif heure<0 or heure>24:\n\t\tn=\"l'heure saisie est invalide\"\n\telse:\n\t\tif 6<=heure<=18:\n\t\t\tn='et il fait jour'\n\t\t\tif 6<=heure<=12:\n\t\t\t\tn='on est le matin '+n\n\t\t\tif 13<=heure<=16:\n\t\t\t\tn=\"on est l'apr\u00e8s-midi \"+n\n\t\t\telse:\n\t\t\t\tn='on est le soir '+n\n\t\tif heure<=5 or heure>=19:\n\t\t\tn='et il fait nuit'\n\t\t\tif heure<=4:\n\t\t\t\tn='on est la nuit '+n\n\t\t\tif heure==5:\n\t\t\t\tn='on est le matin '+n\n\t\t\tif 19<=heure<=21:\n\t\t\t\tn='on est le soir '+n\n\t\t\tif heure>=22:\n\t\t\t\tn='on est la nuit '+n\n\treturn n\n\t\n\t\t\n", "user": "userdId_19", "attemptID": 3330, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "69.84902", "embeddingY": "19.87434"},{"extension": "py", "date": "2020-03-19 05:38:49", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if jour1<jour2 and mois1<mois2 and annee1<annee2:\n    res=-1\n  elif jour1==jour2 and mois==mois2 and annee1==annee2:\n      res=1\n  else:\n    res=0\n  return res", "user": "userdId_34", "attemptID": 3331, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "77.81046", "embeddingY": "-25.336697"},{"extension": "py", "date": "2020-03-06 22:03:53", "correct": "0", "upload": "def maximum(liste):\n    res = None\n    if len(liste) > 0:\n        liste.sort()\n        res = liste\n    return res[-1]", "user": "userdId_4", "attemptID": 3332, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "7.9637785", "embeddingY": "-56.40165"},{"extension": "py", "date": "2020-03-15 03:19:58", "correct": "0", "upload": "def polynome(a,b,c):\n    delta=(b**2)-(4*a*c)\n    if delta<0:\n      return(\"pas de solution\")\n    x=(-b-delta**0.5)/(2*a)\n    y=(-b+delta**0.5)/(2*a)\n    if delta>0:\n      return(x,y)\n    if delta==0:\n      return(x)\n \n\n ", "user": "userdId_21", "attemptID": 3333, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-50.515057", "embeddingY": "8.447381"},{"extension": "py", "date": "2020-03-31 04:07:00", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n  ok=true\n  i=0\n  cpt=0\n  while i<len(l) and ok:\n    if l[i]==x:\n      #instructions\n      cpt=cpt+1\n    if cpt==n:\n      ok=False\n    i=i+1\n  if cpt!=n:\n    i=None\n  return i", "user": "userdId_3", "attemptID": 3334, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-47.88223", "embeddingY": "-7.0331745"},{"extension": "py", "date": "2020-03-06 22:44:08", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n    res = None\n    if len(mot) > 0:\n        res = mot.index(lettre)\n    return res", "user": "userdId_4", "attemptID": 3335, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "8.697347", "embeddingY": "-53.903236"},{"extension": "py", "date": "2020-03-05 22:00:35", "correct": "0", "upload": "def maximum(l):\n  res=None\n  for i in range(len(l)):\n    if res<i:\n      res=i\n  return res", "user": "userdId_48", "attemptID": 3336, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "31.042635", "embeddingY": "-68.052315"},{"extension": "py", "date": "2020-03-19 23:50:08", "correct": "0", "upload": "def reconstruireChainePartielle(s,n):\n  if s=='':\n    res=None\n  else :\n    for i in range (0,len(s),n):\n      res=res + s[i]\n  \n  return res\n\n", "user": "userdId_15", "attemptID": 3337, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-20.43447", "embeddingY": "-43.395897"},{"extension": "py", "date": "2020-03-10 04:29:18", "correct": "0", "upload": "def sommeNPremiersEntiersPairs(n):\n  res=0\n  for i in range(len(1,n+1)):\n    if liste[i]%2==0:\n      res=res+liste[i]\n  return res", "user": "userdId_8", "attemptID": 3338, "exercise": "3030dc079e6607c253e89e8ef4784b74", "exercise_name": "sommeNPremiersEntiersPairs", "embeddingX": "-39.51621", "embeddingY": "-26.358124"},{"extension": "py", "date": "2020-03-27 06:42:43", "correct": "0", "upload": "def compare (chaine1,chaine2):\n  i = 0\n  res = 0\n  while i < len(chaine1) and i < len(chaine2) and res == 0 :\n    if chaine1[i] < chaine2[i]:\n      res = -1\n    elif chaine1[i] > chaine2[i]:\n      res = 1\n    else :\n      res = 0\n    i = i + 1\n  if len(chaine1) > len(chaine2):\n    res = -1\n  elif len(chaine1) < len (chaine2):\n    res = 1\n  else :\n    res = 0\n  return res", "user": "userdId_17", "attemptID": 3339, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-24.530924", "embeddingY": "62.23921"},{"extension": "py", "date": "2020-04-13 21:29:32", "correct": "0", "upload": "def indiceInsertion(sc,scores):\n  cpt = 0\n  while cpt<len(scores) & scores[cpt]>sc :\n    print(cpt)\n    cpt+=1\n  return cpt", "user": "userdId_6", "attemptID": 3340, "exercise": "f8a820b2bd54d18d36716e3d703858f7", "exercise_name": "indiceInsertion", "embeddingX": "-13.315394", "embeddingY": "61.793484"},{"extension": "py", "date": "2020-03-11 01:36:45", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n    d1=jour1,mois1,annee1\n    d2=jour2,mois2,annee2\n    if d1<d2:\n      res=-1\n    elif d2<d1:\n      res=1\n    else:\n      res=0\n    return res", "user": "userdId_21", "attemptID": 3341, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "3.4334848", "embeddingY": "2.3852308"},{"extension": "py", "date": "2020-05-04 20:04:04", "correct": "1", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  res=0\n  if annee1<annee2:\n    res=-1\n  elif annee1>annee2:\n    res=1\n  elif mois1<mois2:\n    res=-1\n  elif mois1>mois2:\n    res=1\n  elif jour1<jour2:\n    res=-1\n  elif jour1>jour2:\n    res=1\n  return res", "user": "userdId_8", "attemptID": 3342, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "82.19832", "embeddingY": "-33.753765"},{"extension": "py", "date": "2020-03-06 22:08:39", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut1 >= debut2 or fin1 <= fin2:\n    res=True\n  return res", "user": "userdId_8", "attemptID": 3343, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "54.085953", "embeddingY": "-21.596573"},{"extension": "py", "date": "2020-04-20 21:24:48", "correct": "0", "upload": "def rechercheDicho(liste,val):\n  nbAcces=0\n  index=None\n  found = False\n  acces=int(len(liste)/2)\n  while not found and (acces!=0 or acces!=len(liste)):\n    nbAcces+=1\n    if liste[acces]==val:\n      found=True\n      index = acces\n    elif val<acces:\n        acces=int(acces/2)\n    else:\n      acces=len(liste)-int(acces/2)-1\n  return (index,nbAcces)", "user": "userdId_6", "attemptID": 3344, "exercise": "434544c545ce211c7e57445707047bee", "exercise_name": "rechercheDicho", "embeddingX": "-5.2907677", "embeddingY": "65.97704"},{"extension": "py", "date": "2020-03-05 06:57:49", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut1==debut2:\n    res=True\n  else:\n    for debut1 in range(fin2):\n      res=True\n      \n      \n      \n   \n  \n  return res\n  ", "user": "userdId_5", "attemptID": 3345, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "64.64632", "embeddingY": "-30.73152"},{"extension": "py", "date": "2020-03-12 21:43:23", "correct": "0", "upload": "def nbVoyelles(mot):\n  cpt=0\n  for i in mot:\n    if i in 'aeiouy':\n      cpt+1\n  return res", "user": "userdId_20", "attemptID": 3346, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "18.072947", "embeddingY": "-25.425283"},{"extension": "py", "date": "2020-04-09 08:50:57", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n    cpt=0\n    reste=nombre%10\n    while reste!=0:\n      reste=reste%10\n      if reste==chiffre:\n        cpt+=1\n    return cpt\n    ", "user": "userdId_11", "attemptID": 3347, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "11.308613", "embeddingY": "10.957738"},{"extension": "py", "date": "2020-05-04 22:46:44", "correct": "0", "upload": "def prononcable(mot):\n  res=True\n  x=\"aeiouy\"\n  cpt=0\n  i=0\n  while i<len(mot) and not x:\n    cpt+=1\n    i+=1\n  if cpt>3:\n    res=False\n  return res", "user": "userdId_8", "attemptID": 3348, "exercise": "6318b210c201fba050d60bc0913cb7ef", "exercise_name": "prononcable", "embeddingX": "4.3945966", "embeddingY": "50.611263"},{"extension": "py", "date": "2020-03-15 02:22:23", "correct": "1", "upload": "def sommeNbPairs(liste):\n  res=0\n  for i in range(len(liste)):\n    if liste[i]%2==0:\n      res=res+liste[i]\n  return res", "user": "userdId_8", "attemptID": 3349, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "-19.810606", "embeddingY": "-56.53729"},{"extension": "py", "date": "2020-03-01 01:18:00", "correct": "0", "upload": "from math import sqrt\n\ndef polynome(a,b,c):\n    delta =  b**2 - (4*a*c)\n    \n    if delta > 0:\n        x = (-b + sqrt(delta))/2*a , -b - (sqrt(delta))/2*a\n        \n         \n    elif delta == 0:\n        x = -(b/2*a)\n        \n    else:\n        x = \"pas de solution\"\n        \n    return x\n", "user": "userdId_4", "attemptID": 3350, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-53.225433", "embeddingY": "5.7426724"},{"extension": "py", "date": "2020-03-06 00:26:13", "correct": "0", "upload": "def maximum(liste):\n  res=0\n  for elem in liste:\n    if  res < elem:\n      res=elem\n  return res", "user": "userdId_20", "attemptID": 3351, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "42.48221", "embeddingY": "-52.872196"},{"extension": "py", "date": "2020-03-07 02:54:38", "correct": "0", "upload": "def nbSyllabes(mot):\n  if len(mot)==0:\n    return 0\n  else:\n    if (mot[0] in 'aeiouy'):\n      cpt = 0\n    else:\n      cpt = 1\n    for i in range (0, len(mot)-1):\n      if (mot[i+1] in 'aeiouy') and not(mot[i] in 'aeiouy'):\n        cpt+=1\n    return cpt\n        ", "user": "userdId_6", "attemptID": 3352, "exercise": "1c86bec0f4df503e23db53994f3d2991", "exercise_name": "nbSyllabes", "embeddingX": "-29.22663", "embeddingY": "-69.827866"},{"extension": "py", "date": "2020-03-27 05:44:29", "correct": "0", "upload": "def quatrePlus100(liste):\n  i=0\n  while i>len(liste):\n    if l[i]>100:\n      res.append(l[i])\n      i=i+1\n  if len(liste)<4:\n    res.append(l[i])\n    res=i\n  return res", "user": "userdId_20", "attemptID": 3353, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-21.147484", "embeddingY": "33.442997"},{"extension": "py", "date": "2020-03-06 00:22:54", "correct": "0", "upload": "def maximum(liste):\n res=(liste[0])\n for elem in liste:\n    if elem>res:\n      res=elem\n \n    ", "user": "userdId_33", "attemptID": 3354, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "33.13409", "embeddingY": "-46.327206"},{"extension": "py", "date": "2020-04-07 05:31:05", "correct": "1", "upload": "def elemGeo(n,u0,q):\n  res=u0*q**n\n  return res", "user": "userdId_34", "attemptID": 3355, "exercise": "d7c83a7fb9b49e28804e55955ad06968", "exercise_name": "elemGeo", "embeddingX": "-39.076534", "embeddingY": "17.636547"},{"extension": "py", "date": "2020-03-23 00:07:56", "correct": "1", "upload": "def minimum(liste):\n  if len(liste)==0:\n    return None\n  min=liste[0]\n  for i in range (1,len(liste)):\n    if liste[i]<min:\n      min=liste[i]\n  return min\n      \n  \n   \n    ", "user": "userdId_34", "attemptID": 3356, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "18.880167", "embeddingY": "-78.9192"},{"extension": "py", "date": "2020-03-17 05:54:33", "correct": "0", "upload": "def permutationListe(liste,permutation):\n  res=[]\n  for i in liste:\n    res[i]=liste[i]\n  return res", "user": "userdId_35", "attemptID": 3357, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-51.750645", "embeddingY": "-16.268494"},{"extension": "py", "date": "2020-03-10 04:20:23", "correct": "1", "upload": "def sommeNbPairs(liste):\n    res=0\n    for x in liste:\n      if x%2==0:\n        res=res+x\n    return res", "user": "userdId_10", "attemptID": 3358, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "28.961817", "embeddingY": "-18.98383"},{"extension": "py", "date": "2020-04-06 06:16:42", "correct": "0", "upload": "def sousChaine(s1,s2):\n  res=True\n  i=0\n  j=0\n  while i<len(s1) and j<len(s2):\n    if s1[i]==s2[j]:\n      i+=1\n    j+=1\n  if i!=len(s1):\n    res=False\n  return res", "user": "userdId_27", "attemptID": 3359, "exercise": "a7cdd094daa2f0bfccc7a4ec419f7243", "exercise_name": "sousChaine", "embeddingX": "-5.382975", "embeddingY": "59.11621"},{"extension": "py", "date": "2020-03-10 04:24:34", "correct": "0", "upload": "def sommeNPremiersEntiersPairs(n):\n  res=0\n  for x in range(n,2):\n    res=res+x\n  return res", "user": "userdId_8", "attemptID": 3360, "exercise": "3030dc079e6607c253e89e8ef4784b74", "exercise_name": "sommeNPremiersEntiersPairs", "embeddingX": "-19.722479", "embeddingY": "11.724965"},{"extension": "py", "date": "2020-04-05 12:15:47", "correct": "1", "upload": "def suiteAri(liste):\n    res=True\n    if len(liste) > 1:\n        r,n = liste[1]-liste[0],1\n        while n<len(liste) and res:\n            if liste[n]!=liste[n-1]+r:res=False\n            n+=1\n    return res\n", "user": "userdId_4", "attemptID": 3361, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "18.454796", "embeddingY": "60.668465"},{"extension": "py", "date": "2020-04-11 05:54:24", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  res=0\n  while nombre!=0:\n    nombre=nombre//10\n    if nombre%10==chiffre:\n      res+=1\n  if res==0:\n    res=1\n  return res", "user": "userdId_8", "attemptID": 3362, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "22.822216", "embeddingY": "10.325707"},{"extension": "py", "date": "2020-03-21 06:03:03", "correct": "0", "upload": "def sommeNbPairs(liste):\n  res=0\n  for i in range(len(liste)):\n    if [i]%2!=0:\n      res=res+liste[i]\n  return res", "user": "userdId_9", "attemptID": 3363, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "-3.3513203", "embeddingY": "-48.303574"},{"extension": "py", "date": "2020-03-01 01:20:58", "correct": "0", "upload": "from math import sqrt\nfrom math import sqrt\n\ndef polynome(a,b,c):\n    delta =  b**2 - (4*a*c)\n    \n    if delta > 0:\n        x = (-b + sqrt(delta))/2*a , (-b -sqrt(delta))/2*a\n        \n         \n    elif delta == 0:\n        x = -(b/2*a)\n        \n    else:\n        x = \"pas de solution\"\n        \n    return x\n", "user": "userdId_4", "attemptID": 3364, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-58.373978", "embeddingY": "7.898677"},{"extension": "py", "date": "2020-04-11 08:38:52", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  for elem in liste:\n    c=a*liste[elem]+b\n    if c==elem:\n      res=True\n  return res", "user": "userdId_8", "attemptID": 3365, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-84.64517", "embeddingY": "18.745628"},{"extension": "py", "date": "2020-03-12 10:34:09", "correct": "0", "upload": "def maximum(liste):\n  res=liste[0]\n  for i in list(range):\n    if res<list(i):\n      res=list(i)\n  else:\n    if lis(i)<res:\n      res=res\n  return res     ", "user": "userdId_20", "attemptID": 3366, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-46.938343", "embeddingY": "-15.182845"},{"extension": "py", "date": "2020-04-02 23:31:26", "correct": "1", "upload": "def listeSymetrique(l):\n  ok=True\n  i=0\n  while i<len(l) and ok:\n    if l[i]!=l[-1-i]:\n      ok=False\n    i+=1\n  return ok", "user": "userdId_30", "attemptID": 3367, "exercise": "8eb27aeda471a467e2223abebeca886e", "exercise_name": "listeSymetrique", "embeddingX": "22.902494", "embeddingY": "40.899586"},{"extension": "py", "date": "2020-04-03 00:08:50", "correct": "0", "upload": "def nbChiffres(nombre):\n  cpt=0\n  while nombre>=1:\n    nombre=nombre//10\n    cpt=cpt+1\n  return cpt", "user": "userdId_14", "attemptID": 3368, "exercise": "3dcf332c003a1f3bf15df22ee17884a3", "exercise_name": "nbChiffres", "embeddingX": "31.762783", "embeddingY": "9.711343"},{"extension": "py", "date": "2020-03-12 22:12:27", "correct": "0", "upload": "def moyenne(liste):\n  if len (liste)==0:\n    res=None\n  else:\n    res=0\n    cpt=0\n    for elem in liste:\n      res=res+elem\n      cpt=cpt+elem\n    res=elem%cpt\n  return res ", "user": "userdId_20", "attemptID": 3369, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-4.639183", "embeddingY": "-4.0440397"},{"extension": "py", "date": "2020-03-23 01:56:55", "correct": "0", "upload": "def maximum(liste):\n    res=liste[0]\n    for i in range (len(liste)):\n      if liste[i]>res :\n        res=liste[i]\n    return res", "user": "userdId_24", "attemptID": 3370, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "0.6140113", "embeddingY": "-66.63009"},{"extension": "py", "date": "2020-04-14 04:07:44", "correct": "1", "upload": "def meilleurClassementJoueur(scores,joueurs,nom):\n  i=0\n  while i<len(joueurs):\n    if nom==joueurs[i]:\n      return i+1\n    i=i+1\n  return -1", "user": "userdId_7", "attemptID": 3371, "exercise": "be6ce0a06c5d396190024c7c681da95d", "exercise_name": "meilleurClassementJoueur", "embeddingX": "-12.218109", "embeddingY": "67.021866"},{"extension": "py", "date": "2020-03-05 21:50:01", "correct": "0", "upload": "def nbVoyelles(lettre,mot):\n  n = 0\n  for i in mot:\n    if lettre == i:\n      n+=1\n  return n", "user": "userdId_6", "attemptID": 3372, "exercise": "2864c9e5861229d2ff32570f6bc944fb", "exercise_name": "nbOccurrencesLettre", "embeddingX": "-10.28671", "embeddingY": "-27.261057"},{"extension": "py", "date": "2020-04-14 03:58:01", "correct": "0", "upload": "def listeDecroissante(scores):\n  ok=False\n  while i<len(scores) and not ok:\n    if liste[i]>liste[i+1]:\n      res=True\n    else:\n      res=ok\n  return ok", "user": "userdId_21", "attemptID": 3373, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "-1.2203355", "embeddingY": "40.7965"},{"extension": "py", "date": "2020-03-02 07:32:19", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1<=annee2 and mois1<=annee2 and jour1<jour2:\n    return -1\n  elif annee1==annee2 and mois1==mois2 and jour1==jour2:\n    return 0\n  elif annee1>=annee2 and mois1>=mois2 and jour1>=jour2:\n    return 1\n  \ncompareDates(10,1,2020,14,2,2020)\ncompareDates(14,2,2020,11,2,2020)\ncompareDates(10,1,2020,10,1,2020)", "user": "userdId_1", "attemptID": 3374, "exercise": "af7c1467ef9f7684d9ff58734067ae98", "exercise_name": "compareDates", "embeddingX": "82.82721", "embeddingY": "-12.396262"},{"extension": "py", "date": "2020-03-10 09:40:02", "correct": "0", "upload": "def nbVoyelles(mot):\n  x=0\n  res=x\n  for x in 'aeiouy':\n    x=x+1\n     \n    return res", "user": "userdId_5", "attemptID": 3375, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-36.371746", "embeddingY": "-4.320733"},{"extension": "py", "date": "2020-03-12 21:42:50", "correct": "0", "upload": "def nbVoyelles(mot):\n   res=0\n   if len(mot)==0:\n      res=0\n   else:\n      if i in 'aeiouy':\n         res=res+1\n   return res", "user": "userdId_14", "attemptID": 3376, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "4.3360147", "embeddingY": "-34.472286"},{"extension": "py", "date": "2020-04-06 15:14:04", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  i=0\n  for i in range(nombre):\n    if chiffre==nombre[i]:\n      cpt=cpt+1\n    i=i+1\n  return cpt", "user": "userdId_3", "attemptID": 3377, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-20.465408", "embeddingY": "-31.04861"},{"extension": "py", "date": "2020-05-11 01:56:35", "correct": "0", "upload": "def indiceInsertion(sc,scores):\n  i=0\n  res=0\n  while i<len(scores):\n    if sc>scores[i]:\n      return i\n    i+=1\n  return res", "user": "userdId_12", "attemptID": 3378, "exercise": "f8a820b2bd54d18d36716e3d703858f7", "exercise_name": "indiceInsertion", "embeddingX": "-16.688572", "embeddingY": "64.34794"},{"extension": "py", "date": "2020-03-13 00:43:32", "correct": "0", "upload": "def doubleLettre(mot):\n  lettre2 = ' '\n  cpt = 0\n  res = False\n  for lettre1 in mot :\n    if lettre1 == lettre2 :\n      lettre2 = lettre1\n      cpt =  cpt + 1\n    else :\n      cpt = 0\n  if cpt > 2 :\n    res = True\n  return res", "user": "userdId_17", "attemptID": 3379, "exercise": "00da9cf1fa2b468d915724499459ed8f", "exercise_name": "doubleLettre", "embeddingX": "10.998976", "embeddingY": "-6.2642174"},{"extension": "py", "date": "2020-03-22 23:25:56", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut1<bdebut2 or debut2<debut1:\n    res=False\n  else:\n    res=True", "user": "userdId_9", "attemptID": 3380, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "60.728935", "embeddingY": "-18.226612"},{"extension": "py", "date": "2020-05-04 21:45:34", "correct": "1", "upload": "def nbVoyelles(mot):\n  res=0\n  for elem in mot:\n    if elem in 'aeiouy':\n      res+=1\n  return res", "user": "userdId_8", "attemptID": 3381, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "12.645297", "embeddingY": "-24.75767"},{"extension": "py", "date": "2020-03-17 06:11:48", "correct": "0", "upload": "def permutationListe(liste,permutation):\n  res=[0]*(len(permutation))\n  for i in range(liste):\n    permutation[i]=liste[i]  \n  return res", "user": "userdId_35", "attemptID": 3382, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-50.518105", "embeddingY": "-25.667"},{"extension": "py", "date": "2020-03-17 06:31:53", "correct": "1", "upload": "def distribution(liste,n):\n  cpt=[0]*(n+1)\n  for elem in liste:\n    cpt[elem]=cpt[elem]+1\n  return cpt", "user": "userdId_25", "attemptID": 3383, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-59.300873", "embeddingY": "-14.924995"},{"extension": "py", "date": "2020-03-10 04:21:26", "correct": "0", "upload": "def sommeNbPairs(liste):\n  res=0\n  for x in liste:\n    if x%2==0:\n      res=res+0\n  return res", "user": "userdId_25", "attemptID": 3384, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "29.395622", "embeddingY": "-19.340752"},{"extension": "py", "date": "2020-04-06 02:13:41", "correct": "1", "upload": "def compteChiffre(chiffre,nombre):\n    res = 0\n    nombre_str  = str(nombre)\n    chiffre_str = str(chiffre)\n    for i in range(len(nombre_str)):\n        if chiffre_str == nombre_str[i]:\n            res += 1\n    return res", "user": "userdId_42", "attemptID": 3385, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-22.164637", "embeddingY": "-38.835907"},{"extension": "py", "date": "2020-04-05 03:48:57", "correct": "0", "upload": "def moyenne(liste):\n  if len(liste)==0:\n    res=None\n    return res\n \n  else:\n    s=0\n    for elem in liste:\n      s+=elem\n    res=s//len(liste)\n  return res", "user": "userdId_26", "attemptID": 3386, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-8.41464", "embeddingY": "-15.909152"},{"extension": "py", "date": "2020-04-16 23:25:22", "correct": "0", "upload": "def indiceInsertion(sc,scores):\n  i=0\n  trouve=False\n  res=0\n  while i<len(scores) and not trouve :\n    if sc>scores[i] :\n      trouve=True\n    i+=1\n  res=i-1\n  return res", "user": "userdId_15", "attemptID": 3387, "exercise": "f8a820b2bd54d18d36716e3d703858f7", "exercise_name": "indiceInsertion", "embeddingX": "0.43268028", "embeddingY": "58.78547"},{"extension": "py", "date": "2020-03-19 06:02:17", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1<annee2:\n    res=-1\n  elif date1==None or date2==None:\n    Date=jour,mois,annee\n    res=None\n  elif jour1==jour2 and mois1==mois2 and annee1==annee2:\n      res=0\n  else:\n    res=1\n  return res", "user": "userdId_34", "attemptID": 3388, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "73.927475", "embeddingY": "-34.81561"},{"extension": "py", "date": "2020-03-13 00:38:06", "correct": "0", "upload": "def sommeNbPairs(liste):\n  if liste==0:\n    res=0\n  else:\n    for n in (liste):\n      if liste%2==0:\n        res=res+liste\n    return res", "user": "userdId_5", "attemptID": 3389, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "30.617954", "embeddingY": "-23.10723"},{"extension": "py", "date": "2020-03-06 00:13:45", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    res=0\n  else:\n    for elem in mot:\n      res=0\n      if elem=='a' or 'e' or 'i' or 'o' or 'u' or 'y':\n        res=res+1\n  return res     ", "user": "userdId_14", "attemptID": 3390, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "4.809212", "embeddingY": "-25.867683"},{"extension": "py", "date": "2020-03-02 07:33:50", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1<=annee2 and mois1<=mois2 and jour1<jour2:\n    return -1\n  elif annee1==annee2 and mois1==mois2 and jour1==jour2:\n    return 0\n  elif annee1>=annee2 and mois1>mois2 and jour1>=jour2:\n    return 1\n  \ncompareDates(10,1,2020,14,2,2020)\ncompareDates(14,2,2020,11,2,2020)\ncompareDates(10,1,2020,10,1,2020)", "user": "userdId_1", "attemptID": 3391, "exercise": "af7c1467ef9f7684d9ff58734067ae98", "exercise_name": "compareDates", "embeddingX": "82.94595", "embeddingY": "-14.215033"},{"extension": "py", "date": "2020-04-07 04:22:19", "correct": "0", "upload": "def compteChiffre(chiffre, nombre):\n  res = 0\n  while nombre >= 0:\n    if nombre % 10 == chiffre:\n      res += 1\n    nombre = nombre // 10\n\n  return res", "user": "userdId_42", "attemptID": 3392, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "24.563875", "embeddingY": "9.23932"},{"extension": "py", "date": "2020-05-04 22:29:30", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n  res=None\n  i=0\n  while i<len(mot) and res:\n    if mot[i]==lettre:\n      res=i\n    i+=1\n  return res", "user": "userdId_8", "attemptID": 3393, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-14.198472", "embeddingY": "46.592186"},{"extension": "py", "date": "2020-03-31 06:05:07", "correct": "0", "upload": "def doubleChiffre(nombre):\n  res=True\n  cpt=nombre\n  ctp2=0\n  while res==True:\n    cpt2=cpt%10\n    cpt=cpt//10\n    if cpt==cpt2:\n      res=False\n  return res\n\n    ", "user": "userdId_28", "attemptID": 3394, "exercise": "c83ea6acd3e9f6f5543e87d515e8a44a", "exercise_name": "doubleChiffre", "embeddingX": "12.391377", "embeddingY": "16.736322"},{"extension": "py", "date": "2020-04-07 04:38:04", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  while i<len(liste)-1 and res==True:\n    if liste[0]==0:\n      res=False\n    else:\n      r=liste[1]/liste[0]\n      if liste[i+1]/liste[i]==r:\n        res=True\n      else:\n        res=False\n    i+=1\n  return res", "user": "userdId_26", "attemptID": 3395, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "-8.691299", "embeddingY": "44.069416"},{"extension": "py", "date": "2020-04-03 00:41:45", "correct": "0", "upload": "def stockerChiffres(nombres):\n  res=[]\n  if nombres==0:\n    res=0\n  while nombres!=0:\n    res.append(nombres%10)\n    nombres=nombres//10\n  return res", "user": "userdId_5", "attemptID": 3396, "exercise": "49a87f644f84a443327fb4315b47f249", "exercise_name": "stockerChiffres", "embeddingX": "42.16235", "embeddingY": "14.649804"},{"extension": "py", "date": "2020-03-29 09:42:58", "correct": "0", "upload": "def distribution(liste,n):\n  res=[0]*(n+1)\n  for elem in liste:\n    res[elem]=res+[1]\n  return res", "user": "userdId_12", "attemptID": 3397, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-57.64668", "embeddingY": "-14.859923"},{"extension": "py", "date": "2020-04-06 17:13:23", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  res=True\n  if debut1<=debut2:\n    if fin1<debut2:\n      res=False\n  if debut2<=debut1:\n    if fin2<fin1:\n      res=False\n  return res", "user": "userdId_3", "attemptID": 3398, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "57.64937", "embeddingY": "-18.603525"},{"extension": "py", "date": "2020-03-17 00:36:46", "correct": "0", "upload": "def plusLongueSuite(liste):\n  cpt=0\n  for n in liste:\n    if n==n:\n      cpt=cpt+1\n    else:\n      cpt=0\n  \n    return cpt", "user": "userdId_5", "attemptID": 3399, "exercise": "deed004abb317b11778f7e8247197a40", "exercise_name": "plusLongueSuite", "embeddingX": "27.04815", "embeddingY": "-19.361973"},{"extension": "py", "date": "2020-03-06 00:21:09", "correct": "0", "upload": "def maximum(liste):\n  res=(liste[0])\n  for elem in liste:\n    if  res < elem:\n      res=elem\n  return res", "user": "userdId_20", "attemptID": 3400, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "41.557884", "embeddingY": "-57.923172"},{"extension": "py", "date": "2020-03-02 08:41:30", "correct": "0", "upload": "def jourNuit(heure):\n    res = \"l'heure saisie est invalide\"\n\n    if heure <= 24:\n        if heure >= 5 and heure < 12:\n            res = \"on est le matin \"\n        elif heure >= 12 and heure < 17:\n      \t    res = \"on est l'apr\u00e8s-midi \"\n        elif heure >= 17 and heure < 21:\n            res = \"on est la soir \"\n        else:\n            res = \"on est la nuit \"\n        if heure >= 6 and heure <= 18:\n            res += \"et il fait jour\"\n        else:\n            res += \"et il fait nuit\"\n    return res\n", "user": "userdId_4", "attemptID": 3401, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "77.2917", "embeddingY": "24.810568"},{"extension": "py", "date": "2020-03-13 00:25:27", "correct": "0", "upload": "def jourNuit(heure):\n  \"\"\"\n  Fonction qui affiche le moment de la journ\u00e9e\n  param\u00e8tres:\n  heure:une heure entre 0 et 24\n  renvoie une cha\u00eene de caract\u00e8re d\u00e9crivant le moment de la journ\u00e9e et s'il fait jour ou nuit\n  \"\"\"\n  \n  \n  if heure<0 or heure>24:\n    res=\"l'heure saisie est invalide\"\n  else:\n    if heure<5 or heure>=21:\n      res=\"on est la nuit\"\n    elif heure<12:\n      res=\"on est le matin\"\n    elif heure<17:\n      res=\"on est l'apr\u00e8s midi\"\n    else:\n      res=\"on est le soir\"\n    if heure<6 or heure>=18:\n          res=res+\" et il fait nuit\"\n    else:\n      res=res+\" et il fait jour\"\n    return res\n    ", "user": "userdId_1", "attemptID": 3402, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "68.833694", "embeddingY": "14.135968"},{"extension": "py", "date": "2020-04-08 00:22:44", "correct": "0", "upload": "def suiteGeo(liste):\n  ok=True\n  i=0\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i]==0:\n      ok=False\n    if liste[i]!=0:\n      q=liste[1]/liste[0]\n    if liste[i]!=0:\n      if liste[i+1]/liste[i]!=q:\n        ok=False\n    if liste[i] and liste[i+1]==0:\n      ok=True\n    i=i+1\n  return ok\n", "user": "userdId_1", "attemptID": 3403, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "32.925117", "embeddingY": "63.78051"},{"extension": "py", "date": "2020-04-07 03:34:12", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=True\n  i=1\n  while i<len(liste):\n    if liste[i]!=a*liste[i-1]+b:\n      res=False\n    i+=1\n  return res\ndef suiteAriGeo(liste):\n  i=1\n  res=True\n  while i<len(liste):\n    if liste[i-1]==0:\n      i+=1\n    else:\n      if liste[i]!=liste[i-1]:\n        a=liste[i]//liste[i-1]\n        b=liste[i]-a*liste[i-1]\n        res=verifSuiteAriGeo(liste,a,b)\n    i+=1 \n  return res", "user": "userdId_27", "attemptID": 3404, "exercise": "4c9665daf155b115fe13218141fa1aff", "exercise_name": "suiteAriGeo", "embeddingX": "14.120815", "embeddingY": "79.00288"},{"extension": "py", "date": "2020-03-10 03:31:22", "correct": "0", "upload": "def jourNuit(heure):\n  if heure>24 or heure<0:\n    res=\"l'heure saisie est invalide\"\n  else:\n    if heure <5 or heure>=21:\n       res=\"on est la nuit\"\n    elif heure<12:\n       res=\"on est le matin\"\n    elif heure <17:\n       res=\"on est l'apr\u00e8s-midi\"\n    else:\n       res=\"on est le soir \"\n    if heure<6 or heure>=18:\n       res=res+\" et il fait nuit\"\n    else:\n        res=res+\" et il fait jour\"\n  return res", "user": "userdId_25", "attemptID": 3405, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "71.40776", "embeddingY": "14.7695265"},{"extension": "py", "date": "2020-03-31 00:36:03", "correct": "0", "upload": "def listeSymetrique(l):\n    trouve=True\n    i=0\n    j=-1\n    while i<len(l) and j<=-len(l) and trouve==True:\n      if l[i]!=l[j]:\n        trouve=False\n      i=i+1\n      j=j-1\n    return trouve\n  \n      ", "user": "userdId_28", "attemptID": 3406, "exercise": "8eb27aeda471a467e2223abebeca886e", "exercise_name": "listeSymetrique", "embeddingX": "5.2861423", "embeddingY": "44.581768"},{"extension": "py", "date": "2020-04-19 08:03:31", "correct": "0", "upload": "def stockerChiffres(nombre):\n    res=[]\n    decomp=nombre\n    while decomp!=0:\n      decomp=decomp//10\n      res=[decomp]+res\n    return res", "user": "userdId_11", "attemptID": 3407, "exercise": "49a87f644f84a443327fb4315b47f249", "exercise_name": "stockerChiffres", "embeddingX": "-1.6909906", "embeddingY": "19.763597"},{"extension": "py", "date": "2020-04-07 23:29:11", "correct": "0", "upload": "def suiteGeo(liste):\n  ok=True\n  i=0\n  if liste[0]==0:\n    ok=False\n  q=liste[0]*liste[1]\n  while i<len(liste)-1 and ok:\n    if liste[i]!=0:\n      if liste[i+1]/liste[i]!=q:\n        ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 3408, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "28.676388", "embeddingY": "67.522064"},{"extension": "py", "date": "2020-03-03 05:27:06", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    for i in (liste):\n      if res<liste[i]:\n        res=liste[i]\n  return res", "user": "userdId_8", "attemptID": 3409, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "25.650528", "embeddingY": "-62.6137"},{"extension": "py", "date": "2020-03-03 05:37:23", "correct": "0", "upload": "def nbVoyelles(mot):\n  res=0\n  for i in range(len(mot)):\n    res=mot[i]+1\n  return None", "user": "userdId_30", "attemptID": 3410, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-41.302677", "embeddingY": "-34.36238"},{"extension": "py", "date": "2020-03-13 00:31:57", "correct": "0", "upload": "def sommeNbPairs(liste):\n  res = 0\n  if liste[i]%2 == 0 :\n    res = res + liste[i]\n    return res", "user": "userdId_17", "attemptID": 3411, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "22.38586", "embeddingY": "-36.306168"},{"extension": "py", "date": "2020-03-24 04:47:06", "correct": "0", "upload": "def quatrePlus100(liste):\n  i=[0]\n  res=[]\n  while i<len(liste) and i>100:\n    res.append(l[i])\n  return res", "user": "userdId_13", "attemptID": 3412, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-20.982561", "embeddingY": "42.65758"},{"extension": "py", "date": "2020-03-06 00:15:45", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    res=0\n  else:\n    for elem in mot:\n      res=0\n      if elem in 'a,e,i,o,u,y':\n        res=res+1\n  return res     ", "user": "userdId_14", "attemptID": 3413, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "5.7263994", "embeddingY": "-29.01369"},{"extension": "py", "date": "2020-03-17 05:37:32", "correct": "0", "upload": "def permutationChaine(s):\n    res=''\n    for i in range(0,len(s)-1,2):\n        res=res+s[i+1]+s[i]\n    if res%2!=0:\n        res=res+s[-1]\n    return res", "user": "userdId_39", "attemptID": 3414, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-38.513157", "embeddingY": "-62.67415"},{"extension": "py", "date": "2020-03-02 02:55:24", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1<=annee2 and mois1<=mois2 and jour1<jour2:\n    return -1\n  elif annee1==annee2 and mois1==mois2 and jour1==jour2:\n    return 0\n  else:\n    return 1\n  \ncompareDates(10,1,2020,14,2,2020)\ncompareDates(14,2,2020,11,2,2020)\ncompareDates(10,1,2020,10,1,2020)", "user": "userdId_1", "attemptID": 3415, "exercise": "af7c1467ef9f7684d9ff58734067ae98", "exercise_name": "compareDates", "embeddingX": "87.8462", "embeddingY": "-13.605466"},{"extension": "py", "date": "2020-04-06 06:02:30", "correct": "0", "upload": "def motPalindrome(mot):\n  ok=True\n  i=0\n  j=len(mot)-1\n  return ok", "user": "userdId_3", "attemptID": 3416, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "9.402442", "embeddingY": "50.258343"},{"extension": "py", "date": "2020-04-12 11:36:18", "correct": "0", "upload": "def phrasePalindrome(phrase):\n    if len(phrase)==0:\n      res=True\n    else:\n      res=True\n      i=0\n      x=''\n      while i<len(phrase)//2 and res:\n        if phrase[i]!=phrase[-(i+1)]:\n          res=False\n        if phrase[i]!=x or phrase[-(i+1)]!=x:\n          res=False\n          i+=1\n    return res", "user": "userdId_11", "attemptID": 3417, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "31.775826", "embeddingY": "31.219414"},{"extension": "py", "date": "2020-04-17 00:22:56", "correct": "0", "upload": "def indiceInsertion(sc,scores):\n  i=0\n  while i<len(scores):\n    if scores[i]<sc:\n      return i\n    i+=1", "user": "userdId_12", "attemptID": 3418, "exercise": "f8a820b2bd54d18d36716e3d703858f7", "exercise_name": "indiceInsertion", "embeddingX": "-15.737845", "embeddingY": "64.64705"},{"extension": "py", "date": "2020-03-06 00:42:28", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n  if len(mot)==0:\n    pos=None\n  else:\n    cpt=0\n    for elem in mot:\n      cpt=cpt+1\n      if lettre==elem:\n        pos=elem[i]\n      else:\n        pos=None\n        \n  return pos", "user": "userdId_15", "attemptID": 3419, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-11.837614", "embeddingY": "-22.130247"},{"extension": "py", "date": "2020-03-03 00:04:39", "correct": "0", "upload": "def jourNuit(heure):\n  if heure > 24 or heure < 0 :\n    res = (\"l'heure saisie est invalide\")\n  elif heure >= 6 and heure <= 18 :\n    if heure >= 5 and heure <= 12 :\n      res = (\"on est le matin et il fait jour\")\n    elif heure > 12 and heure <= 17 :\n      res = (\"on est l'apr\u00e8s-midi et il fait jour\")\n    else :\n      res = (\"on est le soir et il fait jour\")\n  else :\n    if heure >= 5 and heure <= 12 :\n      res = (\"on est le matin et il fait nuit\")\n    elif heure > 12 and heure <= 17 :\n      res = (\"on est l'apr\u00e8s-midi et il fait nuit\")\n    elif heure > 17 and heure <= 21 :\n      res = (\"on est le soir et il fait nuit\")\n    else :\n      res = (\"il fait nuit\")\n  return res", "user": "userdId_17", "attemptID": 3420, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "75.465614", "embeddingY": "21.780413"},{"extension": "py", "date": "2020-04-12 07:01:03", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  if liste==[]:\n    res=True\n  c=[]\n  res=False\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n    c=[liste[0]]*4+c\n  return c", "user": "userdId_8", "attemptID": 3421, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-74.53532", "embeddingY": "24.260931"},{"extension": "py", "date": "2020-03-06 00:00:16", "correct": "0", "upload": "def moyenne(liste):\n  somme=0\n  for i in range(0,len(liste)):\n    somme=somme+liste[i]\n  moy=somme/len(liste)\n  return moy\n  \n    \n    \n\t", "user": "userdId_2", "attemptID": 3422, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-44.023674", "embeddingY": "-40.368526"},{"extension": "py", "date": "2020-04-06 09:41:32", "correct": "1", "upload": "def suiteGeo(liste):\n    if liste==[] or len(liste)==1:\n      ok=True\n    elif 0 in liste:\n      if liste[0]!=0:\n        ok=True\n      else:\n        while 0 in liste:\n          liste.remove(0)\n        if liste==[]:\n          ok=True\n        else:\n          ok=False\n    else:\n      ok=True\n      i=1\n      while i<len(liste) and ok:\n        cte=liste[i]/liste[i-1]\n        if liste[0]*cte**i!=liste[i]:\n          ok=False\n        i+=1\n    return ok", "user": "userdId_18", "attemptID": 3423, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "41.57622", "embeddingY": "68.68352"},{"extension": "py", "date": "2020-03-13 00:46:30", "correct": "0", "upload": "def doubleLettre(mot):\n  lettre2 = ' '\n  cpt = 0\n  res = False\n  for lettre1 in mot :\n    if lettre1 == lettre2 :\n      lettre2 = lettre1\n      cpt =  cpt + 1\n      if cpt >= 2 :\n        res = True\n    else :\n      cpt = 0\n  \t\n  return res", "user": "userdId_17", "attemptID": 3424, "exercise": "00da9cf1fa2b468d915724499459ed8f", "exercise_name": "doubleLettre", "embeddingX": "11.130039", "embeddingY": "-5.642771"},{"extension": "py", "date": "2020-03-05 23:44:14", "correct": "0", "upload": "def maximum(liste):\n    res = liste[0]\n    for i in range(0,len(liste)):\n      if liste[i] > res :\n        res = liste[i]\n    if len(liste) == 0:\n      res = None\n    return res", "user": "userdId_29", "attemptID": 3425, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-2.3260064", "embeddingY": "-62.23888"},{"extension": "py", "date": "2020-04-12 04:53:45", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=False\n  c=[]\n  for i in range(len(liste)-1):\n    c=a*liste[i]+b\n    c.append(liste[i])\n    if c==liste:\n      res=True\n  return res", "user": "userdId_8", "attemptID": 3426, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-84.528984", "embeddingY": "21.51286"},{"extension": "py", "date": "2020-03-05 23:47:47", "correct": "0", "upload": "def maximum(liste):\n  res=0\n  for i in range(len(liste)):\n      res=res+liste[i]\n  return res", "user": "userdId_41", "attemptID": 3427, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-44.185097", "embeddingY": "-36.472824"},{"extension": "py", "date": "2020-03-30 22:38:30", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n  trouve=0\n  i=0\n  while i<len(l) and trouve!=n:\n    if x==l[i]:\n      trouve=trouve+1\n      i=i+1\n    i=i+1\n  if trouve!=n:\n    i=None\n  return i", "user": "userdId_19", "attemptID": 3428, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-6.7097516", "embeddingY": "79.862236"},{"extension": "py", "date": "2020-03-14 04:03:27", "correct": "0", "upload": "def bissextile(annee):\n  if annee%4==0 or annee%400==0:\n    res=True\n  else:\n    res=False\n    return res", "user": "userdId_14", "attemptID": 3429, "exercise": "a7d37636649c0ada991520788deeb2d0", "exercise_name": "bissextile", "embeddingX": "44.683804", "embeddingY": "0.030465432"},{"extension": "py", "date": "2020-03-24 05:04:31", "correct": "1", "upload": "def fusion(liste1,liste2):\n    if liste1==[]:\n      res=liste2\n    elif liste2==[]:\n      res=liste1\n    else:\n      res=[]\n      i=0\n      while i<len(liste1) and i<len(liste2):\n        res=res+[liste1[i]]+[liste2[i]]\n        i=i+1\n      if len(liste1)>len(liste2):\n        while i<len(liste1):\n          res=res+[liste1[i]]\n          i=i+1\n      elif len(liste1)<len(liste2):\n        while i<len(liste2):\n          res=res+[liste2[i]]\n          i=i+1\n    res.sort()\n    return res", "user": "userdId_18", "attemptID": 3430, "exercise": "6613efb6c873b142dc2b6040c14eb616", "exercise_name": "fusion", "embeddingX": "-25.17417", "embeddingY": "51.110443"},{"extension": "py", "date": "2020-03-31 00:36:13", "correct": "0", "upload": "def listeSymetrique(l):\n    trouve=True\n    i=0\n    j=-1\n    while i<len(l) and j<=-len(l) and trouve==True:\n      if l[i]!=l[j]:\n        trouve=False\n      i=i+1\n      j=j-1\n    return trouve\n  \n      ", "user": "userdId_28", "attemptID": 3431, "exercise": "8eb27aeda471a467e2223abebeca886e", "exercise_name": "listeSymetrique", "embeddingX": "5.2802567", "embeddingY": "44.591972"},{"extension": "py", "date": "2020-04-13 21:50:53", "correct": "1", "upload": "def listeDecroissante(scores):\n  ok=True\n  if len(scores)==0:\n    ok=True\n  i=0\n  while i<len(scores)-1:\n    if scores[i]<scores[i+1]:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 3432, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "16.884087", "embeddingY": "48.64855"},{"extension": "py", "date": "2020-04-07 04:03:26", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  i=0\n  while nombre!=0:\n    nombre=nombre//10\n    l.append(nombre)\n  while i<len(l):\n    if l[i]==chiffre:\n      cpt=cpt+1\n  return cpt", "user": "userdId_50", "attemptID": 3433, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-8.707009", "embeddingY": "55.676685"},{"extension": "py", "date": "2020-03-05 23:41:08", "correct": "0", "upload": "def maximum(liste):\n  res=0\n  for elem in liste :\n   res=res>elem\n  return res", "user": "userdId_24", "attemptID": 3434, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "32.213753", "embeddingY": "-41.669685"},{"extension": "py", "date": "2020-04-17 03:15:24", "correct": "0", "upload": "def minimum(liste):\n  min=liste[0]\n  for i in liste: \n    if liste[i]<liste[i+1]:\n      min=liste[i]\n    else:\n      min=None\n  return min", "user": "userdId_21", "attemptID": 3435, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "35.449192", "embeddingY": "-57.692154"},{"extension": "py", "date": "2020-03-31 07:58:16", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n    if len(mot)==0 or lettre not in mot:\n      res=None\n    else:\n      res=0\n      for i in range(len(mot)):\n        if mot[i]==lettre:\n          res=lettre[i]\n    return res", "user": "userdId_11", "attemptID": 3436, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-18.585068", "embeddingY": "-38.659462"},{"extension": "py", "date": "2020-03-06 00:04:09", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    res=0\n  else:\n    for elem in mot:\n      res=0\n      if elem=='aeiouy':\n        res=res+1\n  return res     ", "user": "userdId_14", "attemptID": 3437, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "2.5655398", "embeddingY": "-26.768291"},{"extension": "py", "date": "2020-03-06 00:20:40", "correct": "0", "upload": "def maximum(liste):\n  res=(liste[0])\n  for elem in liste:\n     if res<elem:\n        res=elem\n  return res", "user": "userdId_23", "attemptID": 3438, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "41.707584", "embeddingY": "-57.537464"},{"extension": "py", "date": "2020-03-03 06:07:28", "correct": "0", "upload": "def nbVoyelles(mot):\n  res=0\n  for c in range(len(mot)):\n    if c in [\"aeiouy\"]:\n      res=res+1\n  return res", "user": "userdId_35", "attemptID": 3439, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-2.9309707", "embeddingY": "-50.009136"},{"extension": "py", "date": "2020-03-06 00:35:30", "correct": "0", "upload": "def moyenne(liste):\n  res=0\n  cpt=0\n  for i in liste:\n    res=res+i\n    cpt=cpt+1\n  moyenne=res/cpt\n  return moyenne", "user": "userdId_14", "attemptID": 3440, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-22.21147", "embeddingY": "0.44862118"},{"extension": "py", "date": "2020-03-17 05:01:37", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  if debut+longueur>len(s):\n    fin=len(s)\n  else:\n    fin=debut+longueur\n  for i in range(debut,debut+longueur):\n    res=res+s[i]\n  return res", "user": "userdId_7", "attemptID": 3441, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-79.243195", "embeddingY": "22.5049"},{"extension": "py", "date": "2020-03-31 01:03:21", "correct": "1", "upload": "def listeSymetrique(l):\n  \n  l2 = l[int(len(l)/2):]\n  l2.reverse()\n  if len(l)%2 == 0:\n    l = l[:int(len(l)/2)]\n  else:\n    l = l[:int(len(l)/2)+1]\n  res = True\n  print(l,l2)\n  if l != l2:\n    res = False\n  \n  return res", "user": "userdId_4", "attemptID": 3442, "exercise": "8eb27aeda471a467e2223abebeca886e", "exercise_name": "listeSymetrique", "embeddingX": "41.159813", "embeddingY": "-9.302247"},{"extension": "py", "date": "2020-03-17 05:31:18", "correct": "0", "upload": "def permutationChaine(s):\n  res=\"\"\n  for i in range(0,len(s)-1,2):\n    res=res+s[1+i]+s[i]\n  if len(s)!=0:\n    res=res+s[i-1]\n  return res", "user": "userdId_8", "attemptID": 3443, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-37.36366", "embeddingY": "-57.528015"},{"extension": "py", "date": "2020-03-24 06:16:56", "correct": "0", "upload": "def fusion(liste1,liste2):\n  res=liste1.append(liste2)\n  res.sort()\n  return res", "user": "userdId_13", "attemptID": 3444, "exercise": "6613efb6c873b142dc2b6040c14eb616", "exercise_name": "fusion", "embeddingX": "-40.6087", "embeddingY": "-8.7568"},{"extension": "py", "date": "2020-04-12 07:18:24", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n    cpt=0\n    decomp=nombre\n    x=nombre%10\n    while decomp!=0 and x!=0:\n      if x==chiffre:\n        cpt+=1\n      else:\n        decomp=decomp//10\n        x=decomp%10\n    return cpt", "user": "userdId_11", "attemptID": 3445, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "7.665959", "embeddingY": "12.736964"},{"extension": "py", "date": "2020-03-03 06:02:56", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if fin1>=debut2:\n    res=True\n  else:\n    res=False\n  return res", "user": "userdId_30", "attemptID": 3446, "exercise": "6fd66bb2393fbf3809f1c6d04f3831f7", "exercise_name": "rendezVous", "embeddingX": "52.288994", "embeddingY": "-18.293455"},{"extension": "py", "date": "2020-05-04 21:57:17", "correct": "1", "upload": "def moyenne(liste):\n  if liste==[]:\n    res=None\n  else:\n    res=0\n    for elem in liste:\n      res+=elem\n    res=res/len(liste)\n  return res", "user": "userdId_26", "attemptID": 3447, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-4.473656", "embeddingY": "-18.743793"},{"extension": "py", "date": "2020-03-05 21:55:28", "correct": "0", "upload": "def somme(liste):\n  res=0\n  for elem in l:\n    res=res+elem\n  return res", "user": "userdId_23", "attemptID": 3448, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-30.05828", "embeddingY": "-8.06108"},{"extension": "py", "date": "2020-03-31 05:03:09", "correct": "0", "upload": "def listeSymetrique(l):\n  ok=True\n  i=0\n  while i<len(l) and ok:\n    if l[i]!=l[-i]:\n      ok=False\n    i+=1\n  return ok", "user": "userdId_13", "attemptID": 3449, "exercise": "8eb27aeda471a467e2223abebeca886e", "exercise_name": "listeSymetrique", "embeddingX": "22.83619", "embeddingY": "40.657192"},{"extension": "py", "date": "2020-03-14 03:16:28", "correct": "0", "upload": "def moyenne(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=0\n    cpt=0\n    for elem in liste:\n      res=res+elem\n      cpt=cpt+1\n  res=res/cpt\n  return res", "user": "userdId_14", "attemptID": 3450, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-3.533659", "embeddingY": "-9.630484"},{"extension": "py", "date": "2020-03-12 23:49:24", "correct": "0", "upload": "def jourNuit(heure):\n  res=[]\n  if heure<0:\n    res=\"l'heure saisie est invalide\"\n  if heure>24:\n    res=\"l'heure saisie est invalide\"\n  if 6<=heure<=18:\n    if heure==5:\n      res='on est le matin et il fait nuit'\n    if 5<heure<=12:\n      res=\"on est le matin et il fait jour\"\n    if 12<=heure<=17:\n      res=\"on est l'apr\u00e8s-midi et il fait jour\"\n    if 17<=heure<=18:\n      res=\"on est le soir et il fait jour\"\n  if 1<=heure<=5 or 19<=heure<=24:\n    if 1<=heure<=4:\n      res=\"on est la nuit et il fait nuit\"\n    if 21<=heure<=24:\n      res=\"on est la nuit et il fait nuit\"\n    if 19<=heure<=20:\n      res=\"on est le soir et il fait nuit\"\n  return res", "user": "userdId_13", "attemptID": 3451, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "68.8571", "embeddingY": "22.902315"},{"extension": "py", "date": "2020-04-19 07:59:18", "correct": "1", "upload": "def nbChiffres(nombre):\n    decomp=nombre\n    cpt=0\n    while decomp!=0:\n      decomp=decomp//10\n      cpt+=1\n    if cpt==0:\n      cpt=1\n    return cpt\n      \n    \n      ", "user": "userdId_11", "attemptID": 3452, "exercise": "3dcf332c003a1f3bf15df22ee17884a3", "exercise_name": "nbChiffres", "embeddingX": "13.27031", "embeddingY": "13.574607"},{"extension": "py", "date": "2020-03-24 05:05:27", "correct": "0", "upload": "def fusion(liste1,liste2):\n    if liste1==[]:\n      res=liste2\n    elif liste2==[]:\n      res=liste1\n    else:\n      res=liste1+liste2\n    res.sort()\n    return res", "user": "userdId_18", "attemptID": 3453, "exercise": "6613efb6c873b142dc2b6040c14eb616", "exercise_name": "fusion", "embeddingX": "-17.764988", "embeddingY": "-16.07719"},{"extension": "py", "date": "2020-03-24 04:54:22", "correct": "0", "upload": "def quatrePlus100(liste):\n  i=0\n  res=[]\n  while i<len(liste):\n    if i>100:\n      res.append(liste[i])\n      i=i+1\n  return res\n", "user": "userdId_13", "attemptID": 3454, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-23.406223", "embeddingY": "33.19595"},{"extension": "py", "date": "2020-04-08 00:26:57", "correct": "1", "upload": "def compteChiffre(chiffre,nombre):\n  res=[]\n  cpt=0\n  if nombre==0:\n    res.append(0)\n  while nombre!=0:\n    res.append(nombre%10)\n    nombre=nombre//10\n  for i in range(len(res)):\n    if res[i]==chiffre:\n      cpt=cpt+1\n  return cpt", "user": "userdId_14", "attemptID": 3455, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-0.057205472", "embeddingY": "6.759106"},{"extension": "py", "date": "2020-03-08 21:23:13", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut1==Debut2 or fin1==fin2:\n    return True\n  elif fin1>=debut2 and debut1<fin2:\n    return True\n  else:\n    return False", "user": "userdId_1", "attemptID": 3456, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "54.592285", "embeddingY": "-28.323944"},{"extension": "py", "date": "2020-03-30 22:46:06", "correct": "0", "upload": "def nbChiffres(nombre):\n  res =0\n  while nombre//10!=nombre:\n    nombre//=10\n    res+=1\n  return res", "user": "userdId_6", "attemptID": 3457, "exercise": "3dcf332c003a1f3bf15df22ee17884a3", "exercise_name": "nbChiffres", "embeddingX": "30.457432", "embeddingY": "14.964763"},{"extension": "py", "date": "2020-03-17 05:28:18", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  res=''\n  if debut+longueur>len(s):\n    res=debut+longueur\n  else:\n    for i in range(debut,debut+longueur): \n      res=res+s[i]\n  return res", "user": "userdId_25", "attemptID": 3458, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-80.65935", "embeddingY": "19.036112"},{"extension": "py", "date": "2020-04-07 03:51:10", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  res=True\n  if len(liste)==1 and liste[0]!=0:\n    res=True\n  if len(liste)>=2 and liste[0]==0:\n    res=False\n  if len(liste)==0:\n    res=True\n  else:\n    end=False\n    while i<len(liste)-1 and end==False:\n      r=liste[0]/liste[1]\n      if liste[i]/liste[i+1]==r:\n        res=True\n      else:\n        res=False\n        end=True\n      i+=1\n  return res\n  ", "user": "userdId_26", "attemptID": 3459, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "38.957253", "embeddingY": "58.750618"},{"extension": "py", "date": "2020-04-03 00:23:52", "correct": "1", "upload": "def stockerChiffres(nombre):\n  res=[]\n  if nombre==0:\n    res=[0]\n  while nombre!=0:\n    res.append(nombre%10)\n    nombre=nombre//10\n  return res", "user": "userdId_12", "attemptID": 3460, "exercise": "49a87f644f84a443327fb4315b47f249", "exercise_name": "stockerChiffres", "embeddingX": "41.362442", "embeddingY": "13.542846"},{"extension": "py", "date": "2020-03-17 05:32:06", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  res=''\n  if debut+longueur>len(s):\n    res=debut+longueur\n  else:\n    for i in range(debut,debut+longueur): \n      res=res+s[i]\n  return res", "user": "userdId_25", "attemptID": 3461, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-70.87607", "embeddingY": "21.772873"},{"extension": "py", "date": "2020-04-16 21:11:20", "correct": "0", "upload": "def meilleurClassementJoueur(scores,joueurs,nom):\n  i=0\n  while i<len(scores):\n    if nom==joueurs[i]:\n      return i+1\n    i=i+1\n    ", "user": "userdId_1", "attemptID": 3462, "exercise": "be6ce0a06c5d396190024c7c681da95d", "exercise_name": "meilleurClassementJoueur", "embeddingX": "-13.366", "embeddingY": "66.742065"},{"extension": "py", "date": "2020-03-24 04:46:10", "correct": "0", "upload": "def quatrePlus100(liste):\n  i=0\n  res=[]\n  while i<len(liste) and i>100:\n    res.append(l[i])\n  return res", "user": "userdId_13", "attemptID": 3463, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-19.674984", "embeddingY": "43.854073"},{"extension": "py", "date": "2020-03-06 00:22:08", "correct": "1", "upload": "def nbVoyelles(mot):\n   res=0\n   for elem in mot:\n      if elem in 'aeiouy':\n         res=res+1\n   return res     ", "user": "userdId_14", "attemptID": 3464, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "16.066265", "embeddingY": "-24.03309"},{"extension": "py", "date": "2020-03-17 06:23:28", "correct": "0", "upload": "def maximum(liste):\n    if len(liste)==0:\n      res=0\n    else:\n      res=liste[0]\n    for elem in liste:\n        res=elem\n    return res", "user": "userdId_22", "attemptID": 3465, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "7.033328", "embeddingY": "-39.392166"},{"extension": "py", "date": "2020-03-13 00:35:10", "correct": "1", "upload": "def sommeNbPairs(liste):\n  if liste==[] :\n    res=0\n  else:\n    res=0\n    for elem in liste:\n      if elem%2==0 :\n        res=res+elem\n  return res", "user": "userdId_15", "attemptID": 3466, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "30.698578", "embeddingY": "-18.524492"},{"extension": "py", "date": "2020-03-12 21:50:25", "correct": "0", "upload": "def minimum(liste):\n  res=(l[0])\n  for elem in liste:\n    if l[0]<elem:\n      res=elem\n  return res", "user": "userdId_23", "attemptID": 3467, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "43.363297", "embeddingY": "-60.271156"},{"extension": "py", "date": "2020-03-12 23:43:29", "correct": "0", "upload": "def jourNuit(heure):\n  if heure<0 or heure>24:\n    heure=\"l'heure saisie est invalide\"\n  if 6<=heure<=18:\n    if 5<=heure<=12:\n      heure=\"on est le matin et il fait jour\"\n    if 12<=heure<=17:\n      heure=\"on est l'apr\u00e8s-midi et il fait jour\"\n    if 17<=heure<=18:\n      heure=\"on est le soir et il fait jour\"\n  if 1<=heure<=5 or 19<=heure<=24:\n    if 1<=heure<=4:\n      heure=\"on est la nuit et il fait nuit\"\n    if 21<=heure<=24:\n      heure=\"on est la nuit et il fait nuit\"\n    if 19<=heure<=20:\n      heure=\"on est le soir et il fait nuit\"\n  return heure", "user": "userdId_13", "attemptID": 3468, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "69.77225", "embeddingY": "25.4343"},{"extension": "py", "date": "2020-04-06 06:14:14", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  for i in range(len(nombre)):\n    if chiffre==nombre:\n      cpt=cpt+1\n  return cpt", "user": "userdId_3", "attemptID": 3469, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-36.008675", "embeddingY": "-17.524687"},{"extension": "py", "date": "2020-03-24 05:00:56", "correct": "1", "upload": "def quatrePlus100(liste):\n  i=0\n  res=[]\n  while i<len(liste) and len(res)<4:\n    if liste[i]>100:\n      res.append(liste[i])\n    i=i+1\n  return res\n", "user": "userdId_13", "attemptID": 3470, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-25.68133", "embeddingY": "40.551376"},{"extension": "py", "date": "2020-03-12 08:19:40", "correct": "1", "upload": "def nbOccurrencesLettre(lettre,mot):\n  if len(mot)==0:\n    return 0\n  Cpt=0\n  for i in range (len(mot)):\n    if mot[i]==lettre:\n      Cpt=Cpt+1\n  return Cpt\n    ", "user": "userdId_1", "attemptID": 3471, "exercise": "2864c9e5861229d2ff32570f6bc944fb", "exercise_name": "nbOccurrencesLettre", "embeddingX": "-21.216875", "embeddingY": "-40.83319"},{"extension": "py", "date": "2020-03-22 05:49:35", "correct": "1", "upload": "def ecart(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    grand=liste[0]\n    petit=liste[0]\n    for i in range(len(liste)):\n      if liste[i]>grand:\n        grand=liste[i]\n      if liste[i]<petit:\n        petit=liste[i]\n    return grand-petit", "user": "userdId_12", "attemptID": 3472, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "-0.54919153", "embeddingY": "-84.46566"},{"extension": "py", "date": "2020-03-09 09:08:20", "correct": "0", "upload": "def nbVoyelles(mot):\n    cpt=0\n    for lettre in len(mot):\n      if lettre==\"a\":\n        cpt=cpt+1\n      if lettre==\"e\":\n        cpt=cpt+1\n      if lettre==\"i\":\n        cpt=cpt=1\n      if lettre==\"o\":\n        cpt=cpt+1\n      if lettre==\"u\":\n        cpt=cpt+1\n      if lettre==\"y\":\n        cpt=cpt+1\n    return cpt\n  ", "user": "userdId_11", "attemptID": 3473, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-39.165066", "embeddingY": "-24.191046"},{"extension": "py", "date": "2020-04-07 03:33:17", "correct": "1", "upload": "def compteChiffre(chiffre,nombre):\n  res=0\n  nombre=str(nombre)\n  chiffre=str(chiffre)\n  for elem in nombre:\n    if elem == chiffre:\n      res=res+1\n  return res", "user": "userdId_31", "attemptID": 3474, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-24.29328", "embeddingY": "-26.617905"},{"extension": "py", "date": "2020-04-14 03:50:33", "correct": "1", "upload": "def indiceInsertion(sc,scores):\n  for i in range(len(scores)):\n    if sc>=scores[i]:\n      return i\n  return len(scores)", "user": "userdId_18", "attemptID": 3475, "exercise": "f8a820b2bd54d18d36716e3d703858f7", "exercise_name": "indiceInsertion", "embeddingX": "-17.951101", "embeddingY": "-45.860363"},{"extension": "py", "date": "2020-03-06 00:49:36", "correct": "0", "upload": "def nbVoyelles(mot):\n  res=0\n  for elem in mot:\n    if elem in mot==([\"a\",\"e\",\"i\",\"o\",\"u\",\"y\"]):\n      res=res+1\n  return res", "user": "userdId_23", "attemptID": 3476, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "13.348652", "embeddingY": "-34.820625"},{"extension": "py", "date": "2020-04-11 00:25:28", "correct": "0", "upload": "def suiteAri(liste):\n  i=0\n  c=True\n  while i<(len(liste)-1) and c:\n    if liste[i+1]!=liste[i]+b:\n      c=False\n    i=i+1\n  return c", "user": "userdId_19", "attemptID": 3477, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "19.713608", "embeddingY": "58.558125"},{"extension": "py", "date": "2020-03-24 03:58:57", "correct": "0", "upload": "def compare(chaine1,chaine2):\n    if chaine1=='':\n      res=-1\n    elif chaine2=='':\n      res=1\n    else:\n      res=0\n      i=0\n      while i<len(chaine1) and i<len(chaine2):\n        if chaine1[i]>chaine2[i]:\n          res=-1\n        elif chaine1[i]<chaine2[i]:\n          res=1\n        i=i+1\n    return res", "user": "userdId_18", "attemptID": 3478, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-27.98408", "embeddingY": "60.856766"},{"extension": "py", "date": "2020-04-12 05:51:12", "correct": "1", "upload": "def suiteAri(liste):\n    if len(liste)==0:\n      res=True\n    else:\n      res=True\n      for i in range(1,len(liste)):\n        x=liste[1]-liste[0]\n        if liste[i]==liste[i-1]+x:\n          res=True\n        else:\n          res=False\n    return res\n      ", "user": "userdId_11", "attemptID": 3479, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "-15.860522", "embeddingY": "-64.604034"},{"extension": "py", "date": "2020-04-07 01:52:11", "correct": "1", "upload": "def sousChaine(s1,s2):\n  if s1 in s2 :\n    res = True\n  else :\n    res = False\n  return res", "user": "userdId_17", "attemptID": 3480, "exercise": "a7cdd094daa2f0bfccc7a4ec419f7243", "exercise_name": "sousChaine", "embeddingX": "46.22506", "embeddingY": "-16.319494"},{"extension": "py", "date": "2020-03-09 21:51:26", "correct": "0", "upload": "def jourNuit(heure):\n  if not(0<=heure<24):\n    return \"l'heure saisie est invalide\"\n  else:\n    res='on est '\n    if(5<=heure<12):\n      res+='le matin '\n    elif(12<=heure<17):\n      res+=\"l'apr\u00e8s-midi \"\n    elif(17<=heure<21):\n      res+='le soir '\n    else:\n      res+='la nuit '\n    res += 'et il fait '\n    if(6<=heure<18):\n      res+='jour'\n    else:\n      res+='nuit'\n    return res", "user": "userdId_6", "attemptID": 3481, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "74.88686", "embeddingY": "26.152523"},{"extension": "py", "date": "2020-04-06 06:05:26", "correct": "0", "upload": "def motPalindrome(mot):\n  ok=True\n  i=0\n  j=len(mot)-1\n  while i<len(mot) and ok:\n    if i!=j:\n      ok=False\n    i=i+1\n    j=j+1\n  if i==j:\n    ok=True\n  return ok", "user": "userdId_3", "attemptID": 3482, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "8.725334", "embeddingY": "52.757347"},{"extension": "py", "date": "2020-03-08 21:32:29", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1==annee2 and mois1==mois2 and jour1==jour2:\n    return 0\n  elif annee1<=annee2 and mois1<=mois2 and jour1<jour2:\n    return -1\n  else:\n    return 1", "user": "userdId_1", "attemptID": 3483, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "87.96638", "embeddingY": "-13.096365"},{"extension": "py", "date": "2020-03-27 05:38:32", "correct": "0", "upload": "def quatrePlus100(liste):\n  i=0\n  res=[]\n  while len(res)<4:\n    if liste[i]>100:\n      res.append(liste[i])\n    i=i+1\n  return res", "user": "userdId_12", "attemptID": 3484, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-26.425957", "embeddingY": "37.195896"},{"extension": "py", "date": "2020-03-05 23:40:47", "correct": "0", "upload": "def maximum(liste):\n    res = liste[0]\n    for i in range(0,len(liste)):\n      if liste[i] > res :\n        res = liste[i]\n    if len(liste) == 0:\n      res = None\n    return res", "user": "userdId_29", "attemptID": 3485, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-2.3452737", "embeddingY": "-62.233723"},{"extension": "py", "date": "2020-04-11 05:57:48", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  if chiffre==0 or nombre==0:\n    res=1\n  res=0\n  while nombre!=0:\n    nombre=nombre//10\n    if nombre%10==chiffre:\n      res+=1\n  return res", "user": "userdId_8", "attemptID": 3486, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "23.445139", "embeddingY": "9.888197"},{"extension": "py", "date": "2020-04-16 23:58:00", "correct": "0", "upload": "def meilleurClassementJoueur(scores,joueurs,nom):\n  res=0\n  if nom not in joueurs:\n    res=-1\n  else:\n    for i in range(len(joueurs)):\n      if joueurs[i]==nom:\n        return i\n  return res", "user": "userdId_12", "attemptID": 3487, "exercise": "be6ce0a06c5d396190024c7c681da95d", "exercise_name": "meilleurClassementJoueur", "embeddingX": "-24.539186", "embeddingY": "-36.43721"},{"extension": "py", "date": "2020-03-17 20:39:43", "correct": "1", "upload": "def sousChaine(s,debut,longueur):\n  res=''\n  fin=debut+longueur\n  if fin>len(s):\n    fin=len(s)\n  for i in range(debut,fin):\n    res=res+s[i]\n  return res", "user": "userdId_12", "attemptID": 3488, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-88.65444", "embeddingY": "19.792707"},{"extension": "py", "date": "2020-03-05 06:46:30", "correct": "1", "upload": "from math import sqrt\ndef polynome(a,b,c):\n  x=0\n  delta=b**2-(4*a*c)\n  if delta>0 :\n    x=((-b)+sqrt(delta))/(2*a),((-b)-sqrt(delta))/(2*a)\n  elif delta==0 :\n    x=(-b)/(2*a)\n  else :\n    x='pas de solution'\n  return x\n\n    \n", "user": "userdId_28", "attemptID": 3489, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-50.85409", "embeddingY": "9.205851"},{"extension": "py", "date": "2020-04-08 00:04:44", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  res=0\n  for i in range(nombre):\n    if i==chiffre:\n      res=res+1\n  return res", "user": "userdId_2", "attemptID": 3490, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-19.540798", "embeddingY": "-25.367102"},{"extension": "py", "date": "2020-04-05 11:07:08", "correct": "0", "upload": "def suiteGeo(liste):\n    res = True\n    if len(liste)>1:\n        if  liste[0] !=0:\n            q = liste[1]/liste[0]    \n            res=verifSuiteAriGeo(liste,q,0)\n        else:\n            res = False\n\n    return res\n  \n  \n  \ndef verifSuiteAriGeo(liste,a,b):\n    res=True\n    n=1\n    while n<len(liste) and res:\n        if liste[n]!=liste[n-1]*a+b:\n            res=False\n        n+=1\n    return res", "user": "userdId_4", "attemptID": 3491, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "-3.5671816", "embeddingY": "-72.44374"},{"extension": "py", "date": "2020-03-06 00:04:20", "correct": "1", "upload": "def minimum(liste):\n  if len (liste)==0:\n    res=None\n  else:\n    res=liste[0]\n    for i in range (1,len(liste)):\n      if liste[i]<res:\n        res=liste[i]\n  return res", "user": "userdId_9", "attemptID": 3492, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "26.223026", "embeddingY": "-68.60252"},{"extension": "py", "date": "2020-03-06 00:42:50", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0 :\n    res=0\n  else:\n    for elem in mot :\n      if mot in 'aeiouy' :\n        res=res+1\n  return res", "user": "userdId_24", "attemptID": 3493, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "8.505059", "embeddingY": "-31.841251"},{"extension": "py", "date": "2020-03-06 00:55:04", "correct": "1", "upload": "def premiereOccurrenceLettre(lettre,mot):\n  if len(mot)==0:\n    pos=None\n  else:\n    pos=-1\n    for elem in mot:\n      if lettre!=elem:\n        pos=pos+1\n      else:\n        pos=pos+1\n        return pos", "user": "userdId_15", "attemptID": 3494, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-9.773252", "embeddingY": "-32.534435"},{"extension": "py", "date": "2020-03-22 23:42:59", "correct": "1", "upload": "def moyenne(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    x=0\n    cpt=0\n    for i in range(len(liste)):\n      cpt=cpt+1\n      x=x+liste[i]\n    res=x/cpt\n  return res", "user": "userdId_16", "attemptID": 3495, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-9.763163", "embeddingY": "-6.6063557"},{"extension": "py", "date": "2020-03-31 05:12:30", "correct": "1", "upload": "def permutationChaine(s):\n    res=''\n    for i in range(0,len(s)-1,2):\n      res+=s[i+1]+s[i]\n    if len(s)%2!=0:\n      res+=s[-1]\n    return res", "user": "userdId_18", "attemptID": 3496, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-35.22937", "embeddingY": "-56.570244"},{"extension": "py", "date": "2020-04-21 02:47:13", "correct": "0", "upload": "def meilleurScoreJoueur(scores,joueurs,nom):\n    trouve=False\n    i=0\n    res=0\n    while i<len(joueurs) and i<len(scores) and trouve:\n      if joueurs[i]==nom:\n        trouve=True\n      i+=1\n    if trouve:\n      res=scores[i-1]\n    else:\n      res=0\n    return res", "user": "userdId_11", "attemptID": 3497, "exercise": "c96fadc94086276f98451a798b3bb730", "exercise_name": "meilleurScoreJoueur", "embeddingX": "-1.5827034", "embeddingY": "50.67262"},{"extension": "py", "date": "2020-03-19 23:28:29", "correct": "1", "upload": "def permutationChaine(s):\n  res=\"\"\n  for i in range (0,len(s)-1,2):\n    res=res+s[i+1]+s[i]\n    \n  if (len(s)%2!=0):\n    res=res+s[-1]\n    \n  return res", "user": "userdId_38", "attemptID": 3498, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-35.761314", "embeddingY": "-58.980103"},{"extension": "py", "date": "2020-03-17 06:21:24", "correct": "1", "upload": "def permutationListe(liste,permutation):\n  res=[0]*(len(permutation))\n  for i in range(len(liste)):\n    res[permutation[i]]=liste[i]\n  return res\n      \n      ", "user": "userdId_9", "attemptID": 3499, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-50.700184", "embeddingY": "-30.515509"},{"extension": "py", "date": "2020-03-10 03:59:33", "correct": "0", "upload": "def semestreValide(ue1,ue2):\n  if ue1>=10 and ue2>=10:\n    res=True\n  else:\n    res=False\n  return res", "user": "userdId_5", "attemptID": 3500, "exercise": "70ae7ad6cf504e0fa8cedebd8e8a825f", "exercise_name": "semestreValide", "embeddingX": "68.673996", "embeddingY": "-1.7943196"},{"extension": "py", "date": "2020-04-17 03:06:45", "correct": "0", "upload": "def nbVoyelles(mot):\n  cpt=0\n  for i in len(mot): \n    if i=='aeiouy':\n      cpt=cpt+1\n  return cpt", "user": "userdId_21", "attemptID": 3501, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-39.177864", "embeddingY": "-24.205246"},{"extension": "py", "date": "2020-03-06 00:32:02", "correct": "1", "upload": "def maximum(liste):\n    if len(liste)==0:\n        res=None\n    else:  \n       res=liste[0]\n       for elem in liste:\n         if res<elem:\n          res=elem\n    return res", "user": "userdId_23", "attemptID": 3502, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "30.336103", "embeddingY": "-62.34868"},{"extension": "py", "date": "2020-03-31 07:58:00", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n    if len(mot)==0 or lettre not in mot:\n      res=None\n    else:\n      res=0\n      for i in range(len(mot)):\n        if mot[i]==lettre:\n          res=i\n    return res", "user": "userdId_11", "attemptID": 3503, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-18.61831", "embeddingY": "-38.75249"},{"extension": "py", "date": "2020-04-07 04:49:16", "correct": "0", "upload": "def suiteAri(liste):\n  ok=True\n  i=0\n  if len(liste)==0:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=liste[i]+liste[i+1-i]:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 3504, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "20.459332", "embeddingY": "52.749115"},{"extension": "py", "date": "2020-03-31 03:13:10", "correct": "1", "upload": "def fusion(liste1,liste2):\n  res=[]\n  i=0\n  j=0\n  while i<len(liste1) and j<len(liste2):\n    if liste1[i]<liste2[j]:\n      res=res+[liste1[i]]\n      i+=1\n    else:\n      res=res+[liste2[j]]\n      j+=1\n  while i<len(liste1) or j<len(liste2):\n    if i<len(liste1):\n      res.append(liste1[i])\n      i+=1\n    elif j<len(liste2):\n      res.append(liste2[j])\n      j+=1\n  return res", "user": "userdId_27", "attemptID": 3505, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-38.88196", "embeddingY": "53.889923"},{"extension": "py", "date": "2020-03-12 21:54:34", "correct": "0", "upload": "def maximum(liste):\n   if len(liste)==0:\n      res=None\n   else:\n      res=liste[0]\n      for i in liste:\n         if res>liste[0]:\n            res=liste[0]\n   return res", "user": "userdId_14", "attemptID": 3506, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "9.295373", "embeddingY": "-61.46961"},{"extension": "py", "date": "2020-04-06 03:45:23", "correct": "1", "upload": "def suiteAriGeo(liste):\n  res=True\n  if len(liste)>2:\n    if (liste[1]-liste[0])==0:\n      q=0\n      r=0\n    else:\n    \tq=(liste[2]-liste[1])/(liste[1]-liste[0])\n    \tr=liste[1]-q*liste[0]\n    res=verifSuiteAriGeo(liste,q,r)\n  return res\n\ndef verifSuiteAriGeo(liste,a,b):\n  ok=True\n  n=1\n  while n<len(liste) and ok:\n    if liste[n]!=liste[n-1]*a+b:\n      ok=False\n    n+=1\n  return ok", "user": "userdId_6", "attemptID": 3507, "exercise": "4c9665daf155b115fe13218141fa1aff", "exercise_name": "suiteAriGeo", "embeddingX": "25.947214", "embeddingY": "71.060814"},{"extension": "py", "date": "2020-04-07 03:10:57", "correct": "1", "upload": "def motPalindrome(mot):\n  palindrome = True\n  i=0\n  j=len(mot)-1\n  i=0\n  while i<j and palindrome :\n    if mot[i] != mot[j]:\n      palindrome = False\n    i=i+1\n    j=j-1\n  return palindrome", "user": "userdId_52", "attemptID": 3508, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "20.014975", "embeddingY": "59.376144"},{"extension": "py", "date": "2020-03-24 05:20:00", "correct": "0", "upload": "def quatrePlus100(liste):\n  res=[]\n  i=0\n  while i<len(liste) and len(res)<4:\n    if liste[i]>100:\n      res.append(liste[i])\n    i=i+1\n    return res", "user": "userdId_36", "attemptID": 3509, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-26.619383", "embeddingY": "41.643394"},{"extension": "py", "date": "2020-03-31 03:23:53", "correct": "0", "upload": "def fusion(liste1,liste2):\n  res=[]\n  i=0\n  j=0\n  while i<len(liste1) and j<len(liste2):\n    if liste1[i]<liste2[j]:\n      res.append(liste1[i])\n      i=i+1\n    else:\n      res.append(liste2[j])\n      j=j+1\n  if len(liste1)!=len(liste2):\n    if i<len(liste1):\n      res.append(liste1[i])\n    elif j<len(liste2):\n      res.append(liste2[j])\n  return res", "user": "userdId_12", "attemptID": 3510, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-38.950886", "embeddingY": "49.19133"},{"extension": "py", "date": "2020-02-29 06:34:01", "correct": "1", "upload": "def bissextile(annee):\n    if(annee%4==0 and annee%100!=0 or annee%400==0):\n      res=True\n    else:\n      res=False\n    return res", "user": "userdId_18", "attemptID": 3511, "exercise": "a7d37636649c0ada991520788deeb2d0", "exercise_name": "bissextile", "embeddingX": "48.2675", "embeddingY": "1.5799816"},{"extension": "py", "date": "2020-03-05 23:50:46", "correct": "0", "upload": "def maximum(liste):\n    max=0\n    for elem in range(1, len(liste)):\n      if len[liste]>max:\n        max=l[liste]\n    return max    \n      \n   \n    ", "user": "userdId_46", "attemptID": 3512, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "9.280133", "embeddingY": "-74.37114"},{"extension": "py", "date": "2020-03-17 06:44:00", "correct": "0", "upload": "def permutationListe(liste,permutation):\n  res=liste[0]\n  for elem in liste:\n    res[liste]=liste[i]\n  return res", "user": "userdId_25", "attemptID": 3513, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-50.212513", "embeddingY": "-12.507172"},{"extension": "py", "date": "2020-03-06 00:23:25", "correct": "0", "upload": "def ecart(liste):\n    if liste==[]:\n      return None\n    elif len(liste)==1:\n      return 0\n    else:\n      res=liste[0]\n      for i in range(1,len(liste)):\n        if res>liste[i]:\n          max=liste[i]\n      for i in range(1,len(liste)):\n        if res<iste[i]:\n          min=liste[i]\n      ecart=max-min\n      return ecart\n          \n      \n      \n      ", "user": "userdId_2", "attemptID": 3514, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "9.1831255", "embeddingY": "-84.7143"},{"extension": "py", "date": "2020-03-30 22:42:49", "correct": "0", "upload": "def listeSymetrique(l):\n  l2 = []\n  flag = False\n  i = 0\n  while flag == False and i < len(l)-1:\n    if l[i] < l[i+1]:\n      l2.append(l[i])\n      l2.append(l[i+1])\n      i=+2\n    else:\n      l2.reverse()\n      flag = True\n  \n  print(l[i+1:],l2)\n  if l[i+1:] == l2:\n    res = True\n  else:\n    res = False\n  \n  return res", "user": "userdId_4", "attemptID": 3515, "exercise": "8eb27aeda471a467e2223abebeca886e", "exercise_name": "listeSymetrique", "embeddingX": "12.367289", "embeddingY": "58.86693"},{"extension": "py", "date": "2020-03-03 05:24:14", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    for i in range(len(liste)):\n      if res<liste[i]:\n        res=liste[i]\n  return res", "user": "userdId_8", "attemptID": 3516, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "24.935585", "embeddingY": "-64.30932"},{"extension": "py", "date": "2020-03-22 09:12:11", "correct": "0", "upload": "def moyenne(liste):\n  if liste==():\n    res=none\n  else:\n    res=0\n    for i in range (len(liste)):\n      x=res+liste[i]\n    res=x/len(liste)\n  return res", "user": "userdId_16", "attemptID": 3517, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-12.42749", "embeddingY": "-6.2942023"},{"extension": "py", "date": "2020-03-06 22:17:08", "correct": "1", "upload": "from statistics import mean\n\ndef moyenne(liste):\n    res = None\n    if len(liste) > 0:\n        res = mean(liste)\n    return res", "user": "userdId_4", "attemptID": 3518, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "10.194567", "embeddingY": "-55.10024"},{"extension": "py", "date": "2020-04-12 06:07:54", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=False\n  c=[]\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n    c=d.extend(c)\n  return c", "user": "userdId_8", "attemptID": 3519, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-77.83649", "embeddingY": "14.225485"},{"extension": "py", "date": "2020-04-11 00:22:51", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  i=0\n  c=True\n  while i<(len(liste)+1) and c:\n    if liste[i+1]!=a*liste[i]+b:\n      c=False\n    i=i+1\n  return c", "user": "userdId_19", "attemptID": 3520, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-80.98462", "embeddingY": "10.748382"},{"extension": "py", "date": "2020-03-16 02:01:28", "correct": "1", "upload": "def semestreValide(ue1,ue2):\n  if ue1>=10 and ue2>=10:\n    res=True\n  elif ue1>=10 and (ue1+ue2)/2>=10:\n    res=True\n  else:\n    res=False\n  return res", "user": "userdId_16", "attemptID": 3521, "exercise": "70ae7ad6cf504e0fa8cedebd8e8a825f", "exercise_name": "semestreValide", "embeddingX": "68.86279", "embeddingY": "-0.42058018"},{"extension": "py", "date": "2020-03-17 05:38:31", "correct": "0", "upload": "def permutationChaine(s):\n  res=\"\"\n  for i in range(0,len(s)-1,2):\n    res=res+s[1+i]+s[i]\n  if len(s)%2!=0:\n    res=res+s[i-1]\n  return res", "user": "userdId_8", "attemptID": 3522, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-35.46983", "embeddingY": "-59.586945"},{"extension": "py", "date": "2020-03-12 23:57:55", "correct": "0", "upload": "def jourNuit(heure):\n  \n  if heure<0 or heure>24 :\n    res=\"l'heure saisie est invalide\"\n  else : \n    if heure>=6 and heure<18 :\n      res=\" et il fait jour\"\n    else :\n      res=\" et il fait nuit\"\n  \n  if heure>=5 and heure<12 :\n    res=\"on est le matin\"+res\n  elif heure>=12 and heure<17 :\n    res=\"on est l'apr\u00e8s-midi\"+res\n  elif heure>=17 and heure<21 :\n    res=\"on est le soir\"+res\n  else :\n    res=\"on est la nuit\"+res\n    \n  return res", "user": "userdId_15", "attemptID": 3523, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "78.47371", "embeddingY": "20.315813"},{"extension": "py", "date": "2020-03-06 23:57:45", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut1>=debut2 or fin1<=fin2:\n    if fin1>=debut2:\n      res=True\n  else:\n    res=False\n    return res", "user": "userdId_8", "attemptID": 3524, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "55.006416", "embeddingY": "-21.257082"},{"extension": "py", "date": "2020-03-15 03:46:55", "correct": "0", "upload": "def polynome(a,b,c):\n    det=b**2-4*a*c\n    if det>0:\n      sol1=-b-det**0,5/2*a\n      sol2=-b+det**0,5/2*a\n      res=(sol1,sol2)\n    elif det==0:\n      res=-b/2*a\n    else:\n      res=\"pas de solution\"\n    \n      \n \n\n ", "user": "userdId_21", "attemptID": 3525, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-53.44307", "embeddingY": "6.042895"},{"extension": "py", "date": "2020-04-14 03:26:08", "correct": "0", "upload": "def listeDecroissante(scores):\n  scorePrec=scores[0]\n  ok=True\n  i=1\n  while i<len(scores) and ok:\n    if scorePrec<=scores[i]:\n      ok=False\n      i+=1\n  return ok", "user": "userdId_18", "attemptID": 3526, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "17.931915", "embeddingY": "37.53774"},{"extension": "py", "date": "2020-03-08 23:10:55", "correct": "0", "upload": "from math import sqrt \n\ndef polynome(a,b,c):\n  d=b**2-(4*a*c)\n  if d<0:\n    return 'pas de solution'\n  elif d==0:\n    solution=-b/(2*a)\n    return solution\n  else:\n    if d>0:\n      solution1=-b-(sqrt(d))/2*a\n      solution2=-b+(sqrt(d))/2*a\n      return solution1 and solution2", "user": "userdId_1", "attemptID": 3527, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-52.927326", "embeddingY": "10.728821"},{"extension": "py", "date": "2020-03-09 08:56:05", "correct": "0", "upload": "def nbVoyelles(mot):\n    cpt=0\n    for lettre[i] in range(mot):\n      if lettre==\"a\":\n        cpt=cpt+1\n      if lettre==\"e\":\n        cpt=cpt+1\n      if lettre==\"i\":\n        cpt=cpt=1\n      if lettre==\"o\":\n        cpt=cpt+1\n      if lettre==\"u\":\n        cpt=cpt+1\n      if lettre==\"y\":\n        cpt=cpt+1\n    return cpt\n  ", "user": "userdId_11", "attemptID": 3528, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-47.564625", "embeddingY": "-16.680542"},{"extension": "py", "date": "2020-03-13 00:49:31", "correct": "1", "upload": "def doubleLettre(mot):\n  res=False\n  l1=''\n  for l2 in mot:\n    if l1==l2:\n      res=True\n    l1=l2\n  \n  return res", "user": "userdId_15", "attemptID": 3529, "exercise": "00da9cf1fa2b468d915724499459ed8f", "exercise_name": "doubleLettre", "embeddingX": "16.933908", "embeddingY": "-5.976899"},{"extension": "py", "date": "2020-03-07 00:24:52", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut1<debut2 or fin1>fin2:\n    res=False\n  else:\n    if fin1>=debut2:\n      res =True\n  return res", "user": "userdId_8", "attemptID": 3530, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "62.1777", "embeddingY": "-20.577885"},{"extension": "py", "date": "2020-03-22 23:24:20", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    return None\n  compteur=0\n  for element in mot:\n    if element in 'aeiouy':\n      compteur=compteur+1\n    return compteur", "user": "userdId_34", "attemptID": 3531, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "6.153809", "embeddingY": "-32.39554"},{"extension": "py", "date": "2020-03-17 05:59:32", "correct": "1", "upload": "def sousChaine(s,debut,longueur):\n  res=''\n  if debut+longueur>len(s):\n    fin=len(s)\n  else:\n    fin=debut+longueur  \n  for i in range(debut,fin):\n    res=res+s[i]\n  return res", "user": "userdId_25", "attemptID": 3532, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-66.52174", "embeddingY": "17.937143"},{"extension": "py", "date": "2020-03-17 05:17:03", "correct": "0", "upload": "def distribution(liste,n):\n  cpts=[0]*(n+1)\n  for elem in liste:\n    liste[elem]=liste[elem]+1\n  return liste[elem]", "user": "userdId_8", "attemptID": 3533, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-59.105072", "embeddingY": "-17.003908"},{"extension": "py", "date": "2020-03-31 06:13:21", "correct": "1", "upload": "def stockerChiffres(nombre):\n  if nombre==0:\n    res=[0]\n  else:\n    res=[]\n    while nombre!=0:\n      res.append(nombre%10)\n      nombre//=10\n  return res", "user": "userdId_18", "attemptID": 3534, "exercise": "49a87f644f84a443327fb4315b47f249", "exercise_name": "stockerChiffres", "embeddingX": "42.3312", "embeddingY": "12.226457"},{"extension": "py", "date": "2020-03-20 00:44:37", "correct": "0", "upload": "def permutationChaine(s):\n  res=''\n  for i in range (0,len(s)-1,2):\n    res=res+(s[i]+1)+s[i]\n  if len(s)%2!=0:\n    res=res+s[-1]\n  return res", "user": "userdId_1", "attemptID": 3535, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-38.98804", "embeddingY": "-60.974457"},{"extension": "py", "date": "2020-04-07 11:05:15", "correct": "0", "upload": "def suiteGeo(liste):\n  ok=True\n  i=0\n  if len(liste)==0 and len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i]!=0:\n      q=liste[1]/liste[0] \n    if liste[i+1]/liste[i]!=q:\n        ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 3536, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "27.718763", "embeddingY": "61.05781"},{"extension": "py", "date": "2020-03-16 04:20:32", "correct": "0", "upload": "def moyenne(liste):\n    if liste==[]:\n      res=None\n    else:\n      res=0\n      cpt=0\n      for i in liste:\n        res=res+liste[i]\n        cpt=cpt+1\n      res=res/cpt\n    return res", "user": "userdId_18", "attemptID": 3537, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-13.658134", "embeddingY": "-12.028513"},{"extension": "py", "date": "2020-03-29 09:29:33", "correct": "1", "upload": "def reconstruireChainePartielle(s,n):\n  res=''\n  for i in range(0,len(s),n):\n    res=res+s[i]\n  return res", "user": "userdId_12", "attemptID": 3538, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-60.301674", "embeddingY": "-41.606777"},{"extension": "py", "date": "2020-03-22 12:10:19", "correct": "0", "upload": "def maximum(liste):\n  max=liste[0]\n  for i in range(0,len(liste)): \n    if liste[i]>max:\n      max=liste[i]\t\n  return max", "user": "userdId_21", "attemptID": 3539, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "10.357223", "embeddingY": "-72.11857"},{"extension": "py", "date": "2020-03-06 00:18:06", "correct": "1", "upload": "def moyenne(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    cpt=0\n    num=0\n    res=0\n    for i in range(len(liste)):\n      num=num+liste[i]\n      cpt=cpt+1\n    res=num/cpt\n  return res", "user": "userdId_12", "attemptID": 3540, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-9.741679", "embeddingY": "-6.6237965"},{"extension": "py", "date": "2020-03-17 05:52:09", "correct": "0", "upload": "def permutationListe(liste,permutation):\n  res=0\n  for elem in liste:\n    res=elem+1\n  return res", "user": "userdId_25", "attemptID": 3541, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-31.01843", "embeddingY": "-0.21849035"},{"extension": "py", "date": "2020-03-31 06:02:18", "correct": "0", "upload": "def stockerChiffres(nombre):\n  res=[]\n  while nombre!=0:\n    res.append(nombre%10)\n    nombre=nombre//10\n  if nombre==0:\n    res=[0]\n  return res", "user": "userdId_13", "attemptID": 3542, "exercise": "49a87f644f84a443327fb4315b47f249", "exercise_name": "stockerChiffres", "embeddingX": "40.981407", "embeddingY": "12.843211"},{"extension": "py", "date": "2020-03-12 08:37:32", "correct": "0", "upload": "def bissextile(annee):\n    if annee%4==0 :\n      res=True \n    else :\n      res=False\n    return res", "user": "userdId_24", "attemptID": 3543, "exercise": "a7d37636649c0ada991520788deeb2d0", "exercise_name": "bissextile", "embeddingX": "44.036137", "embeddingY": "-3.5539315"},{"extension": "py", "date": "2020-04-09 11:38:50", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  ok=True\n  if len(liste)>1 and 0 in liste:\n    ok=False\n  elif len(liste)>1:\n    raison=liste[1]/liste[0]\n    while i<len(liste)-1:\n      if liste[i+1]!=liste[i]*raison:\n        ok=False\n      i+=1\n  return ok", "user": "userdId_12", "attemptID": 3544, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "23.063263", "embeddingY": "73.09106"},{"extension": "py", "date": "2020-03-24 03:57:21", "correct": "0", "upload": "def compare(chaine1,chaine2):\n  res=0\n  i=0\n  while i<len(chaine1) and i<len(chaine2) and res==0:\n    if chaine1[i] > chaine2[i]:\n      res=-1\n    elif chaine1[i] < chaine2[i]:\n      res=1\n    i=i+1\n  return res", "user": "userdId_31", "attemptID": 3545, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-23.557377", "embeddingY": "60.57557"},{"extension": "py", "date": "2020-03-13 00:02:53", "correct": "1", "upload": "def jourNuit(heure):\n  \"\"\"\n  cette fonction a pour objectif d'indiquer dans quelle partie de la journ\u00e9e on est et s'il fait jour ou nuit\n  param\u00e8tre: \n    heure : de type int repr\u00e9sente l'heure\n  r\u00e9sultat:un str qui indique dans quelle partie de la journ\u00e9e on est et s'il fait jour ou nuit\n  \"\"\"\n  if heure>24 or heure<0:\n    res=\"l'heure saisie est invalide\"\n  #on g\u00e8re le moment de la journ\u00e9e\n  else:\n    if heure<5 or heure>=21:\n      res=\"on est la nuit\"\n    elif heure<12:\n      res=\"on est le matin\"\n    elif heure<17:\n      res=\"on est l'apr\u00e8s-midi\"\n    else:\n      res=\"on est le soir\"\n    #on g\u00e8re s'il fait jour ou nuit\n    if heure<6 or heure>=18:\n      res=res+\" et il fait nuit\"\n    else:\n      res=res+\" et il fait jour\"\n  return res\n\n  #test de la fonction jourNuit\n  assert jourNuit(9)==\"on est le matin et il fait jour\",\"Probl\u00e8me avec jourNuit(9)\"\n  assert jourNuit(15)==\"on est l'apr\u00e8s-midi et il fait jour\",\"Probl\u00e8me avec jourNuit(9)\"\n  assert jourNuit(29)==\"l'heure saisie est invalide\",\"Probl\u00e8me avec jourNuit(9)\"", "user": "userdId_12", "attemptID": 3546, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "69.12236", "embeddingY": "14.75816"},{"extension": "py", "date": "2020-03-31 03:42:42", "correct": "1", "upload": "def fusion(liste1,liste2):\n  i=0\n  j=0\n  res=[]\n  while i<len(liste1) and j<len(liste2):\n    if liste1[i]<liste2[j]:\n      res.append(liste1[i])\n      i=i+1\n    else:\n      res.append(liste2[j])\n      j=j+1\n  while j<len(liste2):\n    res.append(liste2[j])\n    j=j+1\n  while i<len(liste1):\n    res.append(liste1[i])\n    i+=1\n  return res", "user": "userdId_9", "attemptID": 3547, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-37.308235", "embeddingY": "50.47721"},{"extension": "py", "date": "2020-03-17 05:22:02", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  res=''\n  if debut+longueur>len(s):\n    res=debut+longueur\n  else:\n    for i in range(debut,debut+longueur): \n      res=res+s[i]\n  return res", "user": "userdId_25", "attemptID": 3548, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-73.303635", "embeddingY": "29.081013"},{"extension": "py", "date": "2020-03-08 21:45:45", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1==annee2 and mois1==mois2 and jour1==jour2:\n    return 0\n  elif annee1<annee2 and mois1<=mois2 and jour1<jour2:\n    return -1\n  elif annee1<annee2 and mois1>=mois2 and jour1>jour2:\n    return -1\n  elif annee1<annee2 and mois1<=mois2 and jour1>=jour2:\n    return -1\n  else:\n    return 1", "user": "userdId_1", "attemptID": 3549, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "83.81303", "embeddingY": "-14.064616"},{"extension": "py", "date": "2020-03-31 05:38:15", "correct": "0", "upload": "def nbChiffres(nombre):\n  res=0\n  nb=nombre\n  cpt=0\n  while nb%10!=0:\n    cpt=cpt+1\n    nb=nb//10\n  return cpt\n    \n    ", "user": "userdId_28", "attemptID": 3550, "exercise": "3dcf332c003a1f3bf15df22ee17884a3", "exercise_name": "nbChiffres", "embeddingX": "0.5578136", "embeddingY": "17.28416"},{"extension": "py", "date": "2020-04-16 23:41:31", "correct": "0", "upload": "def indiceInsertion(sc,scores):\n  i=0\n  while i<len(scores):\n    if sc>scores[i]:\n      return i\n    i=i+1", "user": "userdId_1", "attemptID": 3551, "exercise": "f8a820b2bd54d18d36716e3d703858f7", "exercise_name": "indiceInsertion", "embeddingX": "-16.559801", "embeddingY": "60.68943"},{"extension": "py", "date": "2020-03-06 00:51:54", "correct": "0", "upload": "def nbVoyelles(mot):\n  res=0\n  for elem in mot:\n    if elem in mot==([\"a\",\"e\",\"i\",\"o\",\"u\",\"y\"]):\n      res=res+1\n  return res", "user": "userdId_23", "attemptID": 3552, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "13.354625", "embeddingY": "-34.809685"},{"extension": "py", "date": "2020-03-06 00:00:05", "correct": "0", "upload": "def maximum(liste):\n    max=0\n    for elem in range(1, len(liste)):\n      if liste[elem]>max:\n        max=liste[elem]\n    return max    \n      \n   \n    ", "user": "userdId_46", "attemptID": 3553, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "11.052383", "embeddingY": "-72.51765"},{"extension": "py", "date": "2020-04-10 00:35:52", "correct": "0", "upload": "def suiteAriGeo(liste):\n  i=0\n  while i<len(liste)-1:\n    a=liste[0]\n    b=liste[1]-liste[0]\n    if liste[i+1]==liste[i]*a:\n        b=0\n    if liste[i+1]==liste[i]+b:\n      a=1\n    i=i+1\n  i=0\n  ok=True\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=a*liste[i]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 3554, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "32.228672", "embeddingY": "74.833374"},{"extension": "py", "date": "2020-04-12 06:48:33", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  if liste==[]:\n    res=True\n  c=[]\n  res=False\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n    c=[liste[0]]+c\n  return c", "user": "userdId_8", "attemptID": 3555, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-85.53352", "embeddingY": "22.903688"},{"extension": "py", "date": "2020-03-12 08:42:55", "correct": "1", "upload": "def somme(liste):\n    res=0\n    for elem in liste :\n      res=res+elem\n    return res", "user": "userdId_24", "attemptID": 3556, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-29.675692", "embeddingY": "1.7916834"},{"extension": "py", "date": "2020-03-31 06:00:40", "correct": "0", "upload": "def stockerChiffres(nombre):\n    res=[]\n    while nombre!=0:\n      res.append(nombre%10)\n      nombre=nombre//10\n    \n    return res", "user": "userdId_13", "attemptID": 3557, "exercise": "49a87f644f84a443327fb4315b47f249", "exercise_name": "stockerChiffres", "embeddingX": "44.097927", "embeddingY": "14.934367"},{"extension": "py", "date": "2020-03-22 12:30:34", "correct": "0", "upload": "def maximum(liste):\n  maxVal=liste[0]\n  for i in range(0,len(liste)): \n    if liste[i]>maxVal:\n      maxVal=liste[i]\t\n  return maxVal", "user": "userdId_21", "attemptID": 3558, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-2.0293586", "embeddingY": "-64.12819"},{"extension": "py", "date": "2020-04-07 23:26:25", "correct": "0", "upload": "def motPalindrome(mot):\n  i=0\n  c=True\n  while i<(len(mot)/2) and c:\n    if mot[i]==mot[len(mot)-i]:\n      c=True\n    else:\n      c=False\n  if c==True:\n    return True\n  else:\n    return False\n    \n    \n\n", "user": "userdId_19", "attemptID": 3559, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "28.511267", "embeddingY": "52.254665"},{"extension": "py", "date": "2020-03-17 21:03:10", "correct": "0", "upload": "def permutationListe(liste,permutation):\n  res=[0]*len(liste)\n  for elem in permutation and i in range(len(liste)):\n      res[elem]=liste[i]\n  return res", "user": "userdId_12", "attemptID": 3560, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-49.159718", "embeddingY": "-26.389345"},{"extension": "py", "date": "2020-03-06 00:23:06", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n  if len(mot)==0:\n    pos=None\n  else:\n    for i in range(len(mot)):\n      if lettre==i:\n        pos=i\n      else:\n        pos=None\n        \n  return pos", "user": "userdId_15", "attemptID": 3561, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-16.457617", "embeddingY": "-39.655552"},{"extension": "py", "date": "2020-04-07 23:52:07", "correct": "0", "upload": "def suiteGeo(liste):\n  i = 0\n  j = 0\n  raison = None\n  if liste == [] or len(liste) == 1 :\n    res = True\n  else :\n    res = True \n    while raison == None and j < len(liste) - 1 :\n      if liste[j] != 0 :\n         raison = liste[j+1]/liste[j]\n      j = j + 1\n  while res and i < len(liste) - 1 :\n    if liste[i]*raison != liste[i+1]:\n      res = False\n    i = i + 1\n  return res\n", "user": "userdId_17", "attemptID": 3562, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "30.570602", "embeddingY": "73.493195"},{"extension": "py", "date": "2020-04-08 01:22:37", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  end=False\n  while i<len(liste) and res==True and end==False:\n    if liste[i]==0:\n      res=False\n    elif len(liste)==1 and liste[i]>=1:\n      end=True\n      res=True\n    else:\n      q=liste[1]/liste[0]\n      if liste[i+1]/liste[i]==q:\n        res=True\n      else:\n        res=False\n    i+=1\n  return res", "user": "userdId_26", "attemptID": 3563, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "-6.3661785", "embeddingY": "44.938213"},{"extension": "py", "date": "2020-03-31 05:45:05", "correct": "1", "upload": "def nbChiffres(nombre):\n  cpt=0\n  while nombre!=0:\n    nombre=nombre//10\n    cpt+=1\n  if cpt==0:\n    cpt=1\n  return cpt", "user": "userdId_13", "attemptID": 3564, "exercise": "3dcf332c003a1f3bf15df22ee17884a3", "exercise_name": "nbChiffres", "embeddingX": "31.702806", "embeddingY": "13.820326"},{"extension": "py", "date": "2020-04-06 00:31:36", "correct": "1", "upload": "def phrasePalindrome(phrase):\n  ok=True\n  i=0\n  j=0\n  ch=''\n  while j<len(phrase) :\n    if 'a'<= phrase[j] and phrase[j]<='z' and phrase[j]!='' :\n      ch+=phrase[j]\n    j+=1\n\n  while i<len(ch):\n    if ch[i]!=ch[-i-1]:\n      ok=False\n    i+=1\n  return ok", "user": "userdId_15", "attemptID": 3565, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "43.589935", "embeddingY": "36.458633"},{"extension": "py", "date": "2020-04-07 23:46:06", "correct": "1", "upload": "def produitScalaire(vec1,vec2):\n  res=0\n  if len(vec1)!=len(vec2): \n    res=None\n  else:\n    for i in range(len(vec1)):\n      res=res+vec1[i]*vec2[i]\n  return res", "user": "userdId_14", "attemptID": 3566, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-48.447945", "embeddingY": "-34.97802"},{"extension": "py", "date": "2020-03-16 04:29:58", "correct": "0", "upload": "def nbOccurrencesLettre(lettre,mot):\n    if lettre=='' or mot=='':\n      res=0\n    else:\n      cpt=0\n      for c in mot:\n        if lettre==c:\n          cpt=cpt+1\n    return res", "user": "userdId_18", "attemptID": 3567, "exercise": "2864c9e5861229d2ff32570f6bc944fb", "exercise_name": "nbOccurrencesLettre", "embeddingX": "-12.756253", "embeddingY": "-24.239355"},{"extension": "py", "date": "2020-03-28 11:52:47", "correct": "1", "upload": "def minimum(liste):\n    if len(liste)==0:\n      min=None\n    else:\n      min=liste[0]\n      for i in range(1,len(liste)):\n        if liste[i]<min:\n          min=liste[i]\n    return min", "user": "userdId_11", "attemptID": 3568, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "18.874321", "embeddingY": "-78.91349"},{"extension": "py", "date": "2020-03-09 22:05:25", "correct": "0", "upload": "def bissextile(annee):\n  if annee//100>0:\n    res=False\n  else:\n    res=True\n  return None", "user": "userdId_12", "attemptID": 3569, "exercise": "a7d37636649c0ada991520788deeb2d0", "exercise_name": "bissextile", "embeddingX": "46.219593", "embeddingY": "-5.9938555"},{"extension": "py", "date": "2020-04-14 03:39:14", "correct": "1", "upload": "def listeDecroissante(scores):\n  res=True\n  for i in range(len(scores)-1):\n    if scores[i]>scores[i+1]:\n      res=True\n    else:\n      res=False\n  return res", "user": "userdId_7", "attemptID": 3570, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "-7.68443", "embeddingY": "-69.64282"},{"extension": "py", "date": "2020-03-24 06:40:46", "correct": "0", "upload": "def fusion(liste1,liste2):\n  res=[]\n  i=0\n  while i<len(liste1)+len(liste2) and res==len(liste1)+len(liste2):\n    if liste1[i]>liste2[i]:\n      res=res+[liste2[i]]\n    elif liste1[i]==liste2[i]:\n      res=res+[liste1[i]]+[liste2[i]]\n    else:\n      res=res+[liste1[i]]\n    i=i+1\n  return res", "user": "userdId_26", "attemptID": 3571, "exercise": "6613efb6c873b142dc2b6040c14eb616", "exercise_name": "fusion", "embeddingX": "-20.350397", "embeddingY": "51.152336"},{"extension": "py", "date": "2020-03-09 06:26:59", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  \n  res=0\n  \n  for elem in jour1,mois1,annee1,jour2,mois2,annee2:\n    \n    if ('mois1' and 'annee1')<('mois2'and'annee2'):\n       res=res-1\n      \n    if ('mois1' and 'annee1')==('mois2'and'annee2'):\n       res=res\n    \n    if ('mois'and 'annee1')<('mois2'and'annee2'):\n       res=res+1\n      \n  return res", "user": "userdId_23", "attemptID": 3572, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "-13.435487", "embeddingY": "1.1678587"},{"extension": "py", "date": "2020-04-05 04:15:56", "correct": "0", "upload": "def moyenne(liste):\n  if len(liste)!=0:\n    s=0\n    for elem in liste:\n      s+=elem\n    res=s//len(liste)\n  else:\n    res=None\n    \n  return res", "user": "userdId_26", "attemptID": 3573, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-7.1691136", "embeddingY": "-15.1275425"},{"extension": "py", "date": "2020-04-07 05:16:45", "correct": "1", "upload": "def sousChaine(s1,s2):\n  if s1 in s2:\n    res=True\n  else:\n    res=False\n  return res", "user": "userdId_34", "attemptID": 3574, "exercise": "a7cdd094daa2f0bfccc7a4ec419f7243", "exercise_name": "sousChaine", "embeddingX": "46.231407", "embeddingY": "-16.321938"},{"extension": "py", "date": "2020-03-06 00:45:21", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    res=None\n  else:\n    res=res\n    for mot in \"aeiouy\":\n      res=res+1\n  \n  return res", "user": "userdId_5", "attemptID": 3575, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "13.253161", "embeddingY": "-50.962788"},{"extension": "py", "date": "2020-04-21 04:06:55", "correct": "1", "upload": "def premier(n) :\n  res=True\n  for div in range(2,n):\n    if n%div==0:\n      res=False\n  return res\n\ndef nombresPremiers(n):\n  nbPrem=[]\n  i=2\n  while n!=0:\n    if premier(i):\n      nbPrem+=[i]\n      n-=1\n    i+=1\n  return nbPrem", "user": "userdId_18", "attemptID": 3576, "exercise": "7eda5a2bd3cdd0a510f96448337384d9", "exercise_name": "nombresPremiers", "embeddingX": "30.356953", "embeddingY": "-7.1091747"},{"extension": "py", "date": "2020-03-31 04:21:20", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n  trouve=False\n  i=0\n  cpt=0\n  while i<len(l)and not trouve:\n    if l[i]==x:\n      cpt+=1\n    if cpt==n:\n      trouve=True\n    i+=1\n    if trouve:\n      res=i-1\n    else:\n      res=None\n  return ", "user": "userdId_36", "attemptID": 3577, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-2.1199808", "embeddingY": "67.93158"},{"extension": "py", "date": "2020-03-17 05:58:54", "correct": "0", "upload": "def permutationListe(liste,permutation):\n  res=[0]\n  for i in liste:\n    res[i]=liste[i]  \n  return res", "user": "userdId_35", "attemptID": 3578, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-51.545887", "embeddingY": "-17.448416"},{"extension": "py", "date": "2020-03-10 10:20:19", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n    if len(mot)==0:\n      res=None\n    else:\n      res=0\n      for i in mot:\n        if lettre==mot[i]:\n          res=mot[i]\n        else:\n          if lettre!=mot[i]:\n            res=None\n    return res\n  \n      ", "user": "userdId_11", "attemptID": 3579, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-15.858329", "embeddingY": "-34.20608"},{"extension": "py", "date": "2020-03-12 23:36:02", "correct": "0", "upload": "def jourNuit(heure):\n  if heure > 24 or heure < 0 :\n    res = \"l'heure saisie est invalide\"\n  else :\n    if heure >= 5 and heure < 12 :\n      res = \"on est le matin \"\n    elif heure >= 12 and heure < 17 :\n      res = \"on est l'apr\u00e8s-midi \"\n    elif heure >=17 and heure < 21 :\n      res = \"on est le soir \"\n    else :\n      res = \"on est la nuit\"\n    if heure >= 6 and heure < 18 :\n      res = res + \"et il fait jour\"\n    else :\n      res = res + \"et il fait nuit\"\n  return res", "user": "userdId_17", "attemptID": 3580, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "78.24187", "embeddingY": "19.93774"},{"extension": "py", "date": "2020-03-05 22:18:19", "correct": "0", "upload": "def maximum(liste):\n  res=0\t\n  for elem in liste:\n    if res<elem:\n      res=elem\n  return res\n  ", "user": "userdId_23", "attemptID": 3581, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "42.50922", "embeddingY": "-52.89267"},{"extension": "py", "date": "2020-03-31 03:38:48", "correct": "1", "upload": "def fusion (liste1,liste2):\n  res = []\n  i = 0\n  j = 0\n  while i < len(liste1) and j < len(liste2):\n    if liste1[i] < liste2[j] :\n      res.append (liste1[i])\n      i = i + 1\n    else :\n      res.append (liste2[j])\n      j = j + 1\n  while j < len(liste2) :\n    res.append(liste2[j])\n    j = j + 1\n  while i < len(liste1):\n    res.append(liste1[i])\n    i = i + 1\n  return res\n", "user": "userdId_17", "attemptID": 3582, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-39.50193", "embeddingY": "49.209606"},{"extension": "py", "date": "2020-04-07 22:57:40", "correct": "0", "upload": "def suiteGeo(liste):\n  res = True\n  i = 0\n  if liste == [] or len(liste) == 1 :\n    res = True\n  else :\n    if liste [0] == 0 :\n      res = False\n    else :\n      raison = liste[1]/liste[0]\n  while res and i < len(liste)-1 :\n    if liste[i]*raison != liste[i+1]:\n      res = False\n    i = i + 1\n  return res\n", "user": "userdId_17", "attemptID": 3583, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "30.850409", "embeddingY": "71.00839"},{"extension": "py", "date": "2020-03-12 21:48:49", "correct": "1", "upload": "def nbVoyelles(mot):\n  cpt=0\n  for lettre in mot:\n    if lettre in \"aeiouy\":\n      cpt=cpt+1\n  return cpt", "user": "userdId_35", "attemptID": 3584, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "15.152371", "embeddingY": "-24.70707"},{"extension": "py", "date": "2020-03-10 21:09:29", "correct": "0", "upload": "def ecart(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=0\n    max=liste[0]\n    min=liste[0]\n    for i in range(len(liste)):\n      if liste[i]<res:\n        min=liste[i]\n      if liste[i]>res:\n        max=liste[i]\n        res=max-min\n    return res", "user": "userdId_9", "attemptID": 3585, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "13.190699", "embeddingY": "-83.335815"},{"extension": "py", "date": "2020-04-05 08:25:29", "correct": "0", "upload": "def plusLongueSuite(liste):\n    if liste==[]:\n      cptMax=0\n    else:\n      cpt=1\n      cptMax=1\n      prec=liste[0]\n      for i in range(1,len(liste)):\n        if prec==liste[i]:\n          cpt+=1\n          if cpt>cptMax:\n            cptMax=cpt\n        else:\n          cpt=0\n        prec=liste[i]\n    return cptMax\n      ", "user": "userdId_18", "attemptID": 3586, "exercise": "deed004abb317b11778f7e8247197a40", "exercise_name": "plusLongueSuite", "embeddingX": "-2.1242137", "embeddingY": "-78.76585"},{"extension": "py", "date": "2020-04-11 08:06:10", "correct": "1", "upload": "def elemAri(n,u0,r):\n  res=u0+n*r\n  return res", "user": "userdId_8", "attemptID": 3587, "exercise": "f239498950e974e29e01472749d9a09d", "exercise_name": "elemAri", "embeddingX": "-35.623726", "embeddingY": "18.712221"},{"extension": "py", "date": "2020-03-31 07:28:37", "correct": "1", "upload": "def doubleChiffre(nombre):\n  ok=False\n  elemPrec=nombre%10\n  while nombre!=0 and not ok:\n    nombre//=10\n    elemAct=nombre%10\n    if elemPrec==elemAct:\n      ok=True\n    elemPrec=nombre%10\n  return ok", "user": "userdId_18", "attemptID": 3588, "exercise": "c83ea6acd3e9f6f5543e87d515e8a44a", "exercise_name": "doubleChiffre", "embeddingX": "11.809049", "embeddingY": "22.372341"},{"extension": "py", "date": "2020-04-14 04:31:38", "correct": "0", "upload": "def meilleurScoreJoueur(scores,joueurs,nom):\n  i=0\n  max=0\n  while i<len(scores)-1 and i<len(joueurs) and max:\n    if nom==joueurs[i] and scores[i]<=score[i+1]:\n      max=i\n    else: \n      max=0\n  return max", "user": "userdId_21", "attemptID": 3589, "exercise": "c96fadc94086276f98451a798b3bb730", "exercise_name": "meilleurScoreJoueur", "embeddingX": "-11.019009", "embeddingY": "47.061344"},{"extension": "py", "date": "2020-03-22 08:33:42", "correct": "1", "upload": "def nbVoyelles(mot):\n  res=0\n  for i in range(len(mot)):\n    if mot[i] in ['a','e','i','o','u']:\n      res=res+1\n  return res", "user": "userdId_16", "attemptID": 3590, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-4.563073", "embeddingY": "-50.581966"},{"extension": "py", "date": "2020-03-24 06:48:51", "correct": "0", "upload": "def fusion(liste1,liste2):\n  res=[]\n  i=0\n  while i<len(liste1)+len(liste2):\n    if liste1[i]>liste2[i]:\n      res=res+[liste2[i]]\n    elif liste1[i]==[liste2[i]]:\n      res=res+[liste1[i]]+[liste2[i]]\n    else:\n      res=res+[liste1[i]]\n    i+=1\n  return res\n    \n", "user": "userdId_13", "attemptID": 3591, "exercise": "6613efb6c873b142dc2b6040c14eb616", "exercise_name": "fusion", "embeddingX": "-24.185843", "embeddingY": "55.248817"},{"extension": "py", "date": "2020-03-17 05:50:47", "correct": "0", "upload": "def distribution(liste,n):\n    cpt=0*n+1\n    for elem in liste:\n        cpt[elem]=cpt[elem]+n\n    return res", "user": "userdId_39", "attemptID": 3592, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-60.884655", "embeddingY": "-9.771386"},{"extension": "py", "date": "2020-03-05 22:04:18", "correct": "0", "upload": "def maximum(l):\n  res=None\n  for i in range(1,len(l)):\n    if res<i:\n      res=i\n  return res", "user": "userdId_48", "attemptID": 3593, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "31.176727", "embeddingY": "-68.01255"},{"extension": "py", "date": "2020-04-08 00:31:18", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  ok=False\n  i=0\n  j=0\n  while i<len(phrase)//2 and j<len(phrase)//2:\n    if phrase[i]==\" \":\n      i+=1\n    elif phrase[-j-1]==\" \":\n      j+=1\n    elif phrase[i]!=phrase[-j-1]:\n      ok=False\n    else:\n      ok=True\n      i+=1\n      j+=1\n  if phrase==\"\":\n    ok=True\n  return ok\n", "user": "userdId_13", "attemptID": 3594, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "36.80389", "embeddingY": "33.30186"},{"extension": "py", "date": "2020-03-13 00:58:19", "correct": "0", "upload": "def doubleLettre(mot):\n  res=None\n  prev=\" \"\n  for c in mot:\n    if prev==\" \" and c!=\" \":\n      prev=c \n      res=False\n    else:\n      res=True \n      \n  return res", "user": "userdId_38", "attemptID": 3595, "exercise": "00da9cf1fa2b468d915724499459ed8f", "exercise_name": "doubleLettre", "embeddingX": "20.585936", "embeddingY": "-5.829305"},{"extension": "py", "date": "2020-06-02 21:30:06", "correct": "1", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  res=True\n  if debut1>fin2 or debut2>fin1:\n    return False\n  return res", "user": "userdId_12", "attemptID": 3596, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "64.259415", "embeddingY": "-22.609531"},{"extension": "py", "date": "2020-03-08 23:13:33", "correct": "0", "upload": "from math import sqrt \n\ndef polynome(a,b,c):\n  d=b**2-(4*a*c)\n  if d<0:\n    return 'pas de solution'\n  elif d==0:\n    solution=-b/(2*a)\n    return solution\n  else:\n    if d>0:\n      solution1=(-b-sqrt(d)/(2*a))\n      solution2=(-b+sqrt(d)/(2*a))\n      return solution1 and solution2", "user": "userdId_1", "attemptID": 3597, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-52.86825", "embeddingY": "6.508465"},{"extension": "py", "date": "2020-04-06 09:35:57", "correct": "0", "upload": "def suiteGeo(liste):\n    if liste==[] or len(liste)==1:\n      ok=False\n    elif 0 in liste:\n      while 0 in liste:\n        liste.remove(0)\n      if liste==[] or len(liste)==1:\n        ok=True\n      else:\n        ok=False\n    else:\n      ok=True\n      i=1\n      while i<len(liste) and ok:\n        cte=liste[i]/liste[i-1]\n        if liste[0]*cte**i!=liste[i]:\n          ok=False\n        i+=1\n    return ok", "user": "userdId_18", "attemptID": 3598, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "41.292053", "embeddingY": "67.56326"},{"extension": "py", "date": "2020-04-05 03:34:09", "correct": "0", "upload": "def minimum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=liste[0]\n    for i in range(1,len(liste)-1):\n      if liste[i]<res:\n        res=liste[i]\n  return res", "user": "userdId_26", "attemptID": 3599, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "23.368464", "embeddingY": "-69.49086"},{"extension": "py", "date": "2020-04-06 20:57:04", "correct": "1", "upload": "def motPalindrome(mot):\n  ok=True\n  i=1\n  while i<len(mot) and ok:\n    ok=mot[i]==mot[-1-i]\n    i+=1\n  return ok\n", "user": "userdId_12", "attemptID": 3600, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "24.963696", "embeddingY": "44.911682"},{"extension": "py", "date": "2020-03-05 22:16:40", "correct": "0", "upload": "def maximum(liste):\n  res=0\t\n  for i in range(len(liste)):\n    if res<elem(liste):\n      res=elem(liste)\n  \n    return res\n  ", "user": "userdId_23", "attemptID": 3601, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "31.92634", "embeddingY": "-69.1939"},{"extension": "py", "date": "2020-03-13 00:35:09", "correct": "0", "upload": "def sommeNPremiersEntiers(n):\n  res = 0\n  for i in range (n+1):\n    res = res + i\n    return res", "user": "userdId_17", "attemptID": 3602, "exercise": "c315a540cf0bfb0182dc114c6f0eafd1", "exercise_name": "sommeNPremiersEntiers", "embeddingX": "-19.95327", "embeddingY": "11.298378"},{"extension": "py", "date": "2020-03-17 20:39:24", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  fin=debut+longueur\n  if fin>len(s):\n    fin=len(s)\n  for i in range(debut,fin):\n    res=res+s[i]\n  return res", "user": "userdId_12", "attemptID": 3603, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-77.777306", "embeddingY": "18.310846"},{"extension": "py", "date": "2020-03-01 01:03:52", "correct": "1", "upload": "import datetime\n\n\ndef compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n    frist_date = datetime.datetime(annee1,mois1,jour1)\n    second_date = datetime.datetime(annee2,mois2,jour2)\n    res = 0\n    if frist_date < second_date:\n        res = -1\n    elif frist_date > second_date:\n        res = 1\n\n    return res\n    ", "user": "userdId_4", "attemptID": 3604, "exercise": "af7c1467ef9f7684d9ff58734067ae98", "exercise_name": "compareDates", "embeddingX": "83.65392", "embeddingY": "-32.049374"},{"extension": "py", "date": "2020-03-17 05:35:55", "correct": "0", "upload": "def permutationChaine(s):\n    res=''\n    for i in range(0,len(s)-1,2):\n        res=res+s[i+1]+s[i]\n    if res%2!=0:\n        res=res+s[-1]\n    return res", "user": "userdId_39", "attemptID": 3605, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-38.571865", "embeddingY": "-62.651726"},{"extension": "py", "date": "2020-03-05 23:44:08", "correct": "0", "upload": "def maximum(liste):\n  res=0\n  for elem in liste :\n    if elem>res :\n      res=res+elem\n    else :\n      res='None'\n  return res", "user": "userdId_24", "attemptID": 3606, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "32.848644", "embeddingY": "-42.54876"},{"extension": "py", "date": "2020-04-12 06:14:49", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=liste[0]\n  return res", "user": "userdId_8", "attemptID": 3607, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-66.90682", "embeddingY": "23.247683"},{"extension": "py", "date": "2020-03-23 01:07:33", "correct": "0", "upload": "def nbOccurrencesLettre(lettre,mot):\n  res=0\n  for i in range(len(mot)):\n    if lettre==mot[i]:\n      res=res+1\n    return res", "user": "userdId_16", "attemptID": 3608, "exercise": "2864c9e5861229d2ff32570f6bc944fb", "exercise_name": "nbOccurrencesLettre", "embeddingX": "-21.646072", "embeddingY": "-41.14675"},{"extension": "py", "date": "2020-03-27 05:45:43", "correct": "0", "upload": "def quatrePlus100(liste):\n  i=0\n  while i>len(liste):\n    if l[i]>100:\n      res.append(l[i])\n      i=i+1\n  if len(liste)<4:\n    res=i\n  return i", "user": "userdId_20", "attemptID": 3609, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-21.337803", "embeddingY": "33.735073"},{"extension": "py", "date": "2020-03-10 04:41:38", "correct": "0", "upload": "def nbSyllabes(mot):\n  if mot=='':\n    res=0\n  else:\n    res=0\n    Voyelles=['aeiouy']\n    ch=\"\"\n    for i in range(1,len(mot)):\n      if mot[i-1] not in Voyelles and mot[i] in Voyelles:\n        res=res+1\n      else:\n        ch=mot[i]\n    if mot[0] in Voyelles :\n      res=res+1\n    elif mot[-1] not in Voyelles:\n      res=res-1\n    else:\n      if res==0:\n        res=res+1\n  return res", "user": "userdId_15", "attemptID": 3610, "exercise": "1c86bec0f4df503e23db53994f3d2991", "exercise_name": "nbSyllabes", "embeddingX": "-19.891556", "embeddingY": "-73.15004"},{"extension": "py", "date": "2020-03-05 21:47:03", "correct": "1", "upload": "def moyenne(liste):\n  if len(liste)==0:\n    return None\n  else:\n    moy = 0\n    for i in liste:\n    \tmoy+=i\n    moy/=len(liste)\n  return moy", "user": "userdId_6", "attemptID": 3611, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-4.851086", "embeddingY": "-19.906376"},{"extension": "py", "date": "2020-04-07 22:10:23", "correct": "0", "upload": "def suiteGeo(liste):\n  ok=True\n  i=0\n  while i<len(liste)-1 and ok:\n    if liste[i]==0:\n      ok=False\n    if liste[i]!=0:\n      q=liste[1]/liste[0]\n    if liste[i]!=0:\n      if liste[i+1]/liste[i]!=q:\n        ok=False\n    i=i+1\n  return ok\n    ", "user": "userdId_1", "attemptID": 3612, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "29.722153", "embeddingY": "61.648796"},{"extension": "py", "date": "2020-04-06 10:22:10", "correct": "0", "upload": "def suiteAriGeo(liste):\n    if liste==[]:\n      ok1=True\n    else:\n      ok1=True\n      ctePrec=liste[1]-liste[0]\n      cteAct=None\n      i=2\n      while i<len(liste) and ok:\n        cteAct=liste[i]-liste[i-1]\n        if cteAct!=ctePrec:\n          ok=False\n        ctePrec=cteAct\n        i+=1\n    if liste==[] or len(liste)==1:\n      ok=True\n    elif 0 in liste:\n      if liste[0]!=0:\n        ok=True\n      while 0 in liste:\n        liste.remove(0)\n      if liste==[]:\n        ok=True\n      else:\n        ok=False\n    else:\n      ok=True\n      i=1\n      while i<len(liste) and ok:\n        cte=liste[i]/liste[i-1]\n        if liste[0]*cte**i!=liste[i]:\n          ok=False\n        i+=1\n    return ok1 or ok2", "user": "userdId_18", "attemptID": 3613, "exercise": "4c9665daf155b115fe13218141fa1aff", "exercise_name": "suiteAriGeo", "embeddingX": "27.662445", "embeddingY": "83.03264"},{"extension": "py", "date": "2020-03-24 06:17:23", "correct": "0", "upload": "def compare(chaine1,chaine2):\n  res=0\n  i=0\n  while i<len(chaine1) and i<len(chaine2) and res==0:\n    if chaine1[i]<chaine2[i]:\n      res=-1\n    elif chaine1[i]>chaine2[i]:\n      res=1\n  if res==0:\n     if len(chaine1)<len(chaine2):\n        i=i+1\n  return res\n   ", "user": "userdId_36", "attemptID": 3614, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-22.634386", "embeddingY": "64.78941"},{"extension": "py", "date": "2020-04-02 23:42:38", "correct": "1", "upload": "def listeSymetrique(liste):\n    i=0\n    ok=True\n    while i<len(liste) and ok==True:\n      if liste[i]!=liste[-i-1]:\n        ok=False\n      i=i+1\n    return ok ", "user": "userdId_5", "attemptID": 3615, "exercise": "8eb27aeda471a467e2223abebeca886e", "exercise_name": "listeSymetrique", "embeddingX": "22.955881", "embeddingY": "52.54666"},{"extension": "py", "date": "2020-04-17 03:20:58", "correct": "0", "upload": "def minimum(liste):\n  for i in liste: \n    if i<res:\n      res=i\n  return res", "user": "userdId_21", "attemptID": 3616, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "36.991497", "embeddingY": "-55.55839"},{"extension": "py", "date": "2020-03-08 21:46:38", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1==annee2 and mois1==mois2 and jour1==jour2:\n    return 0\n  elif annee1<annee2 and mois1<=mois2 and jour1<jour2:\n    return -1\n  elif annee1<annee2 and mois1>=mois2 and jour1>jour2:\n    return -1\n  elif annee1>annee2 and mois1<=mois2 and jour1>jour2:\n    return -1\n  else:\n    return 1", "user": "userdId_1", "attemptID": 3617, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "84.01994", "embeddingY": "-14.58618"},{"extension": "py", "date": "2020-03-04 10:11:58", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n   \n    if debut1 <= debut2 and fin1 <= fin2 or debut2 <= debut1 and fin2 <= fin1:\n      return true \n    else :\n     return false", "user": "userdId_28", "attemptID": 3618, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "54.401375", "embeddingY": "-27.53247"},{"extension": "py", "date": "2020-03-17 06:41:50", "correct": "1", "upload": "def distribution(liste,n):\n  res=[0]*(n+1)\n  for elem in liste:\n    res[elem]=res[elem]+1\n  return res", "user": "userdId_23", "attemptID": 3619, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-58.939594", "embeddingY": "-14.968716"},{"extension": "py", "date": "2020-03-09 22:30:25", "correct": "1", "upload": "def semestreValide(ue1,ue2):\n  if ue1>=10 and ue2>=10:\n    res=True\n  else:\n    if ue1>ue2:\n      if ue1+ue2/2>10:\n        res=True\n      else:\n        res=False\n    else:\n      res=False\n  return res", "user": "userdId_12", "attemptID": 3620, "exercise": "70ae7ad6cf504e0fa8cedebd8e8a825f", "exercise_name": "semestreValide", "embeddingX": "68.72111", "embeddingY": "-0.45233604"},{"extension": "py", "date": "2020-03-08 21:34:07", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1==annee2 and mois1==mois2 and jour1==jour2:\n    return 0\n  elif annee1<=annee2 and mois1<mois2 and jour1<jour2:\n    return -1\n  else:\n    return 1", "user": "userdId_1", "attemptID": 3621, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "88.23896", "embeddingY": "-13.623009"},{"extension": "py", "date": "2020-03-17 00:04:43", "correct": "0", "upload": "def doubleLettre(mot):\n  prec=''\n  res=False\n  for lettre in mot:\n    if lettre==prec:\n      res=True\n  return res", "user": "userdId_12", "attemptID": 3622, "exercise": "00da9cf1fa2b468d915724499459ed8f", "exercise_name": "doubleLettre", "embeddingX": "16.174349", "embeddingY": "-5.7096334"},{"extension": "py", "date": "2020-03-22 04:55:48", "correct": "0", "upload": "def polynome(a,b,c):\n  delta=b**2-4*a*c\n  if delta>0:\n    x=(-b-(delta**0.5)/2*a),(-b+(delta**0.5)/2*a)\n  elif delta==0:\n    x=-b/2*a\n  else:\n    x='pas de solution'\n  return x", "user": "userdId_12", "attemptID": 3623, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-52.658115", "embeddingY": "9.417543"},{"extension": "py", "date": "2020-04-07 02:05:03", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res = True\n  i = 0\n  while res and i < len(liste):\n    if liste[i+1] != a*liste[i]+b :\n      res = False\n    i = i + 1\n  return res", "user": "userdId_17", "attemptID": 3624, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-76.55271", "embeddingY": "20.817387"},{"extension": "py", "date": "2020-03-22 12:45:33", "correct": "0", "upload": "def maximum(liste):\n  res=l[0]\n  for i in range(0,len(liste)):\n    if res<i:\n      res=i\n  return res", "user": "userdId_21", "attemptID": 3625, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "29.699638", "embeddingY": "-68.298744"},{"extension": "py", "date": "2020-04-07 03:36:59", "correct": "0", "upload": "def produitScalaire(vec1,vec2):\n  i=0\n  res=0\n  while i<len(vec1) and i<len(vec2):\n    res = res+(vec1[i]*vec2[i])\n  i=i+1\n  return res\n", "user": "userdId_52", "attemptID": 3626, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-14.871269", "embeddingY": "50.610767"},{"extension": "py", "date": "2020-03-24 06:16:59", "correct": "0", "upload": "def compare(chaine1,chaine2):\n  res=0\n  i=0\n  while i<len(chaine1) and i<len(chaine2) and res==0:\n    if chaine1[i]<chaine2[i]:\n      res=-1\n    elif chaine1[i]>chaine2[i]:\n      res=1\n  if res==0:\n     if len(chaine1)<len(chaine2):\n        i=i+1\n  return res\n   ", "user": "userdId_36", "attemptID": 3627, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-22.635624", "embeddingY": "64.79075"},{"extension": "py", "date": "2020-04-10 01:08:03", "correct": "0", "upload": "def suiteAriGeo(liste):\n  i=0\n  while i<len(liste)-1:\n    if liste[0]!=0:\n      a=liste[1]/liste[0]\n      b=liste[i+1]-liste[i]*a\n    if liste[i+1]==liste[i]*a:\n          b=0\n    b=liste[1]-liste[0]\n    if liste[i+1]==liste[i]+b:\n      a=1\n    i=i+1\n  i=0\n  ok=True\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=a*liste[i]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 3628, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "32.955025", "embeddingY": "81.86621"},{"extension": "py", "date": "2020-03-12 21:56:19", "correct": "1", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=liste[0]\n    for i in range(len(liste)):\n      if liste[i]>res:\n        res=liste[i]\n  return res", "user": "userdId_20", "attemptID": 3629, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "1.4381114", "embeddingY": "-62.705997"},{"extension": "py", "date": "2020-04-07 03:07:24", "correct": "0", "upload": "def suiteAri(liste):\n  res=True\n  i=0\n  while i<len(liste)-1 and res==True:\n    r=liste[0]-liste[1]\n    if liste[i]-liste[i+1]==r:\n      res=True\n    else:\n      res=False\n  return res", "user": "userdId_26", "attemptID": 3630, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "13.8303", "embeddingY": "59.974865"},{"extension": "py", "date": "2020-03-27 06:40:34", "correct": "0", "upload": "def compare (chaine1,chaine2):\n  i = 0\n  res = 0\n  while i < len(chaine1) and i < len(chaine2) and res == 0 :\n    if chaine1[i] < chaine2[i]:\n      res = -1\n    elif chaine1[i] > chaine2[i]:\n      res = 1\n    else :\n      res = 0\n    i = i + 1\n  if len(chaine1) < len(chaine2):\n    res = -1\n  elif len(chaine1) > len (chaine2):\n    res = 1\n  else :\n    res = 0\n  return res", "user": "userdId_17", "attemptID": 3631, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-24.502302", "embeddingY": "62.219307"},{"extension": "py", "date": "2020-03-20 00:45:28", "correct": "0", "upload": "def permutationChaine(s):\n  res=''\n  for i in range (0,len(s)-1,2):\n    res=res+s[i+1]+s[i]\n  \n  return res\n\n", "user": "userdId_15", "attemptID": 3632, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-44.162174", "embeddingY": "-50.35787"},{"extension": "py", "date": "2020-05-04 21:42:20", "correct": "1", "upload": "def maximum(liste):\n  if liste==[]:\n    res=None\n  else:\n    res=liste[0]\n    for i in range(1,len(liste)-1):\n      if liste[i]>liste[i+1]:\n        res=liste[i]\n  return res", "user": "userdId_8", "attemptID": 3633, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-6.772087", "embeddingY": "-67.29201"},{"extension": "py", "date": "2020-03-19 23:45:30", "correct": "0", "upload": "def reconstruireChainePartielle(s,n):\n  res=''\n  for i in range(0,s,n):\n    res=res+s[i]\n  return res", "user": "userdId_2", "attemptID": 3634, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-43.467525", "embeddingY": "-21.445852"},{"extension": "py", "date": "2020-03-13 00:35:31", "correct": "1", "upload": "def sommeNPremiersEntiers(n):\n  res = 0\n  for i in range (n+1):\n    res = res + i\n  return res", "user": "userdId_17", "attemptID": 3635, "exercise": "c315a540cf0bfb0182dc114c6f0eafd1", "exercise_name": "sommeNPremiersEntiers", "embeddingX": "-19.702124", "embeddingY": "13.582791"},{"extension": "py", "date": "2020-03-24 04:13:37", "correct": "0", "upload": "def compare(chaine1,chaine2):\n  res=-1\n  i=0\n  while i<len(chaine1) and i<len(chaine2) and res==0:\n    if chaine1[i] > chaine2[i]:\n      res=1\n    elif chaine1[i] < chaine2[i]:\n      res=-1\n    elif chaine1[i]==chaine2[i]:\n      res=-1\n    i=i+1\n  return res", "user": "userdId_31", "attemptID": 3636, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-12.0099", "embeddingY": "44.079983"},{"extension": "py", "date": "2020-04-03 00:53:52", "correct": "1", "upload": "def stockerChiffres(nombre):\n    res=[]\n    if nombre==0:\n      res=[0]\n    else:\n      while nombre!=0:\n        res.append(nombre%10)\n        nombre=nombre//10\n    return res\n  ", "user": "userdId_43", "attemptID": 3637, "exercise": "49a87f644f84a443327fb4315b47f249", "exercise_name": "stockerChiffres", "embeddingX": "41.42321", "embeddingY": "12.984851"},{"extension": "py", "date": "2020-04-05 08:51:45", "correct": "0", "upload": "def phrasePalindrome(phrase):\n    if phrase=='':\n      ok=True\n    else:\n      ok=True\n      i=0\n      while i<len(phrase) and ok:\n        if phrase[i]!=phrase[-i-1]:\n          ok=False\n        i+=1\n    return ok", "user": "userdId_18", "attemptID": 3638, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "28.574677", "embeddingY": "39.73603"},{"extension": "py", "date": "2020-04-07 10:37:18", "correct": "0", "upload": "def suiteGeo(liste):\n  ok=True\n  i=0\n  while i<len(liste)-1 and ok:\n    q=liste[1]*liste[0]\n    if liste[i+1]/liste[i]!=q:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 3639, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "27.61826", "embeddingY": "67.252785"},{"extension": "py", "date": "2020-04-11 00:51:41", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  c=True\n  if len(liste)==0:\n    c=True\n  elif 0 in liste:\n    c=False\n  else:\n    while i<(len(liste)-2) and c:\n      if liste[i+2]/liste[i+1]!=liste[i+1]/liste[i]:\n        c=False\n      i=i+1\n  return c", "user": "userdId_19", "attemptID": 3640, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "28.726437", "embeddingY": "56.193653"},{"extension": "py", "date": "2020-04-05 09:00:06", "correct": "0", "upload": "def produitScalaire(vec1,vec2):\n  res=0\n  for i in range(3):\n    v1=vec1[i]\n    v2=vec2[i]\n    res=res+v1*v2\n  return res", "user": "userdId_26", "attemptID": 3641, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-64.58147", "embeddingY": "-18.454151"},{"extension": "py", "date": "2020-03-12 10:16:37", "correct": "0", "upload": "def jourNuit(heure):\n  0<=heure<=24\n  if 6<=heure<=18 :\n    temps='il fait jour'\n  else :\n    temps='il fait nuit'\n  if 0<=heure<=5 and 21<=heure<=24 :\n    soleil='on est la nuit'\n  if 5<=heure<=12 :\n    soleil='on est le matin'\n  if 12<=heure<=17 :\n    soleil=\"on est l'apr\u00e8s-midi\"\n  if 17<=heure<=21 :\n    soleil=\"on est le soir\"\n  heure= soleil + temps\n  return heure", "user": "userdId_24", "attemptID": 3642, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "72.01931", "embeddingY": "30.249458"},{"extension": "py", "date": "2020-03-10 04:19:05", "correct": "0", "upload": "def sommeNPremiersEntiers(n):\n  res=0\n  for e in range(N):\n    res=res+e\n  return res", "user": "userdId_26", "attemptID": 3643, "exercise": "c315a540cf0bfb0182dc114c6f0eafd1", "exercise_name": "sommeNPremiersEntiers", "embeddingX": "-30.811707", "embeddingY": "-17.586067"},{"extension": "py", "date": "2020-03-30 22:07:45", "correct": "1", "upload": "def fusion(liste1,liste2):\n  res=[]\n  i=0\n  j=0\n  while i<len(liste1) and j<len(liste2):\n    if liste1[i]>liste2[j]:\n      res.append(liste2[j])\n      j+=1\n    else :\n      res.append(liste1[i])\n      i+=1\n  #post traitement \n  while j<len(liste2): #finir de rajouter tous les \u00e9l\u00e9ments de liste2\n    res.append(liste2[j])\n    j+=1\n  while i<len(liste1): #finir de rajouter tous les \u00e9l\u00e9ments de liste1\n    res.append(liste1[i])\n    i+=1\n  return res\n   ", "user": "userdId_34", "attemptID": 3644, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-42.67535", "embeddingY": "51.574528"},{"extension": "py", "date": "2020-03-06 22:39:41", "correct": "0", "upload": "def nbOccurrencesLettre(lettre_to_find,mot):\n    res = None\n    if len(mot) > 0:\n        res = 0\n        for lettre in mot:\n            if lettre == lettre_to_find:\n                res += 1\n    return res\n", "user": "userdId_4", "attemptID": 3645, "exercise": "2864c9e5861229d2ff32570f6bc944fb", "exercise_name": "nbOccurrencesLettre", "embeddingX": "-9.560963", "embeddingY": "-29.291529"},{"extension": "py", "date": "2020-02-29 04:53:29", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n    if jour1<jour2 and mois1<mois2 and annee1<annee2:\n      res=-1\n    elif jour1>jour2 and mois1>mois2 and annee1>annee2:\n      res=1\n    else:\n      res=0\n    return res", "user": "userdId_18", "attemptID": 3646, "exercise": "af7c1467ef9f7684d9ff58734067ae98", "exercise_name": "compareDates", "embeddingX": "80.88852", "embeddingY": "-27.407019"},{"extension": "py", "date": "2020-03-06 00:31:44", "correct": "0", "upload": "def nbOccurrencesLettre(lettre,mot):\n    res=0\n    for i in mot:\n      if e in mot:\n        res=res+1\n      return res", "user": "userdId_2", "attemptID": 3647, "exercise": "2864c9e5861229d2ff32570f6bc944fb", "exercise_name": "nbOccurrencesLettre", "embeddingX": "-36.20128", "embeddingY": "-11.674325"},{"extension": "py", "date": "2020-03-22 04:52:20", "correct": "0", "upload": "def polynome(a,b,c):\n  delta=b^2-4*a*c\n  if delta>0:\n    x=(-b-(sqrt(delta))/2*a,-b+(sqrt(delta))/2*a)\n  elif delta==0:\n    x=-b/2*a\n  else:\n    x='pas de solution'\n  return res", "user": "userdId_12", "attemptID": 3648, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-48.564552", "embeddingY": "6.2744155"},{"extension": "py", "date": "2020-03-31 05:03:42", "correct": "1", "upload": "def listeSymetrique(l):\n  res=True\n  i=0\n  j=-1\n  while i<len(l) and j<len(l) and res==True:\n    if l[i]==l[j]:\n      i=i+1\n      j=j-1\n    else:\n      res=False\n  return res", "user": "userdId_7", "attemptID": 3649, "exercise": "8eb27aeda471a467e2223abebeca886e", "exercise_name": "listeSymetrique", "embeddingX": "22.789679", "embeddingY": "56.64451"},{"extension": "py", "date": "2020-03-27 05:38:56", "correct": "0", "upload": "def quatrePlus100(liste):\n  i=0\n  res=[]\n  while i<len(liste) and i<=4:\n    if liste[i]>100:\n      res=res+liste[i]\n    i=i+1\n  return res", "user": "userdId_1", "attemptID": 3650, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-28.323902", "embeddingY": "40.69763"},{"extension": "py", "date": "2020-03-17 05:42:12", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  res=''\n  if debut+longueur>len(s):\n    res=debut+longueur\n  else:\n    if debut+longueur<len(s):\n      fin=debut+longueur\n  for i in range(debut,debut+longueur): \n    fin=res+s[i]\n  return res", "user": "userdId_25", "attemptID": 3651, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-82.05349", "embeddingY": "20.76629"},{"extension": "py", "date": "2020-04-13 23:43:04", "correct": "1", "upload": "def listeDecroissante(scores):\n  res=True\n  if scores==[]:\n    res=True\n  for i in range(len(scores)-1):\n    if scores[i]<=scores[i+1]:\n      res=False\n  return res", "user": "userdId_8", "attemptID": 3652, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "-9.255406", "embeddingY": "-68.63115"},{"extension": "py", "date": "2020-03-31 03:42:05", "correct": "0", "upload": "def fusion(liste1,liste2):\n  i=0\n  j=0\n  res=[]\n  while i<len(liste1) and j<len(liste2):\n    if liste1[i]<liste2[j]:\n      res.append(liste1[i])\n      i=i+1\n    else:\n      res.append(liste2[j])\n      j=j+1\n  while j<len(liste2):\n    res.append(liste2[j])\n    j=j+1\n  while i<len(liste1[i]):\n    res.append(liste1[i])\n    i+=1\n  return res", "user": "userdId_9", "attemptID": 3653, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-36.72054", "embeddingY": "51.051422"},{"extension": "py", "date": "2020-05-04 20:20:36", "correct": "0", "upload": "def polynome(a,b,c):\n  res=\"pas de solution\"\n  delta=b**2-4*a*c\n  if delta>0:\n    res=(-b+delta**(1/2))/2*a\n    res=(-b-delta**(1/2))/2*a\n  return res", "user": "userdId_8", "attemptID": 3654, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-55.045113", "embeddingY": "13.612097"},{"extension": "py", "date": "2020-03-27 05:46:13", "correct": "0", "upload": "def quatrePlus100(liste):\n  res=[]\n  i=0\n  while len(res)<4 :\n    if l[i]>100 :\n      res.append(l[i])\n    i=i+1\n  return res", "user": "userdId_15", "attemptID": 3655, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-32.797897", "embeddingY": "40.32415"},{"extension": "py", "date": "2020-04-06 09:21:44", "correct": "0", "upload": "def suiteGeo(liste):\n  if 0 in liste:\n    ok = False    \n  elif liste==[] or len(liste)==1:\n    ok = True \n  else:\n    ok = True\n    i = 1\n    cte = liste[i]/liste[i-1]\n    while i<len(liste) and ok:\n      if liste[i]/liste[i-1]!=cte:\n        ok = False\n      i+=1\n  return ok ", "user": "userdId_6", "attemptID": 3656, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "40.644157", "embeddingY": "63.92706"},{"extension": "py", "date": "2020-03-23 22:46:28", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n    if jour1==jour2 and mois1==mois2 and annee1==annee2:\n      res=0\n    elif jour1<jour2 or mois1<mois2 or annee1<annee2:\n      res=-1 \n    else:\n      res=1\n    return res", "user": "userdId_9", "attemptID": 3657, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "78.88176", "embeddingY": "-25.835407"},{"extension": "py", "date": "2020-03-06 00:41:31", "correct": "0", "upload": "def moyenne(liste):\n  res=0\n  cpt=0\n  if len(liste)==0:\n    moy=0\n  else:\n     for i in liste:\n       res=res+i\n       cpt=cpt+1\n  moy=res//cpt\n  return moy", "user": "userdId_14", "attemptID": 3658, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "1.984253", "embeddingY": "-8.4384985"},{"extension": "py", "date": "2020-03-03 05:11:24", "correct": "1", "upload": "def minimum(liste):\n  if len(liste) == 0 :\n    res = None\n  else :\n    res = liste[0]\n    for i in range (1,len(liste)) :\n    \tif liste[i] < res :\n        \tres = liste[i] \n  return res", "user": "userdId_17", "attemptID": 3659, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "26.069683", "embeddingY": "-68.61537"},{"extension": "py", "date": "2020-04-07 02:53:09", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n  trouve=False\n  i=0\n  cpt=0\n  while i<len(l) and not trouve:\n    if l[i]==x:\n      cpt+=1\n    if cpt==n:\n      trouve=True\n    i+=1\n  if trouve:\n    res=i-1\n  else:\n    res=None\n    return res", "user": "userdId_36", "attemptID": 3660, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-1.4066155", "embeddingY": "68.86937"},{"extension": "py", "date": "2020-03-05 21:59:26", "correct": "0", "upload": "def maximum(l):\n  res=0\n  for i in range(len(l)):\n    if res<i:\n      res=i\n  return res", "user": "userdId_48", "attemptID": 3661, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "31.669472", "embeddingY": "-69.57235"},{"extension": "py", "date": "2020-03-20 00:44:21", "correct": "0", "upload": "def permutationChaine(s):\n  res=''\n  for i in range (0,len(s)-1,2):\n    res=res+s[i]+1+s[i]\n  if len(s)%2!=0:\n    res=res+s[-1]\n  return res", "user": "userdId_1", "attemptID": 3662, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-39.006382", "embeddingY": "-60.95608"},{"extension": "py", "date": "2020-03-17 06:18:56", "correct": "0", "upload": "def permutationChaine(s):\n  res=''\n  for i in range(0,len(s)+1,2):\n    res=res+s[1+i]+s[i]\n  return res", "user": "userdId_25", "attemptID": 3663, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-46.924896", "embeddingY": "-47.620186"},{"extension": "py", "date": "2020-04-14 06:07:01", "correct": "0", "upload": "def indiceInsertion(sc,scores):\n  res=0\n  i=0\n  while i<len(scores) and sc<scores:\n    res=res+1\n    i=i+1\n  return res\n", "user": "userdId_28", "attemptID": 3664, "exercise": "f8a820b2bd54d18d36716e3d703858f7", "exercise_name": "indiceInsertion", "embeddingX": "-16.035486", "embeddingY": "44.92778"},{"extension": "py", "date": "2020-03-15 07:23:48", "correct": "1", "upload": "def nombrePair(n):\n  if n%2==0:\n    res=True\n  else:\n    res=False\n  return res", "user": "userdId_12", "attemptID": 3665, "exercise": "3001254263845e9a478696f81a704d33", "exercise_name": "nombrePair", "embeddingX": "44.50654", "embeddingY": "-3.6668532"},{"extension": "py", "date": "2020-04-06 22:19:14", "correct": "0", "upload": "def motPalindrome(mot):\n    if len(mot)==0:\n      res=True\n    else:\n      res=True\n      i=0\n      while i<len(mot) and res:\n        if mot[i]==mot[-i-1]:\n          res=True\n        i+=1\n    return res\n", "user": "userdId_11", "attemptID": 3666, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "26.352045", "embeddingY": "44.036526"},{"extension": "py", "date": "2020-03-03 05:33:02", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    for i in range(len(liste)):\n      if res<liste[i]:\n        res=liste[i]\n  return res", "user": "userdId_8", "attemptID": 3667, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "24.919832", "embeddingY": "-64.36174"},{"extension": "py", "date": "2020-03-31 04:10:53", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n  cpt=0\n  i=0\n  while i<len(l) and i<n+1:\n    if l[i]==x:\n      cpt+=1\n    i+=1\n  if i!=n:\n    res=None\n  else:\n    res=i\n  return res", "user": "userdId_13", "attemptID": 3668, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-8.228483", "embeddingY": "75.65609"},{"extension": "py", "date": "2020-03-24 06:50:45", "correct": "0", "upload": "def fusion(liste1,liste2):\n  res=[]\n  i=0\n  while i<len(liste1)+len(liste2) and res<len(liste1)+len(liste2):\n    if liste1[i]>liste2[i]:\n      res=res+[liste2[i]]\n    elif liste1[i]==[liste2[i]]:\n      res=res+[liste1[i]]+[liste2[i]]\n    else:\n      res=res+[liste1[i]]\n    i+=1\n  return res\n    \n", "user": "userdId_13", "attemptID": 3669, "exercise": "6613efb6c873b142dc2b6040c14eb616", "exercise_name": "fusion", "embeddingX": "-19.875454", "embeddingY": "50.370407"},{"extension": "py", "date": "2020-03-12 06:59:28", "correct": "0", "upload": "def maximum(liste):\n  res=liste[0]\n  for i in liste:\n    res<liste[i]\n    res=liste[i]\n  return res", "user": "userdId_20", "attemptID": 3670, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "40.337715", "embeddingY": "-59.935295"},{"extension": "py", "date": "2020-03-09 21:55:07", "correct": "1", "upload": "def moyenne(liste):\n  if liste == []:\n    return None\n  else:\n    res=0\n    for c in liste:\n      res = res + c\n    return res/len(liste)", "user": "userdId_42", "attemptID": 3671, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-1.4070637", "embeddingY": "-17.28371"},{"extension": "py", "date": "2020-04-12 04:13:54", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=False\n  c=[]\n  for elem in liste:\n    c=a*elem+b\n    if c==liste[elem]+1:\n      res=True\n  if c==[]:\n    res=True\n  return res", "user": "userdId_8", "attemptID": 3672, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-72.97902", "embeddingY": "23.437986"},{"extension": "py", "date": "2020-03-06 00:17:38", "correct": "0", "upload": "def maximum(liste):\n  res=0\n  if maximum in range(len(liste)):\n      res=res+liste[i]\n  return res", "user": "userdId_41", "attemptID": 3673, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-9.263431", "embeddingY": "-45.123287"},{"extension": "py", "date": "2020-03-31 04:07:28", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n  ok=True\n  i=0\n  cpt=0\n  while i<len(l) and ok:\n    if l[i]==x:\n      #instructions\n      cpt=cpt+1\n    if cpt==n:\n      ok=False\n    i=i+1\n  if cpt!=n:\n    i=None\n  return i", "user": "userdId_3", "attemptID": 3674, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-3.1382594", "embeddingY": "76.62383"},{"extension": "py", "date": "2020-03-22 08:25:43", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n    if fin2>=debut1 and fin1>=debut2:\n      res=True ", "user": "userdId_47", "attemptID": 3675, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "50.158646", "embeddingY": "-25.087996"},{"extension": "py", "date": "2020-03-16 04:48:57", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n    if lettre=='' or mot=='':\n      res=None\n    else:\n      res=None\n      for c in mot:\n        if lettre==c:\n          for i in range(-1,-len(mot)-1,-1):\n            res=mot[i]\n    return res", "user": "userdId_18", "attemptID": 3676, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-11.601688", "embeddingY": "-37.49705"},{"extension": "py", "date": "2020-04-11 03:51:56", "correct": "0", "upload": "def produitScalaire(vec1,vec2):\n  res=0\n  for i in range(len(vec1)):\n     res+=vect1[i]+vec2[i]\n  return res", "user": "userdId_8", "attemptID": 3677, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-51.45213", "embeddingY": "-40.138493"},{"extension": "py", "date": "2020-04-12 10:21:55", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  res=None\n  while nombre!=0:\n    if nombre%10==chiffre:\n      res=res+1\n    nombre=nombre//10\n  return res", "user": "userdId_38", "attemptID": 3678, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "21.307058", "embeddingY": "10.382215"},{"extension": "py", "date": "2020-04-06 04:17:33", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  nbr=str(nombre)\n  chffre=str(chiffre)\n  i=0\n  res=0\n  while i<len(nbr):\n    if chffre==nbr:\n      res+=1\n    i+=1\n  return res", "user": "userdId_26", "attemptID": 3679, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-7.8459754", "embeddingY": "65.27802"},{"extension": "py", "date": "2020-03-12 23:53:21", "correct": "0", "upload": "def jourNuit(heure):\n  res=[]\n  if heure==5:\n      res='on est le matin et il fait nuit'\n  if heure<0:\n    res=\"l'heure saisie est invalide\"\n  if heure>24:\n    res=\"l'heure saisie est invalide\"\n  if 6<=heure<=18:\n    if 5<heure<=12:\n      res=\"on est le matin et il fait jour\"\n    elif 12<=heure<17:\n      res=\"on est l'apr\u00e8s-midi et il fait jour\"\n    elif 17<=heure<=18:\n      res=\"on est le soir et il fait jour\"\n  if 1<=heure<=5 or 19<=heure<=24:\n    if 1<=heure<=4:\n      res=\"on est la nuit et il fait nuit\"\n    elif 21<=heure<=24:\n      res=\"on est la nuit et il fait nuit\"\n    elif 19<=heure<=20:\n      res=\"on est le soir et il fait nuit\"\n  return res", "user": "userdId_13", "attemptID": 3680, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "68.629776", "embeddingY": "22.743301"},{"extension": "py", "date": "2020-03-31 04:23:36", "correct": "1", "upload": "def nbChiffres(nombre):\n  nombre = str(nombre)\n  i = 0\n  res = 0\n  while i < len(nombre):\n    res = res + 1\n    i = i + 1\n  return res", "user": "userdId_17", "attemptID": 3681, "exercise": "3dcf332c003a1f3bf15df22ee17884a3", "exercise_name": "nbChiffres", "embeddingX": "-40.75106", "embeddingY": "42.381413"},{"extension": "py", "date": "2020-04-08 02:42:56", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  res=True\n  listetest=[liste[0]]\n  while i<len(liste) and res==True:\n    if liste[i]!=0:\n      q=liste[1]/liste[0]\n      u=liste[0]*q**i\n      listetest=listetest+u\n    else:\n      res=False\n    if liste[i]==listetest[i]:\n      res=True\n    else:\n      res=False\n  return res", "user": "userdId_26", "attemptID": 3682, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "35.751835", "embeddingY": "69.48715"},{"extension": "py", "date": "2020-03-09 03:10:27", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  res=True\n  if debut1>fin2:\n    res=False\n  if debut2>fin1:\n    res=False\n    return res", "user": "userdId_12", "attemptID": 3683, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "64.88798", "embeddingY": "-21.26395"},{"extension": "py", "date": "2020-03-02 02:28:52", "correct": "0", "upload": "def nombrePair(n):\n  a=n/2\n  b=a\n  if type(b)==int :\n    res=True\n  else :\n    res=False\n  return res", "user": "userdId_15", "attemptID": 3684, "exercise": "864911b08708fc8bae69311a8ddd3da7", "exercise_name": "nombrePair", "embeddingX": "41.02912", "embeddingY": "51.36153"},{"extension": "py", "date": "2020-03-03 06:41:44", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1<annee2:\n    res=-1\n  elif annee1>annee2:\n    res=1\n  else:\n    if annee1==annee2:\n      if mois1==mois2:\n        if jour1==jour2:\n          res=0\n  return res", "user": "userdId_30", "attemptID": 3685, "exercise": "af7c1467ef9f7684d9ff58734067ae98", "exercise_name": "compareDates", "embeddingX": "79.20019", "embeddingY": "-35.822918"},{"extension": "py", "date": "2020-04-08 00:03:38", "correct": "0", "upload": "def suiteGeo(liste):\n  ok=True\n  i=0\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i]!=0:\n      q=liste[1]/liste[0]\n    if liste[i]!=0:\n      if liste[i+1]/liste[i]!=q:\n        ok=False\n    if liste[i]==0:\n      ok=True\n    i=i+1\n  return ok\n", "user": "userdId_1", "attemptID": 3686, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "32.200405", "embeddingY": "64.06371"},{"extension": "py", "date": "2020-03-06 00:24:50", "correct": "0", "upload": "def ecart(liste):\n  if len(list)==0:\n    res=None\n  def maximum(liste):\n    maxi=liste[0]\n    for i in range(len(liste)):\n      if liste[i]>maxi:\n        maxi=liste[i]\n  def minimum(liste):\n    mini=liste[0]\n    for i in range(len(liste)):\n      if liste [i]<mini:\n        mini=liste[i]\n  res=maxi-mini\n  return res", "user": "userdId_12", "attemptID": 3687, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "19.008749", "embeddingY": "-40.801617"},{"extension": "py", "date": "2020-03-10 04:21:33", "correct": "0", "upload": "def sommeNPremiersEntiers(n):\n  res= 0\n  if n < 0:\n    res=0\n  else:\n    for i in n:\n      res= res + i\n  return res", "user": "userdId_7", "attemptID": 3688, "exercise": "c315a540cf0bfb0182dc114c6f0eafd1", "exercise_name": "sommeNPremiersEntiers", "embeddingX": "40.665188", "embeddingY": "-52.77217"},{"extension": "py", "date": "2020-03-10 04:07:01", "correct": "1", "upload": "def sommeNbPairs(liste):\n  res= 0\n  if liste== []:\n    res= 0\n  else:\n    for i in liste:\n      if i%2 == 0:\n        res= res + i\n  return res", "user": "userdId_7", "attemptID": 3689, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "30.595888", "embeddingY": "-18.206007"},{"extension": "py", "date": "2020-04-07 03:39:00", "correct": "0", "upload": "def suiteGeo(liste):\n  i=-1\n  ok=True\n  if 0 in liste:\n    ok=False\n  elif len(liste)>1:\n    raison=liste[-1]/liste[-2]\n    while i>-len(liste):\n      if liste[i-1]!=0 and liste[i]%liste[i-1]!=0:\n        ok=False\n      i-=1\n  return ok", "user": "userdId_12", "attemptID": 3690, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "17.293352", "embeddingY": "31.418509"},{"extension": "py", "date": "2020-03-10 04:24:39", "correct": "1", "upload": "def sommeNPremiersEntiers(n):\n    res=0\n    for x in range(1,n+1):\n        res=res+x\n    return res", "user": "userdId_39", "attemptID": 3691, "exercise": "c315a540cf0bfb0182dc114c6f0eafd1", "exercise_name": "sommeNPremiersEntiers", "embeddingX": "-18.968967", "embeddingY": "13.209768"},{"extension": "py", "date": "2020-03-31 06:04:28", "correct": "0", "upload": "def stockerChiffres(nombre):\n  res=[]\n  while nombre!=0:\n    res.append(nombre%10)\n    nombre=nombre//10\n  if nombre==0:\n    res=0\n  return res", "user": "userdId_8", "attemptID": 3692, "exercise": "49a87f644f84a443327fb4315b47f249", "exercise_name": "stockerChiffres", "embeddingX": "41.88252", "embeddingY": "14.978112"},{"extension": "py", "date": "2020-04-01 06:23:34", "correct": "1", "upload": "def nbOccurrencesLettre(lettre,mot):\n  res=0\n  for elem in mot:\n    if elem==lettre:\n      res+=1\n  return res", "user": "userdId_12", "attemptID": 3693, "exercise": "2864c9e5861229d2ff32570f6bc944fb", "exercise_name": "nbOccurrencesLettre", "embeddingX": "-10.279203", "embeddingY": "-27.463308"},{"extension": "py", "date": "2020-03-24 05:42:21", "correct": "0", "upload": "def compare(chaine1,chaine2):\n  i=0\n  res=0\n  while i<len(chaine1) and i<len(chaine2) and res==0:\n    if chain1[i]<chain2:\n      res=-1\n    if chain1[i]>chain2:\n      res=1\n  i=i+1\n  return res\n\n", "user": "userdId_13", "attemptID": 3694, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-12.533071", "embeddingY": "56.36026"},{"extension": "py", "date": "2020-04-12 03:55:46", "correct": "1", "upload": "def elemAri(n,u0,r):\n    return u0+n*r", "user": "userdId_8", "attemptID": 3695, "exercise": "f239498950e974e29e01472749d9a09d", "exercise_name": "elemAri", "embeddingX": "-35.542843", "embeddingY": "20.741322"},{"extension": "py", "date": "2020-04-05 09:03:59", "correct": "0", "upload": "def phrasePalindrome(phrase):\n    if phrase=='':\n      ok=True\n    else:\n      ok=True\n      i=0\n      j=-1\n      while i<len(phrase) and j<len(phrase) and ok:\n        if phrase[i]!=phrase[j] and phrase[i]!='' and phrase[j]!='':\n          ok=False\n        if phrase[i]=='' and phrase[j]!='':\n          i+=1\n        if phrase[j]=='' and phrase[i]!='':\n          j-=1\n    return ok", "user": "userdId_18", "attemptID": 3696, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "38.194283", "embeddingY": "38.21186"},{"extension": "py", "date": "2020-04-07 23:20:02", "correct": "0", "upload": "def suiteGeo(liste):\n  res = True\n  i = 0\n  if liste == [] or len(liste) == 1 :\n    res = True\n  else :\n    if liste [0] == 0 and liste [1] != 0:\n      res = False\n    else :\n      raison = liste[2]/liste[1]\n  while res and i < len(liste)-1 :\n    if liste[i]*raison != liste[i+1]:\n      res = False\n    i = i + 1\n  return res\n", "user": "userdId_17", "attemptID": 3697, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "30.816427", "embeddingY": "70.9277"},{"extension": "py", "date": "2020-03-27 06:04:36", "correct": "0", "upload": "def compare(chaine1,chaine2):\n  res=0\n  i=0\n  while i<len(chaine1) and res==0:\n    if chaine1[i]<chaine[2]:\n      res=-1\n    if chaine1[i]>chaine[2]:\n      res=1\n    else:\n      res=0\n    i=i+1\n  return res\n", "user": "userdId_19", "attemptID": 3698, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-12.46733", "embeddingY": "56.13867"},{"extension": "py", "date": "2020-03-12 21:57:07", "correct": "0", "upload": "def maximum(liste):\n  res=liste[0]\n  for i in liste:\n    if i>=res:\n      res=i\n  return res", "user": "userdId_35", "attemptID": 3699, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "35.90519", "embeddingY": "-47.51758"},{"extension": "py", "date": "2020-03-27 05:50:37", "correct": "0", "upload": "def quatrePlus100(liste):\n  res=[]\n  i=0\n  while i<len(l) and len(res)<4 :\n    if l[i]>100 :\n      res.append(l[i])\n    i=i+1\n  return res", "user": "userdId_15", "attemptID": 3700, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-32.444195", "embeddingY": "40.618507"},{"extension": "py", "date": "2020-04-12 05:33:48", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=False\n  c=[]\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    d=liste[0]+d\n    c.append(d)\n  return c", "user": "userdId_8", "attemptID": 3701, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-77.02784", "embeddingY": "8.187078"},{"extension": "py", "date": "2020-03-12 23:55:52", "correct": "0", "upload": "def qualifJO(sexe,record,nbvictoires,champion):\n  res = True\n  if sexe == 'M':\n    if record < 12 or nbvictoires < 3 :\n      res = False\n      if champion == True :\n          res = True\n  else :\n    if record < 15 or nbvictoires < 3 :\n      res = False\n      if champion == True :\n          res = True\n  return res", "user": "userdId_17", "attemptID": 3702, "exercise": "78ec7738f3a7f3553d4a5c653534c32d", "exercise_name": "qualifJO", "embeddingX": "64.85223", "embeddingY": "-14.091058"},{"extension": "py", "date": "2020-04-11 05:55:44", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  res=0\n  while nombre!=0:\n    nombre=nombre//10\n    if nombre%10==chiffre:\n      res+=1\n  if res==0 and (chiffre==0 or nombre==0):\n    res=1\n  return res", "user": "userdId_8", "attemptID": 3703, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "23.136358", "embeddingY": "9.201788"},{"extension": "py", "date": "2020-04-14 04:03:22", "correct": "0", "upload": "def listeDecroissante(scores):\n  ok=True\n  while i<len(scores) and ok:\n    if scores[i]>=scores[i+1]:\n      res=ok\n    else:\n      res=False\n  return res", "user": "userdId_21", "attemptID": 3704, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "-1.4970058", "embeddingY": "40.283634"},{"extension": "py", "date": "2020-04-12 10:31:50", "correct": "0", "upload": "def elemGeo(n,u0,q):\n  q=1\n  for i in range(n):\n    q=q*n\n  res=u0*q\n  \n  return res", "user": "userdId_38", "attemptID": 3705, "exercise": "d7c83a7fb9b49e28804e55955ad06968", "exercise_name": "elemGeo", "embeddingX": "-27.503338", "embeddingY": "16.39815"},{"extension": "py", "date": "2020-04-08 01:00:42", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  calc=0\n  i=0\n  lres=[]\n  while i<len(liste):\n    calc=a*calc+b\n    lres.append(calc)\n    i+=1\n  return lres", "user": "userdId_13", "attemptID": 3706, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-71.6756", "embeddingY": "16.040617"},{"extension": "py", "date": "2020-04-06 03:42:52", "correct": "0", "upload": "def suiteGeo(liste):\n  ok=True\n  i=0\n  if len(liste)<=1 :\n    ok=True\n  else :\n    while i<(len(liste)-1) and ok :\n      if liste[0]==0 :\n        ok=False\n      elif liste[i]!=(liste[0]*(liste[i+1]//liste[i])**i):\n        ok=False\n      i+=1\n  return ok", "user": "userdId_15", "attemptID": 3707, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "51.646492", "embeddingY": "45.998657"},{"extension": "py", "date": "2020-03-31 03:19:16", "correct": "1", "upload": "def indiceOccurrence(n,x,liste):\n  cpt = 0\n  find = False\n  i = 0\n  while i<len(liste) and find == False :\n    if liste[i]==x:\n      cpt = cpt + 1\n    if cpt == n : \n      find = True\n    i = i + 1\n  if find == True :\n    return i-1\n  else :\n    return None", "user": "userdId_52", "attemptID": 3708, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-1.6219301", "embeddingY": "75.215996"},{"extension": "py", "date": "2020-03-30 00:08:06", "correct": "1", "upload": "def permutationChaine(s):\n  res=''\n  for i in range(0,len(s)-1,2):\n    res+=s[i+1]\n    res+=s[i]\n  if len(s)%2!=0:\n    res+=s[-1]\n  return res", "user": "userdId_6", "attemptID": 3709, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-35.22647", "embeddingY": "-56.44194"},{"extension": "py", "date": "2020-04-06 06:42:53", "correct": "0", "upload": "def sousChaine(s1,s2):\n  res=True\n  i=0\n  j=0\n  while i<len(s1) and j<len(s2):\n    if s1[i]==s2[j]:\n      i+=1\n    else:\n      i-=1\n    j+=1\n  if i!=len(s1):\n    res=False\n  return res", "user": "userdId_27", "attemptID": 3710, "exercise": "a7cdd094daa2f0bfccc7a4ec419f7243", "exercise_name": "sousChaine", "embeddingX": "-6.050761", "embeddingY": "58.953094"},{"extension": "py", "date": "2020-03-02 21:19:15", "correct": "1", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  date1 = int(str(annee1) + str(mois1) + str(jour1))\n  date2 = int(str(annee2) + str(mois2) + str(jour2))\n  \n  if date1 > date2 :\n    res = 1 \n  elif date1 < date2 :\n    res = -1\n  else :\n    res = 0\n  return res", "user": "userdId_17", "attemptID": 3711, "exercise": "af7c1467ef9f7684d9ff58734067ae98", "exercise_name": "compareDates", "embeddingX": "82.32329", "embeddingY": "-31.180954"},{"extension": "py", "date": "2020-03-13 00:55:13", "correct": "0", "upload": "def doubleLettre(mot):\n\tres=None\n\tfor l in mot:\n\t\tprec=''\n\t\tact=l\n\t\tif prec==act:\n\t\t\tres=1\n\tif res==1:\n\t\treturn True\n\telse:\n\t\treturn False\n\t\t\t\n", "user": "userdId_19", "attemptID": 3712, "exercise": "00da9cf1fa2b468d915724499459ed8f", "exercise_name": "doubleLettre", "embeddingX": "11.705462", "embeddingY": "-5.8734293"},{"extension": "py", "date": "2020-04-06 07:50:31", "correct": "0", "upload": "def maximum(liste):\n  if ([]):\n    res=None\n  else:\n    res=liste[0]\n    for i in range(1,len(liste)):\n       if res<liste[i]:\n          res=liste[i]\n  return res", "user": "userdId_16", "attemptID": 3713, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "27.128843", "embeddingY": "-71.5282"},{"extension": "py", "date": "2020-03-12 23:58:25", "correct": "0", "upload": "def jourNuit(heure):\n  \"\"\"\n  Fonction qui affiche le moment de la journ\u00e9e\n  param\u00e8tres:\n  heure:une heure entre 0 et 24\n  renvoie une cha\u00eene de caract\u00e8re d\u00e9crivant le moment de la journ\u00e9e et s'il fait jour ou nuit\n  \"\"\"\n  \n  #on g\u00e8re le moment de la journ\u00e9e\n  if heure<0 or heure>24:\n    res=\"l'heure saisie est invalide\"\n  else:\n    if heure<5 or heure>=21:\n      res=\"on est la nuit\"\n    elif heure<12:\n      res=\"on est le matin\"\n    elif heure<17:\n      res=\"on est l'apr\u00e8s midi\"\n    else:\n      res=\"on est le soir\"\n    #on g\u00e8re s'il fait jour ou nuit\n    if heure<6 or heure>=18:\n      res=res+\" et il fait nuit\"\n    else:\n      res=res+\" et il fait jour\"\n    return res\n    ", "user": "userdId_1", "attemptID": 3714, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "68.832695", "embeddingY": "14.137729"},{"extension": "py", "date": "2020-04-13 22:08:43", "correct": "0", "upload": "def meilleurScoreJoueur(scores,joueurs,nom):\n  trouve=False\n  i=0\n  res=0\n  while i<len(score) and not trouve:\n    if nom==joueur[i]:\n      trouve=True\n      res=score[i]\n    i=i+1\n  return res", "user": "userdId_1", "attemptID": 3715, "exercise": "c96fadc94086276f98451a798b3bb730", "exercise_name": "meilleurScoreJoueur", "embeddingX": "-2.2577925", "embeddingY": "44.207787"},{"extension": "py", "date": "2020-03-02 09:23:12", "correct": "0", "upload": "def xqualifJO(sexe,record,nbvictoires,champion):\n    res = False\n    if (sexe == \"F\" or sexe == \"M\") and record > 0 and nbvictoires > 0 and type(champion) == bool:\n\t    if sexe == \"F\" and record < 15 or sexe == \"M\" and record < 12 and nbvictoires >= 3 or champion == True:\n         \tres = True\n        \n    \n    return res", "user": "userdId_4", "attemptID": 3716, "exercise": "78ec7738f3a7f3553d4a5c653534c32d", "exercise_name": "qualifJO", "embeddingX": "67.05914", "embeddingY": "-11.222787"},{"extension": "py", "date": "2020-03-16 08:38:57", "correct": "0", "upload": "def prononcable(mot):\n  if len(mot)==0:\n    return True\n  for lettre in mot:\n    if lettre=='aeiouy' and lettre!=3*lettre:\n      return True\n      if lettre!='aeiouy' and lettre!=3*lettre:\n        return True\n    else:\n      return False\n    ", "user": "userdId_1", "attemptID": 3717, "exercise": "6318b210c201fba050d60bc0913cb7ef", "exercise_name": "prononcable", "embeddingX": "17.23638", "embeddingY": "-44.04747"},{"extension": "py", "date": "2020-03-10 03:32:42", "correct": "0", "upload": "def jourNuit(heure):\n  if heure>24 or heure<0:\n    res=\"l'heure saisie est invalide\"\n  else:\n    if heure <5 or heure>=21:\n       res=\"on est la nuit\"\n    elif heure<12:\n       res=\"on est le matin\"\n    elif heure <17:\n       res=\"on est l'apr\u00e8s-midi\"\n    else:\n       res=\"on est le soir \"\n    if heure<6 or heure>=18:\n       res=res+\" et il fait nuit\"\n    else:\n        res=res+\" et il fait jour\"\n  return res", "user": "userdId_25", "attemptID": 3718, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "73.197655", "embeddingY": "14.213603"},{"extension": "py", "date": "2020-04-06 15:15:38", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  i=0\n  for i in range(nombre):\n    if nombre[i]==chiffre:\n      cpt=cpt+1\n    i=i+1\n  return cpt", "user": "userdId_3", "attemptID": 3719, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-20.880774", "embeddingY": "-31.600933"},{"extension": "py", "date": "2020-03-23 22:33:45", "correct": "0", "upload": "def quatrePlus100(liste):\n  res=[]\n  x=0\n  while len(res)<4 :\n    if (liste[x])>100 :\n      res=res+[liste[x]]\n    x=x+1\n  return res", "user": "userdId_28", "attemptID": 3720, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-28.175524", "embeddingY": "37.46234"},{"extension": "py", "date": "2020-03-03 04:57:29", "correct": "0", "upload": "def somme(liste):\n  res= 0\n  for elem in liste:\n    res= res + elem\n    return res\n  ", "user": "userdId_7", "attemptID": 3721, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-25.913113", "embeddingY": "4.8691473"},{"extension": "py", "date": "2020-03-06 00:42:24", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0 :\n    res=0\n  else:\n    for elem in mot :\n      if mot in 'aeiouy' :\n        res=res+1\n    return res", "user": "userdId_24", "attemptID": 3722, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "8.5307665", "embeddingY": "-31.797646"},{"extension": "py", "date": "2020-03-17 06:32:45", "correct": "0", "upload": "def distribution(liste,n):\n  res=[0]*(n+1)\n  for elem in liste:\n    res=res+[elem]+1\n  return res", "user": "userdId_23", "attemptID": 3723, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-57.882984", "embeddingY": "-7.0735607"},{"extension": "py", "date": "2020-03-05 23:41:15", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    return 0", "user": "userdId_14", "attemptID": 3724, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "13.786655", "embeddingY": "-48.419064"},{"extension": "py", "date": "2020-03-06 00:28:32", "correct": "0", "upload": "def maximum(liste):\n  res=liste([1])\n  for elem in liste:\n     if res<elem:\n        res=elem\n  return res", "user": "userdId_23", "attemptID": 3725, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-48.53678", "embeddingY": "-0.6878773"},{"extension": "py", "date": "2020-03-28 11:45:35", "correct": "1", "upload": "def somme(liste):\n    if len(liste)==0:\n      res=0\n    else:\n      res=0\n      for elem in liste:\n        res=res+elem\n    return res", "user": "userdId_11", "attemptID": 3726, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-0.08953232", "embeddingY": "-19.453568"},{"extension": "py", "date": "2020-04-06 04:04:44", "correct": "0", "upload": "def motPalindrom(mot):\n  i=0\n  res=True\n  while i<len(mot) and res==True:\n    pl=mot[i]\n    dl=mot[-i-1]\n    if pl==dl:\n        res=True\n    else:\n        res=False\n    i+=1\n  return res", "user": "userdId_26", "attemptID": 3727, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "8.393757", "embeddingY": "61.376305"},{"extension": "py", "date": "2020-04-12 06:04:37", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=False\n  c=liste\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n  return c", "user": "userdId_8", "attemptID": 3728, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-70.70622", "embeddingY": "25.860157"},{"extension": "py", "date": "2020-03-05 23:50:25", "correct": "1", "upload": "def nbVoyelles(mot):\n    nb = 0\n    voy = ['a','e','i','o','u','y']\n    for v in mot:\n      if v in voy:\n        nb+=1\n \n    return nb", "user": "userdId_29", "attemptID": 3729, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "17.592348", "embeddingY": "-30.18841"},{"extension": "py", "date": "2020-03-06 00:40:50", "correct": "0", "upload": "def moyenne(liste):\n  res=0\n  cpt=0\n  if len(liste)==0:\n    moy=0\n  else:\n     for i in liste:\n       res=res+i\n       cpt=cpt+1\n  moy=res*cpt\n  return res", "user": "userdId_14", "attemptID": 3730, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "2.960762", "embeddingY": "-7.826947"},{"extension": "py", "date": "2020-04-09 03:46:10", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  calc=0\n  i=0\n  lres=[]\n  ok=None\n  while i<len(liste):\n    calc=a*calc+b\n    lres.append(calc)\n    i+=1\n  return ok", "user": "userdId_13", "attemptID": 3731, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-74.144905", "embeddingY": "18.269728"},{"extension": "py", "date": "2020-03-24 04:56:53", "correct": "0", "upload": "def quatrePlus100(liste):\n  i=0\n  res=[]\n  while i<len(liste):\n    if liste[i]>100:\n      res.append(liste[i])\n    i=i+1\n  return res\n", "user": "userdId_13", "attemptID": 3732, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-25.826178", "embeddingY": "37.373913"},{"extension": "py", "date": "2020-04-12 08:08:47", "correct": "0", "upload": "def suiteAriGeo(liste):\n  i=0\n  while i<len(liste)-1:\n    a=liste[0]\n    b=liste[0]\n    if liste[0]==0:\n      a=1\n      b=liste[i+1]\n    if liste[i+1]==liste[i]+(liste[1]-liste[0]):\n      b=liste[1]-liste[0]\n    if liste[0]!=0:                        \n      if liste[i+1]==liste[1]/liste[0]:\n        a=liste[1]/liste[0]\n        b=0\n    i=i+1\n  ok=True\n  i=0\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=a*liste[i]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 3733, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "36.993954", "embeddingY": "82.31727"},{"extension": "py", "date": "2020-03-06 00:28:16", "correct": "0", "upload": "def minimum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=liste[0]\n    for i in range(1,len(liste)):\n      if i>liste[i]:\n        res=liste[i]\n  return res", "user": "userdId_14", "attemptID": 3734, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "-0.3920543", "embeddingY": "-61.574455"},{"extension": "py", "date": "2020-03-06 00:48:31", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n  if len(mot)==0:\n    return None\n  else:\n    res=0\n    for elem in mot:\n      if lettre==elem:\n        res=res+1\n    return res\n        ", "user": "userdId_2", "attemptID": 3735, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-11.527968", "embeddingY": "-30.614937"},{"extension": "py", "date": "2020-03-12 21:37:31", "correct": "0", "upload": "def nbVoyelles(mot):\n   res=0\n   if mot==0:\n      res=0\n   else:\n      for lettre in 'aeiouy':\n         res=res+1\n   return res", "user": "userdId_14", "attemptID": 3736, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "4.326013", "embeddingY": "-23.99256"},{"extension": "py", "date": "2020-04-07 04:48:54", "correct": "0", "upload": "def suiteAri(liste):\n  ok=True\n  i=0\n  if len(liste)==0:\n    ok=True\n  while i<len(liste) and ok:\n    if liste[i+1]!=liste[i]+liste[i+1-i]:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 3737, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "22.893484", "embeddingY": "52.330025"},{"extension": "py", "date": "2020-04-17 03:03:54", "correct": "1", "upload": "def somme(liste):\n  res=0\n  for i in liste: \n    res=res+i  \n  return res", "user": "userdId_21", "attemptID": 3738, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-29.321", "embeddingY": "0.5485985"},{"extension": "py", "date": "2020-03-31 04:28:21", "correct": "0", "upload": "def indiceOccurence(n,x,l):\n  res=None\n  cpt=0 \n  trouve=False \n  i=0\n  while i<len(l) and trouve==False:\n    if l[i]==x:\n      cpt+=1\n    if cpt==n:\n      trouve=True\n      res=i\n    i+=1\n  return res\n      ", "user": "userdId_21", "attemptID": 3739, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "1.69137", "embeddingY": "71.05706"},{"extension": "py", "date": "2020-04-13 22:15:13", "correct": "1", "upload": "def listeDecroissante(scores):\n  res=True\n  i=0\n  while i<len(scores)-1 and res:\n    if scores[i]<=scores[i+1]:\n      res=False\n    i=i+1\n  return res", "user": "userdId_32", "attemptID": 3740, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "18.557728", "embeddingY": "50.05379"},{"extension": "py", "date": "2020-03-16 05:47:58", "correct": "0", "upload": "def doubleLettre(mot):\n  res=0\n  dL=0\n  prec=''\n  for c in mot:\n    if prec==c:\n      dL=True\n    else:\n      dL=False\n    prec=c\n  if dL==True:\n    res=True\n  else:\n    res=False\n  return res", "user": "userdId_18", "attemptID": 3741, "exercise": "00da9cf1fa2b468d915724499459ed8f", "exercise_name": "doubleLettre", "embeddingX": "11.600426", "embeddingY": "-5.5663443"},{"extension": "py", "date": "2020-04-09 11:20:41", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  j=0\n  ok=True\n  raison=None\n  if len(liste)>1:\n    while i<len(liste) and liste[0]!=0 and raison==None:\n      raison=liste[i+1]/liste[i]\n      i+=1\n    while j<len(liste)-1 and ok:\n      if liste[j+1]!=liste[j]*raison:\n        ok=False\n      j+=1\n  return ok", "user": "userdId_12", "attemptID": 3742, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "22.345648", "embeddingY": "70.152245"},{"extension": "py", "date": "2020-03-22 09:08:33", "correct": "1", "upload": "def reconstruireChainePartielle(s,n):\n    res=''\n    for i in range (0,len(s),n):\n      res=res+s[i]\n    return res\n     ", "user": "userdId_47", "attemptID": 3743, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-60.23826", "embeddingY": "-40.48043"},{"extension": "py", "date": "2020-03-17 05:36:06", "correct": "0", "upload": "def permutationChaine(s):\n  res=\"\"\n  for i in range(0,len(s)-1,2):\n    res=res+s[1+i]+s[i]\n  if len(s)!=0:\n    res=res+s[i]%2\n    res=res+s[i-1]\n  return res", "user": "userdId_8", "attemptID": 3744, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-38.43134", "embeddingY": "-61.447826"},{"extension": "py", "date": "2020-04-14 00:18:33", "correct": "0", "upload": "def nbOccurrencesJoueur(joueurs,nom):\n  cpt=0\n  for nom in joueurs:\n    cpt+=1\n  return cpt", "user": "userdId_8", "attemptID": 3745, "exercise": "00ee5faf82e54951fbdb2ba2656f7ae7", "exercise_name": "nbOccurrencesJoueur", "embeddingX": "-32.426033", "embeddingY": "-3.2504814"},{"extension": "py", "date": "2020-03-20 00:05:58", "correct": "0", "upload": "def reconstruireChainePartielle(o,n):\n  res=\"\"\n  for i in range(s,len(o),n):\n    res=res+s[i]\n  return res", "user": "userdId_20", "attemptID": 3746, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-44.870773", "embeddingY": "-22.77067"},{"extension": "py", "date": "2020-03-24 05:48:39", "correct": "0", "upload": "def compare(chaine1,chaine2):\n    if chaine1=='':\n      res=-1\n    elif chaine2=='':\n      res=1\n    else:\n      res=0\n      i=0\n      mmlttr=0\n      while i<len(chaine1) and i<len(chaine2):\n        if chaine1[i]<chaine2[i]:\n          res=-1\n        elif chaine1[i]>chaine2[i]:\n          res=1\n        else:\n          mmlttr=mmlttr+1\n        i=i+1\n      if len(chaine1)>len(chaine2):\n        if len(chaine2)==mmlttr:\n          res=1\n      elif len(chaine1)<len(chaine2):\n        if len(chaine1)==mmlttr:\n          res=-1\n    return res", "user": "userdId_18", "attemptID": 3747, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-30.455349", "embeddingY": "63.52316"},{"extension": "py", "date": "2020-04-06 22:09:51", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n    res=0\n    nb=[]\n    while nombre!=0:\n      nb=nb+nombre%10\n      nombre=nombre//10\n    for i in nb:\n      if i==chiffre:\n        res=res+1\n    return res", "user": "userdId_28", "attemptID": 3748, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "1.4791645", "embeddingY": "14.608647"},{"extension": "py", "date": "2020-04-12 03:59:09", "correct": "0", "upload": "def elemGeo(n,u0,r):\n  res=u0*q**n\n  return res\n", "user": "userdId_8", "attemptID": 3749, "exercise": "d7c83a7fb9b49e28804e55955ad06968", "exercise_name": "elemGeo", "embeddingX": "-38.137215", "embeddingY": "11.914501"},{"extension": "py", "date": "2020-04-17 00:02:01", "correct": "1", "upload": "def meilleurClassementJoueur(scores,joueurs,nom):\n  if nom not in joueurs:\n    res=-1\n  else:\n    for i in range(len(joueurs)):\n      if joueurs[i]==nom:\n        return i+1\n  return res", "user": "userdId_12", "attemptID": 3750, "exercise": "be6ce0a06c5d396190024c7c681da95d", "exercise_name": "meilleurClassementJoueur", "embeddingX": "-24.894995", "embeddingY": "-36.8417"},{"extension": "py", "date": "2020-03-09 21:59:44", "correct": "1", "upload": "def ecart(liste):\n  if liste == []:\n    return None\n  else:\n    maximum = liste[0]\n    minimum = liste[0]\n    for i in range(1,len(liste)):\n      if maximum < liste[i] :\n        maximum = liste[i]\n      elif minimum > liste[i]:\n        minimum = liste[i]\n    return maximum - minimum", "user": "userdId_42", "attemptID": 3751, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "2.0495605", "embeddingY": "-84.81887"},{"extension": "py", "date": "2020-04-08 07:13:48", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n    cpt=0\n    decomp=nombre\n    while decomp!=0 and decomp!=chiffre:\n      decomp=decomp//10\n      cpt+=1\n    return cpt", "user": "userdId_11", "attemptID": 3752, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-5.44044", "embeddingY": "22.250132"},{"extension": "py", "date": "2020-04-08 01:25:14", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  end=False\n  if len(liste)==0:\n    res=True\n  else:\n    while i<len(liste)-1 and res==True and end==False:\n      if liste[i]==0:\n        res=False\n      elif len(liste)==1 and liste[i]>=1:\n        end=True\n        res=True\n      else:\n        q=liste[1]/liste[0]\n        if liste[i+1]/liste[i]==q:\n          res=True\n        else:\n          res=False\n      i+=1\n  return res", "user": "userdId_26", "attemptID": 3753, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "7.2773995", "embeddingY": "54.061707"},{"extension": "py", "date": "2020-04-06 21:02:38", "correct": "1", "upload": "def compteChiffre(chiffre,nombre):\n  res=0\n  if nombre==0 and chiffre==0:\n    res=1\n  while nombre!=0:\n    if nombre%10==chiffre:\n      res+=1\n    nombre//=10\n  return res", "user": "userdId_12", "attemptID": 3754, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "21.98013", "embeddingY": "8.955596"},{"extension": "py", "date": "2020-04-12 06:08:03", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=False\n  c=[]\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n    d.extend(c)\n  return c", "user": "userdId_8", "attemptID": 3755, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-81.78101", "embeddingY": "12.640155"},{"extension": "py", "date": "2020-03-06 00:18:22", "correct": "0", "upload": "def moyenne(liste):\n\tif len(liste) == 0:\n\t\tres= None\n\telse:\n\t\tnb = 0\n\t\tres = 0\n\t\tmoy = ''\n\t\tfor elem in liste:\n\t\t\tres = res + elem\n\t\t\tnb+=1\n\tmoy = res / nb\n\treturn moy", "user": "userdId_29", "attemptID": 3756, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "0.0529576", "embeddingY": "-10.419059"},{"extension": "py", "date": "2020-04-12 04:33:33", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=False\n  c=[]\n  for i in range(len(liste)):\n    c=a*liste[i]+b\n    if c==liste:\n      res=True\n  return res", "user": "userdId_8", "attemptID": 3757, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-73.05208", "embeddingY": "12.747896"},{"extension": "py", "date": "2020-03-06 00:32:11", "correct": "1", "upload": "def ecart(liste):\n\tif len(liste)==0:\n\t\tres=None\n\telse:\n\t\tres=max(liste)-min(liste)\n\treturn res\n\n    ", "user": "userdId_19", "attemptID": 3758, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "11.390659", "embeddingY": "-45.307896"},{"extension": "py", "date": "2020-04-09 22:28:34", "correct": "0", "upload": "def suiteAriGeo(liste):\n  ok=True\n  i=0\n  j=0\n  R=0\n  Q=0\n  if len(liste)<=2 :\n    ok=True\n  else :\n    while j<(len(liste)-2):\n      if liste[0]==0 :\n        Q=1\n      elif (liste[j+1]-liste[j])==(liste[j+2]-liste[j+1]) :\n        Q=1\n        R=(liste[1]-liste[0])\n      elif (liste[j+1]/liste[j])==(liste[j+2]/liste[j+1]) :\n        Q=(liste[1]/liste[0])\n        R=0\n      else : \n        if (liste[1]/liste[0])<(liste[2]/liste[1]) :\n          Q=(liste[1]//liste[0])\n        else :\n          Q=liste[2]//liste[1]\n          R=liste[2]-(Q*liste[1])\n      j+=1\n      \n    while i<(len(liste)-1) and ok :\n      if liste[i+1]!=Q*liste[i]+R :\n        ok=False\n      i+=1\n  return ok", "user": "userdId_15", "attemptID": 3759, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "40.33311", "embeddingY": "55.409393"},{"extension": "py", "date": "2020-03-08 22:04:40", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1==annee2 and mois1==mois2 and jour1==jour2:\n    return 0\n  elif annee1<=annee2 and mois1<=mois2 and jour1<jour2:\n    return -1\n  elif annee1<=annee2 and mois1>=mois2 and jour1>jour2:\n    return -1\n  elif annee1<annee2 and mois1==mois2 and jour1==jour2:\n    return -1\n  else:\n    return 1", "user": "userdId_1", "attemptID": 3760, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "84.0179", "embeddingY": "-14.393866"},{"extension": "py", "date": "2020-03-27 05:26:34", "correct": "0", "upload": "def quatrePlus100(liste):\n  i=0\n  res=[0]*len(liste)\n  while i<4 and liste[i]>100:\n    res.append(liste[i])\n    i=i+1\n  return res", "user": "userdId_12", "attemptID": 3761, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-20.443077", "embeddingY": "45.348442"},{"extension": "py", "date": "2020-03-05 22:02:12", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=None\n    for i in range(len(liste)):\n      if liste[i]>res:\n        res=liste[i]\n  return res", "user": "userdId_30", "attemptID": 3762, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "1.1506822", "embeddingY": "-56.584446"},{"extension": "py", "date": "2020-04-14 04:21:40", "correct": "1", "upload": "def nbOccurrencesJoueur(joueurs,nom):\n  res=0\n  for i in range(len(joueurs)):\n    if joueurs[i]==nom:\n      res+=1\n  return res", "user": "userdId_12", "attemptID": 3763, "exercise": "00ee5faf82e54951fbdb2ba2656f7ae7", "exercise_name": "nbOccurrencesJoueur", "embeddingX": "-20.931997", "embeddingY": "-38.630337"},{"extension": "py", "date": "2020-03-06 00:49:35", "correct": "1", "upload": "def nbVoyelles(mot):\n  if len(mot)==0 :\n    res=0\n  else:\n    res=0\n    for elem in mot :\n      if elem in 'aeiouy' :\n        res=res+1\n  return res", "user": "userdId_24", "attemptID": 3764, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "6.1095195", "embeddingY": "-29.657522"},{"extension": "py", "date": "2020-03-06 22:40:04", "correct": "1", "upload": "def nbOccurrencesLettre(lettre_to_find,mot):\n    res = 0\n    if len(mot) > 0:\n        for lettre in mot:\n            if lettre == lettre_to_find:\n                res += 1\n    return res\n", "user": "userdId_4", "attemptID": 3765, "exercise": "2864c9e5861229d2ff32570f6bc944fb", "exercise_name": "nbOccurrencesLettre", "embeddingX": "-9.575575", "embeddingY": "-29.025585"},{"extension": "py", "date": "2020-04-07 23:45:49", "correct": "0", "upload": "def suiteGeo(liste):\n  ok=True\n  i=0\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n    q=liste[i+1]/liste[i]\n  while i<len(liste)-1 and ok:\n    if liste[i]!=0:\n      if liste[i+1]/liste[i]!=q:\n        ok=False\n    i=i+1\n  return ok\n\n", "user": "userdId_1", "attemptID": 3766, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "31.081245", "embeddingY": "64.67039"},{"extension": "py", "date": "2020-03-17 06:05:13", "correct": "0", "upload": "def distribution(liste,n):\n    res=[0]*n\n    for i in range(len(liste)):\n        if liste[i]==0:\n            res[0]=res[0]+1\n        elif liste[i]==1:\n            res[1]=res[1]+1\n        elif liste[i]==2:\n            res[2]=res[2]+1\n        else:\n          res[3]=res[3]+1\n    return res\n\n\n  \n  \n", "user": "userdId_28", "attemptID": 3767, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-16.832417", "embeddingY": "-58.211388"},{"extension": "py", "date": "2020-02-29 06:08:03", "correct": "0", "upload": "def polynome(a,b,c):\n    import math\n    delta=(b**2)-(4*a*c)\n    if delta>0:\n      x1=(-b-math.sqrt(delta))/2*a\n      x2=(-b+math.sqrt(delta))/2*a\n      print(x1,x2)\n    elif delta==0:\n      x0=-b/2*a\n      print(x0)\n    else:\n      print('pas de solution')", "user": "userdId_18", "attemptID": 3768, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-55.196857", "embeddingY": "13.872526"},{"extension": "py", "date": "2020-03-19 05:45:19", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if jour1<jour2 or mois1<mois2 or annee1<annee2:\n    res=-1\n  elif jour1==jour2 and mois1==mois2 and annee1==annee2:\n      res=0\n  else:\n    res=1\n  return res", "user": "userdId_34", "attemptID": 3769, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "78.72043", "embeddingY": "-26.109644"},{"extension": "py", "date": "2020-04-08 00:20:37", "correct": "0", "upload": "def suiteGeo(liste):\n  ok=True\n  i=0\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i]==0:\n      ok=False\n    if liste[i]!=0:\n      q=liste[1]/liste[0]\n    if liste[i]!=0:\n      if liste[i+1]/liste[i]!=q:\n        ok=False\n    i=i+1\n  return ok\n", "user": "userdId_1", "attemptID": 3770, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "32.198135", "embeddingY": "63.549305"},{"extension": "py", "date": "2020-03-06 00:03:00", "correct": "0", "upload": "def nbVoyelles(mot):\n  cpt=0\n  for i in range (len(mot))=={a,e,i,o,u,y}:\n    cpt=cpt+1\n  return cpt", "user": "userdId_1", "attemptID": 3771, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-28.456755", "embeddingY": "-19.767017"},{"extension": "py", "date": "2020-03-05 21:54:18", "correct": "1", "upload": "def somme(liste):\n    res=0\n    for elen in (liste):\n      res=res+elen\n    return res", "user": "userdId_49", "attemptID": 3772, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-29.55871", "embeddingY": "2.7819107"},{"extension": "py", "date": "2020-03-06 00:09:17", "correct": "0", "upload": "def nbVoyelles(mot):\n  for i in range(len(liste)):\n    if liste[i] in 'aeiouy':\n      res=res+1\n  return res", "user": "userdId_12", "attemptID": 3773, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-31.262985", "embeddingY": "-18.91077"},{"extension": "py", "date": "2020-04-06 08:11:20", "correct": "0", "upload": "def nextConway(s):\n    liste=[]\n    while s!=0:\n      liste+=s%10\n      s//=10\n    if len(liste)==1:\n      cw=[1,1]\n    elif len(liste)==2:\n      cw=[2,1]\n    else:\n      nliste=[0]\n      for i in range(len(liste)):\n        nliste=[liste[i]]+nliste\n      cw=[]\n      cpt=1\n      for i in range(len(nliste)-1):\n        if nliste[i]==nliste[i+1]:\n          cpt+=1\n        else:\n          cw+=[cpt]\n          cw+=[nliste[i]]\n          cpt=1\n    res=0\n    for i in range(len(cw)):\n      res+=cw[-i-1]*10**abs(-i)\n    return res", "user": "userdId_18", "attemptID": 3774, "exercise": "a580c32690609356dae4401b3c89a3b8", "exercise_name": "nextConway", "embeddingX": "45.063778", "embeddingY": "17.607735"},{"extension": "py", "date": "2020-03-22 08:33:26", "correct": "0", "upload": "def nbVoyelles(mot):\n  res=0\n  for i in range(len(mot)):\n    if mot[i] in ['a','e','i','o','u']:\n      res=res+1\n    return res", "user": "userdId_16", "attemptID": 3775, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-4.5310764", "embeddingY": "-50.501427"},{"extension": "py", "date": "2020-04-06 08:07:00", "correct": "0", "upload": "def nextConway(s):\n    liste=[]\n    while s!=0:\n      liste.append(s%10)\n      s//=10\n    if len(liste)==1:\n      cw=[1,1]\n    elif len(liste)==2:\n      cw=[2,1]\n    else:\n      nliste=[0]\n      for i in range(len(liste)):\n        nliste=[liste[i]]+nliste\n      cw=[]\n      cpt=1\n      for i in range(len(nliste)-1):\n        if nliste[i]==nliste[i+1]:\n          cpt+=1\n        else:\n          cw+=[cpt]\n          cw+=[nliste[i]]\n          cpt=1\n    res=0\n    for i in range(len(cw)):\n      res+=cw[-i-1]*10**abs(-i)\n    return res", "user": "userdId_18", "attemptID": 3776, "exercise": "a580c32690609356dae4401b3c89a3b8", "exercise_name": "nextConway", "embeddingX": "44.317368", "embeddingY": "17.214542"},{"extension": "py", "date": "2020-03-07 02:39:48", "correct": "0", "upload": "def nbSyllabes(mot):\n  cpt=0\n  for i in range(0,len(mot)-1):\n    if (mot[i] in 'aeiouy') and not(mot[i+1] in 'aeiouy'):\n      cpt+=1\n  return cpt", "user": "userdId_6", "attemptID": 3777, "exercise": "1c86bec0f4df503e23db53994f3d2991", "exercise_name": "nbSyllabes", "embeddingX": "-29.657341", "embeddingY": "-69.54104"},{"extension": "py", "date": "2020-04-12 08:39:50", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n    cpt=0\n    x=nombre%10\n    decomp=nombre\n    while decomp!=0:\n      if x==chiffre:\n        cpt+=1\n        decomp=decomp//10\n        x=decomp%10\n      else:\n        decomp=decomp%10\n        x=decomp//10\n    if cpt==0:\n      cpt=1\n    return cpt", "user": "userdId_11", "attemptID": 3778, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "6.9789844", "embeddingY": "16.665098"},{"extension": "py", "date": "2020-03-05 21:40:01", "correct": "0", "upload": "def somme(liste):\n  res=0\n  for i in range (len(l)):\n    res=res+liste[i]\n    return res", "user": "userdId_25", "attemptID": 3779, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-43.98271", "embeddingY": "-40.657455"},{"extension": "py", "date": "2020-03-13 00:49:30", "correct": "1", "upload": "def sommeNPremiersEntiersPairs(n):\n    res = 0\n    for i in range(n+1):\n      if i%2 == 0:\n        res = res + i\n    return res", "user": "userdId_29", "attemptID": 3780, "exercise": "3030dc079e6607c253e89e8ef4784b74", "exercise_name": "sommeNPremiersEntiersPairs", "embeddingX": "29.667938", "embeddingY": "-11.85103"},{"extension": "py", "date": "2020-04-08 00:33:46", "correct": "0", "upload": "def sousChaine(s1,s2):\n  j=0\n  i=0\n  if s1=='':\n    res=True\n  while j<len(s2) and i<len(s1):\n    if s1[i]==s2[j]:\n      i=i+1\n    j=j+1\n  if len(s1)==i:\n    return True\n  else:\n    return False\n      ", "user": "userdId_19", "attemptID": 3781, "exercise": "a7cdd094daa2f0bfccc7a4ec419f7243", "exercise_name": "sousChaine", "embeddingX": "-27.253038", "embeddingY": "61.19955"},{"extension": "py", "date": "2020-03-08 21:36:50", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1==annee2 and mois1==mois2 and jour1==jour2:\n    return 0\n  elif annee1<=annee2 and mois1<=mois2 and jour1<jour2:\n    return -1\n  elif annee1>annee2 and mois1<=mois2 and jour1<jour2:\n    return -1\n  else:\n    return 1", "user": "userdId_1", "attemptID": 3782, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "86.31583", "embeddingY": "-14.488235"},{"extension": "py", "date": "2020-03-06 00:00:05", "correct": "0", "upload": "def moyenne(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=0\n    cpt=0\n    for elem in liste:\n      res= res+elem\n      cpt= cpt+1\n      res= res/cpt\n  return res\nassert moyenne([12,16,18,6,3,5])", "user": "userdId_13", "attemptID": 3783, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-2.9136677", "embeddingY": "-8.827216"},{"extension": "py", "date": "2020-04-11 07:37:50", "correct": "0", "upload": "def sousChaine(s1,s2):\n  res=True\n  i=0\n  j=0\n  while i!=j:\n    i+=1\n    j+=i  \n  while i<len(s1) and j<len(s2) and res:\n    if s1[i]==s2[j]:\n      res=True\n    i+=1\n  else:\n    res=False\n  return res", "user": "userdId_8", "attemptID": 3784, "exercise": "4bdf8c9c5d020593e1771e4d3ae1ae0d", "exercise_name": "sousChaine", "embeddingX": "-4.5596056", "embeddingY": "59.260216"},{"extension": "py", "date": "2020-03-10 04:28:08", "correct": "0", "upload": "def sommeNPremiersEntiersPairs(n):\n    res=0\n    for x in range(1,n+1,2):\n        if x%2==0:\n            res=res+x\n        else:\n            res=res-x  \n    return None", "user": "userdId_39", "attemptID": 3785, "exercise": "3030dc079e6607c253e89e8ef4784b74", "exercise_name": "sommeNPremiersEntiersPairs", "embeddingX": "31.328915", "embeddingY": "-13.499787"},{"extension": "py", "date": "2020-04-20 22:16:01", "correct": "1", "upload": "def  rechercheDicho(liste,val):\n  found=False\n  min=0\n  nbAcces=0\n  max=len(liste)-1\n  while min<max and not found:\n    acces=(min+max)//2\n    n=liste[acces]\n    nbAcces+=1\n    if n==val:\n      found=True\n    elif n<val:\n      min=acces+1\n    else:\n      max=acces-1\n  if found:\n    return (acces,nbAcces)\n  return (None,nbAcces)\n", "user": "userdId_6", "attemptID": 3786, "exercise": "434544c545ce211c7e57445707047bee", "exercise_name": "rechercheDicho", "embeddingX": "-2.6038523", "embeddingY": "65.69101"},{"extension": "py", "date": "2020-04-12 12:15:22", "correct": "1", "upload": "def verifSuiteAriGeo(liste,a,b):\n    if len(liste)==0:\n      res=True\n    else:\n      res=True\n      for i in range(1,len(liste)):\n        if liste[i]==a*liste[i-1]+b:\n          res=True\n        else:\n          res=False\n    return res", "user": "userdId_11", "attemptID": 3787, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-67.3737", "embeddingY": "18.564217"},{"extension": "py", "date": "2020-03-20 01:05:33", "correct": "1", "upload": "def distribution(liste,n):\n  res=[]\n  for i in range(0,n+1):\n    b=1\n    res.append(0)\n    for a in liste:\n      if a==i:\n        res[i]=b\n        b=b+1\n  return res", "user": "userdId_40", "attemptID": 3788, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "7.272954", "embeddingY": "-0.50802135"},{"extension": "py", "date": "2020-04-07 23:45:43", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  ok=None\n  i=0\n  while i<len(phrase)//2:\n    if phrase[i]==\" \" and phrase[-i]==\" \":\n      i+=1\n    elif phrase[i]==phrase[-i-1]:\n      ok=True\n      i+=1\n    else:\n      ok=False\n      i+=1\n  if phrase==\"\":\n    ok=True\n  return ok", "user": "userdId_13", "attemptID": 3789, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "28.905067", "embeddingY": "34.51414"},{"extension": "py", "date": "2020-03-24 06:14:05", "correct": "0", "upload": "def fusion(liste1,liste2):\n  res=liste1+liste2\n  res.sort()\n  return res", "user": "userdId_13", "attemptID": 3790, "exercise": "6613efb6c873b142dc2b6040c14eb616", "exercise_name": "fusion", "embeddingX": "-34.899662", "embeddingY": "16.436527"},{"extension": "py", "date": "2020-03-17 06:05:25", "correct": "0", "upload": "def distribution(liste,n):\n    res=[0]*n\n    for i in range(len(liste)):\n        if liste[i]==0:\n            res[0]=res[0]+1\n        elif liste[i]==1:\n            res[1]=res[1]+1\n        elif liste[i]==2:\n            res[2]=res[2]+1\n        else:\n            res[3]=res[3]+1\n    return res\n\n\n  \n  \n", "user": "userdId_28", "attemptID": 3791, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-16.830265", "embeddingY": "-58.21343"},{"extension": "py", "date": "2020-03-18 03:59:17", "correct": "1", "upload": "def permutationChaine(s):\n  res = ''\n  for i in range (0,len(s)-1,2):\n    res = res + s[i+1] + s[i]\n  if len(s)%2 != 0 :\n    res = res + s[-1]\n  return res", "user": "userdId_17", "attemptID": 3792, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-36.469162", "embeddingY": "-59.408916"},{"extension": "py", "date": "2020-03-06 00:25:18", "correct": "0", "upload": "def nbVoyelles(mot):\n  nb=0\n  for lettre in [\"a\",\"e\",\"i\",\"o\",\"u\",\"y\"]:\n    res=nb+1\n  return res\n  \n      \n  \n\n ", "user": "userdId_9", "attemptID": 3793, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-28.029068", "embeddingY": "-9.983122"},{"extension": "py", "date": "2020-04-06 15:25:05", "correct": "1", "upload": "def elemGeo(n,u0,q):\n    res = q**n * u0\n    return res", "user": "userdId_42", "attemptID": 3794, "exercise": "d7c83a7fb9b49e28804e55955ad06968", "exercise_name": "elemGeo", "embeddingX": "-38.890835", "embeddingY": "17.564705"},{"extension": "py", "date": "2020-03-03 00:10:59", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if jour1 < jour2 and mois1 <= mois2 and annee1 <= annee2:\n    res= -1\n  elif jour1 == jour2 and mois1 == mois2 and annee1 == annee2:\n    res= 0\n  else:\n    res= 1\n    \n  return res\n  \n ", "user": "userdId_7", "attemptID": 3795, "exercise": "af7c1467ef9f7684d9ff58734067ae98", "exercise_name": "compareDates", "embeddingX": "79.64552", "embeddingY": "-23.605087"},{"extension": "py", "date": "2020-03-10 21:42:45", "correct": "0", "upload": "def ecart(liste):\n  x=liste[0]\n  y=x\n  for i in range(1,len(liste)):\n    if liste[i]>x:\n      x=liste[i]\n    if liste[i]<y:\n      y=liste[i]\n  res=x-y\n  return res", "user": "userdId_14", "attemptID": 3796, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "0.6725547", "embeddingY": "-82.5048"},{"extension": "py", "date": "2020-04-10 01:08:27", "correct": "0", "upload": "def suiteAriGeo(liste):\n  i=0\n  while i<len(liste)-1:\n    if liste[0]!=0:\n      a=liste[1]/liste[0]\n      b=liste[i+1]-liste[i]*a\n      if liste[i+1]==liste[i]*a:\n        b=0\n    b=liste[1]-liste[0]\n    if liste[i+1]==liste[i]+b:\n      a=1\n    i=i+1\n  i=0\n  ok=True\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=a*liste[i]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 3797, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "33.35634", "embeddingY": "81.27507"},{"extension": "py", "date": "2020-04-12 06:47:18", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  if liste==[]:\n    res=True\n  c=[]\n  res=False\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n    c=[liste[0]*2]+c\n  return c", "user": "userdId_8", "attemptID": 3798, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-76.84687", "embeddingY": "22.57769"},{"extension": "py", "date": "2020-03-31 06:45:51", "correct": "0", "upload": "def nombreSymetrique(nombre):\n  res=stockerChiffres(nombre)\n  trouve=listeSymetrique(res)\n  return trouve", "user": "userdId_27", "attemptID": 3799, "exercise": "fae4d6a34289cf5bf06f9d6d17e8547e", "exercise_name": "nombreSymetrique", "embeddingX": "-43.282867", "embeddingY": "15.810985"},{"extension": "py", "date": "2020-03-28 04:36:37", "correct": "0", "upload": "def quatrePlus100(liste):\n    res=0\n    i=0\n    while i!=4 :\n      if len(liste)>100 :\n        res=res+liste[i]\n        i=i+1\n    return res", "user": "userdId_24", "attemptID": 3800, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "0.23790832", "embeddingY": "-51.081024"},{"extension": "py", "date": "2020-03-22 11:05:11", "correct": "0", "upload": "def bissextile(annee):\n    if a%4==0 and a%100!=0 or a%400==0:\n      res=True\n    else: \n      res=False\n    return res", "user": "userdId_21", "attemptID": 3801, "exercise": "a7d37636649c0ada991520788deeb2d0", "exercise_name": "bissextile", "embeddingX": "48.28321", "embeddingY": "4.7092295"},{"extension": "py", "date": "2020-04-08 04:31:59", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  for elem in nombre:\n    if elem==chiffre:\n      cpt+=1\n  return cpt\n\n", "user": "userdId_11", "attemptID": 3802, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-36.709602", "embeddingY": "-13.0194235"},{"extension": "py", "date": "2020-04-14 06:01:34", "correct": "0", "upload": "def indiceInsertion(sc,scores):\n  res=0\n  i=0\n  while i<=len(scores):\n    if sc>scores[i]:\n      res=i\n    i=i+1\n  return res\n", "user": "userdId_28", "attemptID": 3803, "exercise": "f8a820b2bd54d18d36716e3d703858f7", "exercise_name": "indiceInsertion", "embeddingX": "-31.308353", "embeddingY": "53.71259"},{"extension": "py", "date": "2020-03-17 21:09:10", "correct": "1", "upload": "def permutationListe(liste,permutation):\n  res=[0]*len(liste)\n  for elem,valeur in zip(permutation,liste):\n      res[elem]=valeur\n  return res", "user": "userdId_12", "attemptID": 3804, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-54.391525", "embeddingY": "-25.859236"},{"extension": "py", "date": "2020-04-12 11:08:37", "correct": "0", "upload": "def phrasePalindrome(phrase):\n    if len(phrase)==0:\n      res=True\n    else:\n      res=True\n      i=0\n      x=''\n      while i<len(phrase)//2 and res:\n        if phrase[i]==x:\n          phrase=phrase-phrase[i]\n          i+=1\n        else:\n          if phrase[i]!=phrase[-(i+1)]:\n            res=False\n          i+=1\n    return res", "user": "userdId_11", "attemptID": 3805, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "33.76555", "embeddingY": "34.9101"},{"extension": "py", "date": "2020-04-03 00:56:55", "correct": "1", "upload": "def doubleChiffre(Nombre):\n  i=0\n  prec=False\n  while Nombre!=0 and prec==False:\n    i=Nombre%10\n    Nombre=Nombre//10\n    if i==Nombre%10:\n      prec=True\n  return prec", "user": "userdId_5", "attemptID": 3806, "exercise": "c83ea6acd3e9f6f5543e87d515e8a44a", "exercise_name": "doubleChiffre", "embeddingX": "13.238885", "embeddingY": "20.144295"},{"extension": "py", "date": "2020-03-24 04:25:58", "correct": "0", "upload": "def compare(chaine1,chaine2):\n  res=0\n  cpt=0\n  i=0\n  while i<len(chaine1) and i<len(chaine2) and cpt!=2:\n    if chaine1[i]>chaine2[i]:\n      res=1\n      cpt=cpt+1\n    elif chaine1[i]<chaine2[i]:\n      res=-1\n      cpt=cpt+1\n    i=i+1\n    if res==0:\n      if len(chaine1)>len(chaine2):\n        res=1\n      else:\n        res=-1\n  return res", "user": "userdId_27", "attemptID": 3807, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-29.612541", "embeddingY": "66.2578"},{"extension": "py", "date": "2020-03-20 00:18:34", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  res=\"\"\n  if debut+longueur>len(s):\n    fin=len(s)\n  for i in range(debut,debutlongueur):\n    res=res+s[i]\n  else:\n    fin=debut+longueur\n  return res\n    ", "user": "userdId_34", "attemptID": 3808, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-73.645", "embeddingY": "11.01636"},{"extension": "py", "date": "2020-04-10 00:24:54", "correct": "0", "upload": "def suiteAriGeo(liste):\n  i=0\n  ok=True\n  while i<len(liste)-1:\n    a=liste[1]-liste[0]\n    b=liste[1]-liste[0]\n    if liste[i+1]==liste[i]*a:\n        b=0 and a==liste[1]/liste[0]\n    if liste[i+1]==liste[i]+b:\n      a=1 and b==liste[1]-liste[0]\n    i=i+1\n    i=0\n    if len(liste)==0 or len(liste)==1:\n      ok=True\n    while i<len(liste)-1 and ok:\n      if liste[i+1]!=a*liste[i]+b:\n        ok=False\n      i=i+1\n    return ok", "user": "userdId_1", "attemptID": 3809, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "32.184742", "embeddingY": "74.52877"},{"extension": "py", "date": "2020-03-23 22:49:03", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n    if jour1==jour2 and mois1==mois2 and annee1==annee2:\n      res=0\n    elif jour1!=jour2 or mois1!=mois2 or annee1!=annee2:\n      res=-1 \n    else:\n      res=1\n    return res", "user": "userdId_9", "attemptID": 3810, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "81.86217", "embeddingY": "-23.719376"},{"extension": "py", "date": "2020-03-31 04:09:31", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n  trouve=False\n  i=0\n  cpt=0\n  while i<len(l) and not trouve:\n    if l[i]==x:\n      cpt=cpt+1\n    if cpt==n:\n     trouve=True\n    i=i+1\n  if l==[]:\n    res=None\n  return res", "user": "userdId_50", "attemptID": 3811, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-0.791711", "embeddingY": "72.94808"},{"extension": "py", "date": "2020-04-05 07:27:46", "correct": "0", "upload": "def nbSyllabes(mot):\n  if mot=='':\n    cpt=0\n  else:\n    cpt=0\n    if mot[0] in 'aeiouy':\n      cpt+=1\n    for i in range(1,len(mot)):\n      if mot[i] in 'aeiouy' and mot[i-1] not in 'aeiouy':\n        cpt+=1\n    if mot[-1]=='e':\n      cpt-=1\n    if cpt==0:\n      cpt+=1\n  return cpt", "user": "userdId_18", "attemptID": 3812, "exercise": "1c86bec0f4df503e23db53994f3d2991", "exercise_name": "nbSyllabes", "embeddingX": "-24.658293", "embeddingY": "-69.98017"},{"extension": "py", "date": "2020-04-07 07:17:58", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=True\n  i=1\n  while i<len(liste):\n    if liste[i]!=a*liste[i-1]+b:\n      res=False\n    i+=1\n  return res\ndef suiteAriGeo(liste):\n  i=1\n  res=True\n  if len(liste)>3:\n    ecart1=liste[1]-liste[0]\n    ecart2=liste[2]-liste[1]\n    if ecart1>0:\n      a=ecart2/ecart1\n      b=liste[1]-a*liste[0]\n    while i<len(liste):\n      res=verifSuiteAriGeo(liste,a,b)\n      i+=1 \n  return res", "user": "userdId_27", "attemptID": 3813, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "16.195694", "embeddingY": "76.98461"},{"extension": "py", "date": "2020-03-30 22:47:03", "correct": "1", "upload": "def indiceOccurrence(n,x,l):\n  cpt=0\n  i=0\n  trouve=False\n  res=None\n  while i<len(l) and not trouve :\n    if l[i]==x :\n      cpt+=1\n      if cpt==n :\n        trouve=True\n        res=i\n    i+=1\n  \n  return res", "user": "userdId_15", "attemptID": 3814, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-1.5504394", "embeddingY": "69.78666"},{"extension": "py", "date": "2020-04-12 10:06:44", "correct": "0", "upload": "def phrasePalindrome(phrase):\n    if len(phrase)==0:\n      res=True\n    else:\n      res=True\n      i=0\n      x=''\n      while i<len(phrase)//2 and res:\n        if phrase[i]!=phrase[-(i+1)]:\n          res=False\n        i+=1\n      if x in phrase:\n          res=False\n    return res", "user": "userdId_11", "attemptID": 3815, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "33.286297", "embeddingY": "33.52249"},{"extension": "py", "date": "2020-03-09 06:25:26", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  \n  res=0\n  \n  for elem in jour1,mois1,annee1,jour2,mois2,annee2:\n    \n    if ('mois1','annee1')<('mois2,''annee2'):\n       res=res-1\n      \n    if ('mois1','annee1')==('mois2','annee2'):\n       res=res\n    \n    if ('mois','annee1')<('mois2','annee2'):\n       res=res+1\n      \n  return res", "user": "userdId_23", "attemptID": 3816, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "-15.016211", "embeddingY": "1.8715172"},{"extension": "py", "date": "2020-03-24 05:06:03", "correct": "0", "upload": "def fusion(liste1,liste2):\n    if liste1==[]:\n      res=liste2\n    elif liste2==[]:\n      res=liste1\n    else:\n      res=[]\n      res=[liste1]+[liste2]\n    res.sort()\n    return res", "user": "userdId_18", "attemptID": 3817, "exercise": "6613efb6c873b142dc2b6040c14eb616", "exercise_name": "fusion", "embeddingX": "-17.888624", "embeddingY": "-16.044325"},{"extension": "py", "date": "2020-03-16 05:35:18", "correct": "0", "upload": "def qualifJO(sexe,record,nbvictoires,champion):\n    if sexe=='M':\n      if (record<=12.0 and nbvictoires>=3) or champion==True:\n          res=True\n      else:\n          res=False\n    else:\n      if (record<=15.0 and nbvictoires>=3) or champion==True:\n        res=True\n      else:\n        res=False\n    return res", "user": "userdId_18", "attemptID": 3818, "exercise": "78ec7738f3a7f3553d4a5c653534c32d", "exercise_name": "qualifJO", "embeddingX": "63.725327", "embeddingY": "-9.323635"},{"extension": "py", "date": "2020-04-12 06:44:22", "correct": "0", "upload": "def phrasePalindrome(phrase):\n    if len(phrase)==0:\n      res=True\n    else:\n      res=True\n      i=0\n      while i<len(phrase)//2 and res:\n        if phrase[i]!=phrase[-(i+1)]:\n          res=False\n        if phrase[i]=='':\n            res=True\n        i+=1\n    return res", "user": "userdId_11", "attemptID": 3819, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "27.953913", "embeddingY": "36.16485"},{"extension": "py", "date": "2020-03-18 03:59:03", "correct": "0", "upload": "def permutationChaine(s):\n  res = ''\n  for i in range (0,len(s)-1,2):\n    res = res + s[i+1] + s[i]\n  if len(s)%2 != 0 :\n    res = res + s[-1]\n    return res", "user": "userdId_17", "attemptID": 3820, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-35.05496", "embeddingY": "-58.768707"},{"extension": "py", "date": "2020-04-05 08:49:58", "correct": "0", "upload": "def produitScalaire(vec1,vec2):\n  res=0\n  for i in range(4):\n    res=res+vec1[i]*vec2[i]\n  return res", "user": "userdId_26", "attemptID": 3821, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-63.637405", "embeddingY": "-16.514404"},{"extension": "py", "date": "2020-04-20 21:21:37", "correct": "0", "upload": "def rechercheDicho(liste,val):\n  nbAcces=0\n  index=None\n  found = False\n  acces=int(len(liste)/2)\n  while not found:\n    nbAcces+=1\n    if acces==val:\n      found=True\n    elif val<acces:\n        acces=int(acces/2)\n    else:\n      acces=int(len(liste)-(acces/2))\n  for i in liste:\n    if i == val:\n      index=i\n  return (index,nbAcces)", "user": "userdId_6", "attemptID": 3822, "exercise": "434544c545ce211c7e57445707047bee", "exercise_name": "rechercheDicho", "embeddingX": "-5.7018538", "embeddingY": "65.92346"},{"extension": "py", "date": "2020-04-07 10:33:52", "correct": "0", "upload": "def suiteAri(liste):\n  ok=True\n  i=0\n  while i<len(liste)-1 and ok:\n    r=liste[i+1]-liste[i]\n    if liste[i+1]-liste[i]!=r:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 3823, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "20.055231", "embeddingY": "59.609722"},{"extension": "py", "date": "2020-03-17 05:34:33", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  res=''\n  if debut+longueur>len(s):\n    res=debut+longueur\n  elif debut+longueur<len(s):\n    for i in range(debut,debut+longueur): \n      res=res+s[i]\n  return res", "user": "userdId_25", "attemptID": 3824, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-76.22467", "embeddingY": "15.715802"},{"extension": "py", "date": "2020-03-24 06:51:12", "correct": "0", "upload": "def fusion(liste1,liste2):\n  res=[]\n  i=0\n  while i<len(liste1)+len(liste2) and len(res)<len(liste1)+len(liste2):\n    if liste1[i]>liste2[i]:\n      res=res+[liste2[i]]\n    elif liste1[i]==[liste2[i]]:\n      res=res+[liste1[i]]+[liste2[i]]\n    else:\n      res=res+[liste1[i]]\n    i+=1\n  return res\n    \n", "user": "userdId_13", "attemptID": 3825, "exercise": "6613efb6c873b142dc2b6040c14eb616", "exercise_name": "fusion", "embeddingX": "-24.851416", "embeddingY": "54.37564"},{"extension": "py", "date": "2020-03-23 00:38:26", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=[]\n    for i in range(len(liste)):\n      res=liste[i]>res\n  return res", "user": "userdId_8", "attemptID": 3826, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-6.494947", "embeddingY": "-61.52546"},{"extension": "py", "date": "2020-04-06 03:44:46", "correct": "0", "upload": "def suiteAri(liste):\n  res=True\n  if len(liste)>1:\n    r=liste[1]-liste[0]\n    res=verifSuiteAriGeo(liste,1,r)\n  return res", "user": "userdId_6", "attemptID": 3827, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "-5.613776", "embeddingY": "-73.18307"},{"extension": "py", "date": "2020-03-31 04:14:14", "correct": "1", "upload": "def indiceOccurrence(n,x,l):\n  i=0\n  cpt=0\n  trouve=False\n  res=None\n  while i<len(l) and not trouve:\n    if x==l[i]:\n      cpt+=1  \n    if n==cpt:\n      trouve=True    \n    i+=1\n    res=i-1\n  if n!=cpt:\n    res=None\n  return res", "user": "userdId_27", "attemptID": 3828, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-1.6570711", "embeddingY": "67.68184"},{"extension": "py", "date": "2020-04-12 10:32:11", "correct": "0", "upload": "def elemGeo(n,u0,q):\n  q=0\n  for i in range(n):\n    q=q*n\n  res=u0*q\n  \n  return res", "user": "userdId_38", "attemptID": 3829, "exercise": "d7c83a7fb9b49e28804e55955ad06968", "exercise_name": "elemGeo", "embeddingX": "-27.503725", "embeddingY": "16.410078"},{"extension": "py", "date": "2020-04-08 01:28:51", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  if len(liste)<=1:\n    res=True\n  \n  return res", "user": "userdId_26", "attemptID": 3830, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "30.222538", "embeddingY": "-35.474144"},{"extension": "py", "date": "2020-03-06 00:53:22", "correct": "0", "upload": "def moyenne(liste):\n    res=0\n    y=0\n    x=0\n    for elem in liste : \n      y=y+1\n      x=x+elem\n      res=x/y\n    return res", "user": "userdId_24", "attemptID": 3831, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-22.175518", "embeddingY": "0.5885746"},{"extension": "py", "date": "2020-03-17 05:55:19", "correct": "0", "upload": "def permutationListe(liste,permutation):\n  res=[]\n  for i in liste:\n    res[i]=permutation[i]\n  return res", "user": "userdId_35", "attemptID": 3832, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-52.38395", "embeddingY": "-16.18351"},{"extension": "py", "date": "2020-04-06 09:39:08", "correct": "0", "upload": "def suiteGeo(liste):\n    if liste==[] or len(liste)==1:\n      ok=True\n    elif 0 in liste:\n      if liste[0]!=0:\n        ok=True\n      while 0 in liste:\n        liste.remove(0)\n      if liste==[]:\n        ok=True\n      else:\n        ok=False\n    else:\n      ok=True\n      i=1\n      while i<len(liste) and ok:\n        cte=liste[i]/liste[i-1]\n        if liste[0]*cte**i!=liste[i]:\n          ok=False\n        i+=1\n    return ok", "user": "userdId_18", "attemptID": 3833, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "41.561028", "embeddingY": "68.63128"},{"extension": "py", "date": "2020-04-21 02:33:47", "correct": "0", "upload": "def listeDecroissante(scores):\n    ok=True\n    i=0\n    while i<len(scores) and ok:\n      if scores[i]<scores[i+1]:\n        ok=False\n    return ok", "user": "userdId_11", "attemptID": 3834, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "19.518568", "embeddingY": "37.664604"},{"extension": "py", "date": "2020-04-06 08:56:14", "correct": "0", "upload": "def nbSyllabes(mot):\n  voy='aeiouy'\n  if mot=='':\n    cpt=0\n  else:\n    cpt=0\n    if mot[0] in voy:\n      cpt+=1\n    for i in range(1,len(mot)):\n      if mot[i] in voy and mot[i-1] not in voy:\n        cpt+=1\n    if mot[-1]=='e':\n      cpt-=1\n    if cpt==0:\n      cpt+=1\n  return cpt", "user": "userdId_18", "attemptID": 3835, "exercise": "6d4e6a658243ba03c0794d044416daf2", "exercise_name": "nbSyllabes", "embeddingX": "-23.482605", "embeddingY": "-71.285164"},{"extension": "py", "date": "2020-04-07 23:59:34", "correct": "0", "upload": "def suiteGeo(liste):\n  ok=True\n  i=0\n  if len(liste)<=1 :\n    ok=True\n  else :\n    while i<(len(liste)-1) and ok :\n      if liste[0]==0 :\n        Q=0\n      else :\n        Q=(liste[i+1]/liste(i))\n      if liste[i+1]!=(Q*liste[i]):\n        ok=False\n      i+=1\n  return ok", "user": "userdId_15", "attemptID": 3836, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "25.597536", "embeddingY": "69.50247"},{"extension": "py", "date": "2020-05-04 21:13:23", "correct": "0", "upload": "def nombrePair(n):\n  res=False\n  if elem%2==0:\n    res=True\n  return res", "user": "userdId_8", "attemptID": 3837, "exercise": "3001254263845e9a478696f81a704d33", "exercise_name": "nombrePair", "embeddingX": "34.53015", "embeddingY": "-6.979353"},{"extension": "py", "date": "2020-04-14 04:00:54", "correct": "0", "upload": "def listeDecroissante(scores):\n  ok=True\n  while i<len(scores) and ok:\n    if liste[i]>liste[i+1]:\n      res=ok\n    else:\n      res=False\n  return res", "user": "userdId_21", "attemptID": 3838, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "-1.5043716", "embeddingY": "40.309444"},{"extension": "py", "date": "2020-03-13 00:52:21", "correct": "0", "upload": "def sommeNPremiersEntiers(n):\n  if n<0:\n    return 0\n  else:\n    res=0\n  for elem in (n):\n    res=res+elem\n  return res\n      \n    ", "user": "userdId_1", "attemptID": 3839, "exercise": "c315a540cf0bfb0182dc114c6f0eafd1", "exercise_name": "sommeNPremiersEntiers", "embeddingX": "40.588684", "embeddingY": "-52.800503"},{"extension": "py", "date": "2020-03-05 23:50:38", "correct": "0", "upload": "def maximum(liste):\n    max=0\n    for elem in range(1, len(liste)):\n      if len[liste] >max:\n        max=l[liste]\n    return max    \n      \n   \n    ", "user": "userdId_46", "attemptID": 3840, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "9.263574", "embeddingY": "-74.38035"},{"extension": "py", "date": "2020-03-31 04:06:39", "correct": "1", "upload": "def indiceOccurrence (n,x,l):\n  verif = False\n  i = 0\n  cpt = 0\n  res = -1\n  while i <len(l) and verif == False :\n    res = res + 1\n    if l[i] == x :\n      cpt = cpt + 1  \n    if n == cpt :\n      verif = True\n    i = i + 1\n    \n  if verif == False :\n    res = None\n  return res", "user": "userdId_17", "attemptID": 3841, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "0.65112096", "embeddingY": "74.25442"},{"extension": "py", "date": "2020-03-17 21:00:57", "correct": "0", "upload": "def permutationListe(liste,permutation):\n  res=[0]*len(liste)\n  for elem in permutation:\n    for i in range(len(liste)):\n      res[elem]=liste[i]\n  return res", "user": "userdId_12", "attemptID": 3842, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-52.542694", "embeddingY": "-29.253439"},{"extension": "py", "date": "2020-04-06 15:16:24", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  i=0\n  for i in range(nombre):\n    cpt=cpt+1\n    i=i+1\n  return cpt", "user": "userdId_3", "attemptID": 3843, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-37.664845", "embeddingY": "-14.756141"},{"extension": "py", "date": "2020-03-02 02:53:34", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1<=annee2 and jour1<jour2 and mois1<=mois2:\n    return -1\n  elif annee1==annee2 and jour1==jour2 and mois1==mois2:\n    return 0\n  else:\n    return 1\n  \ncompareDates(10,1,2020,14,2,2020)\ncompareDates(14,2,2020,11,2,2020)\ncompareDates(10,1,2020,10,1,2020)", "user": "userdId_1", "attemptID": 3844, "exercise": "af7c1467ef9f7684d9ff58734067ae98", "exercise_name": "compareDates", "embeddingX": "87.83791", "embeddingY": "-13.923509"},{"extension": "py", "date": "2020-04-06 14:42:09", "correct": "0", "upload": "def produitScalaire(vec1,vec2):\n  res=0\n  i=0\n  j=0\n  while i<len(vec1) and j<len(vec2):\n    res=res+vec1[i]*vec2[j]\n  return res", "user": "userdId_3", "attemptID": 3845, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-14.273539", "embeddingY": "51.09733"},{"extension": "py", "date": "2020-03-06 00:12:52", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    return None\n  cpt=0\n  for elem in (mot)=='aeiouy':\n    cpt=cpt+1\n  return cpt", "user": "userdId_1", "attemptID": 3846, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "2.9735944", "embeddingY": "-44.09658"},{"extension": "py", "date": "2020-04-06 22:41:07", "correct": "0", "upload": "def motPalindrome(mot):\n    if len(mot)==0:\n      res=True\n    else:\n      res=True\n      i=0\n      while i<len(mot) and res==True:\n        if mot[i//2]==mot[-i//2]:\n          res=True\n          i+=1\n        if mot[i//2]!=mot[-i//2]:\n          res=False\n    return res\n", "user": "userdId_11", "attemptID": 3847, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "27.456903", "embeddingY": "43.269566"},{"extension": "py", "date": "2020-04-07 04:23:55", "correct": "1", "upload": "def suiteAri(liste):\n  i=0\n  res=True\n  while i<len(liste)-1 and res==True:\n    r=liste[1]-liste[0]\n    if liste[i+1]-liste[i]==r:\n      res=True\n    else:\n      res=False\n    i+=1\n  return res", "user": "userdId_26", "attemptID": 3848, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "33.18674", "embeddingY": "52.94032"},{"extension": "py", "date": "2020-03-17 05:50:44", "correct": "0", "upload": "def reconstruireChainePartielle(s,n):\n    res=''\n    for i in range(0,len(s),n):\n      res=s[i]\n    return res\n  ", "user": "userdId_11", "attemptID": 3849, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-59.243668", "embeddingY": "-42.600597"},{"extension": "py", "date": "2020-04-07 23:49:13", "correct": "0", "upload": "def motPalindrome(mot):\n  ok=True\n  i=0 \n  while i<len(mot)//2 and ok:\n    if mot[i]!=mot[-i-1]:\n      ok=False\n    i+=1\n    return ok", "user": "userdId_32", "attemptID": 3850, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "24.486694", "embeddingY": "37.24858"},{"extension": "py", "date": "2020-04-06 06:35:20", "correct": "0", "upload": "def motPalindrome(mot):\n  ok=True\n  i=0\n  j=len(mot)-1\n  while i<len(mot) and ok:\n    if mot[i]!=mot[j]:\n      ok=False\n    i=i+1\n    j=j+1\n  return ok", "user": "userdId_3", "attemptID": 3851, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "20.746", "embeddingY": "59.322994"},{"extension": "py", "date": "2020-04-11 00:39:53", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  c=True\n  if len(liste)==0:\n    c=True\n  elif 0 in liste:\n    c=False\n  else:\n    while i<(len(liste)-2) and c:\n      if liste[i+2]/liste[i+1]!=liste[i+1]/liste[i]:\n        c=False\n      i=i+1\n  return c", "user": "userdId_19", "attemptID": 3852, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "28.717705", "embeddingY": "56.18811"},{"extension": "py", "date": "2020-03-17 06:20:22", "correct": "0", "upload": "def permutationChaine(s):\n  res=''\n  for i in range(0,len(s)+1,2):\n    res=res+s[1+i]+s[i]\n  if len(s)%2!=0:\n    res=res+s[i]\n  return res", "user": "userdId_25", "attemptID": 3853, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-46.948673", "embeddingY": "-47.655594"},{"extension": "py", "date": "2020-03-15 21:33:08", "correct": "0", "upload": "def qualifJO(sexe,record,nbvictoires,champion):\n  if champion==True:\n    res=True\n  elif sexe=='M' and record<12.0 and nbvictoires>=3:\n    res=True\n  elif sexe=='F' and record<15.0 and nbvictoires>=3:\n    res=True\n  else:\n    res=False\n  return res", "user": "userdId_32", "attemptID": 3854, "exercise": "78ec7738f3a7f3553d4a5c653534c32d", "exercise_name": "qualifJO", "embeddingX": "63.97746", "embeddingY": "-10.849567"},{"extension": "py", "date": "2020-03-20 00:09:46", "correct": "0", "upload": "def permutationChaine(s):\n  res=\"\"\n  for i in range(0,len(s),2):\n    if s[i+1]==\" \":\n      res=res+s[i+1]+s[i]\n    if len(s)%2!=0:\n      res=res+s[-1]\n  return res\n\n", "user": "userdId_13", "attemptID": 3855, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-31.989822", "embeddingY": "-60.34404"},{"extension": "py", "date": "2020-03-02 02:54:26", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1<=annee2 and mois1<=mois2 and jour1<jour2:\n    return -1\n  elif annee1==annee2 and mois1==mois2 and jour1==jour2:\n    return 0\n  else:\n    return 1\n  \ncompareDates(10,1,2020,14,2,2020)\ncompareDates(14,2,2020,11,2,2020)\ncompareDates(10,1,2020,10,1,2020)", "user": "userdId_1", "attemptID": 3856, "exercise": "af7c1467ef9f7684d9ff58734067ae98", "exercise_name": "compareDates", "embeddingX": "87.977974", "embeddingY": "-13.138749"},{"extension": "py", "date": "2020-03-17 06:27:25", "correct": "0", "upload": "def maximum(liste):\n    if len(liste)==0:\n      res=0\n    else:\n      res=liste[0]\n    for elem in liste:\n      res=elem\n    return res", "user": "userdId_22", "attemptID": 3857, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "7.040675", "embeddingY": "-39.41725"},{"extension": "py", "date": "2020-03-24 05:01:06", "correct": "1", "upload": "def compare(chaine1,chaine2):\n  res=0\n  i=0\n  cpt=0\n  while i<len(chaine1) and i<len(chaine2) and cpt!=2:\n    if chaine1[i]>chaine2[i]:\n      res=1\n      cpt=cpt+1\n    elif chaine1[i]<chaine2[i]:\n      res=-1\n      cpt=cpt+1\n    i=i+1\n  if res==0:\n    if len(chaine1)>len(chaine2):\n      res=1\n    elif len(chaine1)==len(chaine2):\n      res=0\n    else:\n      res=-1\n  return res\n  ", "user": "userdId_21", "attemptID": 3858, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-29.582941", "embeddingY": "66.245995"},{"extension": "py", "date": "2020-04-14 03:26:54", "correct": "0", "upload": "def listeDecroissante(scores):\n  scorePrec=scores[0]\n  ok=True\n  i=1\n  while i<len(scores) and ok:\n    if scorePrec<=scores[i]:\n      ok=False\n      i+=1\n  return ok", "user": "userdId_18", "attemptID": 3859, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "17.93593", "embeddingY": "37.53628"},{"extension": "py", "date": "2020-03-06 23:51:06", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  res=True or False\n  if fin1>=debut2:\n    if debut1>=debut2 or fin1<=fin2:\n      res=True\n  else:\n    res=False\n  return res", "user": "userdId_8", "attemptID": 3860, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "55.183376", "embeddingY": "-20.689865"},{"extension": "py", "date": "2020-03-10 04:04:18", "correct": "1", "upload": "def sommeNPremiersEntiers(n):\n    res=0\n    for i in range(n,0,-1):\n      res=res+i\n    return res", "user": "userdId_18", "attemptID": 3861, "exercise": "c315a540cf0bfb0182dc114c6f0eafd1", "exercise_name": "sommeNPremiersEntiers", "embeddingX": "-18.813452", "embeddingY": "8.38066"},{"extension": "py", "date": "2020-04-06 06:15:18", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  for i in nombre:\n    if chiffre==nombre[i]:\n      cpt=cpt+1\n    i=i+1\n  return cpt", "user": "userdId_3", "attemptID": 3862, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-36.643353", "embeddingY": "-12.901442"},{"extension": "py", "date": "2020-03-03 06:15:43", "correct": "0", "upload": "def nbVoyelles(mot):\n  res=0\n  for c in range(len(mot)):\n    if c in \"aeiouy\":\n      res=res+1\n    else:\n      res=0\n  return res", "user": "userdId_35", "attemptID": 3863, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-6.0467563", "embeddingY": "-47.77126"},{"extension": "py", "date": "2020-03-06 00:00:05", "correct": "0", "upload": "def somme(liste):\n  res=0\n  for elem in list :\n    res=res+elem\n  return res", "user": "userdId_20", "attemptID": 3864, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-31.19758", "embeddingY": "-13.090483"},{"extension": "py", "date": "2020-03-05 21:53:57", "correct": "1", "upload": "def somme(liste):\n    res = 0\n    for elem in liste:\n    \tres = res + elem\n    return res", "user": "userdId_29", "attemptID": 3865, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-30.172531", "embeddingY": "1.7292584"},{"extension": "py", "date": "2020-04-12 10:09:08", "correct": "0", "upload": "def phrasePalindrome(phrase):\n    if len(phrase)==0:\n      res=True\n    else:\n      res=True\n      i=0\n      x=''\n      while i<len(phrase) and res:\n        if phrase[i]!=phrase[-(i+1)] or phrase[i]==x:\n          res=False\n        i+=1\n    return res", "user": "userdId_11", "attemptID": 3866, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "31.145409", "embeddingY": "30.411774"},{"extension": "py", "date": "2020-04-07 05:40:03", "correct": "0", "upload": "def suiteAri(liste):\n  ok=True\n  i=0\n  if len(liste)==0:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=liste[0]+(liste[1]-liste[0])*liste[i]:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 3867, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "19.311377", "embeddingY": "53.523342"},{"extension": "py", "date": "2020-04-06 15:20:15", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  i=0\n  for i in (nombre):\n    if nombre[i]==chiffre:\n      cpt=cpt+1\n    i=i+1\n  return cpt", "user": "userdId_3", "attemptID": 3868, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-36.547146", "embeddingY": "-13.964749"},{"extension": "py", "date": "2020-04-08 02:43:34", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  res=True\n  while i<len(liste) and res==True:\n    if liste[i]!=0:\n      listetest=[liste[0]]\n      q=liste[1]/liste[0]\n      u=liste[0]*q**i\n      listetest=listetest+u\n    else:\n      res=False\n    if liste[i]==listetest[i]:\n      res=True\n    else:\n      res=False\n  return res", "user": "userdId_26", "attemptID": 3869, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "35.451725", "embeddingY": "69.21899"},{"extension": "py", "date": "2020-04-08 00:14:48", "correct": "0", "upload": "def sousChaine(s1,s2):\n  res=None\n  if si in s2:\n    res=True\n  else:\n    res=False\n  return res", "user": "userdId_13", "attemptID": 3870, "exercise": "a7cdd094daa2f0bfccc7a4ec419f7243", "exercise_name": "sousChaine", "embeddingX": "8.384397", "embeddingY": "-17.682428"},{"extension": "py", "date": "2020-03-10 03:16:45", "correct": "0", "upload": "def jourNuit(heure):\n    if heure<0 or heure>24:\n      res=\"l'heure saisie est invalide\"\n    else:\n      if heure<5 or heure>21:\n        res=\"on est la nuit\"\n      elif heure<12:\n        res=\"on est le matin\"\n      elif heure<17:\n        res=\"on est l'apres midi\"\n      else:\n        res=\"on est la nuit\"\n      if heure<6 or heure>=18:\n        res=res+\" et il fait nuit\"\n      else:\n        res=res+\" et il fait jour\"\n    return res", "user": "userdId_9", "attemptID": 3871, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "72.27276", "embeddingY": "12.966676"},{"extension": "py", "date": "2020-03-04 05:10:43", "correct": "0", "upload": "def maximum(liste):\n    if len(liste)==0:\n      res=None\n    else:\n      res=liste[0]\n      for i in range(1,len(liste)):\n        if i>res:\n          res=i\n    return res", "user": "userdId_18", "attemptID": 3872, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "1.6084912", "embeddingY": "-59.874195"},{"extension": "py", "date": "2020-03-31 08:23:50", "correct": "0", "upload": "def prononcable(mot):\n    if len(mot)==0:\n      res=True\n    else:\n      res=False\n      for i in range(len(mot)):\n        if (mot[i] in 'aeiouy'):\n          res=True\n    return res\n  \n                                     ", "user": "userdId_11", "attemptID": 3873, "exercise": "6318b210c201fba050d60bc0913cb7ef", "exercise_name": "prononcable", "embeddingX": "-23.674686", "embeddingY": "-66.033775"},{"extension": "py", "date": "2020-03-09 22:09:00", "correct": "0", "upload": "def bissextile(annee):\n  if annee%100>0:\n    if annee%4==0 and annee%400==0:\n      res=False\n  else:\n    res=True\n  return res", "user": "userdId_12", "attemptID": 3874, "exercise": "a7d37636649c0ada991520788deeb2d0", "exercise_name": "bissextile", "embeddingX": "47.294937", "embeddingY": "-2.9032593"},{"extension": "py", "date": "2020-03-03 05:39:25", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    for i in range(len(liste)):\n      res=range[0]\n      if liste[i]>res:\n        res=liste[i]\n  return res", "user": "userdId_8", "attemptID": 3875, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "4.971573", "embeddingY": "-51.10078"},{"extension": "py", "date": "2020-03-05 21:54:25", "correct": "1", "upload": "def somme(liste):\n  res=0\n  for elem in liste:\n    res=res+elem\n  return res", "user": "userdId_30", "attemptID": 3876, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-29.57021", "embeddingY": "2.7280428"},{"extension": "py", "date": "2020-03-03 06:09:42", "correct": "0", "upload": "def nbVoyelles(mot):\n  res=0\n  for c in range(len(mot)):\n    if c in [\"aeiouy\"]:\n      res=res+1\n    else:\n      res=0\n  return res", "user": "userdId_35", "attemptID": 3877, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-2.9411805", "embeddingY": "-50.002884"},{"extension": "py", "date": "2020-03-31 06:00:02", "correct": "0", "upload": "def stockerChiffres(nombre):\n  res=[]\n  while nombre!=0:\n    nombre=nombre//10\n    res=nombre+res\n  if nombre==0:\n    res=res+0\n  return res", "user": "userdId_9", "attemptID": 3878, "exercise": "49a87f644f84a443327fb4315b47f249", "exercise_name": "stockerChiffres", "embeddingX": "33.124767", "embeddingY": "11.335779"},{"extension": "py", "date": "2020-03-17 05:20:59", "correct": "1", "upload": "def permutationChaine(s):\n  res=\"\"\n  for i in range(0,len(s)-1,2):\n    res=res+s[1+i]+s[i]\n  if len(s)%2!=0:\n    res=res+s[-1]\n  return res", "user": "userdId_35", "attemptID": 3879, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-35.514896", "embeddingY": "-58.660275"},{"extension": "py", "date": "2020-03-20 00:30:59", "correct": "1", "upload": "def sousChaine(s,debut,longueur):\n  res=\"\"\n  fin=debut+longueur\n  if fin>len(s):\n    fin=len(s)\n  for i in range(debut,fin):\n    res=res+s[i]\n  return res\n    ", "user": "userdId_34", "attemptID": 3880, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-79.29894", "embeddingY": "23.941677"},{"extension": "py", "date": "2020-03-02 23:45:04", "correct": "0", "upload": "def semestreValide(ue1,ue2):\n  if ue1 < 10 :\n    if ue2 >= 10 :\n    \tres = True\n    else :\n    \tres = False \n  else :\n    if ue2 >= 10 :\n    \tres = True\n    else :\n    \tres = False\n      \n  return res", "user": "userdId_17", "attemptID": 3881, "exercise": "70ae7ad6cf504e0fa8cedebd8e8a825f", "exercise_name": "semestreValide", "embeddingX": "66.470764", "embeddingY": "-2.0122046"},{"extension": "py", "date": "2020-03-24 06:49:49", "correct": "0", "upload": "def fusion(liste1,liste2):\n  res=[]\n  i=0\n  while i<len(liste1)+len(liste2) and len(res)<len(liste1)+len(liste2):\n    if liste1[i]<liste2[i]:\n      res=res+[liste1[i]]\n    elif liste1[i]==liste2[i]:\n      res=res+[liste1[i]]+[liste2[i]]\n    else:\n      res=res+[liste2[i]]\n    i=i+1\n  return res", "user": "userdId_26", "attemptID": 3882, "exercise": "6613efb6c873b142dc2b6040c14eb616", "exercise_name": "fusion", "embeddingX": "-25.377821", "embeddingY": "53.073936"},{"extension": "py", "date": "2020-03-06 00:05:13", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    res=0\n  else:\n    for elem in mot:\n      res=0\n      if elem in 'a':\n        res=res+1\n  return res     ", "user": "userdId_14", "attemptID": 3883, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "5.5325356", "embeddingY": "-29.684128"},{"extension": "py", "date": "2020-04-05 22:50:54", "correct": "0", "upload": "def produitScalaire(vec1,vec2):\n  res=0\n  i=0\n  while i<len(vec1) and i<len(vec2) :\n    res= res+(vec1[elem]*vec2[elem])\n  return res", "user": "userdId_15", "attemptID": 3884, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-15.80564", "embeddingY": "50.194942"},{"extension": "py", "date": "2020-04-14 00:19:26", "correct": "0", "upload": "def nbOccurrencesJoueur(joueurs,nom):\n  cpt=0\n  for elem in joueurs:\n    if joueurs==nom:\n      cpt+=1\n  return cpt", "user": "userdId_8", "attemptID": 3885, "exercise": "00ee5faf82e54951fbdb2ba2656f7ae7", "exercise_name": "nbOccurrencesJoueur", "embeddingX": "-11.51111", "embeddingY": "-27.160677"},{"extension": "py", "date": "2020-04-12 09:56:32", "correct": "0", "upload": "def suiteAriGeo(liste):\n  i=0\n  while i<len(liste)-1:\n    a=liste[0]\n    b=liste[0]\n    if liste[i+1]==liste[i]+(liste[1]-liste[0]):\n      b=liste[1]-liste[0]\n    if liste[0]!=0:                        \n      if liste[i+1]==liste[i]*liste[1]/liste[0]:\n        a=liste[1]/liste[0]\n        b=0\n    if liste[i+1]==liste[i]*(liste[1]-liste[0])+(liste[i]-(liste[i]*(liste[i-1]-liste[0]))):\n      a=liste[1]-liste[0]\n      b=liste[i]-(liste[i-1]*a)\n    i=i+1\n  ok=True\n  i=0\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=a*liste[i]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 3886, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "35.127354", "embeddingY": "84.1771"},{"extension": "py", "date": "2020-03-31 05:40:56", "correct": "0", "upload": "def nbChiffres(nombre):\n  res=0\n  nb=nombre\n  cpt=0\n  while nb!=0:\n    cpt=cpt+1\n    nb=nb//10\n  return cpt\n    \n    ", "user": "userdId_28", "attemptID": 3887, "exercise": "3dcf332c003a1f3bf15df22ee17884a3", "exercise_name": "nbChiffres", "embeddingX": "0.44199553", "embeddingY": "18.215042"},{"extension": "py", "date": "2020-03-02 02:52:57", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1<=annee2 and jour1<jour2 and mois1<=mois2:\n    return -1\n  elif annee1!=annee2 and jour1!=jour2 and mois1!=mois2:\n    return 0\n  else:\n    return 1\n  \ncompareDates(10,1,2020,14,2,2020)\ncompareDates(14,2,2020,11,2,2020)\ncompareDates(10,1,2020,10,1,2020)", "user": "userdId_1", "attemptID": 3888, "exercise": "af7c1467ef9f7684d9ff58734067ae98", "exercise_name": "compareDates", "embeddingX": "88.38695", "embeddingY": "-17.206753"},{"extension": "py", "date": "2020-04-06 02:08:07", "correct": "0", "upload": "def produitScalaire(vec1,vec2):\n  if vec1 == []:\n    coordvec1 = [0,0]\n  if vec2 == []:\n    coordvec2 = [0,0]\n  else :\n    coordvec1 = [vec1[0]-vec1[2],vec1[3]-vec1[1]]\n    coordvec2 = [vec2[0]-vec2[2],vec2[3]-vec2[1]]\n  res = coordvec1[0]*coordvec2[0]+coordvec1[1]*coordvec2[1]\n  return res", "user": "userdId_17", "attemptID": 3889, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-22.03153", "embeddingY": "-16.542383"},{"extension": "py", "date": "2020-03-22 09:13:36", "correct": "0", "upload": "def moyenne(liste):\n  if liste==():\n    res=none\n  else:\n    x=0\n    for i in range (len(liste)):\n      x=x+liste[i]\n    res=x/len(liste)\n  return res", "user": "userdId_16", "attemptID": 3890, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-12.336295", "embeddingY": "-6.2839622"},{"extension": "py", "date": "2020-03-18 04:02:02", "correct": "0", "upload": "def distribution(liste,n):\n  res = [0]*(n+1)\n  for elem in l :\n    res[elem] = res[elem]+1\n    return res", "user": "userdId_17", "attemptID": 3891, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-59.383526", "embeddingY": "-12.608416"},{"extension": "py", "date": "2020-04-06 03:43:54", "correct": "1", "upload": "def sousChaine(s1,s2):\n  i=0\n  j=0\n  while i<len(s2) and j<len(s1):\n    if s1[j]==s2[i]:\n      j+=1\n    else:\n      j=0\n    i+=1\n  return j==len(s1)", "user": "userdId_6", "attemptID": 3892, "exercise": "a7cdd094daa2f0bfccc7a4ec419f7243", "exercise_name": "sousChaine", "embeddingX": "-18.38966", "embeddingY": "66.39576"},{"extension": "py", "date": "2020-03-17 06:43:16", "correct": "1", "upload": "def premiereOccurrenceLettre(lettre,mot):\n  res=0\n  for i in range(0,len(mot)):\n    if mot[i]==lettre:\n      res=i\n      return res", "user": "userdId_7", "attemptID": 3893, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-20.444677", "embeddingY": "-39.85046"},{"extension": "py", "date": "2020-04-06 15:23:40", "correct": "1", "upload": "def elemAri(n,u0,r):\n    res = u0 + n*r\n    return res\n", "user": "userdId_42", "attemptID": 3894, "exercise": "f239498950e974e29e01472749d9a09d", "exercise_name": "elemAri", "embeddingX": "-35.588997", "embeddingY": "18.649542"},{"extension": "py", "date": "2020-03-06 00:13:20", "correct": "0", "upload": "def nbVoyelles(mot,voyel):\n  if len(mot)==0:\n    voy=None\n  if len(voyel)==0:\n    voyel=None\n  else:\n    voy=0\n    for i in range(len(liste)):\n      if voyel[i]==liste[i]:\n        voy=voy+1\n  return None", "user": "userdId_13", "attemptID": 3895, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-49.897293", "embeddingY": "6.6057806"},{"extension": "py", "date": "2020-03-07 01:01:12", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut1>=debut2:\n    res=True\n    if fin1<=fin2:\n      res=True\n      if fin1>=debut2:\n        res=True\n  else:\n    res=False\n  return res", "user": "userdId_8", "attemptID": 3896, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "52.153732", "embeddingY": "-20.215307"},{"extension": "py", "date": "2020-04-12 12:04:10", "correct": "0", "upload": "def suiteGeo(liste):\n    if len(liste)==0 or len(liste)==1:\n      res=True\n    else:\n      res=True\n      for i in range(1,len(liste)):\n        if liste[i-1]==0:\n          res=False\n        else:\n          x=liste[1]//liste[0]\n          if liste[i]==liste[i-1]*x:\n            res=True\n          else:\n            res=False\n    return res", "user": "userdId_11", "attemptID": 3897, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "-13.905287", "embeddingY": "-82.225235"},{"extension": "py", "date": "2020-03-31 03:02:33", "correct": "0", "upload": "def fusion(liste1,liste2):\n  res=[]\n  i=0\n  j=0\n  while i<len(liste1) and j<len(liste2):\n    if liste1[i]>liste2[j]:\n      res.append(liste2[j])\n      j=j+1\n    else: \n      res.append(liste1[i])\n      i=i+1\n    return res", "user": "userdId_21", "attemptID": 3898, "exercise": "6613efb6c873b142dc2b6040c14eb616", "exercise_name": "fusion", "embeddingX": "-38.022026", "embeddingY": "47.858364"},{"extension": "py", "date": "2020-03-31 03:06:43", "correct": "1", "upload": "def fusion(liste1,liste2):\n  res=[]\n  i=0\n  j=0\n  while i<len(liste1) and j<len(liste2):\n    if liste1[i] < liste2[j]:\n      res.append (liste1[i])\n      i=i+1\n    else:\n      res.append (liste2[j])\n      j=j+1\n  while i<len(liste1):\n    res.append(liste1[i])\n    i=i+1\n  while j<len(liste2):\n    res.append(liste2[j])\n    j=j+1\n  return res", "user": "userdId_31", "attemptID": 3899, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-39.532536", "embeddingY": "49.284023"},{"extension": "py", "date": "2020-03-17 06:22:10", "correct": "1", "upload": "def permutationChaine(s):\n  res=''\n  for i in range(0,len(s)-1,2):\n    res=res+s[1+i]+s[i]\n  if len(s)%2!=0:\n    res=res+s[-1]\n  return res", "user": "userdId_25", "attemptID": 3900, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-35.153763", "embeddingY": "-58.297836"},{"extension": "py", "date": "2020-03-23 21:54:46", "correct": "0", "upload": "def quatrePlus100(l):\n  res=[]\n  for i in range (4):\n    if (l[i]>100):\n      res.append(l[i])\n    return res", "user": "userdId_48", "attemptID": 3901, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-8.384656", "embeddingY": "-65.05207"},{"extension": "py", "date": "2020-04-13 21:34:50", "correct": "0", "upload": "def suiteAri(liste):\n  res=True\n  if len(liste)>1:\n    r=liste[1]-liste[0]\n    res=True\n    n=1\n    while n<len(liste) and ok:\n      if liste[n]!=liste[n-1]*1+r:\n        ok=False\n      n+=1\n  return res", "user": "userdId_8", "attemptID": 3902, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "12.025335", "embeddingY": "55.814587"},{"extension": "py", "date": "2020-03-12 23:46:52", "correct": "0", "upload": "def jourNuit(heure):\n  res=[]\n  if heure<0:\n    res=\"l'heure saisie est invalide\"\n  if heure>24:\n    res=\"l'heure saisie est invalide\"\n  if 6<=heure<=18:\n    if 5<=heure<=12:\n      res=\"on est le matin et il fait jour\"\n    if 12<=heure<=17:\n      res=\"on est l'apr\u00e8s-midi et il fait jour\"\n    if 17<=heure<=18:\n      res=\"on est le soir et il fait jour\"\n  if 1<=heure<=5 or 19<=heure<=24:\n    if 1<=heure<=4:\n      res=\"on est la nuit et il fait nuit\"\n    if 21<=heure<=24:\n      res=\"on est la nuit et il fait nuit\"\n    if 19<=heure<=20:\n      res=\"on est le soir et il fait nuit\"\n    return res", "user": "userdId_13", "attemptID": 3903, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "69.55938", "embeddingY": "23.450033"},{"extension": "py", "date": "2020-03-31 04:00:19", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n  cpt=0\n  i=0\n  while i<len(l):\n    if l[i]==x:\n      cpt+=1\n      i+=1\n    else:\n      i+=1\n  if cpt!=n:\n    res=None\n  else:\n    res=cpt\n  return res", "user": "userdId_13", "attemptID": 3904, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-10.267474", "embeddingY": "71.83624"},{"extension": "py", "date": "2020-03-27 06:10:01", "correct": "0", "upload": "def compare(chaine1,chaine2):\n  i=0\n  while res==0 and i<len(chaine1) and i<len(chaine2):\n    if chaine1[i]<chaine2[i]:\n      res=-1\n    elif chaine1[i]>chaine2[i]:\n      res=1\n    else:\n      res=0\n    i=i+1\n  return res", "user": "userdId_12", "attemptID": 3905, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-11.419929", "embeddingY": "42.695408"},{"extension": "py", "date": "2020-04-17 03:24:11", "correct": "0", "upload": "def minimum(liste):\n  res=liste[0]\n  for i in liste: \n    if i<res:\n      res=i\n    else:\n      res=None\n  return res", "user": "userdId_21", "attemptID": 3906, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "39.70474", "embeddingY": "-58.86732"},{"extension": "py", "date": "2020-03-31 03:10:21", "correct": "0", "upload": "def fusion(liste1,liste2):\n    if liste1==[]:\n      res=liste2\n    elif liste2==[]:\n      res=liste1\n    else:\n      res=[]\n      i=0\n      j=0\n      while i<len(liste1) and j<len(liste2):\n        if liste1[i]<liste2[j]:\n          res.append(liste1[i])\n          i=i+1\n        else:\n          res.append(liste2[j])\n          j=j+1\n    return res", "user": "userdId_18", "attemptID": 3907, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-39.619358", "embeddingY": "50.170544"},{"extension": "py", "date": "2020-03-10 03:32:23", "correct": "0", "upload": "def jourNuit(heure):\n  if heure>24 or heure<0:\n    res=\"l'heure saisie est invalide\"\n  else:\n    if heure <5 or heure>=21:\n       res=\"on est la nuit\"\n    elif heure<12:\n       res=\"on est le matin\"\n    elif heure <17:\n       res=\"on est l'apr\u00e8s-midi\"\n    else:\n       res=\"on est le soir \"\n    if heure<6 or heure>=18:\n       res=res+\" et il fait nuit\"\n    else:\n        res=res+\" et il fait jour\"\n    return res", "user": "userdId_25", "attemptID": 3908, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "72.662926", "embeddingY": "14.231822"},{"extension": "py", "date": "2020-04-12 10:52:23", "correct": "0", "upload": "def produitScalaire(vec1,vec2):\n    if len(vec1)==0 or len(vec2)==0:\n      res=0\n    else:\n      for i in range(len(vec1) and len(vec2)):\n        res=res+vec1[i]*vec2[i]\n    return res", "user": "userdId_11", "attemptID": 3909, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-31.857132", "embeddingY": "-41.359394"},{"extension": "py", "date": "2020-03-24 06:20:10", "correct": "0", "upload": "def fusion(liste1,liste2):\n  liste3=liste1.append(liste2)\n  liste3.sorted()\n  return res", "user": "userdId_13", "attemptID": 3910, "exercise": "6613efb6c873b142dc2b6040c14eb616", "exercise_name": "fusion", "embeddingX": "-40.27034", "embeddingY": "-8.794801"},{"extension": "py", "date": "2020-02-29 06:27:03", "correct": "1", "upload": "def semestreValide(ue1,ue2):\n    if ue1>=10:\n      if ue2<10:\n        if (ue1+ue2)/2>=10:\n          res=True\n        else:\n          res=False\n      else:\n        res=True\n    else:\n      res=False\n    return res", "user": "userdId_18", "attemptID": 3911, "exercise": "70ae7ad6cf504e0fa8cedebd8e8a825f", "exercise_name": "semestreValide", "embeddingX": "66.80335", "embeddingY": "-1.0622959"},{"extension": "py", "date": "2020-04-05 09:02:12", "correct": "0", "upload": "def produitScalaire(vec1,vec2):\n  res=0\n  i=0\n  while i<len(vec1) and i<len(vec2):\n    v1=vec1[i]\n    v2=vec2[i]\n    res=res+v1*v2\n  return res", "user": "userdId_26", "attemptID": 3912, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-14.285133", "embeddingY": "51.67888"},{"extension": "py", "date": "2020-04-12 05:10:41", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=False\n  c=[]\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n  return d", "user": "userdId_8", "attemptID": 3913, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-76.29001", "embeddingY": "24.486364"},{"extension": "py", "date": "2020-03-05 23:47:52", "correct": "0", "upload": "def moyenne(liste):\n  if len(liste)==0:\n    moy=None\n  else:\n    moy=0\n  for i in liste:\n    moy=moy+i\n  moy= moy / len(liste)\n  return moy", "user": "userdId_13", "attemptID": 3914, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-0.51727974", "embeddingY": "-17.253082"},{"extension": "py", "date": "2020-03-22 05:51:16", "correct": "0", "upload": "def nbOccurrencesLettre(lettre,mot):\n  for elem in mot:\n    if elem==lettre:\n      res=res+1\n  return res", "user": "userdId_12", "attemptID": 3915, "exercise": "2864c9e5861229d2ff32570f6bc944fb", "exercise_name": "nbOccurrencesLettre", "embeddingX": "-13.201525", "embeddingY": "-28.250551"},{"extension": "py", "date": "2020-03-31 04:08:42", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n  cpt=0\n  i=0\n  while i<len(l) and i<n:\n    if l[i]==x:\n      cpt+=1\n    i+=1\n  if i!=n:\n    res=None\n  else:\n    res=i\n  return res", "user": "userdId_13", "attemptID": 3916, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-8.831641", "embeddingY": "74.95095"},{"extension": "py", "date": "2020-04-08 00:25:16", "correct": "1", "upload": "def suiteGeo(liste):\n  ok=True\n  i=0\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[0]==0:\n      ok=False\n    if liste[i]!=0:\n      q=liste[1]/liste[0]\n    if liste[i]!=0:\n      if liste[i+1]/liste[i]!=q:\n        ok=False\n    if liste[i] and liste[i+1]==0:\n      ok=True\n    if liste[i]==0 and liste[i+1]==0:\n      ok=True\n    i=i+1\n  return ok\n", "user": "userdId_1", "attemptID": 3917, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "35.21375", "embeddingY": "62.404858"},{"extension": "py", "date": "2020-03-30 00:14:01", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  res = ''\n  fin = debut+longueur\n  if fin >len(s):\n    fin = len(s)\n  for i in range(debut,fin):\n    res+= s[i]\n  return s", "user": "userdId_6", "attemptID": 3918, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-71.40144", "embeddingY": "20.865324"},{"extension": "py", "date": "2020-03-31 04:21:48", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n  trouve=False\n  i=0\n  cpt=0\n  while i<len(l)and not trouve:\n    if l[i]==x:\n      cpt+=1\n    if cpt==n:\n      trouve=True\n    i+=1\n    if trouve:\n      res=i-1\n    else:\n      res=None\n  return None", "user": "userdId_36", "attemptID": 3919, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-1.1611232", "embeddingY": "68.51893"},{"extension": "py", "date": "2020-03-06 00:06:03", "correct": "1", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=liste[0]\n    for i in range(len(liste)):\n      if liste[i]>res:\n        res=liste[i]\n  return res", "user": "userdId_12", "attemptID": 3920, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "1.2485409", "embeddingY": "-62.996567"},{"extension": "py", "date": "2020-04-12 08:42:07", "correct": "1", "upload": "def compteChiffre(chiffre,nombre):\n    if chiffre==nombre:\n      cpt=1\n    else:\n      cpt=0\n      x=nombre%10\n      decomp=nombre\n      while decomp!=0:\n        if x==chiffre:\n          cpt+=1\n          decomp=decomp//10\n          x=decomp%10\n        else:\n          decomp=decomp//10\n          x=decomp%10\n    return cpt", "user": "userdId_11", "attemptID": 3921, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "6.919947", "embeddingY": "15.4076805"},{"extension": "py", "date": "2020-03-16 05:48:36", "correct": "1", "upload": "def doubleLettre(mot):\n  res=0\n  dL=0\n  prec=''\n  for c in mot:\n    if prec==c:\n      dL=True\n    else:\n      res=False\n    prec=c\n  if dL==True:\n    res=True\n  return res", "user": "userdId_18", "attemptID": 3922, "exercise": "00da9cf1fa2b468d915724499459ed8f", "exercise_name": "doubleLettre", "embeddingX": "11.546167", "embeddingY": "-5.52491"},{"extension": "py", "date": "2020-03-05 22:18:38", "correct": "1", "upload": "def maximum(liste):\n    max = -999\n    for i in range(0,len(liste)):\n      if liste[i] > max:\n        max = liste[i]\n    if len(liste) == 0:\n      max = None\n    return max", "user": "userdId_29", "attemptID": 3923, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "12.435916", "embeddingY": "-71.57326"},{"extension": "py", "date": "2020-03-17 04:57:07", "correct": "0", "upload": "def reconstruireChainePartielle(s,n):\n  res=''\n  for i in range(0,len(s),n):\n    res=res+s[i]\n    return res", "user": "userdId_7", "attemptID": 3924, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-59.56814", "embeddingY": "-39.381207"},{"extension": "py", "date": "2020-03-24 03:36:04", "correct": "0", "upload": "def quatrePlus100(liste):\n  res=0\n  i = 0\n  while i<len(liste) and len(res)<4:\n    if liste[i]>100:\n      res=res+[liste[i]]\n    i=i+1\n  return res ", "user": "userdId_10", "attemptID": 3925, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-16.706125", "embeddingY": "44.018303"},{"extension": "py", "date": "2020-03-17 06:17:47", "correct": "0", "upload": "def maximum(liste):\n    if len(liste)==0:\n      res=none\n    else:\n      res=liste[0]\n    for elem in liste:\n        res=elem\n    return res", "user": "userdId_22", "attemptID": 3926, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-3.0976136", "embeddingY": "-36.142086"},{"extension": "py", "date": "2020-05-04 20:51:04", "correct": "0", "upload": "def nombrePair(n):\n  res=True\n  for elem in range(n):\n    if elem%10!=0:\n      res=False\n  return res", "user": "userdId_8", "attemptID": 3927, "exercise": "3001254263845e9a478696f81a704d33", "exercise_name": "nombrePair", "embeddingX": "31.598593", "embeddingY": "-5.610347"},{"extension": "py", "date": "2020-04-06 07:57:35", "correct": "1", "upload": "def nbVoyelles(mot):\n  res=0\n  for i in range(len(mot)):\n    if mot[i] in ['a','e','i','o','u','y']:\n      res+=1\n  return res", "user": "userdId_16", "attemptID": 3928, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-4.5472255", "embeddingY": "-50.59266"},{"extension": "py", "date": "2020-03-09 06:27:30", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  \n  res=0\n  \n  for elem in jour1,mois1,annee1,jour2,mois2,annee2:\n    \n    if ('mois1' and 'annee1')<('mois2'and'annee2'):\n       res=res-1\n      \n    if ('mois1' and 'annee1')==('mois2'and'annee2'):\n       res=res\n    \n    if ('mois'and 'annee1')<('mois2'and'annee2'):\n       res=res+1\n      \n  return res", "user": "userdId_23", "attemptID": 3929, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "-13.438732", "embeddingY": "1.1684078"},{"extension": "py", "date": "2020-04-12 04:38:03", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=False\n  c=[]\n  for i in range(len(liste[-1])):\n    c=a*liste[i]+b\n  return c", "user": "userdId_8", "attemptID": 3930, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-81.61967", "embeddingY": "15.237907"},{"extension": "py", "date": "2020-04-08 00:17:25", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  ok=False\n  i=0\n  j=0\n  while i<len(phrase)//2 and j<len(phrase)//2:\n    if phrase[i]==\" \":\n      i+=1\n    elif phrase[-j]==\" \":\n      j-=1\n    elif phrase[i]!=phrase[-j-1]:\n      ok=False\n    else:\n      ok=True\n    i+=1\n    j+=1\n  return ok\n", "user": "userdId_13", "attemptID": 3931, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "35.265553", "embeddingY": "34.371834"},{"extension": "py", "date": "2020-03-10 23:57:44", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  res=0\n  if debut1>fin2 and debut2>fin1:\n    res=FALSE \n  else:\n    res=TRUE\n  return res", "user": "userdId_21", "attemptID": 3932, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "67.71027", "embeddingY": "-21.785984"},{"extension": "py", "date": "2020-03-20 00:52:10", "correct": "0", "upload": "def permutationListe(liste,permutation):\n  res=[]\n  for i in range(permutation):\n    res.insert(permutation(i),liste(i))\n\n    return res", "user": "userdId_13", "attemptID": 3933, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-42.213905", "embeddingY": "-16.744837"},{"extension": "py", "date": "2020-03-12 22:14:57", "correct": "0", "upload": "def moyenne(liste):\n  if len (liste)==0:\n    res=None\n  else:\n    res=0\n    cpt=0\n    for elem in liste:\n      res=res+elem\n      cpt=cpt+1\n      res=res/cpt\n  return res ", "user": "userdId_20", "attemptID": 3934, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-2.9207456", "embeddingY": "-8.890306"},{"extension": "py", "date": "2020-03-06 00:29:05", "correct": "0", "upload": "def moyenne(liste):\n    if len(liste) == 0:\n      moy = None\n    else:\n      res = 0\n    nb = 0\n    for nb in liste:\n      res = res + nb\n      nb+=1\n    moy = res/nb\n    return moy", "user": "userdId_29", "attemptID": 3935, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-2.5684075", "embeddingY": "-11.05104"},{"extension": "py", "date": "2020-03-03 05:26:26", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    if i in range(liste):\n      if res<liste[i]:\n        res=liste[i]\n  return res", "user": "userdId_8", "attemptID": 3936, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "4.3951883", "embeddingY": "-35.482517"},{"extension": "py", "date": "2020-04-08 01:22:10", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  end=False\n  while i<len(liste) and res==True and end==False:\n    if liste[i]==0:\n      res=False\n    elif len(liste)==1 and liste[i]>=1:\n      end=True\n      res=True\n    else:\n      q=liste[1]/liste[0]\n      if liste[i+1]/liste[i]==q:\n        res=True\n      else:\n        res=False\n  return res", "user": "userdId_26", "attemptID": 3937, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "-6.3684826", "embeddingY": "44.938015"},{"extension": "py", "date": "2020-04-05 08:25:19", "correct": "0", "upload": "def plusLongueSuite(liste):\n    if liste==[]:\n      cpt=0\n    else:\n      cpt=1\n      cptMax=1\n      prec=liste[0]\n      for i in range(1,len(liste)):\n        if prec==liste[i]:\n          cpt+=1\n          if cpt>cptMax:\n            cptMax=cpt\n        else:\n          cpt=0\n        prec=liste[i]\n    return cptMax\n      ", "user": "userdId_18", "attemptID": 3938, "exercise": "deed004abb317b11778f7e8247197a40", "exercise_name": "plusLongueSuite", "embeddingX": "-2.0924323", "embeddingY": "-78.74365"},{"extension": "py", "date": "2020-03-31 03:10:38", "correct": "0", "upload": "def fusion(liste1,liste2):\n  res=[]\n  i=0\n  j=0\n  while i<len(liste1) and j<len(liste2):\n    if liste1[i]<liste2[j]:\n      res.append(liste1[i])\n      i=i+1\n    else:\n      res.append(liste2[j])\n      j=j+1\n  if len(liste1)!=len(liste2):\n    if len(liste1)>len(liste2):\n      for k in range(len(liste2),len(liste1)):\n        res.append(liste1[k])\n    elif len(liste1)<len(liste2):\n      for m in range(len(liste1,len(liste2))):\n        res.append(liste2[m])\n  return res", "user": "userdId_12", "attemptID": 3939, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-36.700176", "embeddingY": "48.18978"},{"extension": "py", "date": "2020-03-23 22:13:12", "correct": "1", "upload": "def compare(chaine1,chaine2):\n    if chaine1 == chaine2:\n      res = 0\n    elif chaine1 < chaine2:\n      res = -1\n    else:\n      res = 1\n    return res", "user": "userdId_42", "attemptID": 3940, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "40.572845", "embeddingY": "-2.327624"},{"extension": "py", "date": "2020-03-12 08:36:29", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    return 0\n  cpt=0\n  for lettre in mot:\n    if lettre in mot=='aeiouy':\n      cpt=cpt+1\n  return cpt\n  ", "user": "userdId_1", "attemptID": 3941, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "7.5201535", "embeddingY": "-32.08981"},{"extension": "py", "date": "2020-03-06 00:34:27", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    res=0\n  else:\n    for lettre in [\"a\",\"e\",\"i\",\"o\",\"u\",\"y\"]:\n        res=res+1\n  return res\n  \n      \n  \n\n ", "user": "userdId_9", "attemptID": 3942, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "12.895313", "embeddingY": "-38.614635"},{"extension": "py", "date": "2020-04-07 04:52:00", "correct": "0", "upload": "def suiteAri(liste):\n  ok=True\n  i=0\n  r=liste[i+1]-liste[i]\n  if len(liste)==0:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=liste[i]+r:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 3943, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "21.071466", "embeddingY": "59.82854"},{"extension": "py", "date": "2020-03-03 23:45:58", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut2<fin1<fin2 or debut1<fin2<fin1:\n    return True\n  else:\n    return False\nassert rendezVous(6,20,12,15) \n", "user": "userdId_19", "attemptID": 3944, "exercise": "6fd66bb2393fbf3809f1c6d04f3831f7", "exercise_name": "rendezVous", "embeddingX": "60.273304", "embeddingY": "-27.301123"},{"extension": "py", "date": "2020-03-24 06:04:29", "correct": "0", "upload": "def compare(chaine1,chaine2):\n    if chaine1=='':\n      res=-1\n    elif chaine2=='':\n      res=1\n    else:\n      res=0\n      i=0\n      while i<len(chaine1) and i<len(chaine2) and res==0:\n        if chaine1[i]<chaine2[i]:\n          res=-1\n        elif chaine1[i]>chaine2[i]:\n          res=1\n        i=i+1\n      mmlttr=0\n      if res==0:\n        i=0\n        if len(chaine1)>len(chaine2):\n          for i in range(len(chaine1)):\n            if chaine1[i]==chaine2[i]:\n              mmlttr=mmlttr+1\n        elif len(chaine1)<len(chaine2):\n          for i in range(len(chaine2)):\n            if chaine1[i]==chaine2[i]:\n              mmlttr=mmlttr+1\n      if len(chaine1)>len(chaine2):\n        if len(chaine2)==mmlttr:\n          res=1\n      elif len(chaine1)<len(chaine2):\n        if len(chaine1)==mmlttr:\n          res=-1\n    return res", "user": "userdId_18", "attemptID": 3945, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-29.494728", "embeddingY": "62.787544"},{"extension": "py", "date": "2020-03-10 04:28:55", "correct": "0", "upload": "def doubleLettre(mot):\n  res=0\n  prec=''\n  for c in mot:\n    if prec==c:\n      res=True\n    else:\n      res=False\n    prec=c\n  return res", "user": "userdId_18", "attemptID": 3946, "exercise": "00da9cf1fa2b468d915724499459ed8f", "exercise_name": "doubleLettre", "embeddingX": "15.841096", "embeddingY": "-6.8141437"},{"extension": "py", "date": "2020-03-12 06:41:29", "correct": "0", "upload": "def maximum(liste):\n  res=12\n  for i in liste:\n     if liste<res:\n        res=max\n  return res", "user": "userdId_20", "attemptID": 3947, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "40.858288", "embeddingY": "-52.90502"},{"extension": "py", "date": "2020-03-05 23:52:16", "correct": "0", "upload": "def nbVoyelles(mot):\n\tnb=0\n\tvoy=['a','e','i','o','u','y']\n\tfor v in mot:\n\t\tnb+=1\n\treturn nb", "user": "userdId_19", "attemptID": 3948, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-25.295008", "embeddingY": "-2.117356"},{"extension": "py", "date": "2020-04-12 08:40:51", "correct": "0", "upload": "def suiteAriGeo(liste):\n  i=0\n  while i<len(liste)-1:\n    a=liste[0]\n    b=liste[0]\n    if liste[i]==0 and liste[i+1]==0:\n      a=1\n      b=0\n    if liste[i+1]==liste[i]+(liste[1]-liste[0]):\n      b=liste[1]-liste[0]\n    if liste[0]!=0:                        \n      if liste[i+1]==liste[i]*liste[1]/liste[0]:\n        a=liste[1]/liste[0]\n        b=0\n    if liste[i+1]==liste[i]*(liste[1]-liste[0])+(liste[i]-(liste[i-1]*(liste[1]-liste[0]))):\n      a=liste[1]-liste[0]\n      b=liste[i]-(liste[i-1]*a)\n    i=i+1\n  ok=True\n  i=0\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=a*liste[i]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 3949, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "33.31404", "embeddingY": "85.62482"},{"extension": "py", "date": "2020-04-05 12:15:40", "correct": "1", "upload": "def verifSuiteAriGeo(liste,a,b):\n    res=True\n    n=1\n    while n<len(liste) and res:\n        if liste[n]!=liste[n-1]*a+b:\n            res=False\n        n+=1\n    return res\n\n\ndef suiteAriGeo(liste):\n  res = True\n  if len(liste) > 2:\n    if liste[1]-liste[0] == 0:\n        q = 0\n    else:\n        q = (liste[2]-liste[1])/(liste[1]-liste[0])\n        \n    r = liste[1] - (q*liste[0])\n    res=verifSuiteAriGeo(liste,q,r)\n    \n  return res", "user": "userdId_4", "attemptID": 3950, "exercise": "4c9665daf155b115fe13218141fa1aff", "exercise_name": "suiteAriGeo", "embeddingX": "16.332733", "embeddingY": "74.5249"},{"extension": "py", "date": "2020-03-17 05:39:40", "correct": "0", "upload": "def permutationChaine(s):\n  res=\"\"\n  for i in range(0,len(s)-1,2):\n    res=res+s[1+i]+s[i]\n  if len(s)%2!=0:\n    res=res+s[i-1]\n  return res", "user": "userdId_8", "attemptID": 3951, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-36.201195", "embeddingY": "-58.761833"},{"extension": "py", "date": "2020-03-19 23:25:08", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  res=\"\"\n  for i in range(debut,longueur):\n    res=res+s[i]\n  return res", "user": "userdId_13", "attemptID": 3952, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-74.42833", "embeddingY": "15.568116"},{"extension": "py", "date": "2020-04-11 05:51:16", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  if (chiffre or nombre)==0:\n    res=1\n  while nombre!=0:\n    nombre=nombre//10\n    if nombre%10==chiffre:\n      res+=1\n  return res", "user": "userdId_8", "attemptID": 3953, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "23.990704", "embeddingY": "10.283632"},{"extension": "py", "date": "2020-03-31 04:22:33", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n  trouve=False\n  i=0\n  cpt=0\n  while i<len(l)and not trouve:\n    if l[i]==x:\n      cpt+=1\n    if cpt==n:\n      trouve=True\n    i+=1\n  if trouve:\n      res=i-1\n  else:\n      res=None\n  return None", "user": "userdId_36", "attemptID": 3954, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-1.3798647", "embeddingY": "68.61116"},{"extension": "py", "date": "2020-04-11 07:01:39", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  res=True\n  i=0\n  while i<len(phrase) and res:\n    if phrase[i]==' ':\n      i+=1\n    if phrase[i]!=phrase[-i-1]:\n      res=False\n    i+=1\n  return res", "user": "userdId_8", "attemptID": 3955, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "28.753527", "embeddingY": "39.704742"},{"extension": "py", "date": "2020-04-05 12:16:14", "correct": "1", "upload": "def produitScalaire(vec1,vec2):\n  res=0\n  for i in range(len(vec1)):\n    res+=vec1[i]*vec2[i]\n  return res", "user": "userdId_4", "attemptID": 3956, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-52.12764", "embeddingY": "-37.06571"},{"extension": "py", "date": "2020-03-19 05:32:05", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if jour1<jour2 or mois1<mois2 or annee1<annee2:\n    res=-1\n    if jour1>jour2 or mois1>mois2 or annee1>annee2:\n      res=1\n  else:\n    res=0\n  return res", "user": "userdId_34", "attemptID": 3957, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "80.15406", "embeddingY": "-29.514261"},{"extension": "py", "date": "2020-03-19 23:53:26", "correct": "0", "upload": "def reconstruireChainePartielle(o,n):\n  res=\"\"\n  for i in range(o,len(o),n):\n    res=res+o[i]\n  return res", "user": "userdId_20", "attemptID": 3958, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-44.73728", "embeddingY": "-22.3144"},{"extension": "py", "date": "2020-04-07 03:54:02", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  j=0\n  ok=True\n  raison=None\n  if len(liste)>1:\n    while i<len(liste) and liste[0]!=0 and raison==None:\n      raison=liste[i+1]/liste[i]\n      i+=1\n    while j<len(liste)-1 and ok:\n      if liste[i+1]!=liste[i]*raison:\n        ok=False\n      i+=1\n  return ok", "user": "userdId_12", "attemptID": 3959, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "22.350496", "embeddingY": "70.13933"},{"extension": "py", "date": "2020-03-31 04:01:45", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n    if l==[] or x not in l:\n      cpt=None\n    else:\n      trouve=False\n      n-=1\n      cpt=0\n      i=0\n      while i<len(l) and not trouve:\n        if x==l[i] and n!=0:\n          n-=1\n        if n==0:\n          trouve=True\n        cpt+=1\n        i+=1\n      if n!=0:\n        cpt=-1\n    return cpt", "user": "userdId_18", "attemptID": 3960, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "2.4840667", "embeddingY": "79.123146"},{"extension": "py", "date": "2020-04-05 22:02:56", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  trouve=False\n  i=0\n  while i<len(nombre) and not trouve:\n    if chiffre in nombre:\n      cpt+=1\n    i+=1\n  return cpt", "user": "userdId_1", "attemptID": 3961, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-3.063037", "embeddingY": "45.740974"},{"extension": "py", "date": "2020-04-20 21:53:54", "correct": "0", "upload": "def rechercheDicho(liste,val):\n  min = 0\n  max = len(liste)\n  index = None\n  nbAcces=0\n  acces =(max+min)//2\n  found = False\n  while max!=acces and min!=acces and not found:\n    nbAcces+=1\n    print (nbAcces)\n    print(acces)\n    if liste[acces]==val:\n      found = True\n      index = acces\n    else:\n      if liste[acces]>val:\n        max = acces\n      else:\n        min = acces\n      acces = (max+min)//2\n  return (index,nbAcces)", "user": "userdId_6", "attemptID": 3962, "exercise": "434544c545ce211c7e57445707047bee", "exercise_name": "rechercheDicho", "embeddingX": "2.966858", "embeddingY": "63.17621"},{"extension": "py", "date": "2020-03-06 00:55:28", "correct": "0", "upload": "def moyenne(liste):\n    res=0\n    y=0\n    x=0\n    for elem in liste : \n      y=y+1\n      x=x+elem\n      res=x/y\n      if len(liste)==0:\n         res=None\n    return res", "user": "userdId_24", "attemptID": 3963, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "0.6825653", "embeddingY": "-8.4983635"},{"extension": "py", "date": "2020-03-16 00:54:08", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut2<fin1:\n    res=true\n  else:\n      res=false\n  return res", "user": "userdId_16", "attemptID": 3964, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "-9.219542", "embeddingY": "15.79962"},{"extension": "py", "date": "2020-03-05 23:49:29", "correct": "0", "upload": "def nbVoyelles(mot):\n  Voyelles=[\"a\",\"e\",\"i\",\"o\",\"u\",\"y\"]\n  res=0\n  for l in mot:\n    if i in Voyelles:\n      res=res+1\n  return res", "user": "userdId_15", "attemptID": 3965, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "15.939284", "embeddingY": "-29.888557"},{"extension": "py", "date": "2020-03-17 06:21:27", "correct": "0", "upload": "def permutationListe(liste,permutation):\n  res=[0]*(len(permutation))\n  for i in range(len(liste)):\n    premutation[i]=liste[i] \n  return res", "user": "userdId_35", "attemptID": 3966, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-49.737995", "embeddingY": "-26.674019"},{"extension": "py", "date": "2020-03-31 05:14:19", "correct": "0", "upload": "def distribution(liste,n):\n    cpts=[0]*(n+1)\n    for elem in l:\n      cpts[elem]=cpts[elem]+1\n    return res", "user": "userdId_18", "attemptID": 3967, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-59.82686", "embeddingY": "-12.390795"},{"extension": "py", "date": "2020-03-06 00:47:56", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n  if len(mot)==0:\n    return None\n  else:\n    res=-1\n    for elem in mot:\n      if lettre==elem:\n        res=res+1\n    return res\n        ", "user": "userdId_2", "attemptID": 3968, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-10.98809", "embeddingY": "-31.207758"},{"extension": "py", "date": "2020-03-31 04:31:28", "correct": "1", "upload": "def indiceOccurrence(n,x,l):\n  res=None\n  i=0\n  cpt=0\n  while i<len(l) and cpt<n:\n    if l[i]==x:\n      cpt+=1\n    if cpt==n:\n      res=i\n    i+=1\n  return res", "user": "userdId_21", "attemptID": 3969, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-8.417202", "embeddingY": "74.27827"},{"extension": "py", "date": "2020-04-13 22:28:35", "correct": "1", "upload": "def nbOccurrencesJoueur(joueurs,nom):\n  i=0\n  cpt=0\n  while i<len(joueurs) :\n    if nom==joueurs[i] :\n      cpt+=1\n    i+=1\n  return cpt", "user": "userdId_15", "attemptID": 3970, "exercise": "00ee5faf82e54951fbdb2ba2656f7ae7", "exercise_name": "nbOccurrencesJoueur", "embeddingX": "-16.497154", "embeddingY": "65.57192"},{"extension": "py", "date": "2020-04-05 03:03:51", "correct": "1", "upload": "def somme(liste):\n  res=0\n  for elem in liste:\n    res+=elem\n  return res", "user": "userdId_26", "attemptID": 3971, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-25.946592", "embeddingY": "-1.5997361"},{"extension": "py", "date": "2020-03-06 00:20:06", "correct": "0", "upload": "def maximum(liste):\n res=liste[0]\n for elem in liste:\n    if elem>res:\n      res=elem\n return res\n    ", "user": "userdId_33", "attemptID": 3972, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "32.001465", "embeddingY": "-46.635994"},{"extension": "py", "date": "2020-03-27 05:40:51", "correct": "0", "upload": "def quatrePlus100(liste):\n  i=0\n  res=[]\n  while len(res)<4:\n    if liste[i]>100:\n      res.append(liste[i])\n    i=i+1\n  return res", "user": "userdId_12", "attemptID": 3973, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-26.397768", "embeddingY": "37.191727"},{"extension": "py", "date": "2020-04-07 07:18:21", "correct": "1", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=True\n  i=1\n  while i<len(liste):\n    if liste[i]!=a*liste[i-1]+b:\n      res=False\n    i+=1\n  return res\ndef suiteAriGeo(liste):\n  i=1\n  res=True\n  if len(liste)>3:\n    ecart1=liste[1]-liste[0]\n    ecart2=liste[2]-liste[1]\n    if ecart1>0:\n      a=ecart2/ecart1\n      b=liste[1]-a*liste[0]\n      while i<len(liste):\n        res=verifSuiteAriGeo(liste,a,b)\n        i+=1 \n  return res", "user": "userdId_27", "attemptID": 3974, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "16.10982", "embeddingY": "76.97318"},{"extension": "py", "date": "2020-03-24 04:30:37", "correct": "0", "upload": "def compare(chaine1,chaine2):\n  res=0\n  cpt=0\n  i=0\n  while i<len(chaine1) and i<len(chaine2) and cpt!=2:\n    if chaine1[i]>chaine2[i]:\n      res=1\n      cpt=cpt+1\n    elif chaine1[i]<chaine2[i]:\n      res=-1\n      cpt=cpt+1\n    i=i+1\n  if res==0:\n    if len(chaine1)>len(chaine2):\n      res=1\n    else:\n      res=-1\n  return res", "user": "userdId_27", "attemptID": 3975, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-29.61879", "embeddingY": "66.25478"},{"extension": "py", "date": "2020-03-13 00:53:16", "correct": "0", "upload": "def sommeNPremiersEntiers(n):\n  res=0\n  for elem in n:\n    res=res+n\n  return res", "user": "userdId_1", "attemptID": 3976, "exercise": "c315a540cf0bfb0182dc114c6f0eafd1", "exercise_name": "sommeNPremiersEntiers", "embeddingX": "-39.64339", "embeddingY": "-21.625767"},{"extension": "py", "date": "2020-03-17 08:41:42", "correct": "0", "upload": "def reconstruireChainePartielle(s,n):\n    res=\"\"\n    for i in range (s,n):\n      res=res+s[i]\n    return res", "user": "userdId_24", "attemptID": 3977, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-44.01911", "embeddingY": "-21.225998"},{"extension": "py", "date": "2020-03-05 21:34:32", "correct": "1", "upload": "def somme(liste):\n    res=0\n    for i in range(len(liste)):\n       res=res+liste[i]\n    return res", "user": "userdId_16", "attemptID": 3978, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-44.397522", "embeddingY": "-35.54457"},{"extension": "py", "date": "2020-04-14 03:30:34", "correct": "1", "upload": "def listeDecroissante(scores):\n  ok=True\n  i=0\n  while i<len(scores)-1 and ok:\n    if scores[i]<scores[i+1]:\n      ok=False\n    i+=1\n  return ok", "user": "userdId_27", "attemptID": 3979, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "20.414011", "embeddingY": "45.689857"},{"extension": "py", "date": "2020-04-12 06:53:53", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  if liste==[]:\n    res=True\n  c=[]\n  c=[liste[0]]+c\n  res=False\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n  return c", "user": "userdId_8", "attemptID": 3980, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-73.5497", "embeddingY": "26.813768"},{"extension": "py", "date": "2020-04-11 00:23:11", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  i=0\n  c=True\n  while i<(len(liste)+8) and c:\n    if liste[i+1]!=a*liste[i]+b:\n      c=False\n    i=i+1\n  return c", "user": "userdId_19", "attemptID": 3981, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-75.43571", "embeddingY": "26.989805"},{"extension": "py", "date": "2020-03-20 00:07:16", "correct": "0", "upload": "def permutationListe(liste,permutation):\n  for i in range(len(liste)):\n    liste[i]=permutation[i]\n  return res", "user": "userdId_12", "attemptID": 3982, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-53.297913", "embeddingY": "-29.818277"},{"extension": "py", "date": "2020-04-13 23:11:55", "correct": "0", "upload": "def listeDecroissante(scores):\n  res=False\n  if scores==[]:\n    res=True\n  for i in range(len(scores)-1):\n    if scores[i]>scores[i+1]:\n      res=True\n  return res", "user": "userdId_8", "attemptID": 3983, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "-8.181914", "embeddingY": "-69.03602"},{"extension": "py", "date": "2020-03-31 04:12:47", "correct": "1", "upload": "def indiceOccurrence(n,x,l):\n  i=0\n  cpt=0\n  trouve=False\n  while i<len(l) and not trouve:\n    if l[i]==x:\n      cpt+=1\n    if cpt==n:\n      trouve=True\n    i+=1\n  if trouve:\n    res=i-1\n  else:\n    res=None\n  return res", "user": "userdId_8", "attemptID": 3984, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-1.600774", "embeddingY": "68.63415"},{"extension": "py", "date": "2020-03-13 00:41:38", "correct": "0", "upload": "def sommeNPremiersEntiersPairs(n):\n  if n<=0:\n    res=0\n  else:\n    for n in liste:\n      if n%2==0:\n        res=(n*(n+1))/2\n  return res", "user": "userdId_2", "attemptID": 3985, "exercise": "3030dc079e6607c253e89e8ef4784b74", "exercise_name": "sommeNPremiersEntiersPairs", "embeddingX": "31.140316", "embeddingY": "-36.972797"},{"extension": "py", "date": "2020-03-20 01:11:00", "correct": "0", "upload": "def permutationListe(liste,permutation):\n  liste2=[0]*len(liste)\n  for i in liste:\n    liste2[i]=liste[i]\n  return liste2\n    \n  \n    \n  ", "user": "userdId_2", "attemptID": 3986, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-51.22771", "embeddingY": "-24.95583"},{"extension": "py", "date": "2020-05-11 00:29:11", "correct": "0", "upload": "def listeDecroissante(scores):\n  ok=True\n  i=0\n  if len(scores)>1:\n    while i<len(scores)-1 and ok:\n      if scores[i]>scores[i+1]:\n        ok=False\n      i=i+1\n  return ok", "user": "userdId_12", "attemptID": 3987, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "16.735157", "embeddingY": "50.49184"},{"extension": "py", "date": "2020-03-24 03:20:10", "correct": "0", "upload": "def quatrePlus100(liste):\n\tres=[]\n\ti=0\n\tcpt=0\n\twhile i<len(l) and cpt!=4:\n\t\tif liste[i]>100:\n\t\t\tres=res+[l[i]]\n\t\t\tcpt=cpt+1\n\t\ti=i+1\n\treturn res", "user": "userdId_31", "attemptID": 3988, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-31.73769", "embeddingY": "43.69055"},{"extension": "py", "date": "2020-04-05 02:50:04", "correct": "1", "upload": "def nombrePair(n):\n  if n%2==0:\n    res=True\n  else:\n    res=False\n  return res", "user": "userdId_26", "attemptID": 3989, "exercise": "3001254263845e9a478696f81a704d33", "exercise_name": "nombrePair", "embeddingX": "43.55345", "embeddingY": "-4.0400553"},{"extension": "py", "date": "2020-03-22 10:35:06", "correct": "0", "upload": "def bissextile(a):\n\tif a%4==0 and a%100==0 or a%400==0:\n\t\tres=True \n\telse:\n\t\tres=False", "user": "userdId_21", "attemptID": 3990, "exercise": "a7d37636649c0ada991520788deeb2d0", "exercise_name": "bissextile", "embeddingX": "46.587013", "embeddingY": "1.8722663"},{"extension": "py", "date": "2020-03-17 05:26:00", "correct": "0", "upload": "def permutationChaine(s):\n    res=''\n    for i in range(0,len(s)):\n        res=res+s[i+1]+s[i]\n    return res", "user": "userdId_39", "attemptID": 3991, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-46.459198", "embeddingY": "-47.061535"},{"extension": "py", "date": "2020-03-03 05:57:55", "correct": "0", "upload": "def polynome(a,b,c):\n  delta=b**2-4*a*c\n  if delta<0:\n    res=\"pas de solution\"\n  if delta==0:\n    sol1=str(b/2*a)\n    res=\"la solution est \"+sol1\n  if delta>0:\n    sol1=str((b*sqrt(delta))/2)\n    sol2=str(b*(sqrt(delta)/2))\n    res=\"les solutions sont \"+sol1+\" et \"+sol2\n  return None", "user": "userdId_53", "attemptID": 3992, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-57.41579", "embeddingY": "4.8697314"},{"extension": "py", "date": "2020-03-12 22:03:02", "correct": "0", "upload": "def moyenne(liste):\n  if len (liste)==0:\n    res=None\n  else:\n    res=0\n    cpt=0\n    for elem in liste:\n      res=res+elem\n      cpt=cpt+2\n      res=res%cpt\n  return res ", "user": "userdId_20", "attemptID": 3993, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-4.8157687", "embeddingY": "-3.6880786"},{"extension": "py", "date": "2020-04-07 22:44:46", "correct": "1", "upload": "def suiteAri(liste):\n  res = True\n  i = 0\n  if liste == [] :\n    res = True\n  else :\n    raison = liste[1]-liste[0]\n  while res and i < len(liste)-1 :\n    if liste[i]+raison != liste[i+1]:\n      res = False\n    i = i + 1\n  return res", "user": "userdId_17", "attemptID": 3994, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "20.726389", "embeddingY": "60.811817"},{"extension": "py", "date": "2020-04-13 21:24:25", "correct": "0", "upload": "def suiteAri(liste):\n  res=True\n  if len(liste)>1:\n    b=liste[1]-liste[0]\n    res=verifSuiteAriGeo(liste,1,b)\n  return res", "user": "userdId_8", "attemptID": 3995, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "-5.551045", "embeddingY": "-73.15203"},{"extension": "py", "date": "2020-03-30 22:14:09", "correct": "1", "upload": "def nombreSymetrique(nombre):\n  i=0\n  temp=str(nombre)\n  while i<len(temp):\n    if temp[i]!=temp[-(1+i)]:\n      return False\n    i+=1\n  return True", "user": "userdId_6", "attemptID": 3996, "exercise": "fae4d6a34289cf5bf06f9d6d17e8547e", "exercise_name": "nombreSymetrique", "embeddingX": "23.803532", "embeddingY": "39.615208"},{"extension": "py", "date": "2020-03-06 00:06:16", "correct": "0", "upload": "def maximum(liste):\n  res=25\n  for i in range(len(liste)):\n      res=res+liste[i] \n  return 25", "user": "userdId_41", "attemptID": 3997, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-44.72938", "embeddingY": "-38.85476"},{"extension": "py", "date": "2020-03-05 23:50:40", "correct": "1", "upload": "def maximum(liste):\n  if len(liste)==0:\n    return None\n  else:\n    max=liste[0]\n    for i in range (1,len(liste)):\n      if liste[i]>max:\n        max=liste[i]\n  return max", "user": "userdId_1", "attemptID": 3998, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "12.362556", "embeddingY": "-70.67366"},{"extension": "py", "date": "2020-03-31 03:02:03", "correct": "0", "upload": "def fusion(liste1,liste2):\n  res=[]\n  i=0\n  j=0\n  while i<len(liste1) and j<len(liste2):\n    if liste1[i]<liste2[j]:\n      res.append(liste1[i])\n      i+=1\n    else:\n      res.append(liste2[j])\n      j+=1\n    return res", "user": "userdId_13", "attemptID": 3999, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-41.57953", "embeddingY": "52.769207"},{"extension": "py", "date": "2020-03-17 06:25:00", "correct": "0", "upload": "def distribution(liste,n):\n  res=liste[0]*n+1\n  for i in range(len(liste)):\n    res=liste[i]+1\n  return res", "user": "userdId_23", "attemptID": 4000, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-48.41449", "embeddingY": "-36.898468"},{"extension": "py", "date": "2020-04-06 14:53:07", "correct": "1", "upload": "def motPalindrome(mot):\n  ok=True\n  i=0\n  j=len(mot)-1\n  while i<j and ok:\n    if mot[i]==mot[j]:\n      ok=True\n    else:\n      ok=False\n    i=i+1\n    j=j-1\n  return ok", "user": "userdId_3", "attemptID": 4001, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "23.251286", "embeddingY": "57.28453"},{"extension": "py", "date": "2020-04-06 14:46:13", "correct": "0", "upload": "def motPalindrome(mot):\n  ok=True\n  i=0\n  j=len(mot)-1\n  while i<len(mot) and ok:\n    if i==j:\n      ok=true\n    else:\n      ok=true\n    i=i+1\n    j=j-1\n  return ok", "user": "userdId_3", "attemptID": 4002, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "6.6932034", "embeddingY": "52.937977"},{"extension": "py", "date": "2020-03-16 04:14:26", "correct": "0", "upload": "def moyenne(liste):\n    return None", "user": "userdId_18", "attemptID": 4003, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-88.09318", "embeddingY": "3.4242442"},{"extension": "py", "date": "2020-04-08 00:45:51", "correct": "1", "upload": "def elemAri(n,u0,r):\n  i=0\n  res=u0\n  while i!=n:\n    res=res+r\n    i+=1\n  return res", "user": "userdId_13", "attemptID": 4004, "exercise": "f239498950e974e29e01472749d9a09d", "exercise_name": "elemAri", "embeddingX": "-7.215629", "embeddingY": "23.289167"},{"extension": "py", "date": "2020-03-03 06:23:51", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if jour1<jour2:\n    if mois1<mois2:\n      if annee1<=annee2:\n        res=-1\n  else:\n    if jour1>jour2:\n      if mois1>mois2:\n        if annee1>=annee2:\n          res=1\n    else:\n      if jour1==jour2:\n        if jour1==jour2:\n          if annee1==annee2:\n            res=0\n  return res", "user": "userdId_30", "attemptID": 4005, "exercise": "af7c1467ef9f7684d9ff58734067ae98", "exercise_name": "compareDates", "embeddingX": "78.12337", "embeddingY": "-19.861761"},{"extension": "py", "date": "2020-03-27 07:01:52", "correct": "0", "upload": "def compare(chaine1,chaine2):\n  res=\"\"\n  i=0\n  while i<len(chaine1) and i<len(chaine2) and res==0:\n    if chaine1[i]<chaine2[i]:\n      res=-1\n    elif chaine1[1]==chaine2[i]:\n      res=0\n    else:\n      res=1\n    i=i+1\n  if res==0:\n    if len(chaine1)>len(chaine2):\n      res=1\n    elif len(chaine1)<len(chaine2):\n      res=-1\n  return res\n   ", "user": "userdId_34", "attemptID": 4006, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-18.89782", "embeddingY": "55.687244"},{"extension": "py", "date": "2020-03-24 03:21:51", "correct": "0", "upload": "def nbSup100(l,x):\n  res=[]\n  i=0\n  while i<len(l) and len(res)<=4:\n      if l[i]>x:\n         res=res+[l[i]]\n      i=i+1\n  return res", "user": "userdId_16", "attemptID": 4007, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-26.776133", "embeddingY": "45.245445"},{"extension": "py", "date": "2020-03-19 23:49:41", "correct": "0", "upload": "def reconstruireChainePartielle(s,n):\n  if mot=='':\n    res=None\n  else :\n    for i in range (0,len(s),n):\n      res=res + s[i]\n  \n  return res\n\n", "user": "userdId_15", "attemptID": 4008, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "20.025486", "embeddingY": "-37.38237"},{"extension": "py", "date": "2020-04-09 08:56:46", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n    cpt=0\n    reste=nombre%10\n    while reste!=1:\n      reste=reste%10\n      if reste==chiffre:\n        cpt+=1\n    if cpt==0:\n      cpt=1\n    return cpt\n    ", "user": "userdId_11", "attemptID": 4009, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "11.305731", "embeddingY": "9.954995"},{"extension": "py", "date": "2020-03-23 00:10:49", "correct": "0", "upload": "def somme(liste):\n  res=0\n  for x in range([liste]):\n    res+=x\n  return res", "user": "userdId_8", "attemptID": 4010, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-41.188507", "embeddingY": "-18.530134"},{"extension": "py", "date": "2020-03-23 00:37:14", "correct": "0", "upload": "def reconstruireChainePartielle(s,n):\n    res = \"\"\n    for i in range (s,n) :\n      res = res + i\n    return res", "user": "userdId_24", "attemptID": 4011, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-44.01431", "embeddingY": "-21.230528"},{"extension": "py", "date": "2020-03-12 21:57:10", "correct": "1", "upload": "def nbVoyelles(mot):\n  cpt=0\n  for i in range(len(mot)):\n    if mot[i] in 'aeiouy':\n      cpt=cpt+1\n  return cpt\n\n      ", "user": "userdId_22", "attemptID": 4012, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-24.38876", "embeddingY": "-64.68541"},{"extension": "py", "date": "2020-04-02 23:13:49", "correct": "0", "upload": "def listeSymetrique(l):\n  i=0\n  n=0\n  while i<len(l/2) and n==0:\n    if l[i]==l[len(l)-i-1]:\n      i=i+1\n      n=0\n    else:\n      n=1\n  if n==0:\n    res=True\n  else:\n    res=False\n  return res\n    ", "user": "userdId_19", "attemptID": 4013, "exercise": "8eb27aeda471a467e2223abebeca886e", "exercise_name": "listeSymetrique", "embeddingX": "-16.202612", "embeddingY": "43.337524"},{"extension": "py", "date": "2020-03-12 22:11:31", "correct": "0", "upload": "def maximum(liste):\n    res=0\n    for elem in(liste):\n        if res<elem:\n           res=elem\n    return res", "user": "userdId_22", "attemptID": 4014, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "42.50181", "embeddingY": "-52.874916"},{"extension": "py", "date": "2020-03-06 00:04:44", "correct": "1", "upload": "def moyenne(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=0\n    cpt=0\n    for i in range(len(liste)):\n      cpt=cpt+1\n      res=res+liste[i]\n    res=res/cpt\n  return res", "user": "userdId_30", "attemptID": 4015, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-8.784974", "embeddingY": "-7.531363"},{"extension": "py", "date": "2020-04-10 06:54:26", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n    cpt=0\n    decomp=nombre%10\n    while decomp!=1:\n      decomp=nombre%10\n      if decomp==chiffre:\n        cpt+=1\n        decomp=decomp%10\n    return cpt\n  ", "user": "userdId_11", "attemptID": 4016, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "11.701415", "embeddingY": "9.81702"},{"extension": "py", "date": "2020-04-03 00:13:51", "correct": "1", "upload": "def stockerChiffres(nombre):\n  res=[]\n  if nombre==0:\n    res=[0]\n  else:\n    while nombre!=0:\n      res.append(nombre%10)\n      nombre=nombre//10\n  return res", "user": "userdId_12", "attemptID": 4017, "exercise": "49a87f644f84a443327fb4315b47f249", "exercise_name": "stockerChiffres", "embeddingX": "41.019924", "embeddingY": "13.5297785"},{"extension": "py", "date": "2020-03-31 06:36:24", "correct": "0", "upload": "def stockerChiffres(nombre):\n  res=[]\n  while nombre!=0:\n    res.append(nombre%10)\n    nombre=nombre//10\n  if nombre==0:\n    res.append(0)\n  return res", "user": "userdId_21", "attemptID": 4018, "exercise": "49a87f644f84a443327fb4315b47f249", "exercise_name": "stockerChiffres", "embeddingX": "41.77429", "embeddingY": "15.00301"},{"extension": "py", "date": "2020-03-27 05:28:07", "correct": "0", "upload": "def quatrePlus100(liste):\n  i=0\n  while i>len(liste):\n    res.append(liste[i])\n    i=i+1\n    return i", "user": "userdId_20", "attemptID": 4019, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-19.019136", "embeddingY": "31.85075"},{"extension": "py", "date": "2020-03-31 00:24:40", "correct": "0", "upload": "def listeSymetrique(l):\n    trouve=False\n    i=0\n    j=-1\n    while i<len(l) and j<=-len(l):\n      if l(i)==l(j):\n        trouve=True\n      i=i+1\n      j=j-1\n    return trouve\n  \n      ", "user": "userdId_28", "attemptID": 4020, "exercise": "8eb27aeda471a467e2223abebeca886e", "exercise_name": "listeSymetrique", "embeddingX": "5.3006353", "embeddingY": "45.086933"},{"extension": "py", "date": "2020-04-06 08:49:11", "correct": "1", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=True\n  i=1\n  while i<len(liste):\n    if liste[i]!=a*liste[i-1]+b:\n      res=False\n    i+=1\n  return res\ndef suiteAri(liste):\n  cpt=0\n  i=1\n  a=1\n  b=0\n  while i<len(liste) and cpt!=3:\n    if liste[i]!=liste[i-1]:\n      b=liste[i]-liste[i-1]\n      cpt+=1\n    i+=1 \n  return verifSuiteAriGeo(liste,a,b)", "user": "userdId_27", "attemptID": 4021, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "12.504013", "embeddingY": "77.21715"},{"extension": "py", "date": "2020-04-03 00:36:00", "correct": "1", "upload": "def listeSymetrique(l):\n  i=0\n  ok=True\n  while i<(len(l))/2 and ok:\n    if l[i]!=l[-1-i]:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_12", "attemptID": 4022, "exercise": "8eb27aeda471a467e2223abebeca886e", "exercise_name": "listeSymetrique", "embeddingX": "25.69919", "embeddingY": "52.780846"},{"extension": "py", "date": "2020-04-07 10:50:56", "correct": "0", "upload": "def suiteGeo(liste):\n  ok=True\n  i=1\n  if len(liste)==0 and len(liste)==1:\n    ok=True\n  while i<len(liste)-2 and ok:\n    q=liste[1]/liste[0]\n    if liste[i]==0:\n      ok=False\n    if liste[i+2]/liste[i+1]!=q:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 4023, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "27.654808", "embeddingY": "60.41929"},{"extension": "py", "date": "2020-04-07 10:42:44", "correct": "0", "upload": "def suiteGeo(liste):\n  ok=True\n  i=0\n  if len(liste)==0 and len(liste)==1:\n    ok=True\n  while i<len(liste)-2 and ok:\n    q=liste[1]*liste[0]\n    if liste[i]==0:\n      ok=False\n    elif liste[i+1]/liste[i]!=q:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 4024, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "28.471634", "embeddingY": "68.72377"},{"extension": "py", "date": "2020-04-05 08:57:44", "correct": "0", "upload": "def produitScalaire(vec1,vec2):\n  res=0\n  for i in range(3):\n    e1=vec1[i]\n    e2=vec2[i]\n    res=res+e1*e2\n  return res", "user": "userdId_26", "attemptID": 4025, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-64.582275", "embeddingY": "-18.455385"},{"extension": "py", "date": "2020-03-05 23:49:36", "correct": "0", "upload": "def nbVoyelles(mot):\n  res=0\n  for i in range(len(mot)):\n    if i in 'aeyuio':\n      res=res+1\n  return res", "user": "userdId_30", "attemptID": 4026, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-6.042809", "embeddingY": "-47.77202"},{"extension": "py", "date": "2020-03-05 21:58:27", "correct": "0", "upload": "def maximum(liste):\n    max = 0\n    for i in range(0,len(liste)):\n    \tif liste[i] > max:\n        \tmax = liste[i]\n    \tmax = max\n    return max", "user": "userdId_29", "attemptID": 4027, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "10.897123", "embeddingY": "-72.9012"},{"extension": "py", "date": "2020-04-06 01:52:05", "correct": "0", "upload": "def produitScalaire(vec1,vec2):\n  if vec1 == []:\n    coordvec1 = [0,0]\n  if vec2 == []:\n    coordvec2 = [0,0]\n  else :\n    coordvec1 = [vec1[2]-vec1[0],vec1[1]-vec1[3]]\n    coordvec2 = [vec2[2]-vec2[0],vec2[1]-vec2[3]]\n  res = coordvec1[0]*coordvec2[0]+coordvec1[1]*coordvec2[1]\n  return res", "user": "userdId_17", "attemptID": 4028, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-21.030643", "embeddingY": "-16.353918"},{"extension": "py", "date": "2020-03-31 04:13:45", "correct": "0", "upload": "def indiceOccurence(n,x,l):\n  cpt=0 \n  trouve=False \n  i=0\n  res=None\n  while i<len(l) and trouve==False:\n    if l[i]==x:\n      cpt+=1\n    if cpt==n:\n      trouve=True\n    i+=1\n    res=i", "user": "userdId_21", "attemptID": 4029, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "1.6600624", "embeddingY": "70.98995"},{"extension": "py", "date": "2020-03-27 05:42:49", "correct": "0", "upload": "def quatrePlus100(liste):\n  i=0\n  res=[]\n  while i<len(liste) and res<4:\n    if liste[i]>100:\n      res=res+[liste[i]]\n    i=i+1\n  return res", "user": "userdId_1", "attemptID": 4030, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-17.902105", "embeddingY": "43.914318"},{"extension": "py", "date": "2020-03-15 00:42:00", "correct": "0", "upload": "def jourNuit(heure):\n  if heure<0 or heure>24:\n    res=\"l'heure saisie est invalide\"\n  else:#l'heure est valide\n    if heure<5 or heure>=21:\n      res=\"on est la nuit\"\n    elif heure<12:\n      res=\"on est le matin\"\n    elif heure<17:\n      res=\"on est l'apr\u00e8s-midi\"\n    else:\n      res=\"on est le soir\"\n    if heure<6 or heure>=18:\n      res=\" et il fait nuit\"\n    else:\n      res=\" et il fait jour\"\n  return res", "user": "userdId_8", "attemptID": 4031, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "69.2236", "embeddingY": "14.956032"},{"extension": "py", "date": "2020-03-17 06:26:06", "correct": "0", "upload": "def distribution(liste,n):\n  res=liste[0]*n+1\n  for elem in liste:\n    res=elem+1\n  return res", "user": "userdId_23", "attemptID": 4032, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-31.117342", "embeddingY": "-0.6143202"},{"extension": "py", "date": "2020-03-15 00:43:29", "correct": "1", "upload": "def jourNuit(heure):\n  if heure<0 or heure>24:\n    res=\"l'heure saisie est invalide\"\n  else:#l'heure est valide\n    if heure<5 or heure>=21:\n      res=\"on est la nuit\"\n    elif heure<12:\n      res=\"on est le matin\"\n    elif heure<17:\n      res=\"on est l'apr\u00e8s-midi\"\n    else:\n      res=\"on est le soir\"\n    if heure<6 or heure>=18:\n      res=res+\" et il fait nuit\"\n    else:\n      res=res+\" et il fait jour\"\n  return res", "user": "userdId_8", "attemptID": 4033, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "72.12479", "embeddingY": "14.821503"},{"extension": "py", "date": "2020-03-21 01:01:32", "correct": "1", "upload": "def permutationListe(liste,permutation):\n  res=len(liste)*[0] # initialisation de res\n  for i in range(len(liste)):\n    res[permutation[i]]=liste[i]\n  return res\n    ", "user": "userdId_34", "attemptID": 4034, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-50.675426", "embeddingY": "-30.117212"},{"extension": "py", "date": "2020-03-31 07:28:22", "correct": "0", "upload": "def doubleChiffre(nombre):\n  ok=False\n  elemPrec=nombre%10\n  while nombre!=0 and not ok:\n    nombre//=10\n    elemAct=nombre%10\n    if elemPrec==elemAct:\n      ok=True\n    elemPrec=nombre%10\n  return res", "user": "userdId_18", "attemptID": 4035, "exercise": "c83ea6acd3e9f6f5543e87d515e8a44a", "exercise_name": "doubleChiffre", "embeddingX": "11.807724", "embeddingY": "22.460049"},{"extension": "py", "date": "2020-03-12 23:45:31", "correct": "0", "upload": "def jourNuit(heure):\n  res=0\n  if heure<0 or heure>24:\n    res=\"l'heure saisie est invalide\"\n  if 6<=heure<=18:\n    if 5<=heure<=12:\n      res=\"on est le matin et il fait jour\"\n    if 12<=heure<=17:\n      res=\"on est l'apr\u00e8s-midi et il fait jour\"\n    if 17<=heure<=18:\n      res=\"on est le soir et il fait jour\"\n  if 1<=heure<=5 or 19<=heure<=24:\n    if 1<=heure<=4:\n      res=\"on est la nuit et il fait nuit\"\n    if 21<=heure<=24:\n      res=\"on est la nuit et il fait nuit\"\n    if 19<=heure<=20:\n      res=\"on est le soir et il fait nuit\"\n    return res", "user": "userdId_13", "attemptID": 4036, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "69.481926", "embeddingY": "23.927366"},{"extension": "py", "date": "2020-03-03 05:10:29", "correct": "1", "upload": "def nbVoyelles(mot):\n  res = 0\n  for elem in mot :\n    if elem in \"aeiouy\":\n      res = res + 1\n  return res", "user": "userdId_17", "attemptID": 4037, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "15.700387", "embeddingY": "-25.034964"},{"extension": "py", "date": "2020-03-09 05:20:52", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  res=0\n  for i in range(len(compareDates)):\n    if (jour1,mois1,annee1<jour2,mois2,annee2):\n      res=-1\n    elif (jour1,mois1,annee1==jour2,mois2,annee2):\n      res=0\n    else:\n      res=1\n  return res", "user": "userdId_23", "attemptID": 4038, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "-33.25644", "embeddingY": "-17.591457"},{"extension": "py", "date": "2020-04-05 08:57:15", "correct": "0", "upload": "def produitScalaire(vec1,vec2):\n  res=0\n  for i in range(4):\n    e1=vec1[i]\n    e2=vec2[i]\n    res=res+e1*e2\n  return res", "user": "userdId_26", "attemptID": 4039, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-64.59432", "embeddingY": "-18.45972"},{"extension": "py", "date": "2020-03-02 07:31:29", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1<=annee2 and mois1<=annee2 and jour1<jour2:\n    return -1\n  elif annee1==annee2 and mois1==mois2 and jour1==jour2:\n    return 0\n  elif annee1>=annee2 and mois1>=mois2 and jour1>=jour2:\n    return 1\n  \ncompareDates(10,1,2020,14,2,2020)\ncompareDates(14,2,2020,11,2,2020)\ncompareDates(10,1,2020,10,1,2020)", "user": "userdId_1", "attemptID": 4040, "exercise": "af7c1467ef9f7684d9ff58734067ae98", "exercise_name": "compareDates", "embeddingX": "82.804405", "embeddingY": "-12.384971"},{"extension": "py", "date": "2020-03-31 03:43:37", "correct": "0", "upload": "def fusion(liste1,liste2):\n  res=[]\n  i=0\n  j=0\n  while i<len(liste1) and i<len(liste2):\n    if liste1[i]<liste2[j]:\n      res.append(liste1[i])\n      i=i+1\n    else:\n      res.append(liste2[j])\n      j=j+1\n      while j<len(liste2):\n        res.append(liste2[j])\n        j=j+1\n      while i<len(liste1):\n          res.append(liste1[i])\n          i=i+1\n  return res", "user": "userdId_36", "attemptID": 4041, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-40.66554", "embeddingY": "46.493927"},{"extension": "py", "date": "2020-03-31 04:56:19", "correct": "1", "upload": "def compare(chaine1,chaine2):\n    res=0\n    i=0\n    while i<len(chaine1) and i<len(chaine2) and res==0:\n        if chaine1[i]<chaine2[i]:\n          res=-1\n        elif chaine1[i]==chaine2[i]:\n          res=0\n        else:\n          res=1\n        i=i+1 \n    if res==0:\n      if len(chaine1)>len(chaine2):\n        res=1\n      elif len(chaine1)<len(chaine2):\n        res=-1\n    return res", "user": "userdId_18", "attemptID": 4042, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-23.41972", "embeddingY": "61.985855"},{"extension": "py", "date": "2020-03-12 06:26:10", "correct": "0", "upload": "def somme(liste):\n  res=0\n  for i in len(liste):\n    res=res+ len(liste)\n  return res", "user": "userdId_20", "attemptID": 4043, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-39.148827", "embeddingY": "-24.196205"},{"extension": "py", "date": "2020-03-17 05:12:55", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  res=''\n  if debut+longueur>len(s):\n    res=res+s[i]\n  for i in range(debut,debut+longueur):\n      res=res+s[i]\n  return res", "user": "userdId_25", "attemptID": 4044, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-77.31784", "embeddingY": "23.758736"},{"extension": "py", "date": "2020-03-10 04:22:22", "correct": "1", "upload": "def sommeNbPairs(liste):\n  res=0\n  for i in range(len(liste)):\n    if liste[i]%2==0:\n      res=res+liste[i]\n  return res\n      \n      \n  ", "user": "userdId_9", "attemptID": 4045, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "-19.374802", "embeddingY": "-56.50734"},{"extension": "py", "date": "2020-04-05 22:34:55", "correct": "1", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  res=[]\n  if nombre==0:\n    cpt=1\n  while nombre!=0:\n    res.append(nombre%10)\n    nombre=nombre//10\n  for i in range (len(res)):\n    if res[i]==chiffre:\n      cpt+=1\n  return cpt\n  ", "user": "userdId_1", "attemptID": 4046, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "0.24435316", "embeddingY": "6.757586"},{"extension": "py", "date": "2020-03-05 23:44:02", "correct": "0", "upload": "def maximum(liste):\n    max=o\n    if elem>max in liste:\n      max=elem\n    return max\n    ", "user": "userdId_46", "attemptID": 4047, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-48.114494", "embeddingY": "-5.711992"},{"extension": "py", "date": "2020-04-07 22:08:34", "correct": "0", "upload": "def suiteGeo(liste):\n  ok=True\n  i=0\n  while i<len(liste)-1 and ok:\n    q=liste[1]/liste[0]\n    if liste[i]==0:\n      ok=False\n    if liste[i+1]/liste[i]!=q:\n      ok=False\n    i=i+1\n  return ok\n    ", "user": "userdId_1", "attemptID": 4048, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "27.64374", "embeddingY": "60.91685"},{"extension": "py", "date": "2020-04-13 22:02:36", "correct": "1", "upload": "def meilleurScoreJoueur(scores,joueurs,nom):\n  i=0\n  res=0\n  while i<len(joueurs) :\n    if nom==joueurs[i] :\n      if scores[i]>res :\n        res=scores[i]\n    i+=1\n  return res", "user": "userdId_15", "attemptID": 4049, "exercise": "c96fadc94086276f98451a798b3bb730", "exercise_name": "meilleurScoreJoueur", "embeddingX": "-12.669967", "embeddingY": "69.23092"},{"extension": "py", "date": "2020-04-07 23:14:16", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  res=False\n  prec=None\n  while nombre!=0 and not res:\n    numero=nombre%10\n    nombre=nombre//10\n    if chiffre==prec:\n      res=True\n      cpt=cpt+1\n    prec=numero\n    \n  return ", "user": "userdId_13", "attemptID": 4050, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "9.199195", "embeddingY": "24.078577"},{"extension": "py", "date": "2020-03-22 11:39:09", "correct": "1", "upload": "def somme(liste):\n  res=0\n  for n in liste: \n    res = res+n\n  return res", "user": "userdId_21", "attemptID": 4051, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-30.98315", "embeddingY": "2.2206302"},{"extension": "py", "date": "2020-04-12 06:47:12", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  if liste==[]:\n    res=True\n  c=[]\n  res=False\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n    c=[liste[0]*1]+c\n  return c", "user": "userdId_8", "attemptID": 4052, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-67.9935", "embeddingY": "24.463203"},{"extension": "py", "date": "2020-03-10 04:24:28", "correct": "0", "upload": "def sommeNPremiersEntiersPairs(n):\n  res=0\n  for e in range(N+1):\n    if e%2==0:\n      res=res+e\n  return res", "user": "userdId_26", "attemptID": 4053, "exercise": "3030dc079e6607c253e89e8ef4784b74", "exercise_name": "sommeNPremiersEntiersPairs", "embeddingX": "-30.7366", "embeddingY": "-17.574455"},{"extension": "py", "date": "2020-03-04 11:38:31", "correct": "0", "upload": "def somme(liste):\n    return None", "user": "userdId_32", "attemptID": 4054, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-88.34241", "embeddingY": "3.460567"},{"extension": "py", "date": "2020-03-23 21:08:47", "correct": "0", "upload": "def quatrePlus100(l):\n  res=[]\n  if (l[0]==None):\n    res=None\n  else:\n    for i in l:\n      if (i>100):\n        res.append(l[i])\n  return res", "user": "userdId_48", "attemptID": 4055, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "27.007568", "embeddingY": "-43.304634"},{"extension": "py", "date": "2020-04-08 00:06:31", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  ok=False\n  i=0\n  j=0\n  while i<len(phrase)//2 and j<len(phrase)//2:\n    if phrase[i]==\" \":\n      i+=1\n    elif phrase[-j]==\" \":\n      j+=1\n    elif phrase[i]!=phrase[-j-1]:\n      ok=False\n    else:\n      ok=True\n    i+=1\n    j+=1\n  if phrase==\"\":\n    ok=True\n  return ok", "user": "userdId_13", "attemptID": 4056, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "36.323753", "embeddingY": "33.56473"},{"extension": "py", "date": "2020-03-13 00:52:06", "correct": "0", "upload": "def sommeNPremiersEntiers(n):\n  if n<=0:\n    res=0\n  else:\n    elem=0\n    for elem in(n):\n      res=elem+n \n  return res", "user": "userdId_5", "attemptID": 4057, "exercise": "c315a540cf0bfb0182dc114c6f0eafd1", "exercise_name": "sommeNPremiersEntiers", "embeddingX": "31.512764", "embeddingY": "-36.93841"},{"extension": "py", "date": "2020-03-03 06:20:21", "correct": "1", "upload": "def nbVoyelles(mot):\n  res=0\n  for lettre in mot:\n    if lettre in \"aeiouy\": \n       res=res+1\n  return res", "user": "userdId_25", "attemptID": 4058, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "15.535991", "embeddingY": "-23.623375"},{"extension": "py", "date": "2020-03-13 00:43:56", "correct": "0", "upload": "def sommeNPremiersEntiersPairs(n):\n  res=0\n  if i in range(1,n+1):\n    if i%2==0:\n      res=res+i\n    \n  return res", "user": "userdId_38", "attemptID": 4059, "exercise": "3030dc079e6607c253e89e8ef4784b74", "exercise_name": "sommeNPremiersEntiersPairs", "embeddingX": "6.808436", "embeddingY": "-18.869062"},{"extension": "py", "date": "2020-04-09 04:00:07", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  calc=0\n  i=0\n  lres=[]\n  ok=None\n  while i<len(liste):\n    calc=a*calc+b\n    lres.append(calc)\n    i+=1\n  if liste in lres:\n    ok=True\n  else:\n    ok=False\n  return ok", "user": "userdId_13", "attemptID": 4060, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-80.66423", "embeddingY": "22.672256"},{"extension": "py", "date": "2020-03-03 05:42:58", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=range[0]\n    for i in range(len(liste)):\n      if liste[i]>res:\n        res=liste[i]\n  return res", "user": "userdId_8", "attemptID": 4061, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "6.384431", "embeddingY": "-51.204327"},{"extension": "py", "date": "2020-03-12 10:16:32", "correct": "0", "upload": "def jourNuit(heure):\n  0<=heure<=24\n  if 6<=heure<=18 :\n    temps='il fait jour'\n  else :\n    temps='il fait nuit'\n  if 0<=heure<=5 and 21<=heure<=24 :\n    soleil='on est la nuit'\n  if 5<=heure<=12 :\n    soleil='on est le matin'\n  if 12<=heure<=17 :\n    soleil=\"on est l'apr\u00e8s-midi\"\n  if 17<=heure<=21 :\n    soleil=\"on est le soir\"\n  heure= soleil + temps\n  return heure", "user": "userdId_24", "attemptID": 4062, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "72.0193", "embeddingY": "30.247671"},{"extension": "py", "date": "2020-03-30 22:07:54", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n  i=0\n  j=0\n  res = -1\n  while j <3 and i < len(l):\n    if l[i] == x:\n      j+=1\n      if j == 3:\n        res = i\n    i+=1\n  \n  if res == -1: res = None\n  return(res)", "user": "userdId_4", "attemptID": 4063, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-7.419037", "embeddingY": "71.515526"},{"extension": "py", "date": "2020-06-02 22:59:39", "correct": "0", "upload": "def nbOccurrencesLettre(lettre,mot):\n  cpt=0\n  for i in range(len(mot)):\n    if mot[i]==lettre:\n      cpt+=1\n  return res", "user": "userdId_12", "attemptID": 4064, "exercise": "2864c9e5861229d2ff32570f6bc944fb", "exercise_name": "nbOccurrencesLettre", "embeddingX": "-20.473026", "embeddingY": "-37.771088"},{"extension": "py", "date": "2020-03-10 04:00:06", "correct": "1", "upload": "def sommeNbPairs(liste):\n    if liste==[]:\n      res=0\n    else:\n      res=0\n      for i in liste:\n        if i%2==0:\n          res=res+i\n    return res", "user": "userdId_18", "attemptID": 4065, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "30.698116", "embeddingY": "-18.538437"},{"extension": "py", "date": "2020-03-06 00:42:46", "correct": "1", "upload": "def ecart(liste):\n  if len(liste)==0:\n    return None\n  max=liste[0]\n  for i in range (1,len(liste)):\n    if liste[i]>max:\n        max=liste[i]\n  min=liste[0]\n  for i in range(1,len(liste)):\n    if liste[i]<min:\n        min=liste[i]\n  ecart=max-min\n  return ecart\n  \n    ", "user": "userdId_1", "attemptID": 4066, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "13.864996", "embeddingY": "-83.49149"},{"extension": "py", "date": "2020-04-06 06:44:58", "correct": "0", "upload": "def sousChaine(s1,s2):\n  res=True\n  i=0\n  j=0\n  while i<len(s1) and j<len(s2):\n    if s1[i]==s2[j]:\n      i+=1\n    if s1[1]!=s2[j] and i>1:\n      i-=1\n    j+=1\n  if i!=len(s1):\n    res=False\n  return res", "user": "userdId_27", "attemptID": 4067, "exercise": "a7cdd094daa2f0bfccc7a4ec419f7243", "exercise_name": "sousChaine", "embeddingX": "-6.0073123", "embeddingY": "58.296165"},{"extension": "py", "date": "2020-04-13 21:34:03", "correct": "0", "upload": "def suiteAri(liste):\n  res=True\n  if len(liste)>1:\n    r=liste[1]-liste[0]\n    res=True\n    n=1\n    while n<len(liste) and ok:\n      if liste[n]!=liste[n-1]*a+b:\n        ok=False\n      n+=1\n  return res", "user": "userdId_8", "attemptID": 4068, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "12.023829", "embeddingY": "55.820156"},{"extension": "py", "date": "2020-03-12 21:44:55", "correct": "0", "upload": "def nbVoyelles(mot):\n  cpt=0\n  for lettre in mot:\n    if lettre in 'aeiouy':\n      cpt=cpt+1\n    return cpt", "user": "userdId_23", "attemptID": 4069, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "13.909549", "embeddingY": "-26.306292"},{"extension": "py", "date": "2020-03-31 07:04:26", "correct": "0", "upload": "def nombreSymetrique(nombre):\n  res=[]\n  if nombre==0:\n    res=[0]\n  while nombre!=0:\n    res.append(nombre%10)\n    nombre=nombre//10\n  return res\n  ok=True\n  i=0\n  while i<len(res)//2 and ok:\n    if res[i]!=res[-i-1]:\n      ok=False\n    i+=1\n  return ok", "user": "userdId_8", "attemptID": 4070, "exercise": "fae4d6a34289cf5bf06f9d6d17e8547e", "exercise_name": "nombreSymetrique", "embeddingX": "42.42038", "embeddingY": "14.468707"},{"extension": "py", "date": "2020-03-24 03:12:56", "correct": "0", "upload": "def quatrePlus100(liste):\n  res=[]\n  i=0\n  while i<len(liste) and len(res)<4:\n    if liste[i]>100:\n      res=res+liste[i]\n    i=i+1\n  return res", "user": "userdId_26", "attemptID": 4071, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-27.120483", "embeddingY": "41.46732"},{"extension": "py", "date": "2020-04-11 06:40:03", "correct": "1", "upload": "def phrasePalindrome(phrase):\n  i=0\n  ok=True\n  while i<len(phrase)/2 and ok:\n    if phrase[i]==' ':\n      i+=1\n    if phrase[-i-1]==' ':\n      i+=1\n    elif phrase[i]!=phrase[-i-1]:\n      ok=False\n    i+=1\n  return ok", "user": "userdId_16", "attemptID": 4072, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "29.493757", "embeddingY": "39.118526"},{"extension": "py", "date": "2020-03-06 00:11:54", "correct": "0", "upload": "def maximum(liste):\n  res=0\n  for i in range(len(liste)):\n      res=res+liste[i]\n  return res", "user": "userdId_41", "attemptID": 4073, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-44.886246", "embeddingY": "-37.418877"},{"extension": "py", "date": "2020-03-31 04:01:56", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n    if l==[] or x not in l:\n      cpt=None\n    else:\n      trouve=False\n      cpt=0\n      i=0\n      while i<len(l) and not trouve:\n        if x==l[i] and n!=0:\n          n-=1\n        if n==0:\n          trouve=True\n        cpt+=1\n        i+=1\n      if n!=0:\n        cpt=-1\n    return cpt", "user": "userdId_18", "attemptID": 4074, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "2.4865432", "embeddingY": "79.12384"},{"extension": "py", "date": "2020-03-17 05:55:25", "correct": "1", "upload": "def distribution(liste,n):\n    cpt=[0]*(n+1)\n    for elem in liste:\n        cpt[elem]=cpt[elem]+1\n    return cpt", "user": "userdId_39", "attemptID": 4075, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-58.87121", "embeddingY": "-15.439707"},{"extension": "py", "date": "2020-03-19 23:59:49", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  fin=0\n  res=\"\"\n  if (longueur+debut)>len(s):\n    fin=len(s)\n  for i in range(debut,fin):\n    res=res+s[i]\n  return res\n\n", "user": "userdId_13", "attemptID": 4076, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-77.105606", "embeddingY": "23.359123"},{"extension": "py", "date": "2020-04-12 04:12:15", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=False\n  c=[]\n  for elem in liste:\n    c=a*elem+b\n    res=True\n  if c==[]:\n    res=True\n  return res", "user": "userdId_8", "attemptID": 4077, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-74.035904", "embeddingY": "28.295683"},{"extension": "py", "date": "2020-03-15 03:10:34", "correct": "0", "upload": "def doubleLettre(mot):\n  l1=\" \"\n  for l2 in mot:\n    if l1==\" \" and l2!=\" \":\n      res=True\n    l2=l1\n  else:\n    res=False\n  return res", "user": "userdId_8", "attemptID": 4078, "exercise": "00da9cf1fa2b468d915724499459ed8f", "exercise_name": "doubleLettre", "embeddingX": "20.081968", "embeddingY": "-6.0534873"},{"extension": "py", "date": "2020-03-05 23:47:34", "correct": "0", "upload": "def maximum(liste):\n  res=0\n  for i in range(len(liste)) :\n    if liste[i]>res :\n      res=res+liste[i]\n    else :\n      res=None\n  return res", "user": "userdId_24", "attemptID": 4079, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-1.6485744", "embeddingY": "-57.60619"},{"extension": "py", "date": "2020-04-14 03:43:35", "correct": "1", "upload": "def nbOccurrencesJoueur(joueurs,nom):\n    cpt=0\n    for i in range(len(joueurs)):\n      if joueurs[i]==nom:\n        cpt+=1\n    return cpt", "user": "userdId_18", "attemptID": 4080, "exercise": "00ee5faf82e54951fbdb2ba2656f7ae7", "exercise_name": "nbOccurrencesJoueur", "embeddingX": "-20.912823", "embeddingY": "-38.629997"},{"extension": "py", "date": "2020-03-12 22:12:02", "correct": "0", "upload": "def moyenne(liste):\n  if len (liste)==0:\n    res=None\n  else:\n    res=0\n    cpt=0\n    for elem in liste:\n      res=res+elem\n      cpt=cpt+elem\n    res=cpt%elem\n  return res ", "user": "userdId_20", "attemptID": 4081, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-4.907544", "embeddingY": "-4.450747"},{"extension": "py", "date": "2020-03-27 06:12:39", "correct": "0", "upload": "def compare(chaine1,chaine2):\n  i=0\n  while res==0 and i<len(chaine1) and i<len(chaine2):\n    if chaine1[i]<chaine2[i]:\n      res=-1\n    elif chaine1[i]>chaine2[i]:\n      res=1\n    else:\n      res=0\n    i=i+1\n  return res", "user": "userdId_12", "attemptID": 4082, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-11.433747", "embeddingY": "42.674984"},{"extension": "py", "date": "2020-03-06 00:11:24", "correct": "1", "upload": "def nbVoyelles(mot):\n  res=0\n  for elem in mot:\n    if elem in 'aeiouy':\n      res=res+1\n  return res", "user": "userdId_12", "attemptID": 4083, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "15.623128", "embeddingY": "-24.967821"},{"extension": "py", "date": "2020-03-12 21:54:06", "correct": "0", "upload": "def minimum(liste):\n  res=l[0]\n  for elem in liste:\n    if l[0]>elem:\n      res=elem\n  return res", "user": "userdId_23", "attemptID": 4084, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "31.150238", "embeddingY": "-48.11983"},{"extension": "py", "date": "2020-03-06 00:12:31", "correct": "0", "upload": "def maximum(liste):\n    res=0\n    for elem in liste:\n        if elem>res:\n        \tres=elem\n    for elem in liste:\n        if elem<0:\n            res=elem\n    return res", "user": "userdId_49", "attemptID": 4085, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "42.24409", "embeddingY": "-50.840042"},{"extension": "py", "date": "2020-03-12 07:37:56", "correct": "0", "upload": "def bissextile(annee):\n  if annee%4==0 or annee%400==0:\n    if annee%100!=0:\n      return True\n  else:\n    return False", "user": "userdId_1", "attemptID": 4086, "exercise": "a7d37636649c0ada991520788deeb2d0", "exercise_name": "bissextile", "embeddingX": "51.216908", "embeddingY": "0.080031194"},{"extension": "py", "date": "2020-04-06 16:15:44", "correct": "1", "upload": "def suiteAri(liste):\n    if len(liste) == 0:\n        res = True\n    else:\n        test = liste[1]-liste[0]\n        if len(liste) >= 3:\n            for i in range(2,len(liste)):\n                if liste[i]-liste[i-1] == test:\n                    res = True\n                else:\n                    res = False\n        else:\n            res = True\n    return res", "user": "userdId_42", "attemptID": 4087, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "-15.5245905", "embeddingY": "-64.71146"},{"extension": "py", "date": "2020-03-22 11:02:48", "correct": "1", "upload": "def minimum(liste):\n  if liste==[]:\n    min=None\n  else:\n    min=liste[0]\n    for i in range(len(liste)):\n      if liste[i]<min:\n        min=liste[i]\n  return min", "user": "userdId_27", "attemptID": 4088, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "19.755219", "embeddingY": "-78.936"},{"extension": "py", "date": "2020-04-13 21:05:00", "correct": "1", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=True\n  n=1\n  while n<len(liste) and res:\n    if liste[n]!=liste[n-1]*a+b:\n      res=False\n    n+=1\n  return res", "user": "userdId_8", "attemptID": 4089, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-77.76568", "embeddingY": "19.816914"},{"extension": "py", "date": "2020-03-23 01:20:11", "correct": "0", "upload": "def moyenne(liste):\n    if liste==[]:\n      res=None\n    else:\n      x=0\n      cpt=0\n      for i in liste: \n        x=x+i\n        cpt=cpt+1\n       \tres=x/cpt\n        return res", "user": "userdId_10", "attemptID": 4090, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-0.28759757", "embeddingY": "-5.7053723"},{"extension": "py", "date": "2020-03-06 00:00:05", "correct": "0", "upload": "def moyenne(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=0\n    cpt=0\n    for elem in liste:\n      res= res+elem\n      cpt= cpt+1\n      res= res/cpt\n  return res\nassert moyenne([12,16,18,6,3,5])", "user": "userdId_13", "attemptID": 4091, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-2.9039056", "embeddingY": "-8.881784"},{"extension": "py", "date": "2020-03-06 00:20:51", "correct": "1", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    res=0\n  else:\n    res=0\n    for elem in mot:\n      if elem in 'aeiouy':\n        res=res+1\n  return res     ", "user": "userdId_14", "attemptID": 4092, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "6.2134843", "embeddingY": "-29.532345"},{"extension": "py", "date": "2020-03-10 04:28:27", "correct": "1", "upload": "def sommeNPremiersEntiers(n):\n  res=0\n  for i in range(n+1):\n      res=res+i\n  return res", "user": "userdId_36", "attemptID": 4093, "exercise": "c315a540cf0bfb0182dc114c6f0eafd1", "exercise_name": "sommeNPremiersEntiers", "embeddingX": "-19.842873", "embeddingY": "12.993768"},{"extension": "py", "date": "2020-04-07 23:50:39", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  res=True\n  if len(liste)==0:\n    res=True\n  if len(liste)==[1]:\n    res=True\n  if len(liste)==[]:\n    res=False\n  while i<len(liste)-1 and res==True:\n    q=liste[i+1]/liste[i]\n    if liste[i+1]/liste[i]==q:\n      res=True\n    else:\n      res=False\n    i+=1\n  return res\n", "user": "userdId_34", "attemptID": 4094, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "36.608654", "embeddingY": "53.80906"},{"extension": "py", "date": "2020-03-24 05:43:50", "correct": "0", "upload": "def compare(chaine1,chaine2):\n  i=0\n  res=0\n  while i<len(chaine1) and i<len(chaine2) and res==0:\n    if chaine1[i]<chaine2[i]:\n      res=-1\n    if chaine1[i]>chaine2[i]:\n      res=1\n    i=i+1\n  return res\n\n", "user": "userdId_13", "attemptID": 4095, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-24.895761", "embeddingY": "61.24929"},{"extension": "py", "date": "2020-04-07 03:07:28", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  trouve=False\n  i=0\n  cpt=0\n  res=None\n  while i<len(l) and not trouve:\n    if l[i]==x:\n      cpt=cpt+1\n    if cpt==n:\n      trouve=True\n      res=i\n  i=i+1\n  return res", "user": "userdId_50", "attemptID": 4096, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "4.0338755", "embeddingY": "68.66643"},{"extension": "py", "date": "2020-03-20 00:30:56", "correct": "1", "upload": "def sousChaine(s,debut,longueur):\n    res=''\n    fin=debut+longueur\n    if fin>len(s):\n      fin=len(s)\n    for i in range (debut,fin):\n      res=res+s[i]\n    return res", "user": "userdId_1", "attemptID": 4097, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-76.31659", "embeddingY": "20.517912"},{"extension": "py", "date": "2020-04-07 20:40:42", "correct": "0", "upload": "def suiteAri(liste):\n  res=0\n  for i in liste:\n    if liste[i+1]%liste[i]==0:\n      res=False\n    elif liste[i]%liste[i+1]!=liste[i+1]%liste[i+2]:\n      res=False\n    else:\n      res=True\n  return res", "user": "userdId_3", "attemptID": 4098, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "34.181885", "embeddingY": "-24.215103"},{"extension": "py", "date": "2020-03-23 00:37:24", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    for i in range(len(liste)):\n      res=res<liste[i]\n  return res", "user": "userdId_8", "attemptID": 4099, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "24.988123", "embeddingY": "-64.6386"},{"extension": "py", "date": "2020-05-04 21:54:00", "correct": "1", "upload": "def minimum(liste):\n  if liste==[]:\n    res=None\n  else:\n    res=liste[0]\n    for i in range(1,len(liste)):\n      if liste[i]<res:\n        res=liste[i]\n  return res", "user": "userdId_8", "attemptID": 4100, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "25.424242", "embeddingY": "-71.07382"},{"extension": "py", "date": "2020-03-31 04:28:27", "correct": "0", "upload": "def indiceOccurence(n,x,l):\n  res=None\n  cpt=0 \n  trouve=False \n  i=0\n  while i<len(l) and trouve==False:\n    if l[i]==x:\n      cpt+=1\n    if cpt==n:\n      trouve=True\n      res=i\n    i+=1\n  return res\n      ", "user": "userdId_21", "attemptID": 4101, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-0.0148369605", "embeddingY": "69.4672"},{"extension": "py", "date": "2020-04-07 03:35:48", "correct": "0", "upload": "def motPalindrome(mot):\n  i=0\n  trouve=False\n  res=True\n  while i<len(mot)/2 and not trouve:\n    if mot[i]==mot[-i-1]:\n      i+=1\n      trouve=True\n  if trouve: \n    res=True\n  return res", "user": "userdId_16", "attemptID": 4102, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "28.138584", "embeddingY": "47.43709"},{"extension": "py", "date": "2020-04-11 00:26:38", "correct": "0", "upload": "def suiteAri(liste):\n  i=0\n  c=True\n  while i<(len(liste)-2) and c:\n    if liste[i+2]-liste[i+1]!=liste[i+1]+liste[i]:\n      c=False\n    i=i+1\n  return c", "user": "userdId_19", "attemptID": 4103, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "19.688292", "embeddingY": "51.534103"},{"extension": "py", "date": "2020-03-17 05:55:30", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  res=''\n  if debut+longueur>len(s):\n    res=debut+longueur\n  else:\n    if debut+longueur<len(s):\n      fin=debut+longueur\n  for i in range(debut,debut+longueur): \n    res=len[s]\n  return res", "user": "userdId_25", "attemptID": 4104, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-79.32922", "embeddingY": "16.753696"},{"extension": "py", "date": "2020-03-01 01:04:42", "correct": "0", "upload": "from math import sqrt\n\ndef polynome(a,b,c):\n    delta =  b**2 - (4*a*b)\n    print(delta)\n    if delta > 0:\n        x1 = (-b + sqrt(delta))/2*a\n        x2 = (-b - sqrt(delta))/2*a\n    elif delta == 0:\n        x1 = -b/2*a\n        x2 = \"\"\n    else:\n        print(\"delta neg\")\n    return x1,x2\n", "user": "userdId_4", "attemptID": 4105, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-54.048527", "embeddingY": "5.522721"},{"extension": "py", "date": "2020-04-06 14:23:00", "correct": "0", "upload": "def produitScalaire(vec1,vec2):\n  res=0\n  for i in range(0,4):\n    res=(vec1[i]*vec2)+res\n  return res", "user": "userdId_3", "attemptID": 4106, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-61.419704", "embeddingY": "-10.432712"},{"extension": "py", "date": "2020-05-11 00:31:42", "correct": "1", "upload": "def listeDecroissante(scores):\n  ok=True\n  i=0\n  while i<len(scores)-1 and ok:\n    if scores[i]<scores[i+1]:\n      ok=False\n    i+=1\n  return ok\n", "user": "userdId_12", "attemptID": 4107, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "20.398973", "embeddingY": "45.679558"},{"extension": "py", "date": "2020-04-14 04:27:22", "correct": "0", "upload": "def meilleurScoreJoueur(score,joueurs,nom):\n  res=0\n  trouve=False\n  i=0\n  while i<len(score) and not trouve:\n    if nom==listejoueur[i]:\n       res=score[i]\n       trouve=True     \n    i=i+1\n  return res", "user": "userdId_39", "attemptID": 4108, "exercise": "c96fadc94086276f98451a798b3bb730", "exercise_name": "meilleurScoreJoueur", "embeddingX": "-1.8250625", "embeddingY": "70.99747"},{"extension": "py", "date": "2020-05-04 21:30:57", "correct": "0", "upload": "def semestreValide(ue1,ue2):\n  res=False\n  if ue1>=10 and ue2>=10 or ue1+ue2>=20:\n    res=True\n  elif ue1<10:\n    res=False\n  return res", "user": "userdId_8", "attemptID": 4109, "exercise": "70ae7ad6cf504e0fa8cedebd8e8a825f", "exercise_name": "semestreValide", "embeddingX": "68.03038", "embeddingY": "-1.4668932"},{"extension": "py", "date": "2020-04-12 12:21:09", "correct": "0", "upload": "def suiteGeo(liste):\n    if len(liste)==0 or len(liste)==1:\n      res=True\n    else:\n      res=True\n      for i in range(1,len(liste)):\n        if liste[i-1]==0:\n          res=False\n        else:\n          x=liste[1]/liste[0]\n          if liste[i]!=liste[i-1]*x:\n            res=False\n    return res", "user": "userdId_11", "attemptID": 4110, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "-15.54894", "embeddingY": "-83.64312"},{"extension": "py", "date": "2020-03-17 06:31:45", "correct": "0", "upload": "def distribution(liste,n):\n  res=[0]*(n+1)\n  for elem in liste:\n    res=[elem]+1\n  return res", "user": "userdId_23", "attemptID": 4111, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-57.881035", "embeddingY": "-7.0266747"},{"extension": "py", "date": "2020-03-10 21:39:03", "correct": "0", "upload": "def ecart(liste):\n  res=0\n  if len(liste)==0:\n    res=None\n  if len(liste)==1:\n    res=0\n  return res", "user": "userdId_14", "attemptID": 4112, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "11.578499", "embeddingY": "-49.524757"},{"extension": "py", "date": "2020-03-22 08:48:03", "correct": "1", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n    if annee1<annee2:\n      res=-1\n    elif annee1>annee2: \n      res=1\n    else:\n      if mois1<mois2:\n        res=-1\n      elif mois1>mois2:\n        res=1\n      else:\n        if jour1<jour2:\n          res=-1\n        elif jour1>jour2:\n          res=1\n        else:\n          res=0\n    return res\n      ", "user": "userdId_47", "attemptID": 4113, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "81.91097", "embeddingY": "-33.224064"},{"extension": "py", "date": "2020-04-06 02:21:48", "correct": "0", "upload": "def suiteGeo(liste):\n  ok=True\n  i=0\n  if len(liste)<=1 :\n    ok=True\n  else :\n    while i<(len(liste)-1) and ok :\n      if (liste[i]*liste[i+1])==0 :\n        ok=False\n      elif liste[i]!=(liste[1]//liste[0])**i:\n        ok=False\n      i+=1\n  return ok", "user": "userdId_15", "attemptID": 4114, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "51.302937", "embeddingY": "46.252087"},{"extension": "py", "date": "2020-04-05 12:16:01", "correct": "1", "upload": "def sousChaine(s1,s2):\n    res = True\n    if s1 not in s2:\n        res = False\n        \n    return res", "user": "userdId_4", "attemptID": 4115, "exercise": "a7cdd094daa2f0bfccc7a4ec419f7243", "exercise_name": "sousChaine", "embeddingX": "47.977455", "embeddingY": "-15.318408"},{"extension": "py", "date": "2020-03-30 02:48:59", "correct": "0", "upload": "def fusion(liste1,liste2):\n  liste=[]\n  liste.extend(liste1)\n  liste.extend(liste2)\n  i=0\n  n=liste[0]\n  res=[]\n  while i<len(liste) :\n    if n>liste[i] :\n      res.append(liste[i])\n    elif n<liste[i] :\n      res.append(n)\n      n=liste[i]\n    i=i+1\n  \n  return res", "user": "userdId_15", "attemptID": 4116, "exercise": "6613efb6c873b142dc2b6040c14eb616", "exercise_name": "fusion", "embeddingX": "-33.436802", "embeddingY": "39.87019"},{"extension": "py", "date": "2020-03-06 00:40:58", "correct": "0", "upload": "def moyenne(liste):\n  res=0\n  cpt=0\n  if len(liste)==0:\n    moy=0\n  else:\n     for i in liste:\n       res=res+i\n       cpt=cpt+1\n  moy=res*cpt\n  return my", "user": "userdId_14", "attemptID": 4117, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "3.064793", "embeddingY": "-7.9315557"},{"extension": "py", "date": "2020-04-12 05:07:26", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=False\n  c=[]\n  for i in range(len(liste)-1):\n    c=a*liste[i]+b\n    c.append(liste)\n    if c==liste:\n      res=True\n  return res", "user": "userdId_8", "attemptID": 4118, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-71.589195", "embeddingY": "17.889215"},{"extension": "py", "date": "2020-03-16 05:40:23", "correct": "0", "upload": "def doubleLettre(mot):\n  res=0\n  prec=''\n  for c in mot:\n    if prec==c:\n      res=True\n    else:\n      res=False\n    prec=c\n  return res", "user": "userdId_18", "attemptID": 4119, "exercise": "00da9cf1fa2b468d915724499459ed8f", "exercise_name": "doubleLettre", "embeddingX": "15.826837", "embeddingY": "-6.850916"},{"extension": "py", "date": "2020-04-12 05:39:54", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=False\n  c=[]\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n    c=range(0,len(liste),0)+d\n  return c", "user": "userdId_8", "attemptID": 4120, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-76.10255", "embeddingY": "28.977543"},{"extension": "py", "date": "2020-03-06 00:32:06", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    voy=None\n  else:\n    voy=0\n    for i in mot:\n      if mot[i] in \"aeiouy\":\n        voy=voy+1\n  return voy", "user": "userdId_13", "attemptID": 4121, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "3.0527997", "embeddingY": "-43.17293"},{"extension": "py", "date": "2020-04-05 23:22:04", "correct": "1", "upload": "def compteChiffre(chiffre,nombre):\n  liste=[]\n  chif=0\n  res=0\n  i=0\n  if nombre==0 :\n    liste.append(nombre)\n  else :\n    while nombre!=0 :\n      chif=nombre%10\n      liste.append(chif)\n      nombre=nombre//10\n  \n  while i<len(liste) :\n    if liste[i]==chiffre :\n      res+=1\n    i+=1\n  return res", "user": "userdId_15", "attemptID": 4122, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "19.25976", "embeddingY": "18.461739"},{"extension": "py", "date": "2020-03-31 00:06:37", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n  cpt=0\n  trouve=False\n  i=0\n  res=0\n  while i<len(l) and trouve:\n    if l[i]==x:\n      cpt=cpt+1\n    if cpt==n:\n      trouve=True\n    i=i+1\n    if trouve==True:\n      res=i-1\n    else:\n      res=None\n  return res\n\n      \n    ", "user": "userdId_28", "attemptID": 4123, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "0.68961346", "embeddingY": "47.568817"},{"extension": "py", "date": "2020-03-15 03:15:00", "correct": "0", "upload": "def polynome(a,b,c):\n    d=((b*b)-(4*a*c))\n    print(\"delta=\",d)\n    if d<0:\n      print(\"pas de solution\")\n    else:\n      if d>0:\n        x1=(-b + sqrt(d))/(2*a)\n        x2=(-b - sqrt(d))/(2*a)\n        print(\"les deux r\u00e9ponses sont\",x1,\"et\",x2)\n      else:\n        print(\"la solution est\",-b/(2*a))\n ", "user": "userdId_21", "attemptID": 4124, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-51.66012", "embeddingY": "6.375171"},{"extension": "py", "date": "2020-03-02 02:44:03", "correct": "0", "upload": "def bissextile(annee):\n  a=(annee/400)\n  b=(annee//400)\n  if a==b :\n    res=True\n  else :\n    res=False\n    \n  return res", "user": "userdId_15", "attemptID": 4125, "exercise": "a7d37636649c0ada991520788deeb2d0", "exercise_name": "bissextile", "embeddingX": "21.992529", "embeddingY": "24.002733"},{"extension": "py", "date": "2020-03-22 09:01:09", "correct": "1", "upload": "def reconstruireChainePartielle(s,n):\n  res=''\n  for i in range(0,len(s),n) :\n    res=res+s[i]\n  return res", "user": "userdId_28", "attemptID": 4126, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-59.961044", "embeddingY": "-41.610172"},{"extension": "py", "date": "2020-04-08 03:31:43", "correct": "1", "upload": "def nextConway(s):\n    cpt = 0\n    valeur = s[0]\n    res = \"\"\n    for num in s:\n        if num == valeur:\n            cpt = cpt + 1\n        else:\n            res = res + str(cpt) + str(valeur)\n            cpt = 1\n            valeur = num\n    res = res + str(cpt) + str(valeur)\n    return res", "user": "userdId_42", "attemptID": 4127, "exercise": "a580c32690609356dae4401b3c89a3b8", "exercise_name": "nextConway", "embeddingX": "8.106749", "embeddingY": "-5.5343313"},{"extension": "py", "date": "2020-04-20 22:53:45", "correct": "1", "upload": "def meilleurScoreJoueur(score,joueur,nom):\n  i=0\n  while i<len(score):\n    if nom==joueur[i]:\n      return score[i]\n    i+=1\n  return 0", "user": "userdId_9", "attemptID": 4128, "exercise": "c96fadc94086276f98451a798b3bb730", "exercise_name": "meilleurScoreJoueur", "embeddingX": "-13.380404", "embeddingY": "67.95732"},{"extension": "py", "date": "2020-03-02 03:09:15", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1-annee2<0:\n    return -1 \n  else:\n    if mois1-mois2<0:\n      return -1\n    else:\n      if jour1-jour2<0:\n        return -1\n      elif jour1==jour2:\n        return 0\n      else:\n        return 1\n      \ncompareDates(10,1,2020,14,2,2020)\ncompareDates(14,2,2020,11,2,2020)\ncompareDates(10,1,2020,10,1,2020)", "user": "userdId_1", "attemptID": 4129, "exercise": "af7c1467ef9f7684d9ff58734067ae98", "exercise_name": "compareDates", "embeddingX": "91.09976", "embeddingY": "-15.731439"},{"extension": "py", "date": "2020-03-06 00:19:54", "correct": "0", "upload": "def nbVoyelles(mot):\n  voyel=\"aeiouy\"\n  if len(mot)==0:\n    voy=None\n  else:\n    voy=0\n    for i in range(mot):\n      if voyel[i] == len(mot):\n        voy=voy+1\n  return voy", "user": "userdId_13", "attemptID": 4130, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-0.32192335", "embeddingY": "-43.744957"},{"extension": "py", "date": "2020-04-12 07:01:39", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  if liste==[]:\n    res=True\n  c=[]\n  res=False\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n    c=[liste[0]]/len(liste)-1+c\n  return c", "user": "userdId_8", "attemptID": 4131, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-67.163216", "embeddingY": "18.31653"},{"extension": "py", "date": "2020-03-03 00:16:53", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  res= 0\n  if jour1 < jour2 and mois1 <= mois2 and annee1 <= annee2:\n    res= res -1\n  if jour1 == jour2 and mois1 == mois2 and annee1 == annee2:\n    res= res + 0\n  if jour1 > jour2 and mois1 >= mois2 and annee1 >= annee2:\n    res= res + 1\n    \n  return res\n  \n ", "user": "userdId_7", "attemptID": 4132, "exercise": "af7c1467ef9f7684d9ff58734067ae98", "exercise_name": "compareDates", "embeddingX": "81.64598", "embeddingY": "-17.576492"},{"extension": "py", "date": "2020-04-06 15:18:54", "correct": "0", "upload": "def compteChiffre(x,y):\n  cpt=0\n  i=0\n  for i in range(y):\n    if y[i]==x:\n      cpt=cpt+1\n    i=i+1\n  return cpt", "user": "userdId_3", "attemptID": 4133, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-20.415325", "embeddingY": "-31.385706"},{"extension": "py", "date": "2020-03-31 04:22:32", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n  cpt=0\n  trouve=0\n  i=0  \n  while i<len(l) and trouve==False:\n    if l[i]==x:\n      cpt=cpt+1\n    if cpt==n:\n      trouve=True\n  i=i+1    \n#post-traitement\n  if trouve!=n:\n    i=-1\n  return i    ", "user": "userdId_39", "attemptID": 4134, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-1.2318494", "embeddingY": "76.13551"},{"extension": "py", "date": "2020-03-19 06:05:36", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1<annee2:\n    res=-1\n  elif jour1==None or mois1==None or annee1==None or jour2==None or mois2==None or annee2==None:\n    res=None\n  elif jour1==jour2 and mois1==mois2 and annee1==annee2:\n      res=0\n  else:\n    res=1\n  return res", "user": "userdId_34", "attemptID": 4135, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "76.62036", "embeddingY": "-24.668222"},{"extension": "py", "date": "2020-04-05 03:33:50", "correct": "0", "upload": "def minimum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=liste[0]\n    for i in range(1,len(liste)-1):\n      if liste[i]<res:\n        res=liste[i]\n  return res", "user": "userdId_26", "attemptID": 4136, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "23.365566", "embeddingY": "-69.53297"},{"extension": "py", "date": "2020-03-22 08:25:18", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n    if fin2>=debut1 and fin1>=debut2:\n      res=True\n    else:\n      res=False ", "user": "userdId_47", "attemptID": 4137, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "50.153038", "embeddingY": "-25.069643"},{"extension": "py", "date": "2020-04-12 07:15:58", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  if liste==[]:\n    res=True\n  c=[]\n  f=[]\n  res=False\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n    e=liste[0]\n    f.append(e)\n  f.extend(c)\n  return f", "user": "userdId_8", "attemptID": 4138, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-76.667816", "embeddingY": "26.416267"},{"extension": "py", "date": "2020-03-19 23:52:39", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  res=\"\"\n  if (longueur+debut)>len(s):\n    longueur=len(s)\n  else:\n    longeur=debut+longueur\n  for i in range(debut,longueur):\n    res=res+s[i]\n  return res", "user": "userdId_13", "attemptID": 4139, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-80.35783", "embeddingY": "11.735324"},{"extension": "py", "date": "2020-04-05 09:43:13", "correct": "1", "upload": "def compteChiffre(chiffre,nombre):\n  res=0\n  if nombre==0:\n    res=1\n  while nombre!=0:\n    if nombre%10==chiffre:\n      res+=1\n    nombre=nombre//10\n  return res", "user": "userdId_12", "attemptID": 4140, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "22.80102", "embeddingY": "10.326592"},{"extension": "py", "date": "2020-04-06 03:58:07", "correct": "0", "upload": "def suiteGeo(liste):\n    if liste==[] or len(liste)==1:\n      ok=True\n    elif 0 in liste:\n      ok=False\n    else:\n      ok=True\n      ctePrec=liste[1]/liste[0]\n      cteAct=None\n      i=2\n      while i<len(liste) and ok:\n        cteAct=liste[i]/liste[i-1]\n        if liste[0]*cteAct**i!=liste[i]:\n          ok=False\n        ctePrec=cteAct\n        i+=1\n    return ok", "user": "userdId_18", "attemptID": 4141, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "41.347225", "embeddingY": "65.02938"},{"extension": "py", "date": "2020-04-07 03:07:02", "correct": "0", "upload": "def motPalindrome(mot):\n  palindrome = True\n  i = 0\n  j = len(mot)-1\n  i=0\n  while i<j and palindrome :\n    if mot[i] != mot[j]:\n      palindrome = False\n  i = i + 1\n  j = j -1\n  return palindrome", "user": "userdId_52", "attemptID": 4142, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "19.79179", "embeddingY": "36.24348"},{"extension": "py", "date": "2020-03-17 06:40:24", "correct": "0", "upload": "def doubleLettre(mot):\n  c1=(0,len(mot),2)\n  c2=(1,len(mot),2)\n  for elem in mot:\n    if c1==c2:\n      res=False\n  else:\n    res=True\n  return res", "user": "userdId_8", "attemptID": 4143, "exercise": "00da9cf1fa2b468d915724499459ed8f", "exercise_name": "doubleLettre", "embeddingX": "16.975628", "embeddingY": "-2.2860491"},{"extension": "py", "date": "2020-03-31 04:26:04", "correct": "1", "upload": "def indiceOccurrence(n,x,l):\n  trouve=False\n  i=0\n  cpt=0\n  while i<len(l) and not trouve:\n    if l[i]==x:\n      cpt+=1\n    if cpt==n:\n      trouve=True\n    i+=1\n  if trouve:\n    res=i-1\n  else:\n    res=None\n  return res\n", "user": "userdId_36", "attemptID": 4144, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-1.5694244", "embeddingY": "68.87167"},{"extension": "py", "date": "2020-03-27 05:51:39", "correct": "0", "upload": "def quatrePlus100(liste):\n  res=[]\n  i=0\n  while i<len(liste) and len(res)<4:\n    if l[i]>100:\n      res.append(liste[i])\n    i=i+1\n  return res", "user": "userdId_30", "attemptID": 4145, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-29.991577", "embeddingY": "42.021015"},{"extension": "py", "date": "2020-03-22 11:05:20", "correct": "0", "upload": "def bissextile(annee):\n    if a%4==0 and a%100==0 or a%400==0:\n      res=True\n    else: \n      res=False\n    return res", "user": "userdId_21", "attemptID": 4146, "exercise": "a7d37636649c0ada991520788deeb2d0", "exercise_name": "bissextile", "embeddingX": "48.27668", "embeddingY": "4.7404714"},{"extension": "py", "date": "2020-04-03 00:45:48", "correct": "1", "upload": "def stockerChiffres(nombre):\n  res=[]\n  if nombre==0:\n    res=[0]\n  while nombre!=0:\n    res.append(nombre%10)\n    nombre=nombre//10\n  return res", "user": "userdId_1", "attemptID": 4147, "exercise": "49a87f644f84a443327fb4315b47f249", "exercise_name": "stockerChiffres", "embeddingX": "40.88812", "embeddingY": "13.375707"},{"extension": "py", "date": "2020-05-04 20:23:41", "correct": "0", "upload": "def polynome(a,b,c):\n  res=\"pas de solution\"\n  delta=b**2-4*a*c\n  if delta>0:\n    S1=(-b+delta**(1/2))/2*a\n    S2=(-b-delta**(1/2))/2*a\n    res='(S1,S2)'\n  return res", "user": "userdId_8", "attemptID": 4148, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-56.14536", "embeddingY": "9.642454"},{"extension": "py", "date": "2020-04-11 08:02:53", "correct": "0", "upload": "def sousChaine(s1,s2):\n  res=True\n  i=0\n  j=0\n  while i<len(s1) and j<len(s2) and s1[i]!=s2[j]:\n    j+=1\n  else:\n    while i<len(s1) and j<len(s2) and s1[i]==s2[j]:\n      if s1[i]==s2[j]:\n        res=False\n      i+=1\n      j+=1  \n  return res", "user": "userdId_8", "attemptID": 4149, "exercise": "4bdf8c9c5d020593e1771e4d3ae1ae0d", "exercise_name": "sousChaine", "embeddingX": "-4.832739", "embeddingY": "58.718086"},{"extension": "py", "date": "2020-03-17 06:43:05", "correct": "0", "upload": "def permutationListe(liste,permutation):\n  res=liste[0]\n  for elem in liste:\n    res[n]=liste[i]\n  return res", "user": "userdId_25", "attemptID": 4150, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-50.19754", "embeddingY": "-12.52349"},{"extension": "py", "date": "2020-03-10 21:16:55", "correct": "0", "upload": "def ecart(liste):\n  res=0\n  if len(liste)==0:\n    res=None\n  if len(liste)==1:\n    res=0\n  x=liste[0]\n  y=liste[0]\n  for i in range(1,len(liste)):\n    if liste[i]>x:\n      x=liste[i]\n    if liste[i]<Y:\n      y=liste[i]\n  res=x-y\n  return res", "user": "userdId_14", "attemptID": 4151, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "-0.9455704", "embeddingY": "-82.85779"},{"extension": "py", "date": "2020-04-06 08:10:47", "correct": "1", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=True\n  i=1\n  while i<len(liste):\n    if liste[i]!=a*liste[i-1]+b:\n      res=False\n    i+=1\n  return res", "user": "userdId_27", "attemptID": 4152, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-84.80883", "embeddingY": "21.510939"},{"extension": "py", "date": "2020-03-01 12:44:48", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if fin1 >= debut2 or debut1 >= fin2 :\n    res = True\n  else:\n    res = False\n  return res", "user": "userdId_42", "attemptID": 4153, "exercise": "6fd66bb2393fbf3809f1c6d04f3831f7", "exercise_name": "rendezVous", "embeddingX": "54.571228", "embeddingY": "-19.902231"},{"extension": "py", "date": "2020-04-10 01:04:08", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  str(nombre)\n  for i in range(nombre):\n    if chiffre==nombre[i]:\n      cpt=cpt+1\n  return cpt", "user": "userdId_3", "attemptID": 4154, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-24.353561", "embeddingY": "-28.747578"},{"extension": "py", "date": "2020-04-12 11:07:28", "correct": "0", "upload": "def phrasePalindrome(phrase):\n    if len(phrase)==0:\n      res=True\n    else:\n      res=True\n      i=0\n      x=''\n      while i<len(phrase)//2 and res:\n        if phrase[i]==x:\n          phrase=phrase-phrase[i]\n        if phrase[i]!=phrase[-(i+1)]:\n          res=False\n        i+=1\n    return res", "user": "userdId_11", "attemptID": 4155, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "33.818844", "embeddingY": "34.8132"},{"extension": "py", "date": "2020-03-31 06:20:56", "correct": "0", "upload": "def doubleChiffre(nombre):\n  res=False\n  com=[]\n  while nombre!=0:\n    com=nombre%10\n    nombre=nombre//10\n    if com in nombre:\n      res=True\n  return res\n", "user": "userdId_13", "attemptID": 4156, "exercise": "49a87f644f84a443327fb4315b47f249", "exercise_name": "stockerChiffres", "embeddingX": "15.340211", "embeddingY": "6.080135"},{"extension": "py", "date": "2020-03-13 00:59:05", "correct": "0", "upload": "def sommeNPremiersEntiersPairs(n):\n  for elem in range(2,n+1,2):\n    res=res+elem\n  return res\n    ", "user": "userdId_1", "attemptID": 4157, "exercise": "3030dc079e6607c253e89e8ef4784b74", "exercise_name": "sommeNPremiersEntiersPairs", "embeddingX": "-21.366703", "embeddingY": "10.337773"},{"extension": "py", "date": "2020-03-31 00:04:43", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n  cpt=0\n  trouve=False\n  i=0\n  res=None\n  while i<len(l) and trouve:\n    if l[i]==x:\n      cpt=cpt+1\n    if cpt==n:\n      trouve=True\n    res=i\n    i=i+1\n  return res\n\n      \n    ", "user": "userdId_28", "attemptID": 4158, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "0.72222304", "embeddingY": "47.580147"},{"extension": "py", "date": "2020-03-02 21:28:49", "correct": "1", "upload": "def polynome(a,b,c):\n  delta = (b**2)-(4*a*c)\n  if delta < 0 :\n    res = (\"pas de solution\")\n  elif delta == 0 :\n    res = (-b)/(2*a)\n  else :\n    x1 = (-b + delta**(1/2))/2*a\n    x2 = (-b - delta**(1/2))/2*a\n    res = (x1 , x2)\n  return res", "user": "userdId_17", "attemptID": 4159, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-56.073387", "embeddingY": "2.619886"},{"extension": "py", "date": "2020-03-05 07:00:32", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut1==debut2:\n    res=True\n  else:\n    for debut1 in range(fin2):\n      res=True\n      \n      \n      \n   \n  \n  return res\n  ", "user": "userdId_5", "attemptID": 4160, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "64.67002", "embeddingY": "-30.75379"},{"extension": "py", "date": "2020-04-06 12:32:36", "correct": "0", "upload": "def suiteAriGeo(liste):\n    if liste==[] or len(liste)==1:\n      ok1=True\n    else:\n      ok1=True\n      ctePrec=liste[1]-liste[0]\n      cteAct=None\n      i=2\n      while i<len(liste) and ok1:\n        cteAct=liste[i]-liste[i-1]\n        if liste[0]+i*ctePrec!=cteAct:\n          ok1=False\n        ctePrec=cteAct\n        i+=1\n    if liste==[] or len(liste)==1:\n      ok2=True\n    elif 0 in liste:\n      if liste[0]!=0:\n        ok2=True\n      while 0 in liste:\n        liste.remove(0)\n      if liste==[]:\n        ok2=True\n      else:\n        ok2=False\n    else:\n      ok2=True\n      i=1\n      while i<len(liste) and ok2:\n        cte=liste[i]/liste[i-1]\n        if liste[0]*cte**i!=liste[i]:\n          ok2=False\n        i+=1\n    ok3=True\n    trouve=False\n    i=0\n    while i>-len(liste)-1 and not trouve:\n      if liste[-i-1]!=0 and liste[-i-2]!=0:\n        cteGeo=(liste[-i-1])//liste[-i-2]\n        if cteGeo!=0:\n          cteAri=liste[-i-1]%cteGeo\n          trouve=True\n      i-=1\n    i=0\n    if cteGeo==1:\n      ok3=False\n    else:\n      while i<len(liste) and ok3:\n        if (cteGeo**i)*(liste[0]-cteAri/(1-cteGeo))+cteAri/(1-cteGeo)!=liste[i]:\n          ok3=False\n        i+=1\n    return ok1 or ok2 or ok3", "user": "userdId_18", "attemptID": 4161, "exercise": "4c9665daf155b115fe13218141fa1aff", "exercise_name": "suiteAriGeo", "embeddingX": "28.877071", "embeddingY": "84.23823"},{"extension": "py", "date": "2020-03-17 05:05:10", "correct": "1", "upload": "def reconstruireChainePartielle(s,n):\n  res=\"\"\n  for i in range(0,len(s),n):\n    res=res+s[i]\n  return res", "user": "userdId_8", "attemptID": 4162, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-60.799915", "embeddingY": "-41.45404"},{"extension": "py", "date": "2020-03-15 03:02:55", "correct": "0", "upload": "def polynome(a,b,c):\n    d=b*b-4*a*c\n    x1=()\n    x2=()\n    if d>0:\n      x1=-b-sqrt(d)/(2*a)\n      x2=-b+sqrt(d)/(2*a)\n    elif d==0:\n      x1=-b/2*a\n ", "user": "userdId_21", "attemptID": 4163, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-48.173096", "embeddingY": "10.707687"},{"extension": "py", "date": "2020-03-31 06:56:38", "correct": "0", "upload": "def doubleChiffre(nombre):\n  trouve=False\n  chPrec=None\n  while nombre!=0 and not trouve:\n    chiffre=nombre%10\n    nombre=nombre//10\n    if chPrec==nombre:\n      trouve=True\n    chPrec=chiffre\n  return trouve", "user": "userdId_9", "attemptID": 4164, "exercise": "c83ea6acd3e9f6f5543e87d515e8a44a", "exercise_name": "doubleChiffre", "embeddingX": "10.804843", "embeddingY": "21.363243"},{"extension": "py", "date": "2020-03-22 23:26:43", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut1<fin2 or debut2<fin1:\n    res=False\n  else:\n    res=True\n  return res", "user": "userdId_9", "attemptID": 4165, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "61.06926", "embeddingY": "-19.818846"},{"extension": "py", "date": "2020-04-12 08:40:56", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n    cpt=0\n    x=nombre%10\n    decomp=nombre\n    while decomp!=0:\n      if x==chiffre:\n        cpt+=1\n        decomp=decomp//10\n        x=decomp%10\n      else:\n        decomp=decomp//10\n        x=decomp%10\n    return cpt", "user": "userdId_11", "attemptID": 4166, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "7.0581174", "embeddingY": "15.454451"},{"extension": "py", "date": "2020-05-04 21:51:43", "correct": "1", "upload": "def maximum(liste):\n  if liste==[]:\n    res=None\n  else:\n    res=liste[0]\n    for i in range(1,len(liste)):\n      if liste[i]>res:\n        res=liste[i]\n  return res", "user": "userdId_26", "attemptID": 4167, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-6.692665", "embeddingY": "-63.945805"},{"extension": "py", "date": "2020-03-10 03:14:02", "correct": "0", "upload": "def jourNuit(heure):\n  if heure<0 or heure>24:\n    res=\"l'heure saisie est invalide\"\n  else:#l'heure est valide\n    if heure<5 or heure>=21:\n      res=\"On est la nuit\"\n    elif heure<12:\n      res=\"On est le matin\"\n    elif heure <17:\n      res=\"On est l'apr\u00e8s-midi\"\n    else:\n      res=\"On est le soir\"\n    if heure<6 or heure>=18:\n      res=res+\" et il fait nuit\"\n    else:\n      res=res+\" et il fait jour\"\n  return res", "user": "userdId_8", "attemptID": 4168, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "71.57811", "embeddingY": "15.5824375"},{"extension": "py", "date": "2020-03-06 23:41:40", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut1>=debut2 or fin1<=fin2 and fin1>=debut2:\n    res=True\n  else:\n    res=False\n  return res", "user": "userdId_8", "attemptID": 4169, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "53.453312", "embeddingY": "-23.990421"},{"extension": "py", "date": "2020-03-17 05:29:59", "correct": "0", "upload": "def distribution(liste,n):\n  cpt=[0]*4\n  for elem in liste:\n    cpt[elem]+=1\n  return cpt ", "user": "userdId_35", "attemptID": 4170, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-65.65123", "embeddingY": "-12.253148"},{"extension": "py", "date": "2020-03-23 21:10:12", "correct": "0", "upload": "def quatrePlus100(l):\n  res=[]\n  if (l[0]==None):\n    res=None\n  else:\n    for i in l:\n      if (i>100):\n        res.append(i)\n  return res", "user": "userdId_48", "attemptID": 4171, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "26.975676", "embeddingY": "-43.28046"},{"extension": "py", "date": "2020-03-21 05:53:06", "correct": "0", "upload": "def qualifJO(sexe,record,nbvictoires,champion):\n  if champion==True:\n    res=True\n  elif sexe=='M' and record<12 and nbvictoires>3:\n    res=True\n  else:\n    if sexe=='F' and record<15 and nbvictoires>3:\n          res=True\n    else:\n      res=False\n    return res", "user": "userdId_9", "attemptID": 4172, "exercise": "891e7b0ed5fbddb755edc84d479bc1ef", "exercise_name": "qualifJO", "embeddingX": "66.05074", "embeddingY": "-13.070136"},{"extension": "py", "date": "2020-03-14 03:21:21", "correct": "0", "upload": "def moyenne(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=0\n    cpt=0\n    for i in range(len(liste)):\n      res=res+i\n      cpt=cpt+1\n  res=res%cpt\n  return res", "user": "userdId_14", "attemptID": 4173, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-6.494088", "embeddingY": "-2.708929"},{"extension": "py", "date": "2020-04-16 23:53:23", "correct": "0", "upload": "def listeDecroissante(scores):\n  res=True\n  x=score[0]\n  for elem in score:\n    if x<elem:\n      res=False\n    x=elem\n  return res", "user": "userdId_14", "attemptID": 4174, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "-47.231445", "embeddingY": "-8.335257"},{"extension": "py", "date": "2020-04-05 06:43:12", "correct": "1", "upload": "def premiereOccurrenceLettre(lettre,mot):\n    trouve=False\n    i=0\n    while i<len(mot) and not trouve:\n      if mot[i]==lettre:\n        trouve=True\n      i+=1\n    if trouve==True:\n      i-=1\n    if trouve==False:\n      i=None\n    return i", "user": "userdId_18", "attemptID": 4175, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-0.5821723", "embeddingY": "60.93642"},{"extension": "py", "date": "2020-03-31 04:30:07", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n  cpt=0\n  trouve=0\n  i=0  \n  while i<len(l) and trouve==False:\n    if l[i]==x:\n      cpt=cpt+1\n    if cpt==n:\n      trouve=True\n  i=i+1    \n#post-traitement\n  if trouve:\n    res=i-1\n  else:\n    res=None  \n  return res      \n\n     \n", "user": "userdId_39", "attemptID": 4176, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-0.7239209", "embeddingY": "75.5444"},{"extension": "py", "date": "2020-03-17 06:40:54", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n  res=0\n  for i in mot:\n    if mot[i]==lettre:\n      res=i\n  return res", "user": "userdId_7", "attemptID": 4177, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-19.05197", "embeddingY": "-30.787952"},{"extension": "py", "date": "2020-04-12 08:22:06", "correct": "0", "upload": "def suiteAriGeo(liste):\n  i=0\n  while i<len(liste)-1:\n    a=liste[0]\n    b=liste[0]\n    if liste[i+1]==liste[i]+(liste[1]-liste[0]):\n      b=liste[1]-liste[0]\n    if liste[0]!=0:                        \n      if liste[i+1]==liste[1]/liste[0]:\n        a=liste[1]/liste[0]\n        b=0\n    if liste[i+1]==liste[1]-liste[0]+liste[0]:\n      b=liste[0]\n    i=i+1\n  ok=True\n  i=0\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=a*liste[i]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 4178, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "37.015007", "embeddingY": "82.30507"},{"extension": "py", "date": "2020-02-29 05:21:01", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n    if debut1>debut2:\n      if debut1>fin2:\n        res=False\n      else:\n        res=True\n    else:\n      if fin1>debut2:\n        res=True\n      else:\n        res=False\n    return res", "user": "userdId_18", "attemptID": 4179, "exercise": "6fd66bb2393fbf3809f1c6d04f3831f7", "exercise_name": "rendezVous", "embeddingX": "64.914215", "embeddingY": "-20.85928"},{"extension": "py", "date": "2020-03-24 03:26:32", "correct": "0", "upload": "def quatrePlus100(l):\n  res=[]\n  i=0\n  while i<len(l) and len(res)<4:\n      if l[i]>x:\n         res=res+[l[i]]\n      i=i+1\n  return res", "user": "userdId_16", "attemptID": 4180, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-29.572975", "embeddingY": "42.258396"},{"extension": "py", "date": "2020-03-13 00:57:57", "correct": "0", "upload": "def doubleLettre(mot):\n\tres=0\n\tfor l in mot:\n\t\tprec=''\n\t\tact=l\n\t\tif prec==act:\n\t\t\tres=1\n\tif res==1:\n\t\treturn True\n\tif res==0:\n\t\treturn False\n\t\t\t\n", "user": "userdId_19", "attemptID": 4181, "exercise": "00da9cf1fa2b468d915724499459ed8f", "exercise_name": "doubleLettre", "embeddingX": "11.370561", "embeddingY": "-5.7953243"},{"extension": "py", "date": "2020-03-17 06:25:56", "correct": "0", "upload": "def maximum(liste):\n    if len(liste)==0:\n      res=0\n    else:\n      res=liste[0]\n    for elem in liste:\n        \n        res=elem\n    return res", "user": "userdId_22", "attemptID": 4182, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "7.0495667", "embeddingY": "-39.4257"},{"extension": "py", "date": "2020-03-19 05:31:11", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if jour1<jour2 and mois1<mois2 and annee1<annee2:\n    res=-1\n    if jour1>jour2 and mois1>mois2 and annee1>annee2:\n      res=1\n  else:\n    res=0\n  return res", "user": "userdId_34", "attemptID": 4183, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "80.70119", "embeddingY": "-27.240528"},{"extension": "py", "date": "2020-03-20 00:18:52", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  res=\"\"\n  if debut+longueur>len(s):\n    fin=len(s)\n  for i in range(debut,debut+longueur):\n    res=res+s[i]\n  else:\n    fin=debut+longueur\n  return res\n    ", "user": "userdId_34", "attemptID": 4184, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-85.5235", "embeddingY": "19.30992"},{"extension": "py", "date": "2020-04-07 03:55:22", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  j=0\n  ok=True\n  raison=None\n  if len(liste)>1:\n    while i<len(liste) and liste[0]!=0 and raison==None:\n      raison=liste[i+1]/liste[i]\n      i+=1\n    while j<len(liste)-1 and ok:\n      ok=liste[j+1]==liste[j]*raison\n      j+=1\n  return ok", "user": "userdId_12", "attemptID": 4185, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "22.398859", "embeddingY": "70.07751"},{"extension": "py", "date": "2020-03-07 00:13:13", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if (debut1>=debut2 or fin1<=fin2) and fin1>debut2:\n    res=True\n  else:\n    res=False\n  return res", "user": "userdId_8", "attemptID": 4186, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "53.93496", "embeddingY": "-24.58414"},{"extension": "py", "date": "2020-04-09 09:04:27", "correct": "1", "upload": "def sousChaine(s1,s2):\n    if len(s1)==0:\n      res=True\n    else:\n      res=False\n      if s1 in s2:\n        res=True\n    return res\n", "user": "userdId_11", "attemptID": 4187, "exercise": "4bdf8c9c5d020593e1771e4d3ae1ae0d", "exercise_name": "sousChaine", "embeddingX": "42.710503", "embeddingY": "-16.906227"},{"extension": "py", "date": "2020-03-01 12:15:50", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if fin1 > debut2 or fin2 < debut1 :\n    res = True\n  else:\n    res = False\n  return res", "user": "userdId_42", "attemptID": 4188, "exercise": "6fd66bb2393fbf3809f1c6d04f3831f7", "exercise_name": "rendezVous", "embeddingX": "62.396915", "embeddingY": "-20.651396"},{"extension": "py", "date": "2020-03-05 23:55:22", "correct": "0", "upload": "def maximum(liste):\n  res=0\n  for i in range(len(liste)) :\n     if liste[i]>res :\n        res=res+liste[i]\n  return res", "user": "userdId_24", "attemptID": 4189, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-2.0750697", "embeddingY": "-65.58611"},{"extension": "py", "date": "2020-04-07 04:07:16", "correct": "1", "upload": "def elemAri(n,u0,r):\n  cpt=u0\n  i=0\n  while i<n:\n    cpt=cpt+r\n    i=i+1\n  return cpt\n  ", "user": "userdId_1", "attemptID": 4190, "exercise": "f239498950e974e29e01472749d9a09d", "exercise_name": "elemAri", "embeddingX": "-8.741327", "embeddingY": "26.083197"},{"extension": "py", "date": "2020-04-13 22:47:17", "correct": "0", "upload": "def listeDecroissante(scores):\n  res=False\n  if scores==[]:\n    res=True\n  for i in range(len(scores)-1):\n    if scores[i]>scores[1+i]:\n      res=True\n  return res", "user": "userdId_8", "attemptID": 4191, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "-8.157178", "embeddingY": "-69.02813"},{"extension": "py", "date": "2020-03-05 22:01:27", "correct": "0", "upload": "def maximum(l):\n  res=l[0]\n  for i in range(len(l)):\n    if res<i:\n      res=i\n  return res", "user": "userdId_48", "attemptID": 4192, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "30.42468", "embeddingY": "-70.51597"},{"extension": "py", "date": "2020-03-15 03:21:44", "correct": "0", "upload": "def polynome(a,b,c):\n    delta=(b**2)-(4*a*c)\n    if delta<0:\n      return(\"pas de solution\")\n    x=(-b-(sqrt(delta)))/(2*a)\n    y=(-b+(sqrt(delta)))/(2*a)\n    if delta>0:\n      return(x,y)\n    if delta==0:\n      return(x)\n \n\n ", "user": "userdId_21", "attemptID": 4193, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-50.22876", "embeddingY": "7.4125195"},{"extension": "py", "date": "2020-03-15 01:22:15", "correct": "0", "upload": "def qualifJO(sexe,record,nbvictoires,champion):\n  if champion==True:\n    res=True\n  else:#False continuer la fonction \n    if sexe==M:\n      if record<12:\n        if nbvictoires>=3:\n          res=True\n    if sexe==F:\n      if record<15:\n        if nbvictoires>=3:\n          res=True\n    else:\n      res=False\n  return res", "user": "userdId_8", "attemptID": 4194, "exercise": "78ec7738f3a7f3553d4a5c653534c32d", "exercise_name": "qualifJO", "embeddingX": "59.87777", "embeddingY": "-11.095432"},{"extension": "py", "date": "2020-04-05 10:32:52", "correct": "1", "upload": "def elemGeo(n,u0,q):\n    return u0*q**n", "user": "userdId_4", "attemptID": 4195, "exercise": "d7c83a7fb9b49e28804e55955ad06968", "exercise_name": "elemGeo", "embeddingX": "-39.88411", "embeddingY": "19.745302"},{"extension": "py", "date": "2020-03-13 00:40:50", "correct": "1", "upload": "def sommeNPremiersEntiers(n):\n  res=0\n  for i in range(1,n+1):\n    res=res+i\n  return res", "user": "userdId_38", "attemptID": 4196, "exercise": "c315a540cf0bfb0182dc114c6f0eafd1", "exercise_name": "sommeNPremiersEntiers", "embeddingX": "-19.163305", "embeddingY": "12.884814"},{"extension": "py", "date": "2020-03-17 05:02:35", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  res=''\n  for i in range (debut,debut+longueur):\n    res=res+s[i]\n  return res", "user": "userdId_25", "attemptID": 4197, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-71.38863", "embeddingY": "14.004284"},{"extension": "py", "date": "2020-03-10 02:53:42", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n  if mot=='':\n    cpt=None\n  else:\n    cpt=-1\n    for i in range(len(mot)):\n      if mot[i]!=lettre:\n        cpt=cpt+1\n      else:\n        return cpt\n  ", "user": "userdId_15", "attemptID": 4198, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-21.965134", "embeddingY": "-44.471966"},{"extension": "py", "date": "2020-03-13 00:57:39", "correct": "0", "upload": "def sommeNPremiersEntiersPairs(n):\n  somme=0\n  for i in range(1,n+1):\n      somme=somme+i\n  for elem in liste:\n    if elem%2==0:\n      somme=somme+elem\n  return somme\n    ", "user": "userdId_13", "attemptID": 4199, "exercise": "3030dc079e6607c253e89e8ef4784b74", "exercise_name": "sommeNPremiersEntiersPairs", "embeddingX": "-17.663717", "embeddingY": "14.718254"},{"extension": "py", "date": "2020-04-06 06:00:53", "correct": "1", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut2>fin1 or debut1>fin2:\n    res=False\n  else:\n    res=True\n  return res", "user": "userdId_16", "attemptID": 4200, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "63.894176", "embeddingY": "-22.446138"},{"extension": "py", "date": "2020-03-06 00:16:02", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    res=0\n  else:\n    for elem in mot:\n      res=0\n      if elem in 'a;e;i;o;u;y':\n        res=res+1\n  return res     ", "user": "userdId_14", "attemptID": 4201, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "5.609139", "embeddingY": "-29.174234"},{"extension": "py", "date": "2020-03-30 22:30:49", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n  \n  while i<len(l) and i<n:\n    if x==l[i]:\n      n=n+1\n    i=i+1\n  return i", "user": "userdId_19", "attemptID": 4202, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-50.18197", "embeddingY": "19.46809"},{"extension": "py", "date": "2020-03-06 00:22:15", "correct": "0", "upload": "def maximum(liste):\n res = liste[0]\n for elem in liste:\n    if elem>res:\n      res=elem\n \n    ", "user": "userdId_33", "attemptID": 4203, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "33.153053", "embeddingY": "-46.311676"},{"extension": "py", "date": "2020-03-05 23:47:25", "correct": "0", "upload": "def maximum(liste):\n  res=0\n  for i in range(len(liste)):\n      res=res+(len(liste))[i]\n  return res", "user": "userdId_41", "attemptID": 4204, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-42.072086", "embeddingY": "-33.985588"},{"extension": "py", "date": "2020-03-12 22:15:02", "correct": "1", "upload": "def maximum(liste):\n  if len(liste)==0:\n    max=None\n  else:\n    max=liste[0]\n  for i in range(1, len(liste)):\n    if liste[i]>max:\n      max=liste[i]\n  return max", "user": "userdId_46", "attemptID": 4205, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "12.476098", "embeddingY": "-70.644516"},{"extension": "py", "date": "2020-04-07 23:55:07", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  res=0\n  for i in nombre:\n    if i==chiffre:\n      res=res+1\n  return res", "user": "userdId_2", "attemptID": 4206, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-35.996197", "embeddingY": "-13.457744"},{"extension": "py", "date": "2020-03-22 23:26:25", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    return None\n  compteur=0\n  for element in mot:\n    if element in 'aeiouy':\n      compteur=compteur+1\n  return compteur", "user": "userdId_34", "attemptID": 4207, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "7.09484", "embeddingY": "-29.089634"},{"extension": "py", "date": "2020-03-24 05:10:56", "correct": "0", "upload": "def quatrePlus100(liste):\n    res=[]\n    i=0\n    while i<len(liste):\n      if liste[i]>100:\n        res.append(liste[i])\n      i=i+1\n    return res", "user": "userdId_9", "attemptID": 4208, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-26.169176", "embeddingY": "37.734303"},{"extension": "py", "date": "2020-04-14 03:46:45", "correct": "1", "upload": "def meilleurClassementJoueur(scores,joueurs,nom):\n    if nom not in joueurs:\n      return -1\n    for i in range(len(joueurs)):\n      if nom==joueurs[i]:\n        return i+1", "user": "userdId_18", "attemptID": 4209, "exercise": "be6ce0a06c5d396190024c7c681da95d", "exercise_name": "meilleurClassementJoueur", "embeddingX": "-25.31203", "embeddingY": "-38.116947"},{"extension": "py", "date": "2020-03-13 00:51:18", "correct": "0", "upload": "def sommeNPremiersEntiers(n):\n  if n<=0:\n    res=0\n  else:\n    elem=0\n    for elem in n:\n      res=elem+n \n  return res", "user": "userdId_5", "attemptID": 4210, "exercise": "c315a540cf0bfb0182dc114c6f0eafd1", "exercise_name": "sommeNPremiersEntiers", "embeddingX": "31.515772", "embeddingY": "-36.945877"},{"extension": "py", "date": "2020-04-11 00:34:41", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  c=True\n  if len(liste)==0:\n    c=True\n  elif 0 in liste:\n    c=False\n  else:\n    while i<(len(liste)-2) and c:\n      if liste[i+2]/liste[i+1]!=liste[i+1]/liste[i]:\n        c=False\n      i=i+1\n  return c", "user": "userdId_19", "attemptID": 4211, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "28.721619", "embeddingY": "56.19166"},{"extension": "py", "date": "2020-03-05 23:44:23", "correct": "0", "upload": "def maximum(liste):\n    max=0\n    if elem>max in liste:\n      max=elem\n    return max\n    ", "user": "userdId_46", "attemptID": 4212, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "8.660292", "embeddingY": "-20.969467"},{"extension": "py", "date": "2020-03-03 05:06:11", "correct": "1", "upload": "def somme(liste):\n  res=0 \n  for i in (liste):\n  \tres=res+i\n  return res", "user": "userdId_30", "attemptID": 4213, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-28.681896", "embeddingY": "3.4825017"},{"extension": "py", "date": "2020-04-12 05:37:03", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=False\n  c=[]\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n    c=liste[i]+d\n    c.append(d)\n  return c", "user": "userdId_8", "attemptID": 4214, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-79.63541", "embeddingY": "23.022194"},{"extension": "py", "date": "2020-03-13 00:53:57", "correct": "0", "upload": "def doubleLettre(mot):\n  res=None\n  prev=\" \"\n  for c in mot:\n    if prev==\" \" and c!=\" \":\n      res=True\n    else:\n      res=False\n      \n  return res", "user": "userdId_38", "attemptID": 4215, "exercise": "00da9cf1fa2b468d915724499459ed8f", "exercise_name": "doubleLettre", "embeddingX": "20.587185", "embeddingY": "-5.8279734"},{"extension": "py", "date": "2020-03-17 05:10:55", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  fin= debut+longueur\n  if fin>len(s):\n    res=debut+longueur\n  for i in range(debut,fin):\n      res=res+s[i]\n  return res", "user": "userdId_9", "attemptID": 4216, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-85.66621", "embeddingY": "18.7162"},{"extension": "py", "date": "2020-04-07 04:35:00", "correct": "1", "upload": "def compteChiffre(chiffre,nombre):\n  res=0\n  cpt=0\n  l=[]\n  decomp=nombre\n  if chiffre==0 and nombre==0:\n    res=1\n  while decomp!=0:\n    l.append(decomp%10)\n    decomp=decomp//10\n    if l[cpt]==chiffre:\n      res=res+1\n    cpt=cpt+1\n  return res", "user": "userdId_31", "attemptID": 4217, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "7.8037586", "embeddingY": "3.2156272"},{"extension": "py", "date": "2020-03-23 22:58:54", "correct": "0", "upload": "def quatrePlus100(liste):\n  res=[]\n  for i in range(len(liste)):\n    if liste[i]>100:\n      res=res+liste[i]\n    return res", "user": "userdId_9", "attemptID": 4218, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-7.758434", "embeddingY": "-64.404686"},{"extension": "py", "date": "2020-04-07 22:57:13", "correct": "0", "upload": "def suiteGeo(liste):\n  res = True\n  i = 0\n  if liste == [] or len(liste) == 1 :\n    res = True\n  else :\n    if liste [0] == 0 and liste [1] != 0:\n      res = False\n    else :\n      raison = liste[1]/liste[0]\n  while res and i < len(liste)-1 :\n    if liste[i]*raison != liste[i+1]:\n      res = False\n    i = i + 1\n  return res\n", "user": "userdId_17", "attemptID": 4219, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "30.823618", "embeddingY": "70.94949"},{"extension": "py", "date": "2020-03-24 05:00:09", "correct": "0", "upload": "def quatrePlus100(liste):\n  i=0\n  res=[]\n  while i<len(liste) and i<6:\n    if liste[i]>100:\n      res.append(liste[i])\n    i=i+1\n  return res\n", "user": "userdId_13", "attemptID": 4220, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-25.54232", "embeddingY": "39.83525"},{"extension": "py", "date": "2020-03-06 23:22:33", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut1>=debut2 or fin1<=fin2:\n    res=True\n  elif fin1<debut2:\n    res=False\n  else:\n    res=False\n  return res", "user": "userdId_8", "attemptID": 4221, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "54.829636", "embeddingY": "-21.499233"},{"extension": "py", "date": "2020-04-12 09:38:31", "correct": "0", "upload": "def suiteAriGeo(liste):\n  i=0\n  while i<len(liste)-1:\n    a=liste[0]\n    b=liste[0]\n    if liste[i]==-liste[i+1]:\n      a=-1\n      b=0\n    if liste[i+1]==liste[i]+(liste[1]-liste[0]):\n      b=liste[1]-liste[0]\n    if liste[0]!=0:                        \n      if liste[i+1]==liste[i]*liste[1]/liste[0]:\n        a=liste[1]/liste[0]\n        b=0\n    if liste[i+1]==liste[i]*(liste[1]-liste[0])+(liste[i]-(liste[i-1]*(liste[1]-liste[0]))):\n      a=liste[1]-liste[0]\n      b=liste[i]-(liste[i-1]*a)\n    i=i+1\n  ok=True\n  i=0\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=a*liste[i]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 4222, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "36.09133", "embeddingY": "85.71191"},{"extension": "py", "date": "2020-03-12 23:34:42", "correct": "0", "upload": "def jourNuit(heure):\n  if heure > 24 or heure < 0 :\n    res = \"l'heure saisie est invalide\"\n  elif heure >= 5 and heure < 12 :\n    res = \"on est le matin\"\n  elif heure >= 12 and heure < 17 :\n    res = \"on est l'apr\u00e8s-midi\"\n  elif heure >=17 and heure < 21 :\n    res = \"on est le soir\"\n  else :\n    res = \"on est la nuit\"\n  if heure >= 6 and heure < 18 :\n    res = res + \"et il fait jour\"\n  else :\n    res = res + \"et il fait nuit\"\n  return res", "user": "userdId_17", "attemptID": 4223, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "78.30761", "embeddingY": "20.33559"},{"extension": "py", "date": "2020-03-22 06:40:55", "correct": "1", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  res=''\n  if annee1==annee2 and mois1==mois2 and jour1==jour2:\n    res=0\n  if annee1<annee2:\n    res=-1\n  elif annee1>annee2:\n      res=1\n  if annee1==annee2 and mois1<mois2:\n    res=-1\n  elif annee1==annee2 and mois1>mois2:\n      res=1\n  if annee1==annee2 and mois1==mois2 and jour1<jour2:\n    res=-1\n  elif annee1==annee2 and mois1==mois2 and jour1>jour2:\n      res=1\n  return res", "user": "userdId_16", "attemptID": 4224, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "82.77256", "embeddingY": "-25.987741"},{"extension": "py", "date": "2020-03-22 12:23:47", "correct": "0", "upload": "def nbVoyelles(mot):\n  cpt=0\n  for i in mot:\n    if i in 'aeiouy':\n      cpt=cpt+1\n  return res", "user": "userdId_21", "attemptID": 4225, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "16.795876", "embeddingY": "-26.76714"},{"extension": "py", "date": "2020-04-12 12:03:30", "correct": "0", "upload": "def suiteGeo(liste):\n    if len(liste)==0:\n      res=True\n    else:\n      res=True\n      for i in range(1,len(liste)):\n        if liste[i-1]==0:\n          res=False\n        else:\n          x=liste[1]//liste[0]\n          if liste[i]==liste[i-1]*x:\n            res=True\n          else:\n            res=False\n    return res", "user": "userdId_11", "attemptID": 4226, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "-13.845795", "embeddingY": "-81.732155"},{"extension": "py", "date": "2020-04-12 08:40:07", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n    cpt=0\n    x=nombre%10\n    decomp=nombre\n    while decomp!=0:\n      if x==chiffre:\n        cpt+=1\n        decomp=decomp//10\n        x=decomp%10\n      else:\n        decomp=decomp//10\n        x=decomp%10\n    return cpt", "user": "userdId_11", "attemptID": 4227, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "6.893895", "embeddingY": "15.323193"},{"extension": "py", "date": "2020-04-14 04:30:35", "correct": "0", "upload": "def indiceInsertion(sc,scores):\n  i=0\n  res=None\n  while i<len(scores) and res==None:\n    if sc>=scores[i]:\n      res=i\n    i=i+1\n  return res", "user": "userdId_7", "attemptID": 4228, "exercise": "f8a820b2bd54d18d36716e3d703858f7", "exercise_name": "indiceInsertion", "embeddingX": "-22.45495", "embeddingY": "70.266716"},{"extension": "py", "date": "2020-03-31 06:04:43", "correct": "1", "upload": "def stockerChiffres(nombre):\n  res=[]\n  chiffre=0\n  nb=nombre\n  while nb:\n    chiffre=nb%10\n    nb=nb//10\n    res=res+[chiffre]\n  if len(res)==0:\n    res=[0]\n  return res", "user": "userdId_7", "attemptID": 4229, "exercise": "49a87f644f84a443327fb4315b47f249", "exercise_name": "stockerChiffres", "embeddingX": "-2.0738704", "embeddingY": "14.7853365"},{"extension": "py", "date": "2020-03-17 20:42:54", "correct": "1", "upload": "def permutationChaine(s):\n  res=''\n  for i in range(0,len(s)-1,2):\n    res=res+s[i+1]+s[i]\n  if len(s)%2!=0:\n    res=res+s[-1]\n  return res", "user": "userdId_12", "attemptID": 4230, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-36.08933", "embeddingY": "-58.64601"},{"extension": "py", "date": "2020-03-06 00:14:21", "correct": "1", "upload": "def ecart(liste):\n  if len(liste)==0:\n    res=None\n  elif len(liste)==1:\n    res=0\n  else:\n    res=0\n    res1=liste[0]\n    res2=liste[0]\n    for i in range(len(liste)):\n      if res1>liste[i]:\n        res1=liste[i]\n      if res2<liste[i]:\n        res2=liste[i]\n    res=res2-res1\n  return res", "user": "userdId_30", "attemptID": 4231, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "-0.3331652", "embeddingY": "-83.853485"},{"extension": "py", "date": "2020-04-07 23:39:16", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  ok=False\n  i=0\n  while i<len(phrase)//2:\n    if phrase[i]==\" \" and phrase[-i]==\" \":\n      ok=False\n    elif phrase[i]!=phrase[-i-1]:\n      ok=True\n    else:\n      ok=False\n    i+=1\n  if phrase==\"\":\n    ok=True\n  return ok", "user": "userdId_13", "attemptID": 4232, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "28.428728", "embeddingY": "36.022556"},{"extension": "py", "date": "2020-03-10 03:17:26", "correct": "0", "upload": "def jourNuit(heure):\n  if heure<0 or heure >24:\n    res=\"l'heure saisie est invalide\"\n  else:\n    if heure<5 or heure>=21:\n      res=\"on est la nuit\"\n    elif heure<12:\n      res=\"on est le matin\" \n    elif heure<17:\n      res=\"on est l'apres midi\"\n    elif heure<21:\n      res=\"on est la soir\"\n    if heure<6 or heure>18:\n      res=res+\" et il fait nuit\"\n    else:\n      res=res+\" et il fait jour\"\n  return res", "user": "userdId_16", "attemptID": 4233, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "71.97695", "embeddingY": "13.26287"},{"extension": "py", "date": "2020-03-23 00:08:05", "correct": "0", "upload": "def somme(liste):\n  res=0\n  for x in range(liste):\n    res+=x\n  return res", "user": "userdId_8", "attemptID": 4234, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-40.509132", "embeddingY": "-21.354923"},{"extension": "py", "date": "2020-04-06 04:08:13", "correct": "0", "upload": "def suiteAriGeo(liste):\n    if liste==[] or len(liste)==1:\n      ok1=True\n    else:\n      ok1=True\n      ctePrec=liste[1]-liste[0]\n      cteAct=None\n      i=2\n      while i<len(liste) and ok:\n        cteAct=liste[i]-liste[i-1]\n        if cteAct!=ctePrec:\n          ok1=False\n        ctePrec=cteAct\n        i+=1\n    if liste==[] or len(liste)==1:\n      ok2=True\n    elif 0 in liste:\n      ok2=False\n    else:\n      ok2=True\n      i=1\n      while i<len(liste) and ok:\n        cte=liste[i]/liste[i-1]\n        if liste[0]*cte**i!=liste[i]:\n          ok2=False\n        i+=1\n    ok=(ok1 or ok2)\n    return ok", "user": "userdId_18", "attemptID": 4235, "exercise": "4c9665daf155b115fe13218141fa1aff", "exercise_name": "suiteAriGeo", "embeddingX": "27.69334", "embeddingY": "83.04464"},{"extension": "py", "date": "2020-04-07 04:29:56", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  res=0\n  cpt=0\n  l=[]\n  decomp=nombre\n  while decomp!=0:\n    l.append(decomp%10)\n    decomp=decomp//10\n    cpt=cpt+1\n  for i in range(cpt):\n    if l[i]==chiffre:\n      res=res+1\n  return res", "user": "userdId_31", "attemptID": 4236, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "7.4996448", "embeddingY": "2.442975"},{"extension": "py", "date": "2020-04-05 11:12:07", "correct": "0", "upload": "def nextConway(s):\n    return int(s)", "user": "userdId_4", "attemptID": 4237, "exercise": "a580c32690609356dae4401b3c89a3b8", "exercise_name": "nextConway", "embeddingX": "-61.974777", "embeddingY": "10.852038"},{"extension": "py", "date": "2020-04-06 03:19:08", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  ok=True\n  i=0\n  if len(liste)<=1 :\n    ok=True\n  else :\n    while i<len(liste) and ok :\n      if liste[i+1]!=a*liste[i]+b :\n        ok=False\n    i+=1\n  return ok", "user": "userdId_15", "attemptID": 4238, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-66.8498", "embeddingY": "20.815277"},{"extension": "py", "date": "2020-03-16 02:08:14", "correct": "1", "upload": "def somme(liste):\n  res=0\n  for x in (liste):\n    res=res+x\n  return res", "user": "userdId_16", "attemptID": 4239, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-28.078697", "embeddingY": "3.612209"},{"extension": "py", "date": "2020-03-31 07:07:04", "correct": "0", "upload": "def nombreSymetrique(nombre):\n  nr=[]\n  if nombre==0:\n    nr=[0]\n  while nombre!=0:\n    res.append(nombre%10)\n    nombre=nombre//10\n  nr=True\n  i=0\n  while i<len(nr)//2 and res:\n    if nr[i]!=nr[-i-1]:\n      res=False\n    i+=1\n  return res", "user": "userdId_8", "attemptID": 4240, "exercise": "fae4d6a34289cf5bf06f9d6d17e8547e", "exercise_name": "nombreSymetrique", "embeddingX": "41.940582", "embeddingY": "17.278963"},{"extension": "py", "date": "2020-04-12 07:32:01", "correct": "0", "upload": "def suiteAriGeo(liste):\n  i=0\n  while i<len(liste) and len(liste)!=0:\n    a=liste[1]-liste[0]\n    b=liste[1]-liste[0]  \n  ok=True\n  i=0\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste) and ok:\n    if liste[i+1]!=a*liste[i]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 4241, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "15.534499", "embeddingY": "62.668293"},{"extension": "py", "date": "2020-03-16 23:43:54", "correct": "0", "upload": "def sommeNbPairs(liste):\n  for elem in liste:\n    if elem%2==0:\n      res=res+[i]\n  return res", "user": "userdId_12", "attemptID": 4242, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "28.76631", "embeddingY": "-21.542105"},{"extension": "py", "date": "2020-04-02 23:34:41", "correct": "1", "upload": "def listeSymetrique(l):\n  i=0\n  j=-1\n  ok=True\n  while i<(len(l))/2 and ok:\n    if l[i]!=l[j]:\n      ok=False\n    i=i+1\n    j=j-1\n  return ok", "user": "userdId_12", "attemptID": 4243, "exercise": "8eb27aeda471a467e2223abebeca886e", "exercise_name": "listeSymetrique", "embeddingX": "24.124569", "embeddingY": "61.630455"},{"extension": "py", "date": "2020-03-27 05:32:08", "correct": "0", "upload": "def quatrePlus100(liste):\n  i=0\n  res=[]\n  while i<4:\n    if liste[i]>100:\n      res.append(liste[i])\n    i=i+1\n  return res", "user": "userdId_12", "attemptID": 4244, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-26.502438", "embeddingY": "36.18152"},{"extension": "py", "date": "2020-03-27 05:44:52", "correct": "1", "upload": "def quatrePlus100(liste):\n  res=[]\n  i=0\n  n=0\n  while i<len(liste) and n<4:\n    if liste[i]>100:\n      res.append(liste[i])\n      n=n+1\n    i=i+1\n  return res", "user": "userdId_19", "attemptID": 4245, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-30.215431", "embeddingY": "42.113544"},{"extension": "py", "date": "2020-03-31 03:43:11", "correct": "0", "upload": "def fusion(liste1,liste2):\n  res=[]\n  i=0\n  j=0\n  while i<len(liste1) and i<len(liste2):\n    if liste1[i]<liste2[j]:\n      res.append(liste1[i])\n      i=i+1\n    else:\n      res.append(liste2[i])\n      j=j+1\n      while j<len(liste2):\n        res.append(liste2[j])\n        j=j+1\n      while i<len(liste1):\n          res.append(liste1[i])\n          i=i+1\n  return res", "user": "userdId_36", "attemptID": 4246, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-40.678738", "embeddingY": "46.474216"},{"extension": "py", "date": "2020-04-14 03:41:19", "correct": "1", "upload": "def meilleurScoreJoueur(scores,joueurs,nom):\n  if nom not in joueurs:\n    mSJ=0\n  else:\n    mSJ=0\n    for i in range(len(joueurs)):\n      if scores[i]>mSJ and joueurs[i]==nom:\n        mSJ=scores[i]\n  return mSJ", "user": "userdId_18", "attemptID": 4247, "exercise": "c96fadc94086276f98451a798b3bb730", "exercise_name": "meilleurScoreJoueur", "embeddingX": "-14.016271", "embeddingY": "-49.7418"},{"extension": "py", "date": "2020-05-04 21:50:46", "correct": "0", "upload": "def minimum(liste):\n  if liste==[]:\n    res=None\n  else:\n    res=liste[0]\n    for i in range(1,len(liste)-1):\n      if liste[i]<res:\n        res=liste[i]\n  return res\n", "user": "userdId_26", "attemptID": 4248, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "23.292595", "embeddingY": "-70.7521"},{"extension": "py", "date": "2020-03-31 00:46:13", "correct": "0", "upload": "def nombreSymetrique(nombre):\n  for nb in str(nombre):\n    res.append(int(nb))\n  \n  return listeSymetrique(res)", "user": "userdId_4", "attemptID": 4249, "exercise": "fae4d6a34289cf5bf06f9d6d17e8547e", "exercise_name": "nombreSymetrique", "embeddingX": "-45.432255", "embeddingY": "-5.038297"},{"extension": "py", "date": "2020-03-10 04:09:53", "correct": "1", "upload": "def sommeNbPairs(liste):\n  res=0\n  for i in range (len(liste)):\n    if liste[i]%2==0:\n      res=res+liste[i]\n  return res", "user": "userdId_16", "attemptID": 4250, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "-19.767254", "embeddingY": "-56.48954"},{"extension": "py", "date": "2020-04-12 07:34:02", "correct": "0", "upload": "def suiteAriGeo(liste):\n  i=1\n  while i<len(liste):\n    a=liste[1]-liste[0]\n    b=liste[1]-liste[0]  \n  ok=True\n  i=0\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=a*liste[i]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 4251, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "15.147265", "embeddingY": "63.548733"},{"extension": "py", "date": "2020-03-09 22:40:54", "correct": "1", "upload": "def minimum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=liste[0]\n    for i in range(len(liste)):\n      if liste[i]<res:\n        res=liste[i]\n  return res", "user": "userdId_12", "attemptID": 4252, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "27.009453", "embeddingY": "-68.897644"},{"extension": "py", "date": "2020-03-31 05:04:25", "correct": "1", "upload": "def listeSymetrique(l):\n  ok=True\n  i=0\n  while i<len(l) and ok:\n    if l[i]!=l[-i-1]:\n      ok=False\n    else:\n      ok=True\n    i+=1\n  return ok\n", "user": "userdId_13", "attemptID": 4253, "exercise": "8eb27aeda471a467e2223abebeca886e", "exercise_name": "listeSymetrique", "embeddingX": "22.730127", "embeddingY": "40.581944"},{"extension": "py", "date": "2020-03-29 22:02:31", "correct": "1", "upload": "def quatrePlus100(liste):\n  res = []\n  cpt=0\n  for i in liste:\n    if i>100 and cpt!=4:\n      res.append(i)\n      cpt+=1\n  return res\n", "user": "userdId_6", "attemptID": 4254, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "27.260628", "embeddingY": "-38.82849"},{"extension": "py", "date": "2020-04-06 15:15:55", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  i=0\n  for i in range(nombre):\n    if nombre[i]!=chiffre:\n      cpt=cpt+1\n    i=i+1\n  return cpt", "user": "userdId_3", "attemptID": 4255, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-21.911886", "embeddingY": "-31.740625"},{"extension": "py", "date": "2020-03-02 07:37:21", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1<=annee2 and mois1<=mois2 and jour1<jour2:\n    return -1\n  elif annee1==annee2 and mois1==mois2 and jour1==jour2:\n    return 0\n  elif annee1>=annee2 and mois1>=mois2 and jour1>jour2:\n    return 1\n  \ncompareDates(10,1,2020,14,2,2020)\ncompareDates(14,2,2020,11,2,2020)\ncompareDates(10,1,2020,10,1,2020)", "user": "userdId_1", "attemptID": 4256, "exercise": "af7c1467ef9f7684d9ff58734067ae98", "exercise_name": "compareDates", "embeddingX": "83.01677", "embeddingY": "-14.482049"},{"extension": "py", "date": "2020-03-12 23:51:50", "correct": "0", "upload": "def jourNuit(heure):\n  if heure>24 or heure<0:\n    afficher=\"l'heure saisie est invalide\"\n  else:\n    if 0<=heure<=5 or 5<=heure<=12:\n      afficher=\"on est le matin et il fait nuit\"\n    if 21<=heure<=24 and 0<=heure<=5:\n      afficher=\"on est la nuit et il fait nuit\"\n    if 12<=heure<=17 or 6<=heure<=18:\n      afficher=\"on est l'apres-midi et il fait jour\"\n    if 17<=heure<=21 or 6<=heure<=18:\n      afficher=\"on est le soir et il fait jour\"\n     \n    return afficher", "user": "userdId_38", "attemptID": 4257, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "72.59596", "embeddingY": "23.106415"},{"extension": "py", "date": "2020-03-12 22:04:53", "correct": "0", "upload": "def moyenne(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    cpt=0\n    res=0\n    for i in range (len(liste)):\n      res=res+liste[i]\n      cpt=cpt+1\n      res=res%cpt\n  return res\n  ", "user": "userdId_25", "attemptID": 4258, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-7.5094295", "embeddingY": "-3.5945957"},{"extension": "py", "date": "2020-03-10 04:19:22", "correct": "0", "upload": "def sommeNPremiersEntiers(n):\n  res=0\n  for e in range(n):\n    res=res+e\n  return res", "user": "userdId_26", "attemptID": 4259, "exercise": "c315a540cf0bfb0182dc114c6f0eafd1", "exercise_name": "sommeNPremiersEntiers", "embeddingX": "-21.667065", "embeddingY": "13.0346985"},{"extension": "py", "date": "2020-03-20 00:21:13", "correct": "1", "upload": "def reconstruireChainePartielle(s,n):\n  res=\"\"\n  for i in range (0,len(s),n):\n    res=res+s[i]\n  return res", "user": "userdId_1", "attemptID": 4260, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-59.82898", "embeddingY": "-41.287125"},{"extension": "py", "date": "2020-04-09 03:54:36", "correct": "1", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=True\n  i=1\n  while i<len(liste):\n    if liste[i]!=a*liste[i-1]+b:\n      res=False\n    i+=1\n  return res\ndef suiteAriGeo(liste):\n  i=1\n  res=True\n  if len(liste)>3:\n    ecart1=liste[1]-liste[0]\n    ecart2=liste[2]-liste[1]\n    if ecart1>0:\n      a=ecart2/ecart1\n      b=liste[1]-a*liste[0]\n      while i<len(liste):\n        res=verifSuiteAriGeo(liste,a,b)\n        i+=1 \n  return res", "user": "userdId_27", "attemptID": 4261, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "16.108263", "embeddingY": "76.97843"},{"extension": "py", "date": "2020-03-05 23:34:43", "correct": "0", "upload": "def somme(liste):\n  res=0\n  for elem in liste:\n    res=res+elem\n    return res", "user": "userdId_13", "attemptID": 4262, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-25.985025", "embeddingY": "4.9528317"},{"extension": "py", "date": "2020-03-06 00:18:00", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    return None\n  cpt=0\n  for elem in (len(mot)):\n    if elem in 'aeiouy':\n      cpt=cpt+1\n  return cpt", "user": "userdId_1", "attemptID": 4263, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "3.208816", "embeddingY": "-44.940094"},{"extension": "py", "date": "2020-03-05 23:47:04", "correct": "0", "upload": "def nbVoyelles(mot):\n  res=0\n  for i in range(len(mot)):\n    if mot[i]==('a,e,y,u,i,o'):\n      res=res+1\n  return res", "user": "userdId_30", "attemptID": 4264, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-8.876531", "embeddingY": "-52.061275"},{"extension": "py", "date": "2020-03-22 23:42:18", "correct": "0", "upload": "def moyenne(liste):\n  if len(liste)==0:\n    res=none\n  else:\n    x=0\n    cpt=0\n    for i in range(len(liste)):\n      cpt=cpt+1\n      x=x+liste[i]\n    res=x/cpt\n  return res", "user": "userdId_16", "attemptID": 4265, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-11.245188", "embeddingY": "-6.2413726"},{"extension": "py", "date": "2020-03-10 04:18:28", "correct": "0", "upload": "def sommeNPremiersEntiers(n):\n  res=0\n  for i in range(len(1,n)):\n    res=res+x\n  return res", "user": "userdId_8", "attemptID": 4266, "exercise": "c315a540cf0bfb0182dc114c6f0eafd1", "exercise_name": "sommeNPremiersEntiers", "embeddingX": "-39.65697", "embeddingY": "-25.116901"},{"extension": "py", "date": "2020-03-12 21:44:02", "correct": "1", "upload": "def nbVoyelles(mot):\n  cpt=0\n  for i in mot:\n    if i in 'aeiouy':\n      cpt=cpt+1\n  return cpt", "user": "userdId_20", "attemptID": 4267, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "16.260622", "embeddingY": "-24.46758"},{"extension": "py", "date": "2020-03-31 06:03:59", "correct": "0", "upload": "def doubleChiffre(nombre):\n  res=False\n  cpt=nombre\n  ctp2=0\n  while res==False:\n    cpt2=cpt%10\n    cpt=cpt//10\n    if cpt==cpt2:\n      res=True\n  return res\n\n    ", "user": "userdId_28", "attemptID": 4268, "exercise": "c83ea6acd3e9f6f5543e87d515e8a44a", "exercise_name": "doubleChiffre", "embeddingX": "12.391351", "embeddingY": "16.735176"},{"extension": "py", "date": "2020-03-30 22:06:15", "correct": "0", "upload": "def stockerChiffres(nombre):\n  temp = str(nombre)\n  res = temp\n  for i in range(len(temp)):\n    res[-(1+i)]=temp[i]\n  return res", "user": "userdId_6", "attemptID": 4269, "exercise": "49a87f644f84a443327fb4315b47f249", "exercise_name": "stockerChiffres", "embeddingX": "-55.7769", "embeddingY": "-28.214844"},{"extension": "py", "date": "2020-03-20 00:20:53", "correct": "0", "upload": "def reconstruireChainePartielle(s,n):\n  res=\"\"\n  for i in range (0,len(mot),n):\n    res=res+mot[i]\n  return res", "user": "userdId_1", "attemptID": 4270, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-32.52143", "embeddingY": "-20.053164"},{"extension": "py", "date": "2020-03-24 06:44:40", "correct": "0", "upload": "def fusion(liste1,liste2):\n  res=[1]\n  i=0\n  while i<len(liste1)+len(liste2) and len(res)==len(liste1)+len(liste2):\n    if liste1[i]>liste2[i]:\n      res=res+[liste2[i]]\n    elif liste1[i]==liste2[i]:\n      res=res+[liste1[i]]+[liste2[i]]\n    else:\n      res=res+[liste1[i]]\n    i=i+1\n  return res", "user": "userdId_26", "attemptID": 4271, "exercise": "6613efb6c873b142dc2b6040c14eb616", "exercise_name": "fusion", "embeddingX": "-22.059996", "embeddingY": "52.670055"},{"extension": "py", "date": "2020-03-05 22:18:34", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    return 0", "user": "userdId_14", "attemptID": 4272, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "13.759768", "embeddingY": "-48.455696"},{"extension": "py", "date": "2020-05-11 00:28:01", "correct": "0", "upload": "def listeDecroissante(scores):\n  ok=True\n  i=0\n  if len(scores)>1:\n    while i<len(scores)-1 and ok:\n      if scores[i]>scores[i+1]:\n        ok=False\n      i=i+1\n  return ok", "user": "userdId_12", "attemptID": 4273, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "16.727957", "embeddingY": "50.498955"},{"extension": "py", "date": "2020-03-17 05:59:42", "correct": "1", "upload": "def sousChaine(s,debut,longueur):\n  res=''\n  if debut+longueur>len(s):\n    fin=len(s)\n  else:\n    fin=debut+longueur  \n  for i in range(debut,fin):\n    res=res+s[i]\n  return res", "user": "userdId_25", "attemptID": 4274, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-78.693474", "embeddingY": "11.316299"},{"extension": "py", "date": "2020-04-08 00:35:53", "correct": "1", "upload": "def phrasePalindrome(phrase):\n  ok=True\n  i=0\n  j=0\n  while i<len(phrase)//2 and j<len(phrase)//2 and ok:\n    if phrase[i]==\" \":\n      i+=1\n    elif phrase[-j-1]==\" \":\n      j+=1\n    elif phrase[i]==phrase[-j-1]:\n      ok=True\n      i+=1\n      j+=1\n    else:\n      ok=False\n  if phrase==\"\":\n    ok=True\n  return ok", "user": "userdId_13", "attemptID": 4275, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "36.008194", "embeddingY": "32.55883"},{"extension": "py", "date": "2020-03-04 10:46:27", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2) :\n  if (debut1,fin1,debut2,fin2)in '1,10,7,20':\n     res=True\n  if (debut1,fin1,debut2,fin2)in '1,7,10,20':\n     res=False\n  if (debut1,fin1,debut2,fin2)in '20,25,10,20':\n     res=True\n   \n  return res\n  ", "user": "userdId_39", "attemptID": 4276, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "-68.74895", "embeddingY": "34.500122"},{"extension": "py", "date": "2020-04-06 17:07:28", "correct": "0", "upload": "def produitScalaire(vec1,vec2):\n  res=0\n  i1=0\n  i2=0\n  while i1<len(vec1) and i2<len(vec2):\n    res=res+(vec1[i1]*vec2[i2])\n  if vec1==[] and vec2==[]:\n    res=0\n  return res", "user": "userdId_3", "attemptID": 4277, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-14.244855", "embeddingY": "51.077515"},{"extension": "py", "date": "2020-03-06 00:00:16", "correct": "1", "upload": "def somme(liste):\n  res=0\n  for elem in liste:\n    res=res+elem\n  return res", "user": "userdId_45", "attemptID": 4278, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-28.897032", "embeddingY": "1.2330774"},{"extension": "py", "date": "2020-03-22 05:22:45", "correct": "0", "upload": "def maximum(liste):\n  maxi=liste[0]\n  for elem in liste:\n    if elem>maxi:\n      maxi=elem\n  return maxi", "user": "userdId_12", "attemptID": 4279, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "32.044636", "embeddingY": "-46.559708"},{"extension": "py", "date": "2020-03-17 06:00:54", "correct": "0", "upload": "def maximum(liste):\n    if len ((liste)==0):\n      res=none\n    else:\n         res=liste[0]\n         for elem in liste:\n            res=elem\n    return res", "user": "userdId_22", "attemptID": 4280, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "14.470206", "embeddingY": "-47.444492"},{"extension": "py", "date": "2020-04-06 05:29:14", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  i=0\n  mot=[]\n  phrs=[]\n  mts=True\n  faute=False\n  while i<len(phrase):\n    if phrase[i]!=\" \" and mts==True:\n      mot+=phrase[i]\n    elif phrase[i]==\" \":\n      mts=False\n    elif phrase[i]!=\" \":\n      phrs+=phrase[i]\n    i+=1\n  while i<len(mot) and faute==False:\n    if mot[i]==phrs[-i-1]:\n      res=True\n    else:\n      res=False\n      faute==True\n  return res", "user": "userdId_26", "attemptID": 4281, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "40.670135", "embeddingY": "35.18074"},{"extension": "py", "date": "2020-05-04 20:24:35", "correct": "0", "upload": "def polynome(a,b,c):\n  res=\"pas de solution\"\n  delta=b**2-4*a*c\n  if delta>0:\n    S1=(-b+delta**(1/2))/2*a\n    S2=(-b-delta**(1/2))/2*a\n    res=(S1,S2)\n  elif delta==0:\n    res=(-b)/2*a\n  return res", "user": "userdId_8", "attemptID": 4282, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-52.220997", "embeddingY": "9.861776"},{"extension": "py", "date": "2020-04-06 12:33:50", "correct": "0", "upload": "def suiteAriGeo(liste):\n    if liste==[] or len(liste)==1:\n      ok1=True\n    else:\n      ok1=True\n      ctePrec=liste[1]-liste[0]\n      cteAct=None\n      i=2\n      while i<len(liste) and ok1:\n        cteAct=liste[i]-liste[i-1]\n        if liste[0]+i*ctePrec!=cteAct:\n          ok1=False\n        ctePrec=cteAct\n        i+=1\n    if liste==[] or len(liste)==1:\n      ok2=True\n    elif 0 in liste:\n      if liste[0]!=0:\n        ok2=True\n      while 0 in liste:\n        liste.remove(0)\n      if liste==[]:\n        ok2=True\n      else:\n        ok2=False\n    else:\n      ok2=True\n      i=1\n      while i<len(liste) and ok2:\n        cte=liste[i]/liste[i-1]\n        if liste[0]*cte**i!=liste[i]:\n          ok2=False\n        i+=1\n    ok3=True\n    trouve=False\n    i=0\n    if len(liste)>1:\n      while i>-len(liste)-1 and not trouve:\n        if liste[-i-1]!=0 and liste[-i-2]!=0:\n          cteGeo=(liste[-i-1])//liste[-i-2]\n          if cteGeo!=0:\n            cteAri=liste[-i-1]%cteGeo\n            trouve=True\n        i-=1\n      i=0\n      if cteGeo==1:\n        ok3=False\n      else:\n        while i<len(liste) and ok3:\n          if (cteGeo**i)*(liste[0]-cteAri/(1-cteGeo))+cteAri/(1-cteGeo)!=liste[i]:\n            ok3=False\n          i+=1\n    return ok1 or ok2 or ok3", "user": "userdId_18", "attemptID": 4283, "exercise": "4c9665daf155b115fe13218141fa1aff", "exercise_name": "suiteAriGeo", "embeddingX": "28.853102", "embeddingY": "84.227066"},{"extension": "py", "date": "2020-03-30 02:42:25", "correct": "0", "upload": "def fusion(liste1,liste2):\n  liste=[]\n  liste.extend(liste1+liste2)\n  i=1\n  n=liste[0]\n  res=[]\n  while i<len(liste) :\n    if n>liste[i] :\n      res.append(liste[i])\n    elif n<liste[i] :\n      res.append(n)\n      n=liste[i]\n    i=i+1\n  \n  return res", "user": "userdId_15", "attemptID": 4284, "exercise": "6613efb6c873b142dc2b6040c14eb616", "exercise_name": "fusion", "embeddingX": "-33.443336", "embeddingY": "39.86364"},{"extension": "py", "date": "2020-03-27 06:06:47", "correct": "0", "upload": "def compare(chaine1,chaine2):\n  res=0\n  i=0\n  while i<len(chaine1) and res==0:\n    if chaine1[i]<chaine2[i]:\n      res=-1\n    if chaine1[i]>chaine2[i]:\n      res=1\n    else:\n      res=0\n    i=i+1\n  return res\n", "user": "userdId_19", "attemptID": 4285, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-25.471094", "embeddingY": "59.46287"},{"extension": "py", "date": "2020-03-06 00:27:24", "correct": "0", "upload": "def minimum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=liste[0]\n    for i in range(1,len(liste)):\n      if elem<liste[i]:\n        res=liste[i]\n  return res", "user": "userdId_14", "attemptID": 4286, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "27.422487", "embeddingY": "-65.567055"},{"extension": "py", "date": "2020-03-10 04:18:32", "correct": "1", "upload": "def sommeNbPairs(liste):\n  res=0\n  for nbrs in liste:\n    if nbrs%2==0:\n      res=res+nbrs\n  return res", "user": "userdId_26", "attemptID": 4287, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "29.543812", "embeddingY": "-18.290575"},{"extension": "py", "date": "2020-04-10 01:16:01", "correct": "1", "upload": "def suiteGeo(liste):\n  ok=True\n  i=0\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1and ok:\n    if liste[0]==0:\n      ok=False\n    if liste[i]!=0:\n      q=liste[1]/liste[0]\n    if liste[i]!=0:\n      if liste[i+1]/liste[i]!=q:\n        ok=False\n    if liste[i] and liste[i+1]==0:\n      ok=True\n    if liste[i]==0 and liste[i+1]==0:\n      ok=True\n    i=i+1\n  return ok\n  \n  ", "user": "userdId_34", "attemptID": 4288, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "35.22247", "embeddingY": "62.417984"},{"extension": "py", "date": "2020-04-07 23:38:24", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  res=0\n  i=0\n  while nombre>0:\n    if chiffre==nombre%10:\n      res=res+1\n    i=i+1\n    nombre=nombre//10\n  return res\n", "user": "userdId_19", "attemptID": 4289, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "16.44744", "embeddingY": "13.752365"},{"extension": "py", "date": "2020-03-17 05:40:08", "correct": "1", "upload": "def distribution(liste,n):\n  cpts=[0]*(n+1)\n  for elem in liste:\n    cpts[elem]=cpts[elem]+1\n  return cpts", "user": "userdId_8", "attemptID": 4290, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-58.960537", "embeddingY": "-14.903926"},{"extension": "py", "date": "2020-03-03 05:16:02", "correct": "1", "upload": "def somme(liste):\n    res=0\n    for elem in (liste):\n      res=res+elem\n    return res", "user": "userdId_8", "attemptID": 4291, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-29.79671", "embeddingY": "2.005098"},{"extension": "py", "date": "2020-04-07 23:12:26", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  res=False\n  prec=None\n  while nombre!=0 and not res:\n    nombre=nombre//10\n    if chiffre==prec:\n      res=True\n    prec=chiffre\n    cpt=cpt+1\n  return cpt\n", "user": "userdId_13", "attemptID": 4292, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "10.527613", "embeddingY": "24.272709"},{"extension": "py", "date": "2020-03-03 05:08:49", "correct": "0", "upload": "def nbVoyelles(mot):\n  res = 0\n  for elem in mot :\n    if elem in [\"aeiouy\"]:\n      res = res + 1\n  return res", "user": "userdId_17", "attemptID": 4293, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "14.191343", "embeddingY": "-33.9158"},{"extension": "py", "date": "2020-04-12 04:40:15", "correct": "1", "upload": "def sousChaine(s1,s2):\n    if len(s1)==0:\n      res=True\n    else:\n      res=False\n      if s1 in s2:\n        res=True\n    return res", "user": "userdId_11", "attemptID": 4294, "exercise": "4bdf8c9c5d020593e1771e4d3ae1ae0d", "exercise_name": "sousChaine", "embeddingX": "42.71089", "embeddingY": "-16.90518"},{"extension": "py", "date": "2020-04-07 20:14:44", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  chiffre=str(chiffre)\n  nombre=str(nombre)\n  i=0\n  for i in nombre:\n    if chiffre==nombre[i]:\n      cpt=cpt+1\n    i=i+1\n  return cpt", "user": "userdId_3", "attemptID": 4295, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-25.119911", "embeddingY": "-27.573492"},{"extension": "py", "date": "2020-04-07 01:18:35", "correct": "1", "upload": "def verifSuiteAriGeo(liste,a,b):\n  if len(liste)>1:\n    suite=liste[0]\n  i=1\n  res=True\n  while i<len(liste) and res==True:\n    suite=a*suite+b\n    if suite==liste[i]:\n      res=True\n    else:\n      res=False\n    i+=1\n  return res\n    \n    \n    ", "user": "userdId_26", "attemptID": 4296, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-78.45651", "embeddingY": "22.38268"},{"extension": "py", "date": "2020-03-19 23:27:20", "correct": "0", "upload": "def reconstruireChainePartielle(s,n):\n  res=''\n  for i in range(0,len(l),x):\n    res=res+l[i]\n  return res\n", "user": "userdId_40", "attemptID": 4297, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-32.286537", "embeddingY": "-19.19757"},{"extension": "py", "date": "2020-03-31 07:08:10", "correct": "1", "upload": "def nombreSymetrique(nombre):\n  nr=[]\n  if nombre==0:\n    nr=[0]\n  while nombre!=0:\n    nr.append(nombre%10)\n    nombre=nombre//10\n  res=True\n  i=0\n  while i<len(nr)//2 and res:\n    if nr[i]!=nr[-i-1]:\n      res=False\n    i+=1\n  return res", "user": "userdId_8", "attemptID": 4298, "exercise": "fae4d6a34289cf5bf06f9d6d17e8547e", "exercise_name": "nombreSymetrique", "embeddingX": "32.806976", "embeddingY": "38.044685"},{"extension": "py", "date": "2020-03-06 00:37:42", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    voy=0\n  else:\n    voy=0\n    for i in mot:\n      if mot[i] in [\"a\",\"e\",\"i\",\"o\",\"u\",\"y\"]:\n        voy=voy+1\n  return voy", "user": "userdId_13", "attemptID": 4299, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "10.354947", "embeddingY": "-38.09407"},{"extension": "py", "date": "2020-03-27 06:06:15", "correct": "0", "upload": "def compare(chaine1,chaine2):\n  res=0\n  i=0\n  while i<len(chaine1) and res==0:\n    if chaine1[i]<chaine2[2]:\n      res=-1\n    if chaine1[i]>chaine2[2]:\n      res=1\n    else:\n      res=0\n    i=i+1\n  return res\n", "user": "userdId_19", "attemptID": 4300, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-25.399187", "embeddingY": "59.367268"},{"extension": "py", "date": "2020-04-12 05:38:47", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n    if len(liste)==0:\n      res=True\n    else:\n      res=True\n      for i in range(0,len(liste)):\n        if liste[i+1]==a*liste[i]+b:\n          res=True\n        else:\n          res=False\n    return res\n    ", "user": "userdId_11", "attemptID": 4301, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-69.143196", "embeddingY": "28.754747"},{"extension": "py", "date": "2020-03-31 04:26:20", "correct": "0", "upload": "def stockerChiffres(nombre):\n  nombre = str(nombre)\n  i = 0\n  res = []\n  while i < len(nombre):\n    res.append (int(nombre[i]))\n    i = i + 1 \n  return res", "user": "userdId_17", "attemptID": 4302, "exercise": "49a87f644f84a443327fb4315b47f249", "exercise_name": "stockerChiffres", "embeddingX": "-39.937443", "embeddingY": "42.87951"},{"extension": "py", "date": "2020-03-23 22:39:51", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n    if jours1==jours2 and mois1==mois2 and annee1==annee2:\n      res=0\n    elif jours1<jours2 or mois1<mois2 or annee1<annee2:\n         res=-1\n    else:\n      res=1\n    return res", "user": "userdId_9", "attemptID": 4303, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "73.02735", "embeddingY": "-26.56267"},{"extension": "py", "date": "2020-03-06 00:20:28", "correct": "0", "upload": "def maximum(liste):\n  res= liste[0]\n  for elem in liste:\n    if  res < elem:\n      res=elem\n  return res", "user": "userdId_20", "attemptID": 4304, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "41.474445", "embeddingY": "-57.71181"},{"extension": "py", "date": "2020-03-23 22:10:57", "correct": "1", "upload": "def quatrePlus100(liste):\n    Plus100 = []\n    n = 0\n    i = 0\n    while n < len(liste):\n        if liste[n] > 100 and i < 4:\n            Plus100 += [liste[n]]\n            i += 1\n        n += 1\n    return Plus100", "user": "userdId_42", "attemptID": 4305, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-29.117483", "embeddingY": "43.880318"},{"extension": "py", "date": "2020-03-16 01:06:23", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut2<=fin1:\n    res=True\n  else:\n      res=False\n  return res", "user": "userdId_16", "attemptID": 4306, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "52.561424", "embeddingY": "-16.838415"},{"extension": "py", "date": "2020-04-12 05:11:02", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=False\n  c=[]\n  for i in range(len(liste)):\n    d=a*liste[i]+b\n    c.append(d)\n  return c", "user": "userdId_8", "attemptID": 4307, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-79.971794", "embeddingY": "10.42705"},{"extension": "py", "date": "2020-03-22 10:20:57", "correct": "0", "upload": "def bissextile(a):\n    if a%100!=0:\n      res=False\n    elif a%4==0 or a%400==0:\n      res=True\n    ", "user": "userdId_21", "attemptID": 4308, "exercise": "a7d37636649c0ada991520788deeb2d0", "exercise_name": "bissextile", "embeddingX": "45.34218", "embeddingY": "1.4634508"},{"extension": "py", "date": "2020-03-17 06:12:50", "correct": "0", "upload": "def permutationListe(liste,permutation):\n  res=[0]*(len(permutation))\n  for i in range(len(liste)):\n    res[i]=liste[i]  \n  return res", "user": "userdId_35", "attemptID": 4309, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-50.637524", "embeddingY": "-30.44775"},{"extension": "py", "date": "2020-04-12 10:01:14", "correct": "0", "upload": "def phrasePalindrome(phrase):\n    if len(phrase)==0:\n      res=True\n    else:\n      res=True\n      i=0\n      x=''\n      while i<len(phrase)//2 and res:\n        if phrase[i]!=phrase[-(i+1)] and x:\n          res=False\n        if phrase[i]=='':\n            res=False\n        i+=1\n    return res", "user": "userdId_11", "attemptID": 4310, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "34.488747", "embeddingY": "34.777958"},{"extension": "py", "date": "2020-04-02 23:32:21", "correct": "0", "upload": "def listeSymetrique(l):\n  i=0\n  j=-1\n  res=True\n  while i<(len(l))/2 and j<(-len(l))/2 and res==True:\n    if l[i]!=l[j]:\n      res=False\n    i=i+1\n    j=j-1\n  return res", "user": "userdId_12", "attemptID": 4311, "exercise": "8eb27aeda471a467e2223abebeca886e", "exercise_name": "listeSymetrique", "embeddingX": "4.7555904", "embeddingY": "44.520863"},{"extension": "py", "date": "2020-04-09 08:48:03", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n    cpt=0\n    if chiffre in nombre:\n      cpt+=1\n    return cpt\n    ", "user": "userdId_11", "attemptID": 4312, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "10.920985", "embeddingY": "-15.579923"},{"extension": "py", "date": "2020-04-06 06:22:46", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  i=0\n  for i in range(nombre):\n    if chiffre==i:\n      cpt=cpt+1\n    i=i+1\n  return cpt", "user": "userdId_3", "attemptID": 4313, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-17.552338", "embeddingY": "-24.444695"},{"extension": "py", "date": "2020-03-12 23:39:04", "correct": "0", "upload": "def jourNuit(heure):\n  Error=\"l'heure saisie est invalide\"\n  Time=\"On est\"\n  if heure<0 or heure>24:\n    res=Error\n  elif heure>=5 and heure<=12:\n    res=Time+' le matin'\n    if heure>=6 and heure<=18:\n      res=res+' et il fait jour'\n    else:\n      res=res+' et il fait nuit'\n  elif heure>12 and heure<=17:\n    res=Time+' l apr\u00e8s-midi et il fait jour'\n  elif heure>17 and heure<=21:\n    res=Time+' le soir'\n    if heure>=6 and heure<=18:\n      res=res+' et il fait jour'\n    else:\n      res=res+' et il fait nuit'\n  else:\n    res=Time+' la nuit et il fait nuit'\n    \n  \n    ", "user": "userdId_2", "attemptID": 4314, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "81.660934", "embeddingY": "15.444847"},{"extension": "py", "date": "2020-05-04 19:57:15", "correct": "1", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  res=True\n  if fin1<debut2 or debut1>fin2:\n    res=False\n  return res", "user": "userdId_8", "attemptID": 4315, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "62.191875", "embeddingY": "-20.576307"},{"extension": "py", "date": "2020-03-12 23:57:51", "correct": "0", "upload": "def jourNuit(heure):\n\tif heure<0 or heure>24:\n\t\tn=\"l'heure saisie est invalide\"\n\tif 6<=heure<=18:\n\t\tn='et il fait jour'\n\t\tif 6<=heure<=12:\n\t\t\tn='on est le matin '+n\n\t\tif 13<=heure<=16:\n\t\t\tn=\"on est l'apr\u00e8s-midi \"+n\n\t\telse:\n\t\t\tn='on est le soir '+n\n\tif heure<=5 or heure>=19:\n\t\tn='et il fait nuit'\n\t\tif heure<=4:\n\t\t\tn='on est la nuit '+n\n\t\tif heure==5:\n\t\t\tn='on est le matin '+n\n\t\tif 19<=heure<=21:\n\t\t\tn='on est le soir '+n\n\t\telse:\n\t\t\tn='on est la nuit '+n\n\treturn n\n\t\n\t\t\n", "user": "userdId_19", "attemptID": 4316, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "69.81128", "embeddingY": "19.910149"},{"extension": "py", "date": "2020-04-05 03:38:45", "correct": "0", "upload": "def moyenne(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    for elem in liste:\n      s+=elem\n    res=s//len(liste)\n  return res", "user": "userdId_26", "attemptID": 4317, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-8.222958", "embeddingY": "-17.247292"},{"extension": "py", "date": "2020-03-15 03:40:07", "correct": "0", "upload": "def polynome(a,b,c):\n    res=0\n    det=b**2-4*a*c\n    if det>0:\n      res=-b-(racine(det))/2*a\n      res=-b+(racine(det))/2*a\n    elif det<0:\n      res=0\n    else:\n      res=-b/2*a\n    return res\n      \n \n\n ", "user": "userdId_21", "attemptID": 4318, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-56.57797", "embeddingY": "3.4824698"},{"extension": "py", "date": "2020-03-21 06:01:02", "correct": "0", "upload": "def sommeNbPairs(liste):\n  res=0\n  for i in range(len(liste)):\n    if x%2==0:\n      res=res+liste[i]\n  return res", "user": "userdId_9", "attemptID": 4319, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "-4.789376", "embeddingY": "-42.431293"},{"extension": "py", "date": "2020-04-06 22:01:30", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n    res=0\n    for i in nombre:\n      if i==chiffre:\n        res=res+1\n    return res", "user": "userdId_28", "attemptID": 4320, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-35.978504", "embeddingY": "-12.907355"},{"extension": "py", "date": "2020-03-17 05:12:48", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  res=''\n  if debut+longueur>len(s):\n    fin=len(s)\n  else:\n    fin=debut+longueur\n  for i in range(debut,debut+longueur):\n    res=res+s[i]\n  return res", "user": "userdId_23", "attemptID": 4321, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-69.621", "embeddingY": "25.965137"},{"extension": "py", "date": "2020-03-05 07:04:20", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut1==debut2:\n    res=True\n  else:\n    for debut1 in range(fin2):\n      if fin1>fin2:\n        res=False\n      else:\n        res=True\n     \n      \n  return res\n  ", "user": "userdId_5", "attemptID": 4322, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "64.64264", "embeddingY": "-28.91254"},{"extension": "py", "date": "2020-03-20 00:29:09", "correct": "1", "upload": "def permutationChaine(s):\n  res=''\n  if len(s)<1:\n  \tres=''\n  else:\n    for i in range(0,len(s)-1,2):\n      res=res+s[i+1]\n      res=res+s[i]\n    if ((len(s)-1)//2)!=((len(s)-1)/2): \n      res=res\n    else:\n      l=len(s)\n      res=res+s[l-1]\n  return res\n\n", "user": "userdId_40", "attemptID": 4323, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-40.921787", "embeddingY": "-56.966198"},{"extension": "py", "date": "2020-04-07 22:44:37", "correct": "0", "upload": "def suiteAri(liste):\n  res = True\n  i = 0\n  if liste == [] :\n    res = True\n  else :\n    raison = liste[1]-liste[0]\n  while res and i < len(liste)-1 :\n    if liste[i]+raison != liste[i+1]:\n      res = False\n  return res", "user": "userdId_17", "attemptID": 4324, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "20.631304", "embeddingY": "61.09746"},{"extension": "py", "date": "2020-04-08 00:16:56", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  res=0\n  while nombre!=0:\n    chiffre2=nombre%10\n    if chiffre2==chiffre:\n      res=res+1\n    nombre=nombre//10\n  return res", "user": "userdId_2", "attemptID": 4325, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "15.794288", "embeddingY": "12.396976"},{"extension": "py", "date": "2020-03-09 05:36:42", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  \n  res=-1\n  for elem in jour1,mois1,annee1,jour2,mois2,annee2 :\n    \n    if (jour1,mois1,annee1<jour2,mois2,annee2):\n       res=res-1\n      \n    if (jour1,mois1,annee1==jour2,mois2,annee2):\n       res=res\n      \n    if (jour1,mois1,annee1<jour2,mois2,annee2):\n       res=res+1\n      \n  return res", "user": "userdId_23", "attemptID": 4326, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "-20.923485", "embeddingY": "-7.8016515"},{"extension": "py", "date": "2020-03-06 00:37:40", "correct": "0", "upload": "def nbOccurrencesLettre(lettre,mot):\n    if len(mot) == 0:\n      res = 0\n    else:\n      if sa in range(len(mot)):\n        res+=1\n    return res", "user": "userdId_29", "attemptID": 4327, "exercise": "2864c9e5861229d2ff32570f6bc944fb", "exercise_name": "nbOccurrencesLettre", "embeddingX": "-11.003791", "embeddingY": "-42.937847"},{"extension": "py", "date": "2020-03-16 23:59:12", "correct": "1", "upload": "def sommeNPremiersEntiers(n):\n  res=0\n  for i in range(0,n+1,1):\n    res=res+i\n  return res", "user": "userdId_12", "attemptID": 4328, "exercise": "c315a540cf0bfb0182dc114c6f0eafd1", "exercise_name": "sommeNPremiersEntiers", "embeddingX": "-18.076702", "embeddingY": "13.6919"},{"extension": "py", "date": "2020-04-13 21:32:34", "correct": "1", "upload": "def listeDecroissante(scores):\n  c=True\n  i=0\n  while i<(len(scores)-1) and c:\n    if scores[i]<scores[i+1]:\n      c=False\n    i=i+1\n  return c", "user": "userdId_19", "attemptID": 4329, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "18.207724", "embeddingY": "50.46314"},{"extension": "py", "date": "2020-04-06 22:37:49", "correct": "0", "upload": "def elemGeo(n,u0,q):\n  return u0*q**(n-p)", "user": "userdId_12", "attemptID": 4330, "exercise": "d7c83a7fb9b49e28804e55955ad06968", "exercise_name": "elemGeo", "embeddingX": "-38.135933", "embeddingY": "19.65108"},{"extension": "py", "date": "2020-03-06 23:36:18", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut1>=debut2 or fin1<=fin2:\n    res=True\n  elif fin1<debut2:\n    res=False\n  else:\n    res=False\n  return res", "user": "userdId_8", "attemptID": 4331, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "54.71882", "embeddingY": "-21.611927"},{"extension": "py", "date": "2020-03-23 00:14:09", "correct": "0", "upload": "def nbVoyelles(mot):\n  v='aeiouy'\n  cpt=0\n  for c in mot:\n    if c==v:\n      cpt=cpt+1\n  return cpt", "user": "userdId_27", "attemptID": 4332, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "14.819754", "embeddingY": "-7.708046"},{"extension": "py", "date": "2020-03-02 02:56:17", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1<=annee2 and mois1<=mois2 and jour1<jour2:\n    return -1\n  elif annee1==annee2 and mois1==mois2 and jour1==jour2:\n    return 0\n  else:\n    return 1\n  \ncompareDates(10,1,2020,14,2,2020)\ncompareDates(14,2,2020,11,2,2020)\ncompareDates(10,1,2020,10,1,2020)", "user": "userdId_1", "attemptID": 4333, "exercise": "af7c1467ef9f7684d9ff58734067ae98", "exercise_name": "compareDates", "embeddingX": "87.9757", "embeddingY": "-13.080369"},{"extension": "py", "date": "2020-03-12 21:54:28", "correct": "0", "upload": "def maximum(liste):\n   if len(liste)==0:\n      res=None\n   else:\n      res=liste[0]\n      for i in liste:\n         if res>liste[0]:\n            res=liste[0]\n   return res", "user": "userdId_14", "attemptID": 4334, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "9.271289", "embeddingY": "-61.468796"},{"extension": "py", "date": "2020-04-12 05:36:30", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=False\n  c=[]\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n    c=liste[0]+d\n  return c", "user": "userdId_8", "attemptID": 4335, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-69.4889", "embeddingY": "16.080519"},{"extension": "py", "date": "2020-03-15 03:20:55", "correct": "0", "upload": "def polynome(a,b,c):\n    delta=(b**2)-(4*a*c)\n    if delta<0:\n      return(\"pas de solution\")\n    x=(-b-delta)/(2*a)\n    y=(-b+delta)/(2*a)\n    if delta>0:\n      return(x,y)\n    if delta==0:\n      return(x)\n \n\n ", "user": "userdId_21", "attemptID": 4336, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-49.82369", "embeddingY": "7.216794"},{"extension": "py", "date": "2020-04-06 03:19:21", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  ok=True\n  i=0\n  if len(liste)<=1 :\n    ok=True\n  else :\n    while i<len(liste) and ok :\n      if liste[i+1]!=a*liste[i]+b :\n        ok=False\n      i+=1\n  return ok", "user": "userdId_15", "attemptID": 4337, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-73.90984", "embeddingY": "27.94998"},{"extension": "py", "date": "2020-04-17 03:12:20", "correct": "0", "upload": "def minimum(liste):\n  min=0\n  for i in liste: \n    if liste[i]<liste[i+1]:\n      min=l[i]\n    else:\n      min=None\n  return min", "user": "userdId_21", "attemptID": 4338, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "34.72141", "embeddingY": "-58.4393"},{"extension": "py", "date": "2020-03-30 21:52:54", "correct": "1", "upload": "def fusion(liste1,liste2):\n  res=[]\n  i=0\n  j=0\n  if liste1==[] :\n    return liste2\n  elif liste2==[] :\n    return liste1\n  else :\n    while i<len(liste1) and j<len(liste2) :\n      if liste1[i]<liste2[j] :\n        res.append(liste1[i])\n        i=i+1\n      else :\n        res.append(liste2[j])\n        j=j+1\n  \n    if i==len(liste1) :\n      while j<len(liste2) :\n        res.append(liste2[j])\n        j=j+1\n    elif j==len(liste2) :\n      while i<len(liste1) :\n        res.append(liste1[i])\n        i=i+1\n  \n  return res", "user": "userdId_15", "attemptID": 4339, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-39.528053", "embeddingY": "50.234787"},{"extension": "py", "date": "2020-04-05 08:42:12", "correct": "0", "upload": "def produitScalaire(vec1,vec2):\n    if vec1==[] or vec2==[]:\n      res=0\n    else:\n      res=0\n      for i in len(vec1):\n        res+=vec1[i]*vec2[i]\n    return res\n      ", "user": "userdId_18", "attemptID": 4340, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-27.659952", "embeddingY": "-41.72354"},{"extension": "py", "date": "2020-04-10 07:02:24", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n    cpt=0\n    decomp=nombre%10\n    while decomp!=1:\n      if decomp!=chiffre:\n        decomp=decomp%10\n      else:\n        cpt+=1\n    return cpt\n  ", "user": "userdId_11", "attemptID": 4341, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "11.165909", "embeddingY": "9.471775"},{"extension": "py", "date": "2020-03-31 01:10:31", "correct": "0", "upload": "def listeSymetrique(l):\n  i=0\n  res = True\n  while res == True and i < len(l)-1:\n    i+=1\n    if l[i] != l[len(l)-i-1]:\n      res = False\n  return res\n\ndef nombreSymetrique(nombre):\n  l = []\n  for nb in str(nombre):\n    l.append(int(nb))\n \n  return listeSymetrique(res)", "user": "userdId_4", "attemptID": 4342, "exercise": "fae4d6a34289cf5bf06f9d6d17e8547e", "exercise_name": "nombreSymetrique", "embeddingX": "-38.90926", "embeddingY": "2.303728"},{"extension": "py", "date": "2020-03-05 21:51:08", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n  for i in mot:\n    if lettre == i:\n      return i\n  return None\n", "user": "userdId_6", "attemptID": 4343, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-14.344199", "embeddingY": "-30.769962"},{"extension": "py", "date": "2020-04-10 00:28:27", "correct": "0", "upload": "def suiteAriGeo(liste):\n  i=0\n  while i<len(liste)-1:\n    a=liste[1]-liste[0]\n    b=liste[1]-liste[0]\n    if liste[i+1]==liste[i]*a:\n        b=0 and a==liste[1]/liste[0]\n    if liste[i+1]==liste[i]+b:\n      a=1 and b==liste[1]-liste[0]\n    i=i+1\n  i=0\n  ok=True\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=a*liste[i]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 4344, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "32.197666", "embeddingY": "74.54868"},{"extension": "py", "date": "2020-03-22 23:28:53", "correct": "1", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut2>fin1 or fin2<debut1:\n    res=False\n  else:\n    res=True\n  return res", "user": "userdId_8", "attemptID": 4345, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "62.332466", "embeddingY": "-20.651169"},{"extension": "py", "date": "2020-03-08 23:06:02", "correct": "0", "upload": "from math import sqrt \n\ndef polynome(a,b,c):\n  d=b**2-(4*a*c)\n  if d<0:\n    return 'pas de solution'\n  elif d==0:\n    solution=-b/(2*a)\n    return solution\n  else:\n    if d>0:\n      solution1=[-b-(sqrt(d))]/2*a\n      solution2=[-b+(sqrt(d))]/2*a\n      return solution1 and solution2", "user": "userdId_1", "attemptID": 4346, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-47.877747", "embeddingY": "7.3696814"},{"extension": "py", "date": "2020-03-13 00:59:19", "correct": "0", "upload": "def sommeNPremiersEntiersPairs(n):\n  res=1\n  for elem in range(2,n+1,2):\n    res=res+elem\n  return res\n    ", "user": "userdId_1", "attemptID": 4347, "exercise": "3030dc079e6607c253e89e8ef4784b74", "exercise_name": "sommeNPremiersEntiersPairs", "embeddingX": "-18.202978", "embeddingY": "13.02974"},{"extension": "py", "date": "2020-03-24 03:58:44", "correct": "0", "upload": "def compare(chaine1,chaine2):\n  while i<len(chaine1) and i<len(chaine2) and res==0:\n    if chaine1[i]>chaine2[i]:\n      res=-1\n    elif chaine1[i]<chaine2[i]:\n      res=1\n    i=i+1\n  return res", "user": "userdId_26", "attemptID": 4348, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-10.803372", "embeddingY": "42.34611"},{"extension": "py", "date": "2020-03-02 08:01:21", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1<=annee2 and mois1<=mois2 and jour1<jour2:\n    return -1\n  elif annee1==annee2 and mois1==mois2 and jour1==jour2:\n    return 0\n  else:\n    return 1\n  \ncompareDates(10,1,2020,14,2,2020)\ncompareDates(14,2,2020,11,2,2020)\ncompareDates(10,1,2020,10,1,2020)", "user": "userdId_1", "attemptID": 4349, "exercise": "af7c1467ef9f7684d9ff58734067ae98", "exercise_name": "compareDates", "embeddingX": "87.86348", "embeddingY": "-13.456423"},{"extension": "py", "date": "2020-04-06 09:49:48", "correct": "0", "upload": "def nextConway(s):\n    liste=[]\n    while s!=0:\n      liste.append(s%10)\n      s//=10\n    nliste=[0]\n    for i in range(len(liste)):\n      nliste=[liste[i]]+nliste\n    cw=[]\n    cpt=1\n    for i in range(len(nliste)-1):\n      if nliste[i]==nliste[i+1]:\n        cpt+=1\n      else:\n        cw+=[cpt]\n        cw+=[nliste[i]]\n        cpt=1\n    res=0\n    for i in range(len(cw)):\n      res+=cw[-i-1]*10**abs(-i)\n    return res", "user": "userdId_18", "attemptID": 4350, "exercise": "a580c32690609356dae4401b3c89a3b8", "exercise_name": "nextConway", "embeddingX": "44.323734", "embeddingY": "17.208788"},{"extension": "py", "date": "2020-04-06 22:29:19", "correct": "0", "upload": "def elemAri(n,u0,r):\n  res=0\n  for i in range(0,n):\n    res=u0+r\n  return res", "user": "userdId_12", "attemptID": 4351, "exercise": "f239498950e974e29e01472749d9a09d", "exercise_name": "elemAri", "embeddingX": "-21.187233", "embeddingY": "16.041792"},{"extension": "py", "date": "2020-04-12 06:42:47", "correct": "0", "upload": "def phrasePalindrome(phrase):\n    if len(phrase)==0:\n      res=True\n    else:\n      res=True\n      x=phrase-''\n      i=0\n      while i<len(phrase)//2 and res and x:\n        if phrase[i]!=phrase[-(i+1)] or phrase[i]!='':\n          res=False\n        i+=1\n    return res", "user": "userdId_11", "attemptID": 4352, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "3.3090034", "embeddingY": "-40.33113"},{"extension": "py", "date": "2020-03-02 02:59:11", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1<=annee2 and mois1<=mois2 and jour1<jour2:\n    return -1\n  elif annee1==annee2 and mois1==mois2 and jour1==jour2:\n    return 0\n  elif annee1>annee2 and mois1>mois2 and jour1>jour2:\n    return 1\n  else:\n    return 1\n  \ncompareDates(10,1,2020,14,2,2020)\ncompareDates(14,2,2020,11,2,2020)\ncompareDates(10,1,2020,10,1,2020)", "user": "userdId_1", "attemptID": 4353, "exercise": "af7c1467ef9f7684d9ff58734067ae98", "exercise_name": "compareDates", "embeddingX": "86.09165", "embeddingY": "-14.689585"},{"extension": "py", "date": "2020-03-05 22:25:37", "correct": "1", "upload": "def prononcable(mot):\n  if len(mot)<4:\n    return True\n  else:\n    cpt=0\n    laLettrePrecedenteEstUneVoyelle = (mot[0] in 'aeiouy')\n    for i in mot :\n      if (i in 'aeiouy') == laLettrePrecedenteEstUneVoyelle:\n        cpt+=1\n        if cpt == 4:\n          return False\n      else:\n        cpt = 1\n        laLettrePrecedenteEstUneVoyelle = not laLettrePrecedenteEstUneVoyelle \n    return True", "user": "userdId_6", "attemptID": 4354, "exercise": "6318b210c201fba050d60bc0913cb7ef", "exercise_name": "prononcable", "embeddingX": "16.13293", "embeddingY": "-14.947387"},{"extension": "py", "date": "2020-04-12 10:05:27", "correct": "0", "upload": "def phrasePalindrome(phrase):\n    if len(phrase)==0:\n      res=True\n    else:\n      res=True\n      i=0\n      x=''\n      while i<len(phrase)//2 and res:\n        if phrase[i]!=phrase[-(i+1)]:\n          res=False\n        if x in phrase:\n            res=False\n        i+=1\n    return res", "user": "userdId_11", "attemptID": 4355, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "33.307224", "embeddingY": "33.393604"},{"extension": "py", "date": "2020-04-08 00:00:42", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  ok=False\n  i=0\n  j=0\n  while i<len(phrase)//2 and j<len(phrase)//2:\n    if phrase[i]==\" \":\n      i+=1\n      if phrase[i]!=phrase[-j-1]:\n        ok=False\n      else:\n        ok=True\n    elif phrase[-j]==\" \":\n      j+=1\n      if phrase[i]!=phrase[-j-1]:\n        ok=False\n      else:\n        ok=True\n  i+=1\n  j+=1\n  if phrase==\"\":\n    ok=True\n  return ok", "user": "userdId_13", "attemptID": 4356, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "36.140816", "embeddingY": "31.852945"},{"extension": "py", "date": "2020-03-27 07:06:21", "correct": "0", "upload": "def compare(chaine1,chaine2):\n  i=0\n  res=0\n  while i<len(chaine1) and i<len(chaine2) and res==0:\n    if chaine1[i]>chaine2[i]:\n      res=1\n    elif chaine1==chaine2:\n      res=0\n    else:\n      res=-1\n    i=i+1\n  if res==0:\n    if len(chaine1)>len(chaine2):\n      res=1\n    elif len(chaine1)<len(chaine2):\n      res=-1\n  return res", "user": "userdId_1", "attemptID": 4357, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-24.072485", "embeddingY": "62.81964"},{"extension": "py", "date": "2020-04-12 07:04:17", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  if liste==[]:\n    res=True\n  c=[]\n  res=False\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n    c=[liste[0]]//10+c\n  return c", "user": "userdId_8", "attemptID": 4358, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-66.74249", "embeddingY": "21.209446"},{"extension": "py", "date": "2020-04-07 23:11:11", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  res=False\n  prec=None\n  while nombre!=0 and not res:\n    nombre=nombre//10\n    if chiffre==prec:\n      res=True\n    prec=chiffre\n  return res", "user": "userdId_13", "attemptID": 4359, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "10.963977", "embeddingY": "24.245752"},{"extension": "py", "date": "2020-03-06 22:07:15", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut1>=debut2 or fin1<=fin2:\n    res=True\n  return res", "user": "userdId_8", "attemptID": 4360, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "54.06647", "embeddingY": "-21.627468"},{"extension": "py", "date": "2020-03-20 00:07:41", "correct": "0", "upload": "def permutationListe(liste,permutation):\n  for i in range(len(liste)):\n    liste[i]=permutation[i]\n  return liste[i]", "user": "userdId_12", "attemptID": 4361, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-53.361046", "embeddingY": "-29.664373"},{"extension": "py", "date": "2020-03-06 00:49:13", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0 :\n    res=0\n  else:\n    for elem in mot :\n      if elem in 'aeiouy' :\n        res=res+1\n  return res", "user": "userdId_24", "attemptID": 4362, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "5.706623", "embeddingY": "-30.53539"},{"extension": "py", "date": "2020-03-19 05:13:18", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if jour1<jour2 or mois1<mois2 or annee1<annee2:\n    res=-1\n  if jour1==jour2 or mois1==mois2 or annee1==annee2:\n    res=1\n  else:\n    res=0\n    return res", "user": "userdId_34", "attemptID": 4363, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "78.25493", "embeddingY": "-27.159515"},{"extension": "py", "date": "2020-03-07 02:46:52", "correct": "0", "upload": "def nbSyllabes(mot):\n  cpt=0\n  if len(mot)!=0 and not(mot[0] in 'aeiouy'):\n    cpt+=1\n  for i in range(0,len(mot)-1):\n    if (mot[i] in 'aeiouy') and not(mot[i+1] in 'aeiouy'):\n      cpt+=1\n  return cpt", "user": "userdId_6", "attemptID": 4364, "exercise": "1c86bec0f4df503e23db53994f3d2991", "exercise_name": "nbSyllabes", "embeddingX": "-29.704296", "embeddingY": "-69.36069"},{"extension": "py", "date": "2020-03-23 00:30:54", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=[]\n    for i in range(len(liste)):\n      if liste[1+i]>liste[i]:\n        res=liste[1+i]\n  return res", "user": "userdId_8", "attemptID": 4365, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-5.1158204", "embeddingY": "-64.18511"},{"extension": "py", "date": "2020-03-19 05:47:15", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1<annee2:\n    res=-1\n  elif jour1==jour2 and mois1==mois2 and annee1==annee2:\n      res=0\n  else:\n    res=1\n  return res", "user": "userdId_34", "attemptID": 4366, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "79.055725", "embeddingY": "-24.56364"},{"extension": "py", "date": "2020-04-10 01:04:51", "correct": "0", "upload": "def suiteAriGeo(liste):\n  i=0\n  while i<len(liste)-1:\n    if i!=0:\n      a=liste[1]/liste[0]\n      b=liste[i+1]-liste[i]*a\n    if liste[0]!=0:\n      a=liste[1]/liste[0]\n      if liste[i+1]==liste[i]*a:\n          b=0\n    b=liste[1]-liste[0]\n    if liste[i+1]==liste[i]+b:\n      a=1\n    i=i+1\n  i=0\n  ok=True\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=a*liste[i]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 4367, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "35.30597", "embeddingY": "82.942085"},{"extension": "py", "date": "2020-03-04 10:19:56", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut2<=fin1 and fin2>=debut1 :\n    return true\n  else :\n    return false\n  \n\n    \n    ", "user": "userdId_28", "attemptID": 4368, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "54.10025", "embeddingY": "-26.919733"},{"extension": "py", "date": "2020-03-05 23:47:57", "correct": "0", "upload": "def maximum(liste):\n  res=0\n  for elem in liste:\n    if res<elem:\n      res=elem\n  return res", "user": "userdId_23", "attemptID": 4369, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "42.438347", "embeddingY": "-52.843693"},{"extension": "py", "date": "2020-03-13 00:53:25", "correct": "1", "upload": "def sommeNPremiersEntiers(n):\n  somme=0\n  for i in range(1,n+1):\n    somme=somme+i\n  return somme", "user": "userdId_13", "attemptID": 4370, "exercise": "c315a540cf0bfb0182dc114c6f0eafd1", "exercise_name": "sommeNPremiersEntiers", "embeddingX": "-18.80191", "embeddingY": "13.429014"},{"extension": "py", "date": "2020-03-13 00:50:39", "correct": "0", "upload": "def sommeNPremiersEntiers(n):\n  if n<0:\n    return 0\n  else:\n    res=0\n  for elem in n:\n    res=res+(n+1)\n  return res\n      \n    ", "user": "userdId_1", "attemptID": 4371, "exercise": "c315a540cf0bfb0182dc114c6f0eafd1", "exercise_name": "sommeNPremiersEntiers", "embeddingX": "40.604904", "embeddingY": "-52.79323"},{"extension": "py", "date": "2020-03-03 05:18:22", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=(1,len(liste))\n    for i in range(len(liste)):\n      if liste[i]>res:\n        res=liste[i]\n  return res", "user": "userdId_30", "attemptID": 4372, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "0.38310722", "embeddingY": "-56.82221"},{"extension": "py", "date": "2020-03-23 00:37:00", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n  if mot=='':\n    pos=None\n  else:\n    for i in range(len(mot)):\n      if lettre==mot[i]:\n        pos=i\n  return pos", "user": "userdId_27", "attemptID": 4373, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-17.654974", "embeddingY": "-41.99436"},{"extension": "py", "date": "2020-03-12 22:12:42", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=liste[0]\n  for i in range(len(liste)):\n    if i>=res:\n      res=i\n  return res", "user": "userdId_35", "attemptID": 4374, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "4.1953397", "embeddingY": "-58.90722"},{"extension": "py", "date": "2020-03-03 06:10:28", "correct": "0", "upload": "def nbVoyelles(mot):\n  res=0\n  for lettre in range(len(mot)):\n    if lettre in aeiouy:\n       res=res+1\n  return res", "user": "userdId_25", "attemptID": 4375, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-5.480548", "embeddingY": "-43.015007"},{"extension": "py", "date": "2020-03-17 05:15:17", "correct": "1", "upload": "def sousChaine(s,debut,longueur):\n  res=''\n  fin= debut+longueur\n  if fin>len(s):\n    fin=len(s)\n  for i in range(debut,fin):\n      res=res+s[i]\n  return res", "user": "userdId_9", "attemptID": 4376, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-84.342224", "embeddingY": "20.830595"},{"extension": "py", "date": "2020-06-02 07:25:16", "correct": "1", "upload": "def nombrePair(n):\n\tif n%2==0:\n\t\tres=True\n\telse:\n\t\tres=False\n\treturn res", "user": "userdId_3", "attemptID": 4377, "exercise": "3001254263845e9a478696f81a704d33", "exercise_name": "nombrePair", "embeddingX": "44.375576", "embeddingY": "-4.410329"},{"extension": "py", "date": "2020-03-17 06:13:38", "correct": "0", "upload": "def distribution(liste,n):\n  res=liste[0]*n+1\n  for i in range(len(liste)):\n                 res=liste[i]+1\n  return res", "user": "userdId_23", "attemptID": 4378, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-48.41791", "embeddingY": "-36.902107"},{"extension": "py", "date": "2020-03-01 01:21:12", "correct": "0", "upload": "from math import sqrt\n\n\ndef polynome(a,b,c):\n    delta =  b**2 - (4*a*c)\n    \n    if delta > 0:\n        x = (-b + sqrt(delta))/2*a , (-b -sqrt(delta))/2*a\n        \n         \n    elif delta == 0:\n        x = -(b/2*a)\n        \n    else:\n        x = \"pas de solution\"\n        \n    return x\n", "user": "userdId_4", "attemptID": 4379, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-51.8196", "embeddingY": "12.607969"},{"extension": "py", "date": "2020-03-15 00:40:48", "correct": "0", "upload": "def jourNuit(heure):\n  if heure<0 or heure>24:\n    res=\"l'heure saisie est invalide\"\n  else:#l'heure est valide\n    if heure<5 or heure>=21:\n      res=\"on est la nuit \"\n    elif heure<12:\n      res=\"on est le matin \"\n    elif heure<17:\n      res=\"on est l'apr\u00e8s-midi \"\n    else:\n      res=\"on est le soir \"\n    if heure<6 or heure>=18:\n      res=\"et il fait nuit\"\n    else:\n      res=\"et il fiat jour\"\n  return res", "user": "userdId_8", "attemptID": 4380, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "69.22754", "embeddingY": "14.960694"},{"extension": "py", "date": "2020-03-23 22:51:37", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n    if jour1==jour2 and mois1==mois2 and annee1==annee2:\n      res=0\n      if jour1<jour2 or mois1<mois2 or annee1<annee2:\n        res=-1 \n    else:\n      res=1\n    return res", "user": "userdId_9", "attemptID": 4381, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "80.533226", "embeddingY": "-24.610704"},{"extension": "py", "date": "2020-04-13 21:25:16", "correct": "0", "upload": "def indiceInsertion(sc,scores):\n  cpt = 0\n  while scores[cpt]>sc & cpt<len(scores):\n    cpt+=1\n  return cpt", "user": "userdId_6", "attemptID": 4382, "exercise": "f8a820b2bd54d18d36716e3d703858f7", "exercise_name": "indiceInsertion", "embeddingX": "-13.251062", "embeddingY": "61.81793"},{"extension": "py", "date": "2020-03-14 10:15:37", "correct": "0", "upload": "def nbVoyelles(mot):\n    res=0\n    if lettre in mot == 'aeiouy':\n      res=res+1\n    return res", "user": "userdId_21", "attemptID": 4383, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "9.032367", "embeddingY": "-19.038887"},{"extension": "py", "date": "2020-03-23 00:00:33", "correct": "0", "upload": "def nombrePair(n):\n  res=False\n  for x in range(1,n+1):\n    if x%2==True:\n      res=True\n  return res", "user": "userdId_8", "attemptID": 4384, "exercise": "3001254263845e9a478696f81a704d33", "exercise_name": "nombrePair", "embeddingX": "31.378222", "embeddingY": "-8.4385605"},{"extension": "py", "date": "2020-04-12 12:21:47", "correct": "0", "upload": "def suiteGeo(liste):\n    if len(liste)==0 or len(liste)==1:\n      res=True\n    else:\n      res=True\n      for i in range(1,len(liste)):\n        if liste[i-1]==0:\n          res=False\n        else:\n          x=liste[1]/liste[0]\n          if liste[i]!=liste[i-1]*x:\n            res=False\n          else:\n            res=True\n    return res", "user": "userdId_11", "attemptID": 4385, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "-15.553094", "embeddingY": "-83.653915"},{"extension": "py", "date": "2020-04-05 10:01:27", "correct": "1", "upload": "def compteChiffre(chiffre,nombre):\n\treturn list(str(nombre)).count(str(chiffre))", "user": "userdId_4", "attemptID": 4386, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-61.27129", "embeddingY": "10.305563"},{"extension": "py", "date": "2020-03-23 12:05:20", "correct": "0", "upload": "def prononocable(mot):\n    consonne=True\n    cpt=0\n    i=0\n    while cpt<=3 and i<len(mot):\n        if mot[i] in 'aeiouy':    #on observe une voyelle\n            if consonne :\n                consonne=False\n                cpt=1         #on d\u00e9bute une nouvelle s\u00e9quence de voyelles\n            else:\n                cpt+=1        #on poursuit la s\u00e9quence de voyelles\n        else: #on suppose qu'une non voyelle est une consonne\n            if consonne:\n                cpt+=1        #on poursuit une s\u00e9quence de consonnes\n            else:\n                consonne=True\n                cpt=1         #on d\u00e9bute une nouvelle s\u00e9quence de consonnes\n        i+=1\n    return cpt<=3", "user": "userdId_32", "attemptID": 4387, "exercise": "6318b210c201fba050d60bc0913cb7ef", "exercise_name": "prononcable", "embeddingX": "15.639373", "embeddingY": "38.94646"},{"extension": "py", "date": "2020-03-15 04:04:42", "correct": "0", "upload": "def nombrePair(n):\n  res=0\n  if elem in n is (\"0,2,4,6,8\"):\n    res=True\n  else:\n    res=false\n  return res", "user": "userdId_23", "attemptID": 4388, "exercise": "3001254263845e9a478696f81a704d33", "exercise_name": "nombrePair", "embeddingX": "9.693447", "embeddingY": "-19.267162"},{"extension": "py", "date": "2020-03-20 00:08:18", "correct": "0", "upload": "def sousChaine(s,d,l):\n  res=\"\"\n  for j in range(d,d+l,1):\n    res=res+[j]\n\n  return res\n", "user": "userdId_5", "attemptID": 4389, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-75.82765", "embeddingY": "23.22393"},{"extension": "py", "date": "2020-03-14 09:45:57", "correct": "1", "upload": "def compareDates(j1,m1,a1,j2,m2,a2):\n    if a1<a2:\n      res=-1\n    elif a1>a2:\n      res=1\n    elif m1<m2:\n      res=-1\n    elif m1>m2:\n      res=1\n    elif j1<j2:\n      res=-1\n    elif j1>j2:\n      res=1\n    else:\n      res=0\n    return res", "user": "userdId_21", "attemptID": 4390, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "81.62398", "embeddingY": "-32.754845"},{"extension": "py", "date": "2020-03-17 00:59:46", "correct": "0", "upload": "def doubleLettre(mot):\n    return None", "user": "userdId_5", "attemptID": 4391, "exercise": "00da9cf1fa2b468d915724499459ed8f", "exercise_name": "doubleLettre", "embeddingX": "-87.89252", "embeddingY": "3.6790926"},{"extension": "py", "date": "2020-04-07 20:11:18", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  chiffre=str(chiffre)\n  nombre=str(nombre)\n  for i in range(nombre):\n    if nombre[i]==chiffre:\n      cpt=cpt+1\n    i=i+1\n  return cpt", "user": "userdId_3", "attemptID": 4392, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-26.929214", "embeddingY": "-26.532503"},{"extension": "py", "date": "2020-03-24 03:33:32", "correct": "1", "upload": "def quatrePlus100(liste):\n  res=[]\n  i=0\n  while i<len(liste) and len(res)<4:\n    if liste[i]>100:\n      res=res+[liste[i]]\n    i=i+1\n  return res", "user": "userdId_21", "attemptID": 4393, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-26.97152", "embeddingY": "42.981518"},{"extension": "py", "date": "2020-03-31 08:09:08", "correct": "0", "upload": "def prononcable(mot):\n    if len(mot)==0:\n      res=True\n    else:\n      res=False\n      for i in range(len(mot)):\n        if mot[i] in 'aeiouy' and mot[i+3] in 'bcdfghjklmnpqrstvwxz':\n          res=True\n    return res\n                                     ", "user": "userdId_11", "attemptID": 4394, "exercise": "6318b210c201fba050d60bc0913cb7ef", "exercise_name": "prononcable", "embeddingX": "-23.887194", "embeddingY": "-67.88661"},{"extension": "py", "date": "2020-04-06 06:36:49", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  i=0\n  for i in range(nombre):\n    if i==chiffre:\n      cpt=cpt+1\n    i=i+1\n  return cpt", "user": "userdId_3", "attemptID": 4395, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-17.55363", "embeddingY": "-24.445173"},{"extension": "py", "date": "2020-03-12 09:45:15", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n  if len(mot)==0:\n    return None\n  cpt=0\n  for i in range (len(mot)):\n    if lettre in mot:\n      cpt=lettre[i]\n  return cpt", "user": "userdId_1", "attemptID": 4396, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-14.898814", "embeddingY": "-42.262447"},{"extension": "py", "date": "2020-03-27 06:39:55", "correct": "0", "upload": "def compare(chaine1,chaine2):\n  i=0\n  res=()\n  while i<len(chaine1) and i<len(chaine2):\n    if chaine1[i]<chaine2[i]:\n      res=-1\n    elif chaine1==chaine2:\n      res=0\n    else:\n      res=-1\n  i=i+1\n  return res", "user": "userdId_1", "attemptID": 4397, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-24.480885", "embeddingY": "66.52047"},{"extension": "py", "date": "2020-03-06 00:18:21", "correct": "0", "upload": "def maximum(liste):\n  res=0\n  if liste in range(len(liste)):\n      res=res+liste[i]\n  return res", "user": "userdId_41", "attemptID": 4398, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-9.316859", "embeddingY": "-45.057053"},{"extension": "py", "date": "2020-03-05 21:44:28", "correct": "1", "upload": "def minimum(liste):\n  if len(liste)==0:\n    return None\n  else:\n    max = liste[0]\n    for i in range(1,len(liste)):\n      if liste[i]<max:\n        max = liste[i]\n  return max", "user": "userdId_6", "attemptID": 4399, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "13.591631", "embeddingY": "-69.50303"},{"extension": "py", "date": "2020-03-06 00:12:26", "correct": "0", "upload": "def maximum(liste):\n  res=0\n  for i in range(len(liste)):\n      res=res+lenliste[i]\n  return res", "user": "userdId_41", "attemptID": 4400, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-44.231613", "embeddingY": "-40.604553"},{"extension": "py", "date": "2020-03-20 00:17:54", "correct": "0", "upload": "def permutationChaine(s):\n  res=''\n  if len(s)<1:\n  \tres=''\n  else:\n    for i in range(0,len(s)-1,2):\n      res=res+s[i+1]\n      res=res+s[i]\n  l=len(s)\n  res=res+s[l-1]\n  return res", "user": "userdId_40", "attemptID": 4401, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-40.203304", "embeddingY": "-54.954525"},{"extension": "py", "date": "2020-04-10 00:46:34", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i]!=0:\n      q=liste[i]/liste[0]\n      if liste[i+1]/liste[i]!=q:\n        ok=False\n    i=i+1\n  return ok", "user": "userdId_3", "attemptID": 4402, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "23.598536", "embeddingY": "60.686443"},{"extension": "py", "date": "2020-03-24 03:25:00", "correct": "1", "upload": "def quatrePlus100(liste):\n  res=[]\n  cpt=0\n  i=0\n  while i<len(liste) and cpt!=4:\n    if liste[i]>100:\n      res=res+[liste[i]]\n      cpt=cpt+1\n    i=i+1\n  return res", "user": "userdId_27", "attemptID": 4403, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-30.757128", "embeddingY": "43.90892"},{"extension": "py", "date": "2020-03-07 02:43:59", "correct": "0", "upload": "def nbSyllabes(mot):\n  cpt=0\n  if not(mot[0] in 'aeiouy'):\n    cpt+=1\n  for i in range(0,len(mot)-1):\n    if (mot[i] in 'aeiouy') and not(mot[i+1] in 'aeiouy'):\n      cpt+=1\n  return cpt", "user": "userdId_6", "attemptID": 4404, "exercise": "1c86bec0f4df503e23db53994f3d2991", "exercise_name": "nbSyllabes", "embeddingX": "-29.883156", "embeddingY": "-69.60425"},{"extension": "py", "date": "2020-03-17 05:31:56", "correct": "0", "upload": "def permutationChaine(s):\n  res=\"\"\n  for i in range(0,len(s)-1,2):\n    res=res+s[1+i]+s[i]\n  if len(s)!=0:\n    res=res%2+s[i-1]\n  return res", "user": "userdId_8", "attemptID": 4405, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-38.460247", "embeddingY": "-61.436993"},{"extension": "py", "date": "2020-03-09 22:43:47", "correct": "1", "upload": "def moyenne(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    moy=0\n    cpt=0\n    for i in range(len(liste)):\n      moy=moy+liste[i]\n      cpt=cpt+1\n    res=moy/cpt\n  return res", "user": "userdId_12", "attemptID": 4406, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-9.743103", "embeddingY": "-6.6118927"},{"extension": "py", "date": "2020-04-12 10:07:26", "correct": "0", "upload": "def phrasePalindrome(phrase):\n    if len(phrase)==0:\n      res=True\n    else:\n      res=True\n      i=0\n      x=''\n      while i<len(phrase)//2 and res:\n        if phrase[i]!=phrase[-(i+1)]:\n          res=False\n        i+=1\n      if phrase[i]==x:\n          res=False\n    return res", "user": "userdId_11", "attemptID": 4407, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "33.15818", "embeddingY": "34.949577"},{"extension": "py", "date": "2020-03-30 22:30:43", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n  \n  while i<len(l) and i<n:\n    if x==l[i]:\n      n=n+1\n    i=i+1\n  return i", "user": "userdId_19", "attemptID": 4408, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-50.180817", "embeddingY": "19.470768"},{"extension": "py", "date": "2020-03-12 22:09:34", "correct": "0", "upload": "def moyenne(liste):\n  if len (liste)==0:\n    res=None\n  else:\n    res=0\n    cpt=0\n    for elem in liste:\n      res=res+elem\n      cpt=cpt+elem\n      res=elem%cpt\n  return res ", "user": "userdId_20", "attemptID": 4409, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-5.0614233", "embeddingY": "-3.7837372"},{"extension": "py", "date": "2020-03-06 00:54:39", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n  if len(mot)==0:\n    pos=None\n  else:\n    res=-1\n    for elem in mot:\n      if lettre!=elem:\n        pos=pos+1\n      else:\n        pos=pos+1\n        return pos", "user": "userdId_15", "attemptID": 4410, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-9.48671", "embeddingY": "-32.772625"},{"extension": "py", "date": "2020-03-10 04:42:41", "correct": "0", "upload": "def nbSyllabes(mot):\n  if mot=='':\n    res=0\n  else:\n    res=0\n    Voyelles=['a','e','i','o','u','y']\n    ch=\"\"\n    for i in range(1,len(mot)):\n      if mot[i-1] not in Voyelles and mot[i] in Voyelles:\n        res=res+1\n      else:\n        ch=mot[i]\n    if mot[0] in Voyelles :\n      res=res+1\n    elif mot[-1] not in Voyelles:\n      res=res-1\n    else:\n      if res==0:\n        res=res+1\n  return res", "user": "userdId_15", "attemptID": 4411, "exercise": "1c86bec0f4df503e23db53994f3d2991", "exercise_name": "nbSyllabes", "embeddingX": "-19.678514", "embeddingY": "-72.70739"},{"extension": "py", "date": "2020-04-08 00:20:11", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  res=[]\n  cpt=0\n  if nombre==0:\n    res.append [0]\n  while nombre!=0:\n    res.append(nombre%10)\n    nombre=nombre//10\n  for i in range(len(res)):\n    if i==chiffre:\n      cpt=cpt+1\n  return cpt", "user": "userdId_14", "attemptID": 4412, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-0.5086527", "embeddingY": "7.3810687"},{"extension": "py", "date": "2020-04-08 00:09:59", "correct": "0", "upload": "def suiteGeo(liste):\n  ok=True\n  i=0\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i]==0:\n      ok=False\n    if liste[i]!=0:\n      q=liste[1]/liste[0]\n    if liste[i]!=0:\n      if liste[i+1]/liste[i]!=q:\n        ok=False\n    i=i+1\n  return ok\n", "user": "userdId_1", "attemptID": 4413, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "32.14916", "embeddingY": "63.65995"},{"extension": "py", "date": "2020-03-06 00:38:18", "correct": "0", "upload": "def nbOccurrencesLettre(lettre,mot):\n    if len(mot) == 0:\n      res = 0\n    else:\n      res = 0\n      if lettre in range(len(mot)):\n        res+=1\n    return res", "user": "userdId_29", "attemptID": 4414, "exercise": "2864c9e5861229d2ff32570f6bc944fb", "exercise_name": "nbOccurrencesLettre", "embeddingX": "-10.393705", "embeddingY": "-43.58031"},{"extension": "py", "date": "2020-03-01 23:31:27", "correct": "1", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  a=jour1-jour2\n  b=mois1-mois2\n  c=annee1-annee2\n  if c!=0 :\n    if c<0 :\n      res=-1\n    else :\n      res=1\n  elif b!=0 :\n    if b<0 :\n      res=-1\n    else :\n      res=1\n  elif a!=0 :\n    if a<0 :\n      res=-1\n    else :\n      res=1\n  else :\n    res=0\n    \n  \n  return res", "user": "userdId_15", "attemptID": 4415, "exercise": "af7c1467ef9f7684d9ff58734067ae98", "exercise_name": "compareDates", "embeddingX": "84.077225", "embeddingY": "-33.233395"},{"extension": "py", "date": "2020-03-24 05:06:34", "correct": "0", "upload": "def fusion(liste1,liste2):\n    if liste1==[]:\n      res=liste2\n    elif liste2==[]:\n      res=liste1\n    else:\n      res=[]\n      res=[liste1]+[liste2]\n    res.sort()\n    return res", "user": "userdId_18", "attemptID": 4416, "exercise": "6613efb6c873b142dc2b6040c14eb616", "exercise_name": "fusion", "embeddingX": "-17.889769", "embeddingY": "-16.043018"},{"extension": "py", "date": "2020-03-06 00:27:26", "correct": "0", "upload": "def ecart(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=0\n    def maximum(liste):\n      maxi=liste[0]\n      for i in range(len(liste)):\n        if liste[i]>maxi:\n          maxi=liste[i]\n    def minimum(liste):\n      mini=liste[0]\n      for i in range(len(liste)):\n        if liste [i]<mini:\n          mini=liste[i]\n    res=maxi-mini\n  return res", "user": "userdId_12", "attemptID": 4417, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "7.7265916", "embeddingY": "-46.224384"},{"extension": "py", "date": "2020-03-05 23:36:53", "correct": "1", "upload": "def somme(liste):\n  res=0\n  for elem in liste:\n    res=res+elem\n  return res\n", "user": "userdId_15", "attemptID": 4418, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-28.841133", "embeddingY": "2.394757"},{"extension": "py", "date": "2020-04-06 01:11:06", "correct": "1", "upload": "def motPalindrome(mot):\n    flag = 0\n    trouve = False\n    if mot == \"\":\n        res = True\n    else:\n        while flag <= len(mot) // 2 and not trouve:\n            if mot[flag] == mot[-flag-1]:\n                flag += 1\n            else:\n                trouve = True\n                res = False\n    if trouve == False:\n        res = True\n    return res", "user": "userdId_42", "attemptID": 4419, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "34.235054", "embeddingY": "39.699684"},{"extension": "py", "date": "2020-03-06 00:00:16", "correct": "0", "upload": "def maximum(liste):\n  res=0\n  for i in range(len(liste)) :\n     if liste[i]>res :\n        res=res+liste[i]\n  return res", "user": "userdId_24", "attemptID": 4420, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-2.0635822", "embeddingY": "-65.59418"},{"extension": "py", "date": "2020-03-31 05:13:04", "correct": "0", "upload": "def listeSymetrique(l):\n  ok=True\n  i=0\n  while i<len(l) and ok:\n    if l[i]!=l[i-1]:\n      ok=False\n    i=i+1\n  return ok\n", "user": "userdId_9", "attemptID": 4421, "exercise": "8eb27aeda471a467e2223abebeca886e", "exercise_name": "listeSymetrique", "embeddingX": "23.257847", "embeddingY": "50.89603"},{"extension": "py", "date": "2020-03-31 03:36:21", "correct": "0", "upload": "def fusion(liste1,liste2):\n  res=[]\n  i=0\n  j=0\n  while i<len(liste1) and i<len(liste2):\n    if liste1[i]<liste2[j]:\n      res.append(liste1[i])\n      j=i+1\n    else:\n      res.append(liste1[i])\n      i=i+1\n      while j<len(liste2):\n        res.append(liste2[j])\n        j=j+1\n      \n      while 1<len(liste1):\n          res.append(liste1[i])\n          i=i+1\n  return res", "user": "userdId_36", "attemptID": 4422, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-40.163998", "embeddingY": "48.519466"},{"extension": "py", "date": "2020-03-17 06:37:51", "correct": "0", "upload": "def permutationListe(liste,permutation):\n  res=0\n  for elem in liste:\n    res=res+elem\n  return res", "user": "userdId_25", "attemptID": 4423, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-32.305653", "embeddingY": "4.652982"},{"extension": "py", "date": "2020-03-17 06:03:33", "correct": "0", "upload": "def maximum(liste):\n    if len (liste)==0:\n      res=none\n    else:\n         res=liste[0]\n         for elem in liste:\n            res=elem\n    return res", "user": "userdId_22", "attemptID": 4424, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-3.0145488", "embeddingY": "-36.073017"},{"extension": "py", "date": "2020-04-07 23:32:18", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  res=0\n  for i in range (len(nombre)):\n    if chiffre==nombre[i]:\n      res=res+1\n  return res\n", "user": "userdId_19", "attemptID": 4425, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-36.004192", "embeddingY": "-17.52604"},{"extension": "py", "date": "2020-04-05 07:18:15", "correct": "0", "upload": "def nbSyllabes(mot):\n  if mot=='':\n    cpt=0\n  else:\n    cpt=0\n    if mot[0] in 'aeiouy':\n      cpt+=1\n    for i in range(1,len(mot)):\n      if mot[i] in 'aeiouy' and mot[i-1] not in 'aeiouy':\n        cpt+=1\n    if mot[-1]=='e':\n      cpt-=1\n    if cpt==0:\n      cpt+=1\n  return cpt", "user": "userdId_18", "attemptID": 4426, "exercise": "1c86bec0f4df503e23db53994f3d2991", "exercise_name": "nbSyllabes", "embeddingX": "-24.649006", "embeddingY": "-69.98056"},{"extension": "py", "date": "2020-03-06 00:25:56", "correct": "0", "upload": "def nbVoyelles(mot):\n  nb=0\n  for lettre in [\"a\",\"e\",\"i\",\"o\",\"u\",\"y\"]:\n    res=nb+1\n  return res\n  \n      \n  \n\n ", "user": "userdId_9", "attemptID": 4427, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-28.031248", "embeddingY": "-9.989075"},{"extension": "py", "date": "2020-03-03 05:11:52", "correct": "0", "upload": "def somme(liste):\n    res=0\n    if elem in (liste):\n      res=res+elem\n    return res", "user": "userdId_8", "attemptID": 4428, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "8.152329", "embeddingY": "-18.878294"},{"extension": "py", "date": "2020-03-09 05:30:47", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  \n  res=0\n  for elem in jour1,mois1,annee1,jour2,mois2,annee2 :\n    \n    if (jour1,mois1,annee1<jour2,mois2,annee2):\n      res=0-1\n      \n    elif (jour1,mois1,annee1==jour2,mois2,annee2):\n      res=res\n      \n    elif (jour1,mois1,annee1<jour2,mois2,annee2):\n      res=res+1\n      \n  return res", "user": "userdId_23", "attemptID": 4429, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "-20.317707", "embeddingY": "-8.295287"},{"extension": "py", "date": "2020-03-17 05:27:03", "correct": "0", "upload": "def distribution(liste,n):\n  cpts=[0]*4\n  for elem in liste:\n    cpts[elem]=cpts[elem]+1\n  return cpts ", "user": "userdId_35", "attemptID": 4430, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-58.66663", "embeddingY": "-14.315869"},{"extension": "py", "date": "2020-04-06 01:51:03", "correct": "0", "upload": "def produitScalaire(vec1,vec2):\n  if vec1 == []:\n    coordvec = [0,0]\n  if vec2 == []:\n    coordvec2 = [0,0]\n  else :\n    coordvec1 = [vec1[2]-vec1[0],vec1[1]-vec1[3]]\n    coordvec2 = [vec2[2]-vec2[0],vec2[1]-vec2[3]]\n  res = coordvec1[0]*coordvec2[0]+coordvec1[1]*coordvec2[1]\n  return res", "user": "userdId_17", "attemptID": 4431, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-22.107529", "embeddingY": "-16.55207"},{"extension": "py", "date": "2020-03-06 00:39:39", "correct": "1", "upload": "def nbOccurrencesLettre(lettre,mot):\n  if len(mot)==0:\n    res=0\n  else:\n    cpt=0\n    for elem in mot:\n      if lettre==elem:\n        cpt=cpt+1\n    res=cpt\n  return res\n\n    ", "user": "userdId_2", "attemptID": 4432, "exercise": "2864c9e5861229d2ff32570f6bc944fb", "exercise_name": "nbOccurrencesLettre", "embeddingX": "-12.4852", "embeddingY": "-25.149923"},{"extension": "py", "date": "2020-03-20 00:29:28", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  res=\"\"\n  if debut+longueur>len(s):\n    fin=len(s)\n    for i in range(debut,fin):\n      res=res+s[i]\n  else:\n    fin=debut+longueur\n  return res\n    ", "user": "userdId_34", "attemptID": 4433, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-85.43735", "embeddingY": "21.598269"},{"extension": "py", "date": "2020-03-12 06:53:31", "correct": "0", "upload": "def maximum(liste):\n  res=liste[0]\n  for i in range(list):\n     if res<i:\n      return i\n  else:\n    return res", "user": "userdId_20", "attemptID": 4434, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-49.18823", "embeddingY": "-17.241482"},{"extension": "py", "date": "2020-04-12 05:10:11", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=False\n  c=[]\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n    if c==liste:\n      res=True\n  return res", "user": "userdId_8", "attemptID": 4435, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-71.28374", "embeddingY": "15.767272"},{"extension": "py", "date": "2020-04-02 22:49:20", "correct": "1", "upload": "def indiceOccurrence(n,x,l):\n  trouve=False\n  i=0\n  cpt=0\n  while i<len(l) and not trouve:\n    if l[i]==x:\n      cpt+=1\n    if cpt==n:\n      trouve=True\n    i+=1\n  #post traitement\n  if trouve:\n    res=i-1\n  else:\n    res=None\n  return res", "user": "userdId_34", "attemptID": 4436, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-1.5388855", "embeddingY": "68.90393"},{"extension": "py", "date": "2020-04-06 04:39:00", "correct": "1", "upload": "def elemGeo(n,u0,q):\n  res=u0*q**n\n  return res", "user": "userdId_26", "attemptID": 4437, "exercise": "d7c83a7fb9b49e28804e55955ad06968", "exercise_name": "elemGeo", "embeddingX": "-39.10879", "embeddingY": "17.69349"},{"extension": "py", "date": "2020-03-06 00:33:52", "correct": "0", "upload": "def nbOccurrencesLettre(lettre,mot):\n    res=0\n    for i in range(1,len(mot)):\n      if lettre in mot:\n        res=res+1\n      return res", "user": "userdId_2", "attemptID": 4438, "exercise": "2864c9e5861229d2ff32570f6bc944fb", "exercise_name": "nbOccurrencesLettre", "embeddingX": "-12.773198", "embeddingY": "-43.46256"},{"extension": "py", "date": "2020-03-24 06:08:02", "correct": "0", "upload": "def compare(chaine1,chaine2):\n  res=0\n  i=0\n  while i<len(chaine1) and i<len(chaine2) and res==0:\n    if chaine1[i]<chaine2[i]:\n      res=-1\n    elif chaine1[i]>chaine2[i]:\n      res=1\n    i=i+1\n  if res==0:\n    if len(chaine1)<len(chaine2):\n      res=-1\n  elif len(chaine1)>len(chaine2):\n    res=1\n  return res", "user": "userdId_9", "attemptID": 4439, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-23.60902", "embeddingY": "61.22237"},{"extension": "py", "date": "2020-03-03 06:11:42", "correct": "0", "upload": "def nbVoyelles(mot):\n  res=0\n  for c in range(len(mot)):\n    if c in mot(\"aeiouy\"):\n      res=res+1\n    else:\n      res=0\n  return res", "user": "userdId_35", "attemptID": 4440, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-6.5484433", "embeddingY": "-47.553898"},{"extension": "py", "date": "2020-04-05 10:45:37", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n    liste2 = [liste[0]] + [liste[nb-1]*a+b for nb in range(1,len(liste))]    \n    return liste == liste2", "user": "userdId_4", "attemptID": 4441, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-74.34941", "embeddingY": "17.595093"},{"extension": "py", "date": "2020-04-11 08:08:18", "correct": "0", "upload": "def elemGeo(n,u0,q):\n  return U0*n**q", "user": "userdId_8", "attemptID": 4442, "exercise": "d7c83a7fb9b49e28804e55955ad06968", "exercise_name": "elemGeo", "embeddingX": "-40.129925", "embeddingY": "21.090994"},{"extension": "py", "date": "2020-03-17 06:27:34", "correct": "0", "upload": "def distribution(liste,n):\n    res=[0]*(n+1)\n    for i in range(len(liste)):\n      for i in range(n+1):\n        if liste[i]==i:\n          res[i]=res[i]+1\n    return res\n\n\n  \n  \n", "user": "userdId_28", "attemptID": 4443, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-23.587032", "embeddingY": "-41.24817"},{"extension": "py", "date": "2020-04-09 02:43:19", "correct": "0", "upload": "def suiteAriGeo(liste):\n  ok=True\n  i=0\n  R=0\n  if len(liste)<=2 :\n    ok=True\n  else :\n    for elem in (liste) :\n      if liste[0]==0 :\n        Q=1\n      elif (liste[i+1]-liste[i])==(liste[i+2]-liste[i+1]) :\n        Q=1\n        R=(liste[1]-liste[0])\n      elif (liste[i+1]/liste[i])==(liste[i+2]/liste[i+1]) :\n        Q=(liste[1]/liste[0])\n        R=0\n      \n    while i<(len(liste)-1) and ok :\n      if liste[i+1]!=Q*liste[i]+R :\n        ok=False\n      i+=1\n  return ok", "user": "userdId_15", "attemptID": 4444, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "43.66476", "embeddingY": "55.52594"},{"extension": "py", "date": "2020-03-05 21:57:51", "correct": "0", "upload": "def maximum(liste):\n    max = 0\n    for i in range(0,len(liste)):\n    \tif liste[i] > max:\n        \tmax = liste[i]\n    \n    return max", "user": "userdId_29", "attemptID": 4445, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "10.966309", "embeddingY": "-72.51533"},{"extension": "py", "date": "2020-03-05 23:48:41", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n    return none\n  else:\n    max=liste[0]\n    for i in range (1,len(liste)):\n     if liste[i]>max:\n      max=liste[i]\n      return max", "user": "userdId_1", "attemptID": 4446, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "9.068836", "embeddingY": "-67.81778"},{"extension": "py", "date": "2020-03-06 00:05:17", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=liste[0]\n    for i in range(le(liste)):\n      if liste[i]>res:\n        res=liste[i]\n  return None", "user": "userdId_12", "attemptID": 4447, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "1.84102", "embeddingY": "-54.051945"},{"extension": "py", "date": "2020-03-02 02:30:31", "correct": "0", "upload": "def nombrePair(n):\n  a=(n/2)\n  b=type(a)\n  if b==int :\n    res=True\n  else :\n    res=False\n  return res", "user": "userdId_15", "attemptID": 4448, "exercise": "864911b08708fc8bae69311a8ddd3da7", "exercise_name": "nombrePair", "embeddingX": "41.028114", "embeddingY": "51.361946"},{"extension": "py", "date": "2020-03-10 04:28:17", "correct": "0", "upload": "def doubleLettre(mot):\n  res=0\n  prec=' '\n  for c in mot:\n    if prec==c:\n      res=True\n    else:\n      res=False\n    prec=c\n  return res", "user": "userdId_18", "attemptID": 4449, "exercise": "00da9cf1fa2b468d915724499459ed8f", "exercise_name": "doubleLettre", "embeddingX": "15.833657", "embeddingY": "-6.8034534"},{"extension": "py", "date": "2020-03-16 04:51:16", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n    if lettre=='' or mot=='':\n      res=None\n    else:\n      res=None\n      for c in mot:\n        if lettre==c:\n          res=len(mot[c])\n    return res", "user": "userdId_18", "attemptID": 4450, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-14.35813", "embeddingY": "-38.289433"},{"extension": "py", "date": "2020-03-06 00:49:11", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n  if len(mot)==0:\n    return None\n  else:\n    res=-1\n    for elem in mot:\n      if lettre==elem:\n        res=res+1\n    return res\n        ", "user": "userdId_2", "attemptID": 4451, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-10.964615", "embeddingY": "-31.222534"},{"extension": "py", "date": "2020-04-11 07:57:30", "correct": "0", "upload": "def sousChaine(s1,s2):\n  res=False\n  i=0\n  j=0\n  while i<len(s1) and j<len(s2) and s1[i]!=s2[j]:\n    j+=1\n  else:\n    while i<len(s1) and j<len(s2) and s1[i]==s2[j]:\n      if s1[i]==s2[j]:\n        res=True\n  return res", "user": "userdId_8", "attemptID": 4452, "exercise": "4bdf8c9c5d020593e1771e4d3ae1ae0d", "exercise_name": "sousChaine", "embeddingX": "-3.4574735", "embeddingY": "59.402943"},{"extension": "py", "date": "2020-03-23 01:17:34", "correct": "0", "upload": "def prononcable(mot):\n  res=True\n  aux=''\n  for c in mot:\n    if c==aux:\n      res=False\n    aux=c\n  return res", "user": "userdId_27", "attemptID": 4453, "exercise": "6318b210c201fba050d60bc0913cb7ef", "exercise_name": "prononcable", "embeddingX": "17.00401", "embeddingY": "-5.1919284"},{"extension": "py", "date": "2020-03-13 00:49:29", "correct": "1", "upload": "def sommeNPremiersEntiers(n):\n  res=0\n  for i in range(0,n+1):\n    res=res+i\n  return res", "user": "userdId_2", "attemptID": 4454, "exercise": "c315a540cf0bfb0182dc114c6f0eafd1", "exercise_name": "sommeNPremiersEntiers", "embeddingX": "-18.938707", "embeddingY": "14.041388"},{"extension": "py", "date": "2020-04-07 03:57:16", "correct": "0", "upload": "def motPalindrome(mot):\n  res=False\n  i=0\n  while i<len(mot) and not res:\n    if mot[i]==mot[-1-i]:\n      res=True\n    i+=1\n  return res", "user": "userdId_30", "attemptID": 4455, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "26.263308", "embeddingY": "43.066067"},{"extension": "py", "date": "2020-04-06 06:46:58", "correct": "1", "upload": "def sousChaine(s1,s2):\n  res=True\n  i=0\n  j=0\n  while i<len(s1) and j<len(s2):\n    if s1[i]==s2[j]:\n      i+=1\n    else:\n      i=0\n    j+=1\n  if i!=len(s1):\n    res=False\n  return res", "user": "userdId_27", "attemptID": 4456, "exercise": "a7cdd094daa2f0bfccc7a4ec419f7243", "exercise_name": "sousChaine", "embeddingX": "-5.445653", "embeddingY": "59.206455"},{"extension": "py", "date": "2020-03-10 03:27:30", "correct": "0", "upload": "def jourNuit(heure):\n  if heure>24 or heure<0:\n    res=\" l'heure saisie est invalide \"\n  else:\n        if heure <5 or heure>=21:\n            res=\"on est la nuit\"\n        elif heure<12:\n            res=\" on est le matin\"\n        elif heure <17:\n            res=\" on est l'apr\u00e8s-midi \"\n        else:\n          res=\" on est le soir \"\n        if heure<6 or heure>=18:\n          res=res+\" et il fait nuit \"\n        else:\n          res=res+\" et il fait jour\"\n  return res", "user": "userdId_25", "attemptID": 4457, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "72.68528", "embeddingY": "15.084971"},{"extension": "py", "date": "2020-03-17 05:22:04", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  res=''\n  if debut+longueur>len(s):\n    fin=len(s)\n  else:\n    fin=debut+longueur\n  for i in range(debut,Fin):\n    res=res+s[i]\n  return res", "user": "userdId_23", "attemptID": 4458, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-88.59308", "embeddingY": "19.811573"},{"extension": "py", "date": "2020-03-17 05:28:43", "correct": "0", "upload": "def distribution(liste,n):\n  cpts=[0]*(n+1)\n  for elem in liste:\n    cpts[elem]=cpts[elem]+1\n  return cpts[elem]", "user": "userdId_8", "attemptID": 4459, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-58.93313", "embeddingY": "-15.495695"},{"extension": "py", "date": "2020-03-31 04:00:25", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n    if l==[]:\n      cpt=None\n    else:\n      trouve=False\n      cpt=0\n      i=0\n      while i<len(l) and not trouve:\n        if x==l[i] and n!=0:\n          n-=1\n        if n==0:\n          trouve=True\n        cpt+=1\n        i+=1\n      if n!=0:\n        cpt=-1\n    return cpt", "user": "userdId_18", "attemptID": 4460, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "2.4832084", "embeddingY": "79.111626"},{"extension": "py", "date": "2020-04-06 02:51:21", "correct": "1", "upload": "def phrasePalindrome(phrase):\n  res = True\n  phrase2 = []\n  for i in range (len(phrase)):\n    if phrase[i] != ' ':\n      phrase2.append (phrase[i])\n  i = 0\n  while i < len(phrase2)/2 and res == True :\n    if phrase2[i] != phrase2[len(phrase2)-i-1] :\n      res = False\n    i = i + 1\n  return res\n ", "user": "userdId_17", "attemptID": 4461, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "31.698742", "embeddingY": "57.611214"},{"extension": "py", "date": "2020-04-12 08:38:24", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n    cpt=0\n    x=nombre%10\n    decomp=nombre\n    while decomp!=0:\n      if x==chiffre:\n        cpt+=1\n        decomp=decomp%10\n        x=decomp//10\n      else:\n        decomp=decomp%10\n        x=decomp//10\n    if cpt==0:\n      cpt=1\n    return cpt", "user": "userdId_11", "attemptID": 4462, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "6.926829", "embeddingY": "16.532616"},{"extension": "py", "date": "2020-03-21 06:03:50", "correct": "0", "upload": "def sommeNbPairs(liste):\n  res=0\n  for i in range(len(liste)):\n    if liste[i]%2!=0:\n      res=res+liste[i]\n  return res", "user": "userdId_9", "attemptID": 4463, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "-23.816715", "embeddingY": "-57.724262"},{"extension": "py", "date": "2020-03-23 01:24:39", "correct": "0", "upload": "def doubleLettre(mot):\n    res=False\n    for i in range(len(mot)):\n      if (mot[i+1]==mot[i]):\n        res=True\n    return res\n      ", "user": "userdId_11", "attemptID": 4464, "exercise": "00da9cf1fa2b468d915724499459ed8f", "exercise_name": "doubleLettre", "embeddingX": "-0.9034846", "embeddingY": "-69.13696"},{"extension": "py", "date": "2020-04-12 06:59:53", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  if liste==[]:\n    res=True\n  c=[]\n  res=False\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n    c=[liste[0]/len(liste)]+c\n  return c", "user": "userdId_8", "attemptID": 4465, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-77.707436", "embeddingY": "12.321746"},{"extension": "py", "date": "2020-04-12 10:21:02", "correct": "1", "upload": "def motPalindrome(mot):\n  ok=True\n  i=0 \n  while i<len(mot)//2 and ok:\n    if mot[i]!=mot[-i-1]:\n      ok=False\n    i+=1\n  return ok", "user": "userdId_38", "attemptID": 4466, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "24.227343", "embeddingY": "37.063015"},{"extension": "py", "date": "2020-03-06 00:22:26", "correct": "0", "upload": "def maximum(liste):\n res= liste[0]\n for elem in liste:\n    if elem>res:\n      res=elem\n \n    ", "user": "userdId_33", "attemptID": 4467, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "33.16868", "embeddingY": "-46.320553"},{"extension": "py", "date": "2020-04-06 02:04:50", "correct": "0", "upload": "def suiteAri(liste):\n  ok=True\n  i=0\n  if len(liste)<=2 :\n    ok=True\n  else :\n    while i<(len(liste)-2) and ok :\n      if (liste[i+1]-liste[i])!=(liste[i+2]-liste[i+1]) :\n        ok=False\n  return ok", "user": "userdId_15", "attemptID": 4468, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "20.358095", "embeddingY": "48.161484"},{"extension": "py", "date": "2020-03-06 00:37:41", "correct": "0", "upload": "def minimum(liste):\n  res=100\n  for i in range (len(liste)):\n    if (liste[i])<res:\n      res=(liste[i])\n  return res", "user": "userdId_45", "attemptID": 4469, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "29.379128", "embeddingY": "-70.020485"},{"extension": "py", "date": "2020-05-11 01:16:02", "correct": "1", "upload": "def nbOccurrencesJoueur(joueurs,nom):\n  cpt=0\n  for i in range(len(joueurs)):\n    if joueurs[i]==nom:\n      cpt+=1\n  return cpt", "user": "userdId_12", "attemptID": 4470, "exercise": "00ee5faf82e54951fbdb2ba2656f7ae7", "exercise_name": "nbOccurrencesJoueur", "embeddingX": "-20.90473", "embeddingY": "-38.619106"},{"extension": "py", "date": "2020-03-10 04:15:55", "correct": "1", "upload": "def sommeNbPairs(liste):\n  res=0\n  for i in liste:\n    if i%2==0:\n      res=res+i\n  return res", "user": "userdId_35", "attemptID": 4471, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "29.031149", "embeddingY": "-18.690784"},{"extension": "py", "date": "2020-03-02 09:31:31", "correct": "0", "upload": "def qualifJO(sexe,record,nbvictoires,champion):\n    res = False\n    if type(sexe) == str and type(record) == int and nbvictoires == int:\n        if (sexe == \"F\" or sexe == \"M\") and record > 0 and nbvictoires > 0 and type(champion) == bool:\n            if sexe == \"F\" and record < 15 or sexe == \"M\" and record < 12 and nbvictoires >= 3 or champion == True:\n                res = True\n    \n        \n    return res\n        \n    \n    return res", "user": "userdId_4", "attemptID": 4472, "exercise": "78ec7738f3a7f3553d4a5c653534c32d", "exercise_name": "qualifJO", "embeddingX": "38.390068", "embeddingY": "-4.2267995"},{"extension": "py", "date": "2020-03-17 04:58:58", "correct": "1", "upload": "def reconstruireChainePartielle(s,n):\n  res=''\n  for i in range(0,len(s),n):\n    res=res+s[i]\n  return res", "user": "userdId_7", "attemptID": 4473, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-59.576996", "embeddingY": "-41.072838"},{"extension": "py", "date": "2020-04-06 15:02:08", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  i=0\n  for i in range(nombre):\n    if nombre[i]==chiffre:\n      cpt=cpt+1\n    i=i+1\n  return cpt", "user": "userdId_3", "attemptID": 4474, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-20.96409", "embeddingY": "-31.448029"},{"extension": "py", "date": "2020-04-09 03:06:14", "correct": "0", "upload": "def suiteAriGeo(liste):\n  ok=True\n  i=0\n  j=0\n  R=0\n  Q=0\n  if len(liste)<=2 :\n    ok=True\n  else :\n    while j<(len(liste)-2):\n      if liste[0]==0 :\n        Q=1\n      elif (liste[j+1]-liste[j])==(liste[j+2]-liste[j+1]) :\n        Q=1\n        R=(liste[1]-liste[0])\n      elif (liste[j+1]/liste[j])==(liste[j+2]/liste[j+1]) :\n        Q=(liste[1]/liste[0])\n        R=0\n      else :\n        Q=(liste[2]//liste[1])\n        R=liste[2]-(Q*liste[1])\n      j+=1\n      \n    while i<(len(liste)-1) and ok :\n      if liste[i+1]!=Q*liste[i]+R :\n        ok=False\n      i+=1\n  return ok", "user": "userdId_15", "attemptID": 4475, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "40.333866", "embeddingY": "55.411026"},{"extension": "py", "date": "2020-03-09 05:45:36", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  \n  res=0\n  for elem in jour1,mois1,annee1,jour2,mois2,annee2:\n    \n    if ('jour1,mois1,annee1')<('jour2,mois2,annee2'):\n       res=res-1\n      \n    elif ('jour1,mois1,annee1')==('jour2,mois2,annee2'):\n       res=res\n    \n    elif ('jour1,mois1,annee1')<('jour2,mois2,annee2'):\n       res=res+1\n      \n  return res", "user": "userdId_23", "attemptID": 4476, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "-14.715113", "embeddingY": "1.6433175"},{"extension": "py", "date": "2020-03-17 05:28:34", "correct": "0", "upload": "def distribution(liste,n):\n  cpts=[0]*(n+1)\n  for elem in liste:\n    cpt[elem]=cpt[elem]+1\n  return cpt[elem]", "user": "userdId_8", "attemptID": 4477, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-59.444954", "embeddingY": "-11.317837"},{"extension": "py", "date": "2020-04-06 21:45:39", "correct": "1", "upload": "def produitScalaire(vec1,vec2):\n    if len(vec1)==0 or len(vec2)==0:\n      res=0\n    else:\n      res=0\n      for i in range(len(vec1) and len(vec2)):\n        res=res+vec1[i]*vec2[i]\n    return res ", "user": "userdId_11", "attemptID": 4478, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-32.00832", "embeddingY": "-41.761013"},{"extension": "py", "date": "2020-03-06 00:44:01", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    res=0\n  else:\n    for lettre in [\"a\",\"e\",\"i\",\"o\",\"u\",\"y\"]:\n        res=res+1\n  return res\n  \n      \n  \n\n ", "user": "userdId_9", "attemptID": 4479, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "12.895157", "embeddingY": "-38.605583"},{"extension": "py", "date": "2020-03-16 04:50:34", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n    if lettre=='' or mot=='':\n      res=None\n    else:\n      res=None\n      for c in mot:\n        if lettre==c:\n          for i in range(-1,-len(mot)-1,-1):\n            res=len(mot[i])\n    return res", "user": "userdId_18", "attemptID": 4480, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-11.599306", "embeddingY": "-37.497997"},{"extension": "py", "date": "2020-03-31 04:13:06", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n  i=0\n  cpt=0\n  trouve=False\n  res=None\n  while i<len(l) and not trouve:\n    if x==l[i]:\n      cpt+=1  \n    if n==cpt:\n      trouve=True    \n    i+=1\n    res=i-1\n  return res", "user": "userdId_27", "attemptID": 4481, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-1.3643115", "embeddingY": "68.06797"},{"extension": "py", "date": "2020-03-31 03:43:30", "correct": "0", "upload": "def fusion(liste1,liste2):\n  res=[]\n  i=0\n  j=0\n  while i<len(liste1) and i<len(liste2):\n    if liste1[i]<liste2[j]:\n      res.append(liste1[i])\n      i=i+1\n    else:\n      res.append(liste2[j])\n      j=j+1\n      while j<len(liste2):\n        res.append(liste2[j])\n        j=j+1\n      while i<len(liste1):\n          res.append(liste1[i])\n          i=i+1\n  return res", "user": "userdId_36", "attemptID": 4482, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-40.669376", "embeddingY": "46.467346"},{"extension": "py", "date": "2020-03-13 00:54:33", "correct": "0", "upload": "def plusLongueSuite(liste):\n  res=0\n  for n2 in range (1,len(liste)):\n    n1=liste[0]\n    if n1==n2:\n      res=res+1\n    n1=n2\n  \n  return res", "user": "userdId_15", "attemptID": 4483, "exercise": "deed004abb317b11778f7e8247197a40", "exercise_name": "plusLongueSuite", "embeddingX": "-2.699594", "embeddingY": "-41.470234"},{"extension": "py", "date": "2020-03-13 00:49:31", "correct": "0", "upload": "def doubleLettre(mot):\n  lettre2 = ' '\n  cpt = 0\n  res = False\n  for lettre1 in mot :\n    if lettre1 == lettre2 :\n      cpt =  cpt + 1\n    lettre2 = lettre1\n    if cpt >= 2 :\n        res = True\n    else :\n      cpt = 0\n  \t\n  return res", "user": "userdId_17", "attemptID": 4484, "exercise": "00da9cf1fa2b468d915724499459ed8f", "exercise_name": "doubleLettre", "embeddingX": "10.5940485", "embeddingY": "-5.183307"},{"extension": "py", "date": "2020-04-12 06:47:07", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  if liste==[]:\n    res=True\n  c=[]\n  res=False\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n    c=[liste[0]*1]+c\n  return c", "user": "userdId_8", "attemptID": 4485, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-72.35555", "embeddingY": "26.39621"},{"extension": "py", "date": "2020-03-31 05:44:37", "correct": "1", "upload": "def nbChiffres(nombre):\n  cpt=0\n  while nombre!=0:\n    nombre=nombre//10\n    cpt+=1\n  if cpt==0:\n    cpt=1\n  return cpt", "user": "userdId_13", "attemptID": 4486, "exercise": "3dcf332c003a1f3bf15df22ee17884a3", "exercise_name": "nbChiffres", "embeddingX": "32.083397", "embeddingY": "14.146057"},{"extension": "py", "date": "2020-03-06 00:06:00", "correct": "0", "upload": "def minimum(liste):\n  if len (liste)==0:\n    res=None\n  else:\n    res=liste[0]\n    for i in range (1,len(liste)):\n      if liste[i]<res:\n        res=liste[i]\n    return None", "user": "userdId_13", "attemptID": 4487, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "26.263567", "embeddingY": "-67.38718"},{"extension": "py", "date": "2020-03-15 01:42:48", "correct": "0", "upload": "def qualifJO(sexe,record,nbvictoires,champion):\n  if champion==True:\n    res=True\n  else:\n    if M==sexe and record<12.0 and nbvictoires>=3:\n      res=True\n    elif F==sexe and record<15.0 and nbvictoires>=3:\n      res=True\n    else:\n      res=False\n  return res", "user": "userdId_8", "attemptID": 4488, "exercise": "78ec7738f3a7f3553d4a5c653534c32d", "exercise_name": "qualifJO", "embeddingX": "61.41752", "embeddingY": "-11.343954"},{"extension": "py", "date": "2020-03-31 06:59:26", "correct": "0", "upload": "def doubleChiffre(nombre):\n  res=False\n  prec=None\n  while nombre!=0 and not res:\n    chiffre=nombre%10\n    nombre=nombre//10\n    if chiffre==prec:\n      res=True\n    prec=chiffre\n  return trouve", "user": "userdId_9", "attemptID": 4489, "exercise": "c83ea6acd3e9f6f5543e87d515e8a44a", "exercise_name": "doubleChiffre", "embeddingX": "10.408928", "embeddingY": "21.391323"},{"extension": "py", "date": "2020-03-30 21:40:47", "correct": "0", "upload": "def fusion(liste1,liste2):\n  i=0\n  j=0\n  listefusion=[]\n  while i<len(liste1) and j<len(liste2):\n    if liste1[i]>liste2[j]:\n      listefusion.append(liste2[j])\n      j=j+1\n    else:\n      listefusion.append(liste1[i])\n      i=i+1\n  if len(liste1)>0 and len(liste2)>0:\n    if max(liste1)>max(liste2):\n      for ind in range (i,len(liste1)):\n        listefusion.append(liste1[ind])\n\n    if max(liste2)>max(liste1):\n      for ind in range (j,len(liste2)):\n        listefusion.append(liste2[ind])\n\n  return listefusion\n  \n", "user": "userdId_19", "attemptID": 4490, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-34.312325", "embeddingY": "49.13842"},{"extension": "py", "date": "2020-03-13 00:39:07", "correct": "0", "upload": "def sommeNbPairs(liste):\n  if liste==0:\n    res=0\n  else:\n    for n in (liste):\n      if n%2==0:\n        res=res+n\n    return res", "user": "userdId_5", "attemptID": 4491, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "29.503973", "embeddingY": "-21.523226"},{"extension": "py", "date": "2020-06-02 22:55:58", "correct": "0", "upload": "def moyenne(liste):\n  if len(liste)!=0:\n    for elem in liste:\n  \t  num+=elem\n    res=num/len(liste)\n    return res\n    ", "user": "userdId_12", "attemptID": 4492, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-7.978543", "embeddingY": "-17.851683"},{"extension": "py", "date": "2020-04-06 05:46:07", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut2<=fin1:\n    res=True\n  else:\n    res=False\n  return res", "user": "userdId_16", "attemptID": 4493, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "52.55939", "embeddingY": "-16.847836"},{"extension": "py", "date": "2020-04-05 03:48:53", "correct": "0", "upload": "def moyenne(liste):\n  if len(liste)==0:\n    res=None\n    return res\n \n  else:\n    s=0\n    for elem in liste:\n      s+=elem\n    res=s//len(liste)\n  return res", "user": "userdId_26", "attemptID": 4494, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-8.741321", "embeddingY": "-15.795929"},{"extension": "py", "date": "2020-03-06 00:38:00", "correct": "0", "upload": "def nbOccurrencesLettre(lettre,mot):\n    if len(mot) == 0:\n      res = 0\n    else:\n      if lettre in range(len(mot)):\n        res+=1\n    return res", "user": "userdId_29", "attemptID": 4495, "exercise": "2864c9e5861229d2ff32570f6bc944fb", "exercise_name": "nbOccurrencesLettre", "embeddingX": "-10.379868", "embeddingY": "-43.587337"},{"extension": "py", "date": "2020-03-31 06:58:02", "correct": "1", "upload": "def nbVoyelles(mot):\n    if len(mot)==0:\n      res=0\n    else:\n      res=0\n      for c in mot:\n        if c in 'aeiouy':\n          res=res+1\n    return res", "user": "userdId_11", "attemptID": 4496, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "6.0865026", "embeddingY": "-29.66374"},{"extension": "py", "date": "2020-03-05 23:50:42", "correct": "1", "upload": "def nbVoyelles(mot):\n    Voy=[\"a\",\"e\",\"u\",\"i\",\"o\",\"y\"]\n    res=0\n    for i in mot:\n      if i in Voy:\n        res=res+1\n    return res", "user": "userdId_2", "attemptID": 4497, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "17.902693", "embeddingY": "-29.528646"},{"extension": "py", "date": "2020-03-23 00:37:56", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n  if mot=='':\n    pos=None\n  else:\n    for i in range(len(mot)):\n      if lettre==mot[i]:\n        pos=i\n      else:\n        pos=None\n  return pos", "user": "userdId_27", "attemptID": 4498, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-17.497545", "embeddingY": "-41.68076"},{"extension": "py", "date": "2020-03-06 22:54:18", "correct": "1", "upload": "def premiereOccurrenceLettre(lettre,mot):\n    res = mot.find(lettre)\n    if res == -1: res = None    \n    return res", "user": "userdId_4", "attemptID": 4499, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "40.649822", "embeddingY": "-2.6577468"},{"extension": "py", "date": "2020-03-06 00:11:19", "correct": "0", "upload": "def ecart(liste):\n\tif len(liste)==0:\n\t\tres=0\n\telse:\n\t\tma=max(liste)\n\t\tmi=min(liste)\n\t\tres=ma-mi\n\treturn res\n\n    ", "user": "userdId_19", "attemptID": 4500, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "11.415924", "embeddingY": "-44.453987"},{"extension": "py", "date": "2020-04-12 08:30:09", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n    cpt=0\n    x=nombre%10\n    decomp=nombre\n    while decomp!=0:\n      if x==chiffre:\n        cpt+=1\n        decomp=decomp//10\n        x=decomp%10\n      else:\n        decomp=decomp//10\n        x=decomp%10\n    if cpt==0:\n      cpt=1\n    return cpt", "user": "userdId_11", "attemptID": 4501, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "7.0369787", "embeddingY": "15.1099205"},{"extension": "py", "date": "2020-03-17 05:18:43", "correct": "0", "upload": "def permutationChaine(s):\n  res=''\n  for i in range(0,len(s)-1,2):\n    if s%2!=0:\n      res=res+s(-1)\n    return res\n    ", "user": "userdId_9", "attemptID": 4502, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-37.12918", "embeddingY": "-63.684242"},{"extension": "py", "date": "2020-04-07 11:17:28", "correct": "0", "upload": "def suiteGeo(liste):\n  ok=True\n  i=0\n  if len(liste)==0 and len(liste)==1 and liste[0]!=0:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i]!=0:\n      q=liste[1]/liste[0]\n    if liste[i]!=0:\n      if liste[i+1]/liste[i]!=q:\n        ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 4503, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "29.36934", "embeddingY": "61.91099"},{"extension": "py", "date": "2020-03-10 03:30:35", "correct": "0", "upload": "def jourNuit(heure):\n  if heure<0 or heure>24:\n    res=\"l'heure saisie est invalide \"\n  else: \n    if heure<5 or heure>=21: \n      res=\" on est la nuit \" \n    elif heure<12:\n      res=\" on est le matin \"\n    elif heure<17: \n      res=\" on est l'apr\u00e8s midi \"\n    else:\n      res=\" on est le soir\"\n    if heure<6 or heure>=18:\n      res=res+\"et il fait nuit \"\n    else:\n      res=res+\"et il fait jour \"   \n    return res", "user": "userdId_10", "attemptID": 4504, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "72.61553", "embeddingY": "14.671597"},{"extension": "py", "date": "2020-03-02 02:42:17", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if jour1<jour2 and mois1<mois2 and annee1<annee2:\n    return -1\n  elif jour1!=jour2 and mois1!=mois2 and annee1!=annee2:\n    return 0\n  else:\n    return 1\n  \ncompareDates(10,1,2020,14,2,2020)\ncompareDates(14,2,2020,11,2,2020)\ncompareDates(10,1,2020,10,1,2020)", "user": "userdId_1", "attemptID": 4505, "exercise": "af7c1467ef9f7684d9ff58734067ae98", "exercise_name": "compareDates", "embeddingX": "88.89378", "embeddingY": "-17.436483"},{"extension": "py", "date": "2020-03-17 06:17:35", "correct": "0", "upload": "def maximum(liste):\n    if len(liste)==0:\n      res=none\n    else:\n      res=liste[0]\n    for elem in liste:\n        res=elem\n    return res", "user": "userdId_22", "attemptID": 4506, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-3.1696675", "embeddingY": "-35.925297"},{"extension": "py", "date": "2020-03-31 03:19:14", "correct": "0", "upload": "def fusion(liste1,liste2):\n  res=[]\n  i=0\n  j=0\n  while i<len(liste1) and i<len(liste2):\n    if liste1[i]<liste2[j]:\n      res.append(liste2[j])\n      j=i+1\n    else:\n      res.append(liste1[i])\n      i=i+1\n  return res", "user": "userdId_36", "attemptID": 4507, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-40.28265", "embeddingY": "48.794716"},{"extension": "py", "date": "2020-04-07 04:05:47", "correct": "0", "upload": "def elemAri(n,u0,r):\n  cpt=u0\n  i=0\n  while i<n:\n    cpt=cpt+u0+r\n    i=i+1\n  return cpt\n  ", "user": "userdId_1", "attemptID": 4508, "exercise": "f239498950e974e29e01472749d9a09d", "exercise_name": "elemAri", "embeddingX": "-8.622918", "embeddingY": "26.076002"},{"extension": "py", "date": "2020-03-23 23:35:48", "correct": "0", "upload": "def nbSyllabes(mot):\n  res=0\n  for i in range (len(mot)):\n    if mot[i-1] not in 'aeiouy' and mot[i] in 'aeiouy':\n      res=res+1\n  \n  return res", "user": "userdId_15", "attemptID": 4509, "exercise": "1c86bec0f4df503e23db53994f3d2991", "exercise_name": "nbSyllabes", "embeddingX": "-25.468798", "embeddingY": "-67.830826"},{"extension": "py", "date": "2020-03-31 04:13:53", "correct": "1", "upload": "def indiceOccurrence(n,x,l):\n  trouve=False\n  i=0\n  cpt=0\n  res=None\n  while i<len(l) and trouve==False:\n    if l[i]==x:\n      cpt=cpt+1\n    if n==cpt:\n      trouve=True\n    i=i+1\n  if trouve==True:\n    res=(i-1)\n  return res", "user": "userdId_31", "attemptID": 4510, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-0.4192132", "embeddingY": "74.69019"},{"extension": "py", "date": "2020-03-31 06:39:40", "correct": "0", "upload": "def doubleChiffre(nombre):\n  res=False\n  trouve=False\n  prec=0\n  while nombre!=0 and trouve==False:\n    com1=nombre%10\n    nombre=nombre//10\n    if com1==prec:\n      res=True\n    prec=com1  \n  return res", "user": "userdId_13", "attemptID": 4511, "exercise": "c83ea6acd3e9f6f5543e87d515e8a44a", "exercise_name": "doubleChiffre", "embeddingX": "11.186173", "embeddingY": "19.061903"},{"extension": "py", "date": "2020-03-23 02:06:09", "correct": "1", "upload": "def premiereOccurrenceLettre(lettre,mot):\n  if len(mot)==0:\n    res=None \n  else:\n    res=None\n    for i in range(len(mot)): \n      if lettre==mot[i]:\n        res=i\n        return res", "user": "userdId_16", "attemptID": 4512, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-18.467785", "embeddingY": "-40.17163"},{"extension": "py", "date": "2020-04-07 03:54:42", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  j=0\n  ok=True\n  raison=None\n  if len(liste)>1:\n    while i<len(liste) and liste[0]!=0 and raison==None:\n      raison=liste[i+1]/liste[i]\n      i+=1\n    while j<len(liste)-1 and ok:\n      if liste[j+1]!=liste[j]*raison:\n        ok=False\n      i+=1\n  return ok", "user": "userdId_12", "attemptID": 4513, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "21.901188", "embeddingY": "70.49567"},{"extension": "py", "date": "2020-03-31 03:02:46", "correct": "0", "upload": "def fusion(liste1,liste2):\n  res=[]\n  i=0\n  j=0\n  while i<len(liste1) and j<len(liste2):\n    if liste[i]<liste[j]:\n     res.append(i)\n    i=i+1\n    if liste[i]>=liste[j]:\n     res.append(j)\n     j=j+1\n\n  return res", "user": "userdId_50", "attemptID": 4514, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-39.758236", "embeddingY": "52.619617"},{"extension": "py", "date": "2020-03-06 00:36:59", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    voy=0\n  else:\n    voy=0\n    for i in mot:\n      if mot in [\"a\",\"e\",\"i\",\"o\",\"u\",\"y\"]:\n        voy=voy+5\n  return voy", "user": "userdId_13", "attemptID": 4515, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "12.677047", "embeddingY": "-35.916447"},{"extension": "py", "date": "2020-03-05 23:35:49", "correct": "1", "upload": "def somme(liste):\n  res=0\n  for elem in liste:\n    res=res+elem\n  return res", "user": "userdId_41", "attemptID": 4516, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-29.98514", "embeddingY": "3.1303337"},{"extension": "py", "date": "2020-04-06 02:46:57", "correct": "0", "upload": "def suiteGeo(liste):\n  ok=True\n  i=0\n  if len(liste)<=1 :\n    ok=True\n  else :\n    while i<(len(liste)-1) and ok :\n      if (liste[i]*liste[i+1])==0 :\n        ok=False\n      elif liste[i]!=(liste[0]*(liste[0]//liste[1])**i):\n        ok=False\n      i+=1\n  return ok", "user": "userdId_15", "attemptID": 4517, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "51.0951", "embeddingY": "46.001"},{"extension": "py", "date": "2020-03-17 04:57:02", "correct": "1", "upload": "def sousChaine(s,debut,longueur):\n  res=''\n  fin=debut+longueur\n  if fin>len(s):\n    fin=len(s)\n  for i in range(debut,fin):\n    res=res+s[i]\n  return res", "user": "userdId_12", "attemptID": 4518, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-77.64504", "embeddingY": "24.09106"},{"extension": "py", "date": "2020-03-20 00:36:40", "correct": "0", "upload": "def permutationChaine(o):\n  res=\"\"\n  for i in range(o,len(s)-1,2):\n    res=res+o[i+1]+s[i]\n  if (len(o)%2!=0):\n    res=res+[-1]\n  return res", "user": "userdId_20", "attemptID": 4519, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-35.94737", "embeddingY": "-23.963415"},{"extension": "py", "date": "2020-05-04 21:46:55", "correct": "0", "upload": "def minimum(liste):\n  if liste==[]:\n    res=None\n  else:\n    res=liste[0]\n    for i in range(1,len(liste)-1):\n      if liste[i]<res:\n        res=liste[i]\n  return res\n", "user": "userdId_26", "attemptID": 4520, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "23.287115", "embeddingY": "-70.74126"},{"extension": "py", "date": "2020-03-14 03:26:31", "correct": "0", "upload": "def moyenne(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=0\n    cpt=0\n    for i in range(len(liste)):\n      res=res+i\n      cpt=cpt+1\n  moy=res%cpt\n  return moy", "user": "userdId_14", "attemptID": 4521, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-6.387426", "embeddingY": "-1.768804"},{"extension": "py", "date": "2020-04-02 23:29:24", "correct": "1", "upload": "def listeSymetrique(l):\n  i=0\n  ok=True\n  while i<len(l) and ok:\n    if l[i]!=l[-(i+1)]:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 4522, "exercise": "8eb27aeda471a467e2223abebeca886e", "exercise_name": "listeSymetrique", "embeddingX": "23.279984", "embeddingY": "50.898952"},{"extension": "py", "date": "2020-03-06 00:41:35", "correct": "1", "upload": "def nbOccurrencesLettre(lettre,mot):\n  cpt=0\n  for elem in mot:\n    if lettre==elem:\n      cpt=cpt+1\n  return cpt\n\n    ", "user": "userdId_2", "attemptID": 4523, "exercise": "2864c9e5861229d2ff32570f6bc944fb", "exercise_name": "nbOccurrencesLettre", "embeddingX": "-12.319689", "embeddingY": "-28.008602"},{"extension": "py", "date": "2020-03-31 00:52:20", "correct": "0", "upload": "def listeSymetrique(l):\n  l2 = l[int(len(l)/2):]\n  l2.reverse()\n  l = l[:int(len(l)/2)+1]\n  res = False\n  if l == l2:\n    res = True\n  \n  return res", "user": "userdId_4", "attemptID": 4524, "exercise": "8eb27aeda471a467e2223abebeca886e", "exercise_name": "listeSymetrique", "embeddingX": "41.352745", "embeddingY": "-9.431982"},{"extension": "py", "date": "2020-03-31 06:43:31", "correct": "0", "upload": "def doubleChiffre(nombre):\n  trouve=False\n  chPrec=None\n  while nombre!=0:\n    chPrec=nombre//10\n  if chPrec==nombre:\n    trouve=True\n  else:\n    trouve=False\n  return trouve", "user": "userdId_9", "attemptID": 4525, "exercise": "c83ea6acd3e9f6f5543e87d515e8a44a", "exercise_name": "doubleChiffre", "embeddingX": "1.2017581", "embeddingY": "20.137665"},{"extension": "py", "date": "2020-04-05 12:05:25", "correct": "0", "upload": "def nextConway(s):\n    res = \"\"\n    nb = 1\n    for i in range(len(s)-1):\n        if s[i] == s[i+1]:\n            nb+=1\n        else:\n            res += str(nb)+s[i]\n            nb = 1\n    res+= str(nb)+s[i+1]\n    return res", "user": "userdId_4", "attemptID": 4526, "exercise": "a580c32690609356dae4401b3c89a3b8", "exercise_name": "nextConway", "embeddingX": "-28.297955", "embeddingY": "-57.741657"},{"extension": "py", "date": "2020-04-16 23:39:51", "correct": "0", "upload": "def meilleurScoreJoueur(score,joueur):\n  i=0\n  if joueur[i] not in joueur:\n    return 0\n  else:\n    while i<len(joueur)-1:\n      if score[i+1]>score[i]:\n        return joueur[i+1]\n    i=i+1\n  return joueur\n", "user": "userdId_5", "attemptID": 4527, "exercise": "c96fadc94086276f98451a798b3bb730", "exercise_name": "meilleurScoreJoueur", "embeddingX": "-53.60718", "embeddingY": "4.054988"},{"extension": "py", "date": "2020-06-02 22:38:01", "correct": "1", "upload": "def somme(liste):\n  res=0\n  for elem in liste:\n    res+=elem\n  return res", "user": "userdId_12", "attemptID": 4528, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-25.93488", "embeddingY": "-1.6096419"},{"extension": "py", "date": "2020-03-13 00:33:50", "correct": "1", "upload": "def sommeNbPairs(liste):\n  if len(liste)==0:\n    return 0\n  res=0\n  for i in range (len(liste)):\n    if liste[i]%2==0:\n      res=res+liste[i]\n  return res", "user": "userdId_1", "attemptID": 4529, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "-19.305939", "embeddingY": "-56.670975"},{"extension": "py", "date": "2020-03-31 05:16:20", "correct": "0", "upload": "def nbChiffres(nombre):\n  res=[]\n  res.insert(nombre)\n  res=len(res)\n  return res", "user": "userdId_13", "attemptID": 4530, "exercise": "3dcf332c003a1f3bf15df22ee17884a3", "exercise_name": "nbChiffres", "embeddingX": "-44.24981", "embeddingY": "-16.00843"},{"extension": "py", "date": "2020-03-10 03:01:07", "correct": "0", "upload": "def jourNuit(heure):\n  if 5<=heure<6:\n    res='on est le matin et il fait nuit'\n  elif 6<=heure<12:\n    res='on est le matin et il fait jour'\n  elif 12<=heure<17:\n    res=\"on est l'apr\u00e8s-midi et il fait jour\"\n  elif 17<=heure<18:\n    res='on est le soir et il fait jour'\n  elif 18<=heure<21:\n    res='on est le soir et il fait nuit'\n  elif 0<=heure<8 or 21<=heure<24:\n    res='on est la nuit et il fait nuit'\n  else:\n    res=\"l'heure saisie est invalide\"\n  return res\n            ", "user": "userdId_18", "attemptID": 4531, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "71.84264", "embeddingY": "25.24386"},{"extension": "py", "date": "2020-03-27 06:45:21", "correct": "0", "upload": "def compare(chaine1,chaine2):\n  res=0\n  i=0\n  while i<len(chaine1) and i<len(chaine2):\n    if chaine[i]<chaine2[i]:\n      res=-1\n    else:\n      if chaine[i]>chaine2[i]:\n        res=1\n      else:\n        res=0\n    i=i+1\n  return res", "user": "userdId_14", "attemptID": 4532, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-12.866503", "embeddingY": "54.949566"},{"extension": "py", "date": "2020-03-05 21:51:44", "correct": "1", "upload": "def premiereOccurrenceLettre(lettre,mot):\n  for i in range(len(mot)):\n    if lettre == mot[i]:\n      return i\n  return None\n", "user": "userdId_6", "attemptID": 4533, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-17.959608", "embeddingY": "-45.301723"},{"extension": "py", "date": "2020-04-14 06:40:29", "correct": "1", "upload": "def indiceInsertion(sc,scores):\n  res=0\n  i=0\n  while i<len(scores) and sc<scores[i]:\n    i=i+1 \n  return i\n", "user": "userdId_28", "attemptID": 4534, "exercise": "f8a820b2bd54d18d36716e3d703858f7", "exercise_name": "indiceInsertion", "embeddingX": "-16.659092", "embeddingY": "50.408615"},{"extension": "py", "date": "2020-03-22 22:16:03", "correct": "0", "upload": "def permutationChaine(s):\n  res=\"\"\n  for i in range (0,len(s)-1,2):\n    res=res+5[1+i]+s[i]\n    if len(s)%2!=0:\n      res=res+s[-1]\n  return res", "user": "userdId_36", "attemptID": 4535, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-43.30649", "embeddingY": "-49.08472"},{"extension": "py", "date": "2020-03-02 03:00:25", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1<=annee2 and mois1<=mois2 and jour1<jour2:\n    return -1\n  elif annee1==annee2 and mois1==mois2 and jour1==jour2:\n    return 0\n  else:\n    return 1\n  \ncompareDates(10,1,2020,14,2,2020)\ncompareDates(14,2,2020,11,2,2020)\ncompareDates(10,1,2020,10,1,2020)", "user": "userdId_1", "attemptID": 4536, "exercise": "af7c1467ef9f7684d9ff58734067ae98", "exercise_name": "compareDates", "embeddingX": "88.00428", "embeddingY": "-13.1317215"},{"extension": "py", "date": "2020-04-07 20:03:14", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  for i in nombre:\n    if nombre[i]==chiffre:\n      cpt=cpt+1\n    i=i+1\n  return cpt", "user": "userdId_3", "attemptID": 4537, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-36.41157", "embeddingY": "-12.791831"},{"extension": "py", "date": "2020-03-20 00:33:19", "correct": "0", "upload": "def reconstruireChainePartielle(s,o,n):\n  res=\"\"\n  for i in range(o,len(s),n):\n     res=res+s[i]\n  return res", "user": "userdId_20", "attemptID": 4538, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-52.566544", "embeddingY": "3.078144"},{"extension": "py", "date": "2020-04-11 00:49:41", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  c=True\n  if len(liste)==0:\n    c=True\n  elif len(liste)<2:\n    c=False\n  elif 0 in liste:\n    c=False\n  else:\n    while i<(len(liste)-2) and c:\n      if liste[i+2]/liste[i+1]!=liste[i+1]/liste[i]:\n        c=False\n      i=i+1\n  return c", "user": "userdId_19", "attemptID": 4539, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "28.695658", "embeddingY": "56.179077"},{"extension": "py", "date": "2020-04-12 12:22:44", "correct": "0", "upload": "def suiteGeo(liste):\n    if len(liste)==0 or len(liste)==1:\n      res=True\n    else:\n      res=True\n      for i in range(1,len(liste)):\n        if liste[i-1]==0:\n          res=False\n        else:\n          x=liste[1]/liste[0]\n          if x==0:\n            res=True\n          else:\n            if liste[i]!=liste[i-1]*x:\n              res=False\n    return res", "user": "userdId_11", "attemptID": 4540, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "-15.552149", "embeddingY": "-83.651344"},{"extension": "py", "date": "2020-03-05 21:53:54", "correct": "0", "upload": "def somme(liste):\n  res=0\n  for elem in liste:\n  \tres=res+liste[i]\n  return res", "user": "userdId_14", "attemptID": 4541, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-51.4396", "embeddingY": "-12.014032"},{"extension": "py", "date": "2020-03-02 21:26:59", "correct": "0", "upload": "def polynome(a,b,c):\n  delta = (b**2)-(4*a*c)\n  if delta < 0 :\n    res = (\"pas de solutions\")\n  elif delta == 0 :\n    res = (-b)/2*a\n  else :\n    x1 = (-b - delta**(1/2))/2*a\n    x2 = (-b + delta**(1/2))/2*a\n    res = (x1 , x2)\n  return res", "user": "userdId_17", "attemptID": 4542, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-57.787266", "embeddingY": "4.463268"},{"extension": "py", "date": "2020-03-09 05:44:01", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  \n  res=0\n  for elem in jour1,mois1,annee1,jour2,mois2,annee2:\n    \n    if ('jour1,mois1,annee1')<('jour2,mois2,annee2'):\n       res=res-1\n      \n    if ('jour1,mois1,annee1')==('jour2,mois2,annee2'):\n       res=res\n    \n    if ('jour1,mois1,annee1')<('jour2,mois2,annee2'):\n       res=res+1\n      \n  return res", "user": "userdId_23", "attemptID": 4543, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "-14.311265", "embeddingY": "1.152292"},{"extension": "py", "date": "2020-02-29 06:01:55", "correct": "0", "upload": "def polynome(a,b,c):\n    import math\n    delta=(b**2)-(4*a*c)\n    if delta>0:\n      x1=(-b-racine_delta)/2*a\n      x2=(-b+racine_delta)/2*a\n      print(x1,x2)\n    elif delta==0:\n      x0=-b/2*a\n      print(x0)\n    else:\n      print('pas de solution')", "user": "userdId_18", "attemptID": 4544, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-51.862114", "embeddingY": "9.476248"},{"extension": "py", "date": "2020-04-06 08:24:24", "correct": "1", "upload": "def moyenne(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=0\n    for i in range(len(liste)):\n      res=res+liste[i]\n    res=res/len(liste)\n  return res", "user": "userdId_16", "attemptID": 4545, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-20.12576", "embeddingY": "-52.068863"},{"extension": "py", "date": "2020-04-07 04:37:43", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  ok=True\n  i=0\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)!=liste[0] and ok:\n    if liste[i]!=a*liste[i-1]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 4546, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-71.08636", "embeddingY": "21.842293"},{"extension": "py", "date": "2020-03-19 05:16:16", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if jour1<jour2 and mois1<mois2 and annee1<annee2:\n    res=-1\n    if jour1==jour2 and mois1==mois2 and annee1==annee2:\n      res=1\n  else:\n    res=0\n  return res", "user": "userdId_34", "attemptID": 4547, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "79.69279", "embeddingY": "-25.283504"},{"extension": "py", "date": "2020-03-24 06:47:35", "correct": "0", "upload": "def fusion(liste1,liste2):\n  res=[]\n  i=0\n  while i<len(liste1)+len(liste2) and len(res)<len(liste1)+len(liste2):\n    if liste1[i]>liste2[i]:\n      res=res+[liste2[i]]\n    elif liste1[i]==liste2[i]:\n      res=res+[liste1[i]]+[liste2[i]]\n    else:\n      res=res+[liste1[i]]\n    i=i+1\n  return res", "user": "userdId_26", "attemptID": 4548, "exercise": "6613efb6c873b142dc2b6040c14eb616", "exercise_name": "fusion", "embeddingX": "-25.184832", "embeddingY": "54.12803"},{"extension": "py", "date": "2020-03-17 05:34:14", "correct": "1", "upload": "def distribution(liste,n):\n  cpt=[0]*(n+1)\n  for elem in liste:\n    cpt[elem]+=1\n  return cpt\n  \n    ", "user": "userdId_9", "attemptID": 4549, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-64.99148", "embeddingY": "-12.104113"},{"extension": "py", "date": "2020-04-11 08:03:47", "correct": "0", "upload": "def sousChaine(s1,s2):\n  res=True\n  i=0\n  j=0\n  while i<len(s1) and j<len(s2) and s1[i]!=s2[j]:\n    j+=1\n  else:\n    while i<len(s1) and j<len(s2) and s1[i]==s2[j]:\n      if s1[i]==s2[j]:\n        res=True\n      i+=1\n      j+=1  \n  return res", "user": "userdId_8", "attemptID": 4550, "exercise": "4bdf8c9c5d020593e1771e4d3ae1ae0d", "exercise_name": "sousChaine", "embeddingX": "-4.867192", "embeddingY": "58.743668"},{"extension": "py", "date": "2020-04-08 00:19:49", "correct": "0", "upload": "def suiteAriGeo(liste):\n  ok=True\n  i=0\n  if len(liste)<=1 :\n    ok=True\n  else :\n    for elem in (liste) :\n      if liste[0]==0 :\n        Q=0\n      else :\n        Q=(liste[1]/liste[0])\n        R=(liste[1]-liste[0])\n    while i<(len(liste)-1) and ok :\n      if liste[i+1]!=Q*liste[i]+R :\n        ok=False\n      i+=1\n  return ok", "user": "userdId_15", "attemptID": 4551, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "44.85081", "embeddingY": "55.067856"},{"extension": "py", "date": "2020-03-27 06:24:17", "correct": "0", "upload": "def compare(chaine1,chaine2):\n  i=0\n  res=0\n  while res==0 and i<len(chaine1) or i<len(chaine2):\n    if chaine1[i]<chaine2[i]:\n      res=-1\n    elif chaine1[i]>chaine2[i]:\n      res=1\n    i=i+1\n  return res", "user": "userdId_12", "attemptID": 4552, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-26.453066", "embeddingY": "59.389023"},{"extension": "py", "date": "2020-04-12 12:09:21", "correct": "1", "upload": "def motPalindrome(mot):\n    if len(mot)==0:\n      res=True\n    else:\n      res=True\n      i=0\n      while i<len(mot)//2 and res:\n        if mot[i]!=mot[-(i+1)]:\n          res=False\n        i+=1\n    return res", "user": "userdId_11", "attemptID": 4553, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "25.522335", "embeddingY": "36.26351"},{"extension": "py", "date": "2020-03-21 06:09:31", "correct": "0", "upload": "def sommeNbPairs(liste):\n  res=0\n  for i in range(len(liste)):\n    if liste[i]%2!=0:\n      res=res+liste[i]\n  return res", "user": "userdId_9", "attemptID": 4554, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "-23.8192", "embeddingY": "-57.724346"},{"extension": "py", "date": "2020-04-12 12:14:07", "correct": "1", "upload": "def elemGeo(n,u0,q):\n    res=0\n    x=0\n    while x<=n:\n      res=u0*q**n\n      x+=1\n    return res", "user": "userdId_11", "attemptID": 4555, "exercise": "d7c83a7fb9b49e28804e55955ad06968", "exercise_name": "elemGeo", "embeddingX": "-10.6587305", "embeddingY": "22.865086"},{"extension": "py", "date": "2020-03-20 00:30:01", "correct": "1", "upload": "def permutationListe(liste,permutation):\n  res=[0]*len(liste)\n  for i in range(len(liste)):\n    res[permutation[i]]=liste[i]\n  return res", "user": "userdId_12", "attemptID": 4556, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-50.5636", "embeddingY": "-30.38625"},{"extension": "py", "date": "2020-03-31 06:44:46", "correct": "0", "upload": "def doubleChiffre(nombre):\n  res=False\n  prec=0\n  while nombre!=0 and not res:\n    com1=nombre%10\n    nombre=nombre//10\n    if com1==prec:\n      res=True\n    prec=com1  \n  return res", "user": "userdId_13", "attemptID": 4557, "exercise": "c83ea6acd3e9f6f5543e87d515e8a44a", "exercise_name": "doubleChiffre", "embeddingX": "11.214909", "embeddingY": "21.296911"},{"extension": "py", "date": "2020-04-12 12:11:16", "correct": "1", "upload": "def compteChiffre(chiffre,nombre):\n    if chiffre==nombre:\n      cpt=1\n    else:\n      cpt=0\n      x=nombre%10\n      decomp=nombre\n      while decomp!=0:\n        if x==chiffre:\n          cpt+=1\n          decomp=decomp//10\n          x=decomp%10\n        else:\n          decomp=decomp//10\n          x=decomp%10\n    return cpt", "user": "userdId_11", "attemptID": 4558, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "7.140112", "embeddingY": "15.427428"},{"extension": "py", "date": "2020-03-19 23:28:59", "correct": "0", "upload": "def reconstruireChainePartielle(s,n):\n  if s=='':\n    res=s\n  for i in range(s,n):\n    res=res+s[i]\n  return res", "user": "userdId_2", "attemptID": 4559, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-21.455173", "embeddingY": "-23.778276"},{"extension": "py", "date": "2020-04-12 06:03:43", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=False\n  c=[0]\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n  return c", "user": "userdId_8", "attemptID": 4560, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-69.11326", "embeddingY": "25.907171"},{"extension": "py", "date": "2020-03-19 05:39:30", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if jour1<jour2 and mois1<mois2 and annee1<annee2:\n    res=-1\n  elif jour1>jour2 and mois1>mois2 and annee1>annee2:\n      res=0\n  else:\n    res=1\n  return res", "user": "userdId_34", "attemptID": 4561, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "80.88364", "embeddingY": "-27.406548"},{"extension": "py", "date": "2020-03-22 04:46:25", "correct": "1", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1<annee2:\n    res=-1\n  elif annee1>annee2:\n    res=1\n  else:\n    if mois1<mois2:\n      res=-1\n    elif mois1>mois2:\n      res=1\n    else:\n      if jour1<jour2:\n        res=-1\n      elif jour1>jour2:\n        res=1\n      else:\n        res=0\n  return res", "user": "userdId_12", "attemptID": 4562, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "81.67318", "embeddingY": "-32.604218"},{"extension": "py", "date": "2020-03-06 00:09:57", "correct": "0", "upload": "def nbVoyelles(mot):\n  for elem in mot:\n    if elem in 'aeiouy':\n      res=res+1\n  return res", "user": "userdId_12", "attemptID": 4563, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "14.874166", "embeddingY": "-22.003273"},{"extension": "py", "date": "2020-03-20 00:16:16", "correct": "0", "upload": "def permutationChaine(s):\n  res=''\n  if len(s)<1:\n  \tres=''\n  else:\n    for i in range(0,len(s)-1,2):\n      res=res+s[i+1]\n      res=res+s[i]\n  res=res+s[(len(s)-1)]\n  return res", "user": "userdId_40", "attemptID": 4564, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-39.881145", "embeddingY": "-55.218445"},{"extension": "py", "date": "2020-04-08 10:38:40", "correct": "1", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=True\n  i=1\n  while i<len(liste):\n    if liste[i]!=a*liste[i-1]+b:\n      res=False\n    i+=1\n  return res\ndef suiteAriGeo(liste):\n  i=1\n  res=True\n  if len(liste)>3:\n    ecart1=liste[1]-liste[0]\n    ecart2=liste[2]-liste[1]\n    if ecart1>0:\n      a=ecart2/ecart1\n      b=liste[1]-a*liste[0]\n      while i<len(liste):\n        res=verifSuiteAriGeo(liste,a,b)\n        i+=1 \n  return res", "user": "userdId_27", "attemptID": 4565, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "16.116282", "embeddingY": "76.970406"},{"extension": "py", "date": "2020-03-27 06:40:13", "correct": "1", "upload": "def compare(chaine1,chaine2):\n  res=0\n  i=0\n  while i<len(chaine1) and i<len(chaine2) and res==0:\n    if chaine1[i]<chaine2[i]:\n      res=-1\n    elif chaine1[i]>chaine2[i]:\n      res=1\n    else:\n      res=0\n    i=i+1\n  if res==0:\n    if len(chaine1)>len(chaine2):\n      res=1\n    elif len(chaine1)<len(chaine2):\n      res=-1\n  return res\n", "user": "userdId_19", "attemptID": 4566, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-23.793236", "embeddingY": "61.60311"},{"extension": "py", "date": "2020-03-08 21:38:18", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1==annee2 and mois1==mois2 and jour1==jour2:\n    return 0\n  elif annee1<annee2 and mois1<=mois2 and jour1<jour2:\n    return -1\n  else:\n    return 1", "user": "userdId_1", "attemptID": 4567, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "88.271935", "embeddingY": "-13.630661"},{"extension": "py", "date": "2020-03-17 05:04:10", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  res=''\n  for i in range(debut,debut+longueur):\n    res=res+s[i]\n  return res", "user": "userdId_23", "attemptID": 4568, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-84.59735", "embeddingY": "21.164307"},{"extension": "py", "date": "2020-03-05 21:57:37", "correct": "0", "upload": "def maximum(liste):\n    max = 0\n    for i in range(0,len(liste)):\n    \tif liste[i] > res:\n        \tmax = liste[i]\n    \n    return max", "user": "userdId_29", "attemptID": 4569, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "8.759578", "embeddingY": "-70.63618"},{"extension": "py", "date": "2020-04-12 05:35:35", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=False\n  c=[]\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n    d=liste[0]+d\n  return c", "user": "userdId_8", "attemptID": 4570, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-70.3213", "embeddingY": "14.943831"},{"extension": "py", "date": "2020-03-31 04:17:43", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n  trouve=False\n  i=0\n  cpt=0\n  while i<len(l)and not trouve:\n    if l[i]==x:\n      cpt+=1\n    if cpt==n:\n      trouve=True\n    i+=1\n  return trouve", "user": "userdId_36", "attemptID": 4571, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-2.481174", "embeddingY": "69.87509"},{"extension": "py", "date": "2020-03-06 00:41:37", "correct": "0", "upload": "def moyenne(liste):\n  res=0\n  cpt=0\n  if len(liste)==0:\n    moy=0\n  else:\n     for i in liste:\n       res=res+i\n       cpt=cpt+1\n  moy=res/cpt\n  return moy", "user": "userdId_14", "attemptID": 4572, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "0.9989813", "embeddingY": "-8.503713"},{"extension": "py", "date": "2020-03-20 01:10:15", "correct": "0", "upload": "def permutationListe(liste,permutation):\n  liste2=[0]*len(liste)\n  for i in liste:\n    liste[i]=permutation[i]\n    liste2[i]=liste[i]\n  return liste2\n    \n  \n    \n  ", "user": "userdId_2", "attemptID": 4573, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-55.749176", "embeddingY": "-17.264101"},{"extension": "py", "date": "2020-03-05 22:15:29", "correct": "0", "upload": "def maximum(liste):\n    res=0\n    for elen in liste[1]:\n     \tif elen>res:\n        \tres=elen\n    return res\n  \n  ", "user": "userdId_49", "attemptID": 4574, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-47.919117", "embeddingY": "-16.276936"},{"extension": "py", "date": "2020-03-17 05:32:46", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  res=''\n  if debut+longueur>len(s):\n    res=debut+longueur\n  else:\n    res=fin\n    for i in range(debut,debut+longueur): \n      fin=fin+s[i]\n  return res", "user": "userdId_25", "attemptID": 4575, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-81.05009", "embeddingY": "10.998381"},{"extension": "py", "date": "2020-03-19 05:14:59", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if jour1<jour2 and mois1<mois2 and annee1<annee2:\n    res=-1\n    if jour1==jour2 and mois1==mois2 and annee1==annee2:\n      res=1\n  else:\n    res=0\n  return res", "user": "userdId_34", "attemptID": 4576, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "79.70369", "embeddingY": "-25.280813"},{"extension": "py", "date": "2020-03-17 06:41:38", "correct": "0", "upload": "def distribution(liste,n):\n  res=[0]*(n+1)\n  for elem in liste:\n    res=res[elem]+1\n  return res", "user": "userdId_23", "attemptID": 4577, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-59.597973", "embeddingY": "-9.346062"},{"extension": "py", "date": "2020-04-06 17:25:04", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  i=0\n  for i in range(nombre):\n    if chiffre==len(nombre[i]):\n      cpt=cpt+1\n    i=i+1\n  return cpt", "user": "userdId_3", "attemptID": 4578, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-20.39133", "embeddingY": "-32.720146"},{"extension": "py", "date": "2020-03-17 05:57:30", "correct": "0", "upload": "def permutationListe(liste,permutation):\n  res=[]\n  for i in liste:\n    res[permutation]=liste[i]\n  return res", "user": "userdId_35", "attemptID": 4579, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-51.56949", "embeddingY": "-16.217352"},{"extension": "py", "date": "2020-03-05 22:03:30", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n     res=None\n  else:\n    res=None\n    for i in range(len(liste)):\n      if liste[i]>res:\n        res=liste[i]\n  return res", "user": "userdId_30", "attemptID": 4580, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "1.1833258", "embeddingY": "-56.561356"},{"extension": "py", "date": "2020-03-05 21:34:44", "correct": "1", "upload": "def somme(liste):\n  res=0\n  for i in range(len(liste)):\n    res=res+liste[i]\n  return res", "user": "userdId_30", "attemptID": 4581, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-45.104076", "embeddingY": "-37.477345"},{"extension": "py", "date": "2020-05-04 20:23:18", "correct": "0", "upload": "def polynome(a,b,c):\n  res=\"pas de solution\"\n  delta=b**2-4*a*c\n  if delta>0:\n    S1=(-b+delta**(1/2))/2*a\n    S2=(-b-delta**(1/2))/2*a\n    res=(S1,S2)\n  return res", "user": "userdId_8", "attemptID": 4582, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-54.63629", "embeddingY": "9.440202"},{"extension": "py", "date": "2020-03-22 10:55:47", "correct": "1", "upload": "def maximum(liste):\n  if liste==[]:\n    max=None\n  else:\n    max=liste[0]\n    for i in range(len(liste)):\n      if liste[i]>max:\n        max=liste[i]\n  return max", "user": "userdId_27", "attemptID": 4583, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "13.587874", "embeddingY": "-70.802345"},{"extension": "py", "date": "2020-03-20 00:41:14", "correct": "1", "upload": "def sousChaine(s,debut,longueur):\n  res=''\n  fin=debut+longueur\n  if fin>len(s):\n    fin=len(s)\n  for i in range(debut,fin):\n    res=res+s[i]\n  \n  return res", "user": "userdId_15", "attemptID": 4584, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-78.58438", "embeddingY": "23.423676"},{"extension": "py", "date": "2020-04-06 04:23:47", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  nbr=str(nombre)\n  chffre=str(chiffre)\n  i=0\n  res=0\n  while i<len(nbr):\n    if chffre==nbr:\n      res+=1\n    i+=1\n  return res", "user": "userdId_26", "attemptID": 4585, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-7.839748", "embeddingY": "65.279434"},{"extension": "py", "date": "2020-03-10 04:19:51", "correct": "0", "upload": "def sommeNPremiersEntiers(n):\n  res=0\n  for i in range(n):\n    res=res+i\n  return res", "user": "userdId_26", "attemptID": 4586, "exercise": "c315a540cf0bfb0182dc114c6f0eafd1", "exercise_name": "sommeNPremiersEntiers", "embeddingX": "-21.687502", "embeddingY": "13.038764"},{"extension": "py", "date": "2020-04-07 04:35:11", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  ok=True\n  i=0\n  while i<len(liste) and ok:\n    if liste[i]!=a*liste[i-1]+b:\n      ok=False\n    i=i+1\n    if len(liste)==0 or len(liste)==1:\n      ok=True\n  return ok", "user": "userdId_1", "attemptID": 4587, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-75.05732", "embeddingY": "17.216478"},{"extension": "py", "date": "2020-05-04 21:51:53", "correct": "0", "upload": "def minimum(liste):\n  if liste==[]:\n    res=None\n  else:\n    res=liste[0]\n    for i in range(1,len(liste)):\n      if liste[i]<liste[i+1]:\n        res=liste[i]\n  return res", "user": "userdId_8", "attemptID": 4588, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "26.487547", "embeddingY": "-71.62368"},{"extension": "py", "date": "2020-03-17 05:18:22", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  res=''\n  fin=len(s)\n  if debut+longueur>len(s):\n    fin=len(s)\n  else:\n    fin=debut+longueur\n  for i in range(debut,Fin):\n    res=res+s[i]\n  return res", "user": "userdId_23", "attemptID": 4589, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-77.43604", "embeddingY": "8.915532"},{"extension": "py", "date": "2020-03-06 00:03:50", "correct": "0", "upload": "def nbVoyelles(mot):\n  cpt=0\n  for i in range (len(mot)):\n    cpt=cpt+1\n  return cpt", "user": "userdId_1", "attemptID": 4590, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-40.89865", "embeddingY": "-28.897766"},{"extension": "py", "date": "2020-03-31 08:11:10", "correct": "0", "upload": "def prononcable(mot):\n    if len(mot)==0:\n      res=True\n    else:\n      res=False\n      for i in range(len(mot)):\n        if mot[i] in 'aeiouy' and mot[i+3] not in 'aeiouy':\n          res=True\n    return res\n\n                                     ", "user": "userdId_11", "attemptID": 4591, "exercise": "6318b210c201fba050d60bc0913cb7ef", "exercise_name": "prononcable", "embeddingX": "-24.016203", "embeddingY": "-68.11616"},{"extension": "py", "date": "2020-04-12 09:49:02", "correct": "0", "upload": "def suiteAriGeo(liste):\n  i=1\n  while i<len(liste)-1:\n    a=liste[0]\n    b=liste[0]\n    if liste[i+1]==liste[i]+(liste[1]-liste[0]):\n      b=liste[1]-liste[0]\n    if liste[0]!=0:                        \n      if liste[i+1]==liste[i]*liste[1]/liste[0]:\n        a=liste[1]/liste[0]\n        b=0\n    if liste[i+1]==liste[i]*(liste[1]-liste[0])+(liste[i]-(liste[i-1]*(liste[1]-liste[0]))):\n      a=liste[1]-liste[0]\n      b=liste[i]-(liste[i-1]*a)\n    i=i+1\n  return a and b\n  ok=True\n  i=0\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=a*liste[i]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 4592, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "29.79993", "embeddingY": "68.64372"},{"extension": "py", "date": "2020-03-20 00:15:01", "correct": "0", "upload": "def distribution(liste,n):\n  cpt=[0]*(n+1)\n  for elem in liste:\n    cpt[elem]=cpt[elem]+1\n  return res\n", "user": "userdId_13", "attemptID": 4593, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-60.34719", "embeddingY": "-15.019571"},{"extension": "py", "date": "2020-03-13 00:35:38", "correct": "0", "upload": "def sommeNbPairs(liste):\n\tfor nb in liste:\n\t\tif nb%2==0:\n\t\t\tres=res+nb\n\treturn res", "user": "userdId_19", "attemptID": 4594, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "29.3315", "embeddingY": "-21.552273"},{"extension": "py", "date": "2020-04-06 03:58:52", "correct": "0", "upload": "def suiteGeo(liste):\n    if liste==[] or len(liste)==1:\n      ok=True\n    elif 0 in liste:\n      ok=False\n    else:\n      ok=True\n      i=1\n      while i<len(liste) and ok:\n        cteAct=liste[i]/liste[i-1]\n        if liste[0]*cteAct**i!=liste[i]:\n          ok=False\n        ctePrec=cteAct\n        i+=1\n    return ok", "user": "userdId_18", "attemptID": 4595, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "41.1202", "embeddingY": "65.42866"},{"extension": "py", "date": "2020-04-05 04:16:24", "correct": "0", "upload": "def moyenne(liste):\n  if len(liste)!=0:\n    s=0\n    for elem in liste:\n      s+=elem\n    res=s//len(liste)\n  else:\n    res=0\n    \n  return res", "user": "userdId_26", "attemptID": 4596, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-7.1289725", "embeddingY": "-15.102921"},{"extension": "py", "date": "2020-04-07 23:24:45", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  ok=True\n  i=0\n  while i<len(l)//2 and ok:\n    if l[i]!=l[-i-1]:\n      ok=False\n    i+=1\n  return ok", "user": "userdId_13", "attemptID": 4597, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "31.183298", "embeddingY": "36.13409"},{"extension": "py", "date": "2020-03-12 09:42:02", "correct": "0", "upload": "def maximum(liste):\n  max=liste[0]\n  for i in len(liste):\n    if max<liste(i):\n      max=liste(i)\n    else:\n      if max>liste(i):\n        max= max\n  return max", "user": "userdId_20", "attemptID": 4598, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-51.085094", "embeddingY": "-20.981174"},{"extension": "py", "date": "2020-03-19 23:57:48", "correct": "0", "upload": "def reconstruireChainePartielle(o,n):\n  res=\"\"\n  for i in range(len(o),n):\n    res=res+s[i]\n  return res", "user": "userdId_20", "attemptID": 4599, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-60.820232", "embeddingY": "-34.763805"},{"extension": "py", "date": "2020-04-17 00:17:44", "correct": "0", "upload": "def indiceInsertion(sc,scores):\n  i=0\n  trouve=False\n  while i<len(scores) and not trouve:\n    trouve=scores[i]<sc\n  return i", "user": "userdId_12", "attemptID": 4600, "exercise": "f8a820b2bd54d18d36716e3d703858f7", "exercise_name": "indiceInsertion", "embeddingX": "-9.568816", "embeddingY": "51.441833"},{"extension": "py", "date": "2020-04-06 09:38:07", "correct": "0", "upload": "def suiteGeo(liste):\n    if liste==[] or len(liste)==1:\n      ok=True\n    elif 0 in liste:\n      while 0 in liste:\n        liste.remove(0)\n      if liste==[] or len(liste)==1:\n        ok=True\n      else:\n        ok=False\n    else:\n      ok=True\n      i=1\n      while i<len(liste) and ok:\n        cte=liste[i]/liste[i-1]\n        if liste[0]*cte**i!=liste[i]:\n          ok=False\n        i+=1\n    return ok", "user": "userdId_18", "attemptID": 4601, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "41.289062", "embeddingY": "67.56387"},{"extension": "py", "date": "2020-03-05 22:08:05", "correct": "0", "upload": "def prononcable(mot):\n  if len(mot)<4:\n    return True\n  else:\n    voyelles = 'aeiouy'\n    cpt=0\n    laLettrePrecedenteEstUneVoyelle = True\n    for i in mot :\n      if i in 'aeiouy' == laLettrePrecedenteEstUneVoyelle:\n        cpt+=1\n        if cpt == 4:\n          return False\n      else:\n        cpt = 0\n        laLettrePrecedenteEstUneVoyelle = not laLettrePrecedenteEstUneVoyelle \n    return None", "user": "userdId_6", "attemptID": 4602, "exercise": "6318b210c201fba050d60bc0913cb7ef", "exercise_name": "prononcable", "embeddingX": "14.845324", "embeddingY": "-13.325858"},{"extension": "py", "date": "2020-04-12 12:02:15", "correct": "0", "upload": "def suiteGeo(liste):\n    if len(liste)==0:\n      res=True\n    else:\n      res=True\n      for i in range(1,len(liste)):\n        if liste[i]==0:\n          res=False\n        else:\n          x=liste[1]//liste[0]\n          if liste[i]==liste[i-1]*x:\n            res=True\n          else:\n            res=False\n    return res", "user": "userdId_11", "attemptID": 4603, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "-13.887622", "embeddingY": "-81.66197"},{"extension": "py", "date": "2020-03-22 08:47:58", "correct": "0", "upload": "def minimum(liste):\n  if liste==():\n    res=none\n  else:\n      res=liste[0]\n      if res>liste[i]:\n        res=liste[i]\n  return res", "user": "userdId_16", "attemptID": 4604, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "2.7005343", "embeddingY": "-67.68834"},{"extension": "py", "date": "2020-04-12 10:58:58", "correct": "1", "upload": "def motPalindrome(mot):\n    if len(mot)==0:\n      res=True\n    else:\n      res=True\n      i=0\n      while i<len(mot)//2 and res:\n        if mot[i]!=mot[-(i+1)]:\n          res=False\n        i+=1\n    return res", "user": "userdId_11", "attemptID": 4605, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "25.423574", "embeddingY": "36.294815"},{"extension": "py", "date": "2020-03-10 09:48:18", "correct": "0", "upload": "def nbVoyelles(mot):\n  res=0\n  if mot==0:\n    res=None\n  else:\n    if mot in 'aeiouy':\n      for mot in 'aeiouy':\n        res=res+1\n  \n     \n  return res", "user": "userdId_5", "attemptID": 4606, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "0.25845677", "embeddingY": "-28.856546"},{"extension": "py", "date": "2020-03-12 23:40:37", "correct": "0", "upload": "def jourNuit(heure):\n  Error=\"l'heure saisie est invalide\"\n  Time=\"on est\"\n  if heure<0 or heure>24:\n    res=Error\n  elif heure>=5 and heure<=12:\n    res=Time+' le matin'\n    if heure>=6 and heure<=18:\n      res=res+' et il fait jour'\n    else:\n      res=res+' et il fait nuit'\n  elif heure>12 and heure<=17:\n    res=Time+\" l'apr\u00e8s-midi et il fait jour\"\n  elif heure>17 and heure<=21:\n    res=Time+' le soir'\n    if heure>=6 and heure<=18:\n      res=res+' et il fait jour'\n    else:\n      res=res+' et il fait nuit'\n  else:\n    res=Time+' la nuit et il fait nuit'\n  return res\n    \n  \n    ", "user": "userdId_2", "attemptID": 4607, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "80.90395", "embeddingY": "14.983057"},{"extension": "py", "date": "2020-04-20 21:10:05", "correct": "1", "upload": "def listeMatchs(liste):\n  res=[]\n  for i in range(len(liste)):\n    for j in range(i+1,len(liste)):\n      res.append((liste[i],liste[j]))\n  return res", "user": "userdId_6", "attemptID": 4608, "exercise": "7425aa41502a932ef1011f8e2538120a", "exercise_name": "listeMatchs", "embeddingX": "-36.60066", "embeddingY": "-29.906431"},{"extension": "py", "date": "2020-03-12 23:42:27", "correct": "0", "upload": "def jourNuit(heure):\n  if heure > 24 or heure < 0 :\n    res = \"l'heure saisie est invalide\"\n  else :\n    if heure < 5 :\n      res = \"on est la nuit \"\n    elif heure < 12 :\n      res = \"on est le matin \"\n    elif heure < 17 :\n      res = \"on est l'apr\u00e8s-midi \"\n    else :\n      res = \"on est le soir \"\n    if heure >= 6 and heure < 18 :\n      res = res + \"et il fait jour\"\n    else :\n      res = res + \"et il fait nuit\"\n  return res", "user": "userdId_17", "attemptID": 4609, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "79.13382", "embeddingY": "20.020596"},{"extension": "py", "date": "2020-04-07 23:27:25", "correct": "1", "upload": "def motPalindrome(mot):\n  i=0\n  c=True\n  while i<(len(mot)/2) and c:\n    if mot[i]==mot[len(mot)-i-1]:\n      c=True\n    else:\n      c=False\n    i=i+1\n  if c==True:\n    return True\n  else:\n    return False\n    \n    \n\n", "user": "userdId_19", "attemptID": 4610, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "27.624237", "embeddingY": "52.67581"},{"extension": "py", "date": "2020-05-04 21:44:59", "correct": "0", "upload": "def nbVoyelles(mot):\n  res=0\n  for elem in mot:\n    if elem=='aeiouy':\n      res+=1\n  return res", "user": "userdId_8", "attemptID": 4611, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "1.1709282", "embeddingY": "-24.481375"},{"extension": "py", "date": "2020-03-03 20:49:44", "correct": "0", "upload": "def ecart(liste):\n    return None", "user": "userdId_32", "attemptID": 4612, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "-88.060875", "embeddingY": "3.4973817"},{"extension": "py", "date": "2020-03-15 03:20:59", "correct": "0", "upload": "def polynome(a,b,c):\n    delta=(b**2)-(4*a*c)\n    if delta<0:\n      return(\"pas de solution\")\n    x=(-b-delta)/(2*a)\n    y=(-b+delta)/(2*a)\n    if delta>0:\n      return(x,y)\n    if delta==0:\n      return(x)\n \n\n ", "user": "userdId_21", "attemptID": 4613, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-56.13971", "embeddingY": "2.6468456"},{"extension": "py", "date": "2020-04-07 03:53:36", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  j=0\n  ok=True\n  raison=None\n  if len(liste)>1:\n    while i<len(liste) and liste[0]!=0 and raison==None:\n      raison=liste[i+1]/liste[i]\n      i+=1\n    while j<len(liste)-1 and ok:\n      ok=liste[i+1]==liste[i]*raison\n      i+=1\n  return ok", "user": "userdId_12", "attemptID": 4614, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "22.39815", "embeddingY": "70.064545"},{"extension": "py", "date": "2020-04-05 06:39:53", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n    trouve=False\n    i=0\n    while i<len(mot) and not trouve:\n      if mot[i]==lettre:\n        ok=True\n      i+=1\n    if trouve==True:\n      i-=1\n    elif trouve==False:\n      i=None\n    return i", "user": "userdId_18", "attemptID": 4615, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-0.631945", "embeddingY": "60.911247"},{"extension": "py", "date": "2020-03-05 23:52:10", "correct": "0", "upload": "def moyenne(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=0\n    cpt=0\n    for elem in liste:\n      res= res+elem\n      cpt= cpt+1\n      res= res/cpt\n  return res", "user": "userdId_13", "attemptID": 4616, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-2.9010763", "embeddingY": "-8.574478"},{"extension": "py", "date": "2020-03-06 00:37:25", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    voy=0\n  else:\n    voy=0\n    for i in mot:\n      if mot[i] in [\"a\",\"e\",\"i\",\"o\",\"u\",\"y\"]:\n        voy=voy+1\n  return voy", "user": "userdId_13", "attemptID": 4617, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "10.351865", "embeddingY": "-38.093754"},{"extension": "py", "date": "2020-04-11 00:32:22", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  c=True\n  if liste[0]==0:\n    c=False\n  else:\n    while i<(len(liste)-2) and c:\n      if liste[i]!=0 and liste[i+1]!=0:\n        if liste[i+2]/liste[i+1]!=liste[i+1]/liste[i]:\n          c=False\n      i=i+1\n  return c", "user": "userdId_19", "attemptID": 4618, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "27.180569", "embeddingY": "55.415123"},{"extension": "py", "date": "2020-03-16 04:30:09", "correct": "0", "upload": "def nbOccurrencesLettre(lettre,mot):\n    if lettre=='' or mot=='':\n      res=0\n    else:\n      cpt=0\n      for c in mot:\n        if lettre==c:\n          cpt=cpt+1\n    return cpt", "user": "userdId_18", "attemptID": 4619, "exercise": "2864c9e5861229d2ff32570f6bc944fb", "exercise_name": "nbOccurrencesLettre", "embeddingX": "-12.761682", "embeddingY": "-24.219654"},{"extension": "py", "date": "2020-04-14 05:49:46", "correct": "0", "upload": "def meilleurClassementJoueur(scores,joueurs,nom):\n  MS=0\n  i=0\n  while i<len(joueurs) and nom!=joueurs[i]:\n    MS=MS+1\n    i=i+1\n    if nom not in joueurs:\n      MS=0\n  return MS", "user": "userdId_28", "attemptID": 4620, "exercise": "be6ce0a06c5d396190024c7c681da95d", "exercise_name": "meilleurClassementJoueur", "embeddingX": "-9.257981", "embeddingY": "81.602936"},{"extension": "py", "date": "2020-03-17 06:28:36", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n  res=0\n  for elem in mot:\n    if elem==lettre:\n      res=mot[elem]\n  return res", "user": "userdId_7", "attemptID": 4621, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-15.098533", "embeddingY": "-28.634806"},{"extension": "py", "date": "2020-04-08 00:16:43", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  ok=False\n  i=0\n  j=0\n  while i<len(phrase)//2 and j<len(phrase)//2:\n    if phrase[i]==\" \":\n      i+=1\n    elif phrase[-j]==\" \":\n      j-=1\n    elif phrase[i]!=phrase[-j-1]:\n      ok=False\n    else:\n      ok=True\n    i+=1\n    j+=1\n  if phrase==\"\":\n    ok=True\n  return ok", "user": "userdId_13", "attemptID": 4622, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "36.0099", "embeddingY": "33.77892"},{"extension": "py", "date": "2020-03-29 22:15:39", "correct": "0", "upload": "def compare(chaine1,chaine2):\n    res=0\n    cpt=0\n    while cpt<len(chaine1) and cpt<len(chaine2) and res==0:\n        if chaine1[cpt]<chaine2[cpt]:\n            res=-1\n        elif chaine1[cpt]>chaine2[cpt]:\n            res=1\n        cpt+=1\n       #on g\u00e8re le cas des cha\u00eenes de tailles diff\u00e9rentes\n    if res==0 :\n        if len(chaine1)>len(chaine2):\n          res=1\n        else:\n          res=-1\n    return res", "user": "userdId_6", "attemptID": 4623, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-20.164715", "embeddingY": "65.123085"},{"extension": "py", "date": "2020-04-05 08:54:56", "correct": "0", "upload": "def phrasePalindrome(phrase):\n    if phrase=='':\n      ok=True\n    else:\n      ok=True\n      i=0\n      while i<len(phrase) and ok:\n        if phrase[i]!=phrase[-i-1] and ((phrase[i]!='') or (phrase[-i-1]!='')):\n          ok=False\n        i+=1\n    return ok", "user": "userdId_18", "attemptID": 4624, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "29.69325", "embeddingY": "31.091686"},{"extension": "py", "date": "2020-03-31 00:57:11", "correct": "0", "upload": "def listeSymetrique(l):\n  l2 = l[int(len(l)/2):]\n  l2.reverse()\n  l = l[:int(len(l)/2)+1]\n  res = True\n  if l != l2:\n    res = False\n  \n  return res", "user": "userdId_4", "attemptID": 4625, "exercise": "8eb27aeda471a467e2223abebeca886e", "exercise_name": "listeSymetrique", "embeddingX": "41.283947", "embeddingY": "-9.442484"},{"extension": "py", "date": "2020-03-22 11:46:06", "correct": "0", "upload": "def maximum(liste):\n  max=l[0]\n  for x in liste: \n    if x>max:\n      max=x\n    return max", "user": "userdId_21", "attemptID": 4626, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "31.967646", "embeddingY": "-51.954548"},{"extension": "py", "date": "2020-03-06 00:12:23", "correct": "1", "upload": "def minimum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=liste[0]\n    for i in range(len(liste)):\n      if liste[i]<res:\n        res=liste[i]\n  return res", "user": "userdId_12", "attemptID": 4627, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "27.359207", "embeddingY": "-68.72423"},{"extension": "py", "date": "2020-03-30 02:29:28", "correct": "0", "upload": "def compare(chaine1,chaine2):\n  res=0\n  i=0\n  while i<len(chaine1) and i<len(chaine2) and res==0 :\n    if chaine1[i]<chaine2[i] :\n      res=-1\n    elif chaine1[i]>chaine2[i] :\n      res=1\n    else :\n      res=0\n  \n  if res==0 :\n    if len(chaine1)>len(chaine2):\n      res=1\n    elif len(chaine1)<len(chaine2):\n      res=-1\n      \n  return res ", "user": "userdId_15", "attemptID": 4628, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-22.638618", "embeddingY": "64.540886"},{"extension": "py", "date": "2020-04-20 22:04:12", "correct": "0", "upload": "def rechercheDicho(liste,val):\n  min = 0\n  max = len(liste)-1\n  index = None\n  nbAcces=0\n  acces =(max+min)//2\n  found = False\n  while min<max and not found:\n    nbAcces+=1\n    print (nbAcces)\n    print(liste[acces])\n    if liste[acces]==val:\n      found = True\n    else:\n      if liste[acces]>val:\n        max = acces\n      else:\n        min = acces\n      acces = (max+min)//2\n  if found :\n    return (index,nbAcces)\n  return(None,nbAcces)", "user": "userdId_6", "attemptID": 4629, "exercise": "434544c545ce211c7e57445707047bee", "exercise_name": "rechercheDicho", "embeddingX": "2.9701576", "embeddingY": "63.20861"},{"extension": "py", "date": "2020-03-08 21:52:04", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1==annee2 and mois1==mois2 and jour1==jour2:\n    return 0\n  elif annee1<annee2 and mois1<=mois2 and jour1<=jour2:\n    return -1\n  elif annee1<annee2 and mois1>=mois2 and jour1>=jour2:\n    return -1\n  elif annee1<annee2 and mois1>=mois2 and jour1<=jour2:\n    return -1\n  else:\n    return 1", "user": "userdId_1", "attemptID": 4630, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "83.92623", "embeddingY": "-12.752736"},{"extension": "py", "date": "2020-04-03 00:40:41", "correct": "0", "upload": "def stockerChiffres(nombres):\n  res=[]\n  while nombres!=0:\n    res.append(nombres%10)\n    nombres=nombres//10\n  return res", "user": "userdId_5", "attemptID": 4631, "exercise": "49a87f644f84a443327fb4315b47f249", "exercise_name": "stockerChiffres", "embeddingX": "44.115467", "embeddingY": "14.948739"},{"extension": "py", "date": "2020-03-31 07:42:43", "correct": "0", "upload": "def moyenne(liste):\n    if len(liste)==0:\n      res=None\n    else:\n      res=0\n      cpt=0\n      for elem in liste:\n        res=res+elem\n        cpt=cpt+1\n      moy=res/cpt\n    return moy\n  \n  ", "user": "userdId_11", "attemptID": 4632, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-0.0023639405", "embeddingY": "-8.623935"},{"extension": "py", "date": "2020-03-10 04:08:05", "correct": "0", "upload": "def sommeNPremiersEntiersPairs(n):\n    res=0\n    for i in range(n,2,-2):\n      res=res+i\n    return res", "user": "userdId_18", "attemptID": 4633, "exercise": "3030dc079e6607c253e89e8ef4784b74", "exercise_name": "sommeNPremiersEntiersPairs", "embeddingX": "-18.814337", "embeddingY": "8.378755"},{"extension": "py", "date": "2020-04-07 04:34:51", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  res=True\n  if liste[0]==0:\n    res=False\n  else:\n    while i<len(liste)-1 and res==True:\n      r=liste[1]/liste[0]\n      if liste[i+1]/liste[i]==r:\n        res=True\n      else:\n        res=False\n      i+=1\n  return res", "user": "userdId_26", "attemptID": 4634, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "35.12348", "embeddingY": "54.59526"},{"extension": "py", "date": "2020-03-22 12:38:29", "correct": "0", "upload": "def maximum(liste):\n  max=l[0]\n  for i in range(0,len(liste)):\n    if max<l[0]:\n      max=l[0]\n  return max", "user": "userdId_21", "attemptID": 4635, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "28.352283", "embeddingY": "-73.61898"},{"extension": "py", "date": "2020-03-19 23:52:30", "correct": "0", "upload": "def reconstruireChainePartielle(o,n):\n  res=\"\"\n  for i in range(o,len(o),n):\n    res=res+l[i]\n  return res", "user": "userdId_20", "attemptID": 4636, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-44.738556", "embeddingY": "-22.32948"},{"extension": "py", "date": "2020-03-30 21:45:30", "correct": "0", "upload": "def fusion(liste1,liste2):\n  i=0\n  j=0\n  listefusion=[]\n  if len(liste1)==0:\n    listefusion=liste2\n  elif len(liste2)==0:\n    listefusion=liste1\n  \n  while i<len(liste1) and j<len(liste2):\n    if liste1[i]>liste2[j]:\n      listefusion.append(liste2[j])\n      j=j+1\n    else:\n      listefusion.append(liste1[i])\n      i=i+1\n  \n  if len(liste1)>0 and len(liste2)>0:\n    if max(liste1)>max(liste2):\n      for ind in range (i,len(liste1)):\n        listefusion.append(liste1[ind])\n\n    if max(liste2)>max(liste1):\n      for ind in range (j,len(liste2)):\n        listefusion.append(liste2[ind])\n\n  return listefusion\n  \n", "user": "userdId_19", "attemptID": 4637, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-33.6515", "embeddingY": "50.9627"},{"extension": "py", "date": "2020-04-11 06:43:27", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  res=True\n  i=0\n  while i<len(phrase) and res:\n    if phrase[i]!=phrase[-i-1]:\n      res=False\n    i+=1\n  return res", "user": "userdId_8", "attemptID": 4638, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "22.855942", "embeddingY": "40.74417"},{"extension": "py", "date": "2020-03-23 01:55:55", "correct": "0", "upload": "def minimum(liste):\n    res=liste[0]\n    for i in range (len(liste)) :\n      if liste [i] > res :\n        res= liste[i]\n    return res", "user": "userdId_24", "attemptID": 4639, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "0.62811005", "embeddingY": "-66.64726"},{"extension": "py", "date": "2020-04-08 01:00:07", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  calc=0\n  i=0\n  lres=[]\n  while i<len(liste):\n    calc=a*calc+b\n    i+=1\n  return res", "user": "userdId_13", "attemptID": 4640, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-82.28619", "embeddingY": "23.130943"},{"extension": "py", "date": "2020-03-31 07:46:59", "correct": "1", "upload": "def moyenne(liste):\n    if len(liste)==0:\n      res=None\n    else:\n      res=0\n      cpt=0\n      for elem in liste:\n        res=res+elem\n        cpt=cpt+1\n      res=res/cpt\n    return res\n\n  ", "user": "userdId_11", "attemptID": 4641, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-3.656838", "embeddingY": "-8.269369"},{"extension": "py", "date": "2020-03-05 21:40:11", "correct": "0", "upload": "def somme(liste):\n  res=0\n  for i in range (len(liste)):\n    res=res+liste[i]\n    return res", "user": "userdId_25", "attemptID": 4642, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-43.67168", "embeddingY": "-39.254105"},{"extension": "py", "date": "2020-03-27 05:54:39", "correct": "0", "upload": "def quatrePlus100(liste):\n  res=[]\n  i=0\n  while i<len(liste)and len(res)<4:\n    if l[i]>100:\n      res=res+[liste[i]]\n    i=i+1\n  return res", "user": "userdId_20", "attemptID": 4643, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-29.333458", "embeddingY": "43.519676"},{"extension": "py", "date": "2020-03-11 01:52:15", "correct": "1", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1<annee2:\n    res=-1\n  elif annee1>annee2:\n    res=1\n  else: \n    if mois1<mois2:\n    \tres=-1\n    elif mois1>mois2:\n    \tres=1\n    else:\n      if jour1<jour2:\n        res=-1\n      elif jour1>jour2: \n        res=1\n      else:\n        res=0\n  return res\n     ", "user": "userdId_21", "attemptID": 4644, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "81.89412", "embeddingY": "-33.245876"},{"extension": "py", "date": "2020-03-27 05:31:54", "correct": "0", "upload": "def quatrePlus100(liste):\n  i=0\n  res=[0]\n  while i<4:\n    if liste[i]>100:\n      res.append(liste[i])\n    i=i+1\n  return res", "user": "userdId_12", "attemptID": 4645, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-27.03229", "embeddingY": "35.555717"},{"extension": "py", "date": "2020-03-19 23:58:03", "correct": "0", "upload": "def reconstruireChainePartielle(o,n):\n  res=\"\"\n  for i in range(len(o),n):\n    res=res+o[i]\n  return res", "user": "userdId_20", "attemptID": 4646, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-59.221344", "embeddingY": "-35.966854"},{"extension": "py", "date": "2020-03-09 22:06:47", "correct": "1", "upload": "def premiereOccurrenceLettre(lettre,mot):\n    if mot == '':\n      return None\n    elif lettre not in mot:\n      return None\n    else:\n      listeoccur = []\n      cpt = 0\n      for c in mot:\n        if c == lettre:\n          listeoccur.append(cpt)\n        cpt += 1\n      return listeoccur[0]", "user": "userdId_42", "attemptID": 4647, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-9.687119", "embeddingY": "-23.840584"},{"extension": "py", "date": "2020-04-07 03:42:18", "correct": "0", "upload": "def motPalindrome(mot):\n  res=False\n  if mot[0]==mot[-1]:\n    res=True\n  return res", "user": "userdId_30", "attemptID": 4648, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "43.819874", "embeddingY": "-9.291533"},{"extension": "py", "date": "2020-03-03 05:31:30", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    for i in range(len(liste)):\n      if liste[i]>res:\n        res=liste[i]\n  return res", "user": "userdId_8", "attemptID": 4649, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "5.152013", "embeddingY": "-62.06581"},{"extension": "py", "date": "2020-04-07 23:34:43", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  res=True\n  while i<len(liste)-1 and res==True:\n    if liste[i]==0:\n      res=False\n    q=liste[i+1]/liste[i]\n    if liste[i+1]/liste[i]==q:\n      res=True\n    else:\n      res=False\n    i+=1\n  return res\n", "user": "userdId_34", "attemptID": 4650, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "35.128315", "embeddingY": "54.557426"},{"extension": "py", "date": "2020-04-06 15:08:41", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  i=0\n  for i in range(nombre):\n    if chiffre==nombre[i]:\n      cpt=cpt+1\n    i=i+1\n  return cpt", "user": "userdId_3", "attemptID": 4651, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-20.41423", "embeddingY": "-31.544155"},{"extension": "py", "date": "2020-03-17 06:45:08", "correct": "0", "upload": "def qualifJO(sexe,record,nbvictoires,champion):\n  if champion==True:\n    res=True\n  elif sexe=='M'and record<12 and nbvictoire>3:\n    res=True\n  else:\n    if sexe=='F' and record<15 and nbvictoire>3:\n      res=True\n    else:\n      res=False\n  return res\n  ", "user": "userdId_9", "attemptID": 4652, "exercise": "891e7b0ed5fbddb755edc84d479bc1ef", "exercise_name": "qualifJO", "embeddingX": "66.439224", "embeddingY": "-13.176943"},{"extension": "py", "date": "2020-03-20 00:36:12", "correct": "0", "upload": "def permutationChaine(o):\n  res=\"\"\n  for i in range(0,len(s)-1,2):\n    res=res+s[i+1]+s[i]\n  if (len(s)%2!=0):\n    res=res+[-1]\n  return res", "user": "userdId_20", "attemptID": 4653, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-35.70055", "embeddingY": "-23.79438"},{"extension": "py", "date": "2020-03-31 06:39:39", "correct": "1", "upload": "def semestreValide(ue1,ue2):\n    res=False\n    if ue1>=10.0 and ue2>=10.0:\n      res=True\n    if ue1>=10.0 and ue2<10.0:\n      res=True\n    return res", "user": "userdId_11", "attemptID": 4654, "exercise": "70ae7ad6cf504e0fa8cedebd8e8a825f", "exercise_name": "semestreValide", "embeddingX": "56.61099", "embeddingY": "-12.768057"},{"extension": "py", "date": "2020-03-05 22:18:50", "correct": "0", "upload": "def prononcable(mot):\n  if len(mot)<4:\n    return True\n  else:\n    cpt=0\n    laLettrePrecedenteEstUneVoyelle = (mot[0] in 'aeiouy')\n    for i in mot :\n      if (i in 'aeiouy') == laLettrePrecedenteEstUneVoyelle:\n        cpt+=1\n        if cpt == 3:\n          return False\n      else:\n        cpt = 0\n        laLettrePrecedenteEstUneVoyelle = not laLettrePrecedenteEstUneVoyelle \n    return True", "user": "userdId_6", "attemptID": 4655, "exercise": "6318b210c201fba050d60bc0913cb7ef", "exercise_name": "prononcable", "embeddingX": "16.141317", "embeddingY": "-14.956505"},{"extension": "py", "date": "2020-03-12 21:53:13", "correct": "0", "upload": "def minimum(liste):\n  res=12\n  for elem in liste:\n    if res>elem:\n      res=elem\n  return res", "user": "userdId_23", "attemptID": 4656, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "30.97753", "embeddingY": "-43.313942"},{"extension": "py", "date": "2020-03-31 05:26:20", "correct": "1", "upload": "def nbVoyelles(mot):\n    if mot=='':\n      cpt=0\n    else:\n      cpt=0\n      for c in mot:\n        if c in 'aeiouy':\n          cpt+=1\n    return cpt", "user": "userdId_18", "attemptID": 4657, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "12.214966", "embeddingY": "-24.750145"},{"extension": "py", "date": "2020-03-02 07:56:57", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1<annee2 and mois1<annee2 and jour1<=jour2:\n    return -1\n  elif annee1==annee2 and mois1==mois2 and jour1==jour2:\n    return 0\n  else:\n    return 1\n  \ncompareDates(10,1,2020,14,2,2020)\ncompareDates(14,2,2020,11,2,2020)\ncompareDates(10,1,2020,10,1,2020)", "user": "userdId_1", "attemptID": 4658, "exercise": "af7c1467ef9f7684d9ff58734067ae98", "exercise_name": "compareDates", "embeddingX": "89.70429", "embeddingY": "-12.481641"},{"extension": "py", "date": "2020-03-02 08:41:00", "correct": "0", "upload": "def jourNuit(heure):\n    res = \"l'heure saisie est invalide\"\n\n    if heure <= 24:\n        if heure >= 5 and heure < 12:\n            res = \"on est le matin \"\n        elif heure >= 12 and heure < 17:\n      \t    res = \"on est l'apr\u00e8s-midi \"\n        elif heure >= 17 and heure <= 21:\n            res = \"on est la soir \"\n        else:\n            res = \"on est la nuit \"\n        if heure >= 6 and heure <= 18:\n            res += \"et il fait jour\"\n        else:\n            res += \"et il fait nuit\"\n    return res", "user": "userdId_4", "attemptID": 4659, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "77.29714", "embeddingY": "24.784004"},{"extension": "py", "date": "2020-04-16 23:16:00", "correct": "1", "upload": "def indiceInsertion(sc,scores):\n  i = 0\n  res = None\n  while i < len(scores) and res == None:\n    if sc >= scores[i]:\n      res = i\n    i = i + 1\n  if i == len(scores):\n    res = len(scores)\n  return res", "user": "userdId_17", "attemptID": 4660, "exercise": "f8a820b2bd54d18d36716e3d703858f7", "exercise_name": "indiceInsertion", "embeddingX": "-22.462538", "embeddingY": "70.26406"},{"extension": "py", "date": "2020-04-14 04:01:32", "correct": "0", "upload": "def listeDecroissante(scores):\n  ok=True\n  while i<len(scores) and ok:\n    if liste[i]>=liste[i+1]:\n      res=ok\n    else:\n      res=False\n  return res", "user": "userdId_21", "attemptID": 4661, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "-1.5156573", "embeddingY": "40.32894"},{"extension": "py", "date": "2020-03-12 07:47:52", "correct": "0", "upload": "def semestreValide(ue1,ue2):\n  if ue1==10 and ue2==10:\n    return True\n  if ue1>ue2 and ue1-ue2>0:\n    return True\n  else:\n    return False", "user": "userdId_1", "attemptID": 4662, "exercise": "70ae7ad6cf504e0fa8cedebd8e8a825f", "exercise_name": "semestreValide", "embeddingX": "75.19647", "embeddingY": "-5.0587378"},{"extension": "py", "date": "2020-03-13 00:53:16", "correct": "1", "upload": "def sommeNbPairs(liste):\n  res=0\n  for i in range(len(liste)):\n      if liste[i]%2==0:\n        res=res+liste[i]\n  return res\n", "user": "userdId_12", "attemptID": 4663, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "-19.801153", "embeddingY": "-56.521786"},{"extension": "py", "date": "2020-03-05 22:13:59", "correct": "0", "upload": "def maximum(l):\n  if len(l)==0:\n    res==l[0]\n    for i in range(1,len(l)):\n      if res<i:\n        res=i\n  else:\n    res=None\n  return res", "user": "userdId_48", "attemptID": 4664, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "12.495771", "embeddingY": "-52.041935"},{"extension": "py", "date": "2020-04-12 04:44:52", "correct": "0", "upload": "def elemAri(n,u0,r):\n    res=0\n    x=0\n    while x<n:\n      res=u0+n*r\n      x+=1\n    return res\n      ", "user": "userdId_11", "attemptID": 4665, "exercise": "f239498950e974e29e01472749d9a09d", "exercise_name": "elemAri", "embeddingX": "-9.579356", "embeddingY": "25.650614"},{"extension": "py", "date": "2020-04-06 02:47:29", "correct": "0", "upload": "def suiteGeo(liste):\n  ok=True\n  i=0\n  if len(liste)<=1 :\n    ok=True\n  else :\n    while i<(len(liste)-1) and ok :\n      if (liste[i]*liste[i+1])==0 :\n        ok=False\n      elif liste[i]!=(liste[0]*(liste[i+1]//liste[i])**i):\n        ok=False\n      i+=1\n  return ok", "user": "userdId_15", "attemptID": 4666, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "51.160908", "embeddingY": "46.10353"},{"extension": "py", "date": "2020-03-30 00:05:59", "correct": "0", "upload": "def permutationChaine(s):\n  for i in range(0,len(s)-1,2):\n    s[i], s[i+1] = s[i+1],s[i]\n  return s", "user": "userdId_6", "attemptID": 4667, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-42.41122", "embeddingY": "-48.442146"},{"extension": "py", "date": "2020-03-17 05:59:27", "correct": "0", "upload": "def permutationListe(liste,permutation):\n  res=[0]\n  for i in liste:\n    res[liste]=liste[i]  \n  return res", "user": "userdId_35", "attemptID": 4668, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-51.452374", "embeddingY": "-17.423811"},{"extension": "py", "date": "2020-03-20 00:19:35", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  res=''\n  cpt=0\n  for i in range (debut,len(s)):\n    res=res+s[i]\n    cpt=cpt+1\n    if cpt==longueur:\n      return res\n\n", "user": "userdId_15", "attemptID": 4669, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-88.43522", "embeddingY": "19.780912"},{"extension": "py", "date": "2020-03-05 21:48:34", "correct": "0", "upload": "def ecacrt(liste):\n  if len(liste)==0:\n    return None\n  else:\n    max = liste[0]\n    min = liste[0]\n    for i in range(1,len(liste)):\n      if liste[i]>max:\n        max = liste[i]\n      elif liste[i]<min:\n        min = liste[i]   \n  return (max-min)", "user": "userdId_6", "attemptID": 4670, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "14.246293", "embeddingY": "-47.939846"},{"extension": "py", "date": "2020-03-06 23:40:33", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut1>=debut2 or fin1<=fin2:\n    if fin1>=debut2:\n      res=True\n    else:\n      res=False\n  return res", "user": "userdId_8", "attemptID": 4671, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "53.989323", "embeddingY": "-21.054028"},{"extension": "py", "date": "2020-05-04 22:30:30", "correct": "1", "upload": "def premiereOccurrenceLettre(lettre,mot):\n  res=None\n  i=0\n  while i<len(mot) and res==None:\n    if mot[i]==lettre:\n      res=i\n    i+=1\n  return res", "user": "userdId_8", "attemptID": 4672, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-20.132711", "embeddingY": "69.08975"},{"extension": "py", "date": "2020-04-07 23:28:34", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  ok=False\n  i=0\n  while i<len(phrase)//2 and not ok:\n    if phrase[i]!=phrase[-i-1]:\n      ok=True\n  i+=1\n  if phrase==\"\":\n    ok=True\n  return ok", "user": "userdId_13", "attemptID": 4673, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "23.717287", "embeddingY": "34.224102"},{"extension": "py", "date": "2020-05-04 22:11:51", "correct": "1", "upload": "def ecart(liste):\n  if liste==[]:\n    res=None\n  else:\n    maxi=liste[0]\n    mini=liste[0]\n    for i in range(1,len(liste)):\n      if liste[i]<mini:\n        mini=liste[i]\n      elif liste[i]>maxi:\n        maxi=liste[i]\n    res=maxi-mini\n  return res", "user": "userdId_8", "attemptID": 4674, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "0.78346866", "embeddingY": "-84.71497"},{"extension": "py", "date": "2020-03-04 01:36:49", "correct": "0", "upload": "def polynome(a,b,c):\n    delta =  b**2 - (4*a*c)\n    \n    if delta > 0:\n        x = (-b + math.sqrt(delta))/2*a , (-b -math.sqrt(delta))/2*a\n        \n         \n    elif delta == 0:\n        x = -(b/2*a)\n        \n    else:\n        x = \"pas de solution\"\n        \n    return x", "user": "userdId_32", "attemptID": 4675, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-56.178825", "embeddingY": "3.0191128"},{"extension": "py", "date": "2020-04-05 22:51:18", "correct": "1", "upload": "def produitScalaire(vec1,vec2):\n  res=0\n  i=0\n  while i<len(vec1) and i<len(vec2) :\n    res= res+(vec1[i]*vec2[i])\n    i=i+1\n  return res", "user": "userdId_15", "attemptID": 4676, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-15.773571", "embeddingY": "50.40585"},{"extension": "py", "date": "2020-04-16 23:11:41", "correct": "1", "upload": "def nbOccurrencesJoueur(joueurs,nom):\n  res = 0\n  i = 0\n  while i < len(joueurs) :\n    if nom == joueurs[i]:\n      res = res + 1\n    i = i + 1\n  return res ", "user": "userdId_17", "attemptID": 4677, "exercise": "00ee5faf82e54951fbdb2ba2656f7ae7", "exercise_name": "nbOccurrencesJoueur", "embeddingX": "-19.594807", "embeddingY": "61.74111"},{"extension": "py", "date": "2020-04-17 01:03:19", "correct": "0", "upload": "def nbOccurenceJoueur(joueurs,nom):\n  cpt=0\n  for i in range(len(joueurs)):\n    if joueur[i]==nom:\n      cpt=cpt+1\n    return cpt", "user": "userdId_5", "attemptID": 4678, "exercise": "00ee5faf82e54951fbdb2ba2656f7ae7", "exercise_name": "nbOccurrencesJoueur", "embeddingX": "-22.37972", "embeddingY": "-41.78151"},{"extension": "py", "date": "2020-04-13 22:28:32", "correct": "0", "upload": "def indiceInsertion(sc,scores):\n  i=0\n  c=True\n  while i<len(scores) and c:\n    if sc>=scores[i]:\n      res=i+1\n      c=False\n    i+=1\n  return res", "user": "userdId_19", "attemptID": 4679, "exercise": "f8a820b2bd54d18d36716e3d703858f7", "exercise_name": "indiceInsertion", "embeddingX": "-1.0244523", "embeddingY": "56.014507"},{"extension": "py", "date": "2020-03-20 00:54:17", "correct": "0", "upload": "def distribution(liste,n):\n  compte=[0]*(n+1)\n  for element in liste:\n    compte[element]=compte[element+1]\n  return compte\n    ", "user": "userdId_34", "attemptID": 4680, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-57.57003", "embeddingY": "-15.944455"},{"extension": "py", "date": "2020-04-07 03:46:26", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  if nombre==0:\n   cpt=1\n  while nombre!=0:\n    nombre=nombre//10\n  if nombre==chiffre:\n    cpt=cpt+1\n  return cpt", "user": "userdId_50", "attemptID": 4681, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "21.096828", "embeddingY": "12.446972"},{"extension": "py", "date": "2020-04-11 06:35:21", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  res=True\n  i=0\n  while i<len(phrase) and res:\n    if phrase[i]!=phrase[-i-1]:\n      res=False\n    else:\n      if len(phrase)%2=='abcdefghijklmnopqrstuvwxyz':\n        res=True\n  return res", "user": "userdId_8", "attemptID": 4682, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "30.041956", "embeddingY": "39.74473"},{"extension": "py", "date": "2020-03-24 05:56:08", "correct": "0", "upload": "def compare(chaine1,chaine2):\n    if chaine1=='':\n      res=-1\n    elif chaine2=='':\n      res=1\n    else:\n      res=0\n      i=0\n      mmlttr=0\n      while i<len(chaine1) and i<len(chaine2) and res==0:\n        if chaine1[i]>chaine2[i]:\n          res=-1\n        elif chaine1[i]<chaine2[i]:\n          res=1\n        else:\n          mmlttr=mmlttr+1\n        i=i+1\n      if len(chaine1)>len(chaine2):\n        if len(chaine2)==mmlttr:\n          res=1\n      elif len(chaine1)<len(chaine2):\n        if len(chaine1)==mmlttr:\n          res=-1\n    return res", "user": "userdId_18", "attemptID": 4683, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-30.413898", "embeddingY": "63.508217"},{"extension": "py", "date": "2020-03-03 06:10:35", "correct": "0", "upload": "def nbVoyelles(mot):\n  res=0\n  for c in range(len(mot)):\n    if c in mot[\"aeiouy\"]:\n      res=res+1\n    else:\n      res=0\n  return res", "user": "userdId_35", "attemptID": 4684, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-5.14561", "embeddingY": "-48.766144"},{"extension": "py", "date": "2020-03-12 23:35:50", "correct": "0", "upload": "def jourNuit(heure):\n  if heure > 24 or heure < 0 :\n    res = \"l'heure saisie est invalide\"\n  else :\n    if heure >= 5 and heure < 12 :\n      res = \"on est le matin\"\n    elif heure >= 12 and heure < 17 :\n      res = \"on est l'apr\u00e8s-midi\"\n    elif heure >=17 and heure < 21 :\n      res = \"on est le soir\"\n    else :\n      res = \"on est la nuit\"\n    if heure >= 6 and heure < 18 :\n      res = res + \"et il fait jour\"\n    else :\n      res = res + \"et il fait nuit\"\n  return res", "user": "userdId_17", "attemptID": 4685, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "78.36191", "embeddingY": "20.132568"},{"extension": "py", "date": "2020-03-22 05:29:28", "correct": "1", "upload": "def minimum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=liste[0]\n    for i in range(len(liste)):\n      if liste[i]<res:\n        res=liste[i]\n  return res", "user": "userdId_12", "attemptID": 4686, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "27.411747", "embeddingY": "-68.43257"},{"extension": "py", "date": "2020-03-27 07:02:48", "correct": "0", "upload": "def compare(chaine1,chaine2):\n  res=0\n  i=0\n  while i<len(chaine1) and i<len(chaine2) and res==0:\n    if chaine1[i]<chaine2[i]:\n      res=-1\n    elif chaine1[1]==chaine2[i]:\n      res=0\n    else:\n      res=1\n    i=i+1\n  if res==0:\n    if len(chaine1)>len(chaine2):\n      res=1\n    elif len(chaine1)<len(chaine2):\n      res=-1\n  return res\n   ", "user": "userdId_34", "attemptID": 4687, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-23.223127", "embeddingY": "62.43588"},{"extension": "py", "date": "2020-03-12 21:52:57", "correct": "0", "upload": "def minimum(liste):\n  res=0\n  for elem in liste:\n    if res>=elem:\n      res=elem\n  return res", "user": "userdId_23", "attemptID": 4688, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "35.8881", "embeddingY": "-46.505234"},{"extension": "py", "date": "2020-03-24 06:41:20", "correct": "0", "upload": "def fusion(liste1,liste2):\n  res=[]\n  i=0\n  while i<len(liste1)+len(liste2) and res==len(liste1)+len(liste2):\n    if liste1[i]>liste2[i]:\n      res=res+[liste2[i]]\n    elif liste1[i]==liste2[i]:\n      res=res+[liste1[i]]+[liste2[i]]\n    else:\n      res=res+[liste1[i]]\n    i=i+1\n  return res", "user": "userdId_26", "attemptID": 4689, "exercise": "6613efb6c873b142dc2b6040c14eb616", "exercise_name": "fusion", "embeddingX": "-20.347658", "embeddingY": "51.158092"},{"extension": "py", "date": "2020-03-12 08:30:12", "correct": "0", "upload": "def nombrePair(n):\n    res=0\n    if i in (0,2,4,6,8) :\n      res=true\n    else :\n      res=false\n    return res", "user": "userdId_24", "attemptID": 4690, "exercise": "3001254263845e9a478696f81a704d33", "exercise_name": "nombrePair", "embeddingX": "8.3792", "embeddingY": "-17.045454"},{"extension": "py", "date": "2020-04-06 21:07:22", "correct": "1", "upload": "def phrasePalindrome(phrase):\n  i=0\n  ok=True\n  sansespace=''\n  for lettre in phrase:\n    if lettre!=' ':\n      sansespace+=lettre\n  while i<len(sansespace)//2 and ok:\n    ok=sansespace[i]==sansespace[-i-1]\n    i+=1\n  return ok", "user": "userdId_12", "attemptID": 4691, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "44.782444", "embeddingY": "34.177345"},{"extension": "py", "date": "2020-04-14 00:19:57", "correct": "1", "upload": "def nbOccurrencesJoueur(joueurs,nom):\n  cpt=0\n  for elem in joueurs:\n    if elem==nom:\n      cpt+=1\n  return cpt", "user": "userdId_8", "attemptID": 4692, "exercise": "00ee5faf82e54951fbdb2ba2656f7ae7", "exercise_name": "nbOccurrencesJoueur", "embeddingX": "-10.018591", "embeddingY": "-27.262983"},{"extension": "py", "date": "2020-03-13 00:41:52", "correct": "1", "upload": "def sommeNbPairs(liste):\n    res=0\n    for n in (liste):\n      if n%2==0:\n        res=res+n\n    return res", "user": "userdId_5", "attemptID": 4693, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "29.741615", "embeddingY": "-19.218067"},{"extension": "py", "date": "2020-04-13 20:27:05", "correct": "0", "upload": "def motPalindrome(mot):\n  res=True\n  i=0\n  while i<len(mot)//2 and res:\n    if mot[i]!=mot[-i-1]:\n      res=False\n  return res", "user": "userdId_8", "attemptID": 4694, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "23.24609", "embeddingY": "34.43191"},{"extension": "py", "date": "2020-03-23 00:47:56", "correct": "0", "upload": "def reconstruireChainePartielle(s,n):\n    res = \"\"\n    for i in range (len(s),n) :\n      res = res + [s[i]]\n    return res", "user": "userdId_24", "attemptID": 4695, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-60.125484", "embeddingY": "-36.106197"},{"extension": "py", "date": "2020-03-06 00:13:06", "correct": "0", "upload": "def maximum(liste):\n    res=0\n    for elem in liste:\n        if elem>res:\n        \tres=elem\n    for elem in liste:\n        if elem<0:\n            res=0\n    return res", "user": "userdId_49", "attemptID": 4696, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "42.231823", "embeddingY": "-50.838493"},{"extension": "py", "date": "2020-03-06 00:39:09", "correct": "0", "upload": "def moyenne(liste):\n  res=0\n  cpt=0\n  if len(liste)==0:\n    res=0\n  else:\n     for i in liste:\n       res=res+i\n       cpt=cpt+1\n  res=res/cpt\n  return res", "user": "userdId_14", "attemptID": 4697, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-4.4827895", "embeddingY": "-8.410696"},{"extension": "py", "date": "2020-04-05 08:45:46", "correct": "1", "upload": "def motPalindrome(mot):\n    if mot=='':\n      ok=True\n    else:\n      ok=True\n      i=0\n      while i<len(mot) and ok:\n        if mot[i]!=mot[-i-1]:\n          ok=False\n        i+=1\n    return ok\n      ", "user": "userdId_18", "attemptID": 4698, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "28.55596", "embeddingY": "39.852753"},{"extension": "py", "date": "2020-03-02 08:41:50", "correct": "0", "upload": "def jourNuit(heure):\n    res = \"l'heure saisie est invalide\"\n\n    if heure <= 24:\n        if heure >= 5 and heure < 12:\n            res = \"on est le matin \"\n        elif heure >= 12 and heure < 17:\n      \t    res = \"on est l'apr\u00e8s-midi \"\n        elif heure >= 17 and heure < 21:\n            res = \"on est le soir \"\n        else:\n            res = \"on est la nuit \"\n        if heure >= 6 and heure <= 18:\n            res += \"et il fait jour\"\n        else:\n            res += \"et il fait nuit\"\n    return res\n", "user": "userdId_4", "attemptID": 4699, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "77.27768", "embeddingY": "24.82024"},{"extension": "py", "date": "2020-03-06 00:10:31", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    return None\n  cpt=0\n  for elem in mot=={(a,e,i,o,u,y)}:\n    cpt=cpt+1\n  return cpt", "user": "userdId_1", "attemptID": 4700, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "4.935016", "embeddingY": "-44.616524"},{"extension": "py", "date": "2020-03-06 00:15:57", "correct": "0", "upload": "def moyenne(liste):\n\tif len(liste) == 0:\n\t\tres= None\n\telse:\n\t\tnb = 0\n\t\tres = 0\n\t\tfor elem in liste:\n\t\t\tres = res + elem\n\t\t\tnb+=1\n\t\tmoy = res / nb\n\treturn moy", "user": "userdId_29", "attemptID": 4701, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-0.5544299", "embeddingY": "-10.443557"},{"extension": "py", "date": "2020-03-27 05:43:53", "correct": "1", "upload": "def quatrePlus100(liste):\n  i=0\n  res=[]\n  while i<len(liste) and len(res)<4:\n    if liste[i]>100:\n      res=res+[liste[i]]\n    i=i+1\n  return res", "user": "userdId_1", "attemptID": 4702, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-26.949448", "embeddingY": "43.26107"},{"extension": "py", "date": "2020-03-27 06:35:43", "correct": "0", "upload": "def compare(chaine1,chaine2):\n  i=0\n  res=()\n  while i<len(chaine1) and i<len(chaine2):\n    if chaine1[i]>chaine2[i]:\n      res=1\n    elif chaine1==chaine2:\n      res=0\n    else:\n      res=-1\n    i=i+1\n  return res", "user": "userdId_1", "attemptID": 4703, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-26.286615", "embeddingY": "62.78421"},{"extension": "py", "date": "2020-03-17 05:39:52", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  res=''\n  if debut+longueur>len(s):\n    res=debut+longueur\n  else:\n    if debut+longueur<len(s):\n      fin=debut+longueur\n  for i in range(debut,fin): \n      res=res+s[i]\n  return res", "user": "userdId_25", "attemptID": 4704, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-73.01083", "embeddingY": "10.970487"},{"extension": "py", "date": "2020-04-16 23:58:20", "correct": "1", "upload": "def nbOccurrencesJoueur(joueurs,nom):\n  i=0\n  cpt=0\n  while i<len(joueurs):\n    if nom==joueurs[i]:\n      cpt+=1\n    i+=1\n  return cpt", "user": "userdId_34", "attemptID": 4705, "exercise": "00ee5faf82e54951fbdb2ba2656f7ae7", "exercise_name": "nbOccurrencesJoueur", "embeddingX": "-16.494457", "embeddingY": "65.57688"},{"extension": "py", "date": "2020-04-03 00:13:02", "correct": "0", "upload": "def nbChiffres(nombre):\n  cpt=0\n  while nombre!=0:\n    nombre=nombre//10 \n    cpt+=1\n  if nombre==0:\n    cpt==1\n  return cpt\n", "user": "userdId_34", "attemptID": 4706, "exercise": "3dcf332c003a1f3bf15df22ee17884a3", "exercise_name": "nbChiffres", "embeddingX": "33.0507", "embeddingY": "14.52287"},{"extension": "py", "date": "2020-03-09 21:35:05", "correct": "0", "upload": "def jourNuit(heure):\n    a = 'test' \n    return a", "user": "userdId_44", "attemptID": 4707, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "-38.454224", "embeddingY": "15.019127"},{"extension": "py", "date": "2020-03-05 21:42:47", "correct": "0", "upload": "def somme(liste):\n  res=0\n  for i in range(len(liste)):\n     res=res+liste[i]\n  return None", "user": "userdId_32", "attemptID": 4708, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-40.92285", "embeddingY": "-36.11591"},{"extension": "py", "date": "2020-03-02 02:54:33", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1<=annee2 and mois1<=mois2 and jour1<jour2:\n    return -1\n  elif annee1==annee2 and mois1==mois2 and jour1==jour2:\n    return 0\n  else:\n    return 1\n  \ncompareDates(10,1,2020,14,2,2020)\ncompareDates(14,2,2020,11,2,2020)\ncompareDates(10,1,2020,10,1,2020)", "user": "userdId_1", "attemptID": 4709, "exercise": "af7c1467ef9f7684d9ff58734067ae98", "exercise_name": "compareDates", "embeddingX": "87.810875", "embeddingY": "-13.493148"},{"extension": "py", "date": "2020-03-14 10:18:52", "correct": "0", "upload": "def nbVoyelles(mot):\n    cpt=0\n    for x in mot: \n      if x in 'aeiouy':\n        cpt=cpt+1\n    return res", "user": "userdId_21", "attemptID": 4710, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "16.788046", "embeddingY": "-26.738567"},{"extension": "py", "date": "2020-03-12 21:54:57", "correct": "0", "upload": "def maximum(liste):\n  if liste==0:\n    res=None\n  else:\n    res=0\n    for i in range(len(liste)):\n      if liste[i]>res:\n        res=liste[i]\n  return res", "user": "userdId_25", "attemptID": 4711, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-0.32966134", "embeddingY": "-63.08815"},{"extension": "py", "date": "2020-03-31 06:21:24", "correct": "0", "upload": "def doubleChiffre(nombre):\n  res=False\n  com=[]\n  while nombre!=0:\n    com=nombre%10\n    nombre=nombre//10\n    if com in nombre:\n      res=True\n  return res\n", "user": "userdId_13", "attemptID": 4712, "exercise": "c83ea6acd3e9f6f5543e87d515e8a44a", "exercise_name": "doubleChiffre", "embeddingX": "15.312254", "embeddingY": "6.3358755"},{"extension": "py", "date": "2020-04-07 03:47:20", "correct": "0", "upload": "def produitScalaire(vec1,vec2):\n  if len(vec1)==[] and len(vec2)==[]:\n    res=0\n  else:\n    res=0\n    for i in range(len(vec1)) and len((vec2)):\n      vec1[i]==vec2[i]\n      res=res+vec1[i]\n    return res", "user": "userdId_36", "attemptID": 4713, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-28.828934", "embeddingY": "-42.181736"},{"extension": "py", "date": "2020-03-14 00:33:39", "correct": "0", "upload": "def ecart(liste):\n   res=0\n   if len(liste)==0:\n      res=None\n   if len(liste)==1:\n      res=0\n   else:\n      max=liste[0]\n      min=max\n      for i in range(len(liste)):\n         if liste[i]>max:\n            max=liste[i]\n      for i in range(len(liste)):\n         if liste[i]<min:\n            min=liste[i]\n   res=max-min\n   return res", "user": "userdId_14", "attemptID": 4714, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "14.183901", "embeddingY": "-86.1438"},{"extension": "py", "date": "2020-04-07 10:47:48", "correct": "1", "upload": "def nextConway(s):\n  res=''\n  cpt=1\n  for i in range(len(s)):\n    if i==len(s)-1 or s[i+1]!=s[i]:\n      res+=str(cpt)+s[i]\n      cpt=1\n    else:\n      cpt+=1\n  return res", "user": "userdId_27", "attemptID": 4715, "exercise": "a580c32690609356dae4401b3c89a3b8", "exercise_name": "nextConway", "embeddingX": "-29.279263", "embeddingY": "-57.807964"},{"extension": "py", "date": "2020-03-20 00:54:01", "correct": "0", "upload": "def permutationListe(liste,permutation):\n  res=[]\n  for i in permutation:\n    res.insert(permutation(i),liste(i))\n  return res", "user": "userdId_13", "attemptID": 4716, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-44.198048", "embeddingY": "-15.859904"},{"extension": "py", "date": "2020-04-06 03:44:10", "correct": "1", "upload": "def elemAri(n,u0,r):\n  return u0+n*r", "user": "userdId_6", "attemptID": 4717, "exercise": "f239498950e974e29e01472749d9a09d", "exercise_name": "elemAri", "embeddingX": "-35.48898", "embeddingY": "20.75733"},{"extension": "py", "date": "2020-03-09 21:45:43", "correct": "0", "upload": "def polynome(a,b,c):\n  import math\n  delta=pow(b,2)-4*a*c\n  if delta>0:\n    res=(-b-math.sqrt(delta)/2*a,-b+math.sqrt(delta)/2*a)\n  if delta==0:\n    res=-b/a\n  else:\n    res='pas de solution'\n  return res", "user": "userdId_12", "attemptID": 4718, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-57.54776", "embeddingY": "9.884457"},{"extension": "py", "date": "2020-03-24 05:20:23", "correct": "1", "upload": "def quatrePlus100(liste):\n  res=[]\n  i=0\n  while i<len(liste) and len(res)<4:\n    if liste[i]>100:\n      res.append(liste[i])\n    i=i+1\n  return res", "user": "userdId_36", "attemptID": 4719, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-26.047564", "embeddingY": "40.91443"},{"extension": "py", "date": "2020-04-13 22:32:34", "correct": "1", "upload": "def nextConway(s):\n  res=''\n  prec=None\n  cpt=0\n  for c in s:\n    if c==prec:\n      cpt+=1\n    else:\n      if prec:\n        res+=str(cpt)+str(prec)\n      cpt=1\n    prec=c\n  if prec:\n    res+=str(cpt)+str(prec)\n  return res", "user": "userdId_8", "attemptID": 4720, "exercise": "a580c32690609356dae4401b3c89a3b8", "exercise_name": "nextConway", "embeddingX": "6.999863", "embeddingY": "-6.427705"},{"extension": "py", "date": "2020-03-09 05:36:27", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  \n  res=0\n  for elem in jour1,mois1,annee1,jour2,mois2,annee2 :\n    \n    if (jour1,mois1,annee1<jour2,mois2,annee2):\n       res=res-1\n      \n    if (jour1,mois1,annee1==jour2,mois2,annee2):\n       res=res\n      \n    if (jour1,mois1,annee1<jour2,mois2,annee2):\n       res=res+1\n      \n  return res", "user": "userdId_23", "attemptID": 4721, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "-20.482681", "embeddingY": "-7.6766257"},{"extension": "py", "date": "2020-03-23 00:14:36", "correct": "1", "upload": "def nbVoyelles(mot):\n  v='aeiouy'\n  cpt=0\n  for c in mot:\n    if c in v:\n      cpt=cpt+1\n  return cpt", "user": "userdId_27", "attemptID": 4722, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "16.959995", "embeddingY": "-27.006857"},{"extension": "py", "date": "2020-04-05 07:17:50", "correct": "0", "upload": "def nbSyllabes(mot):\n  if mot=='':\n    cpt=0\n  else:\n    cpt=0\n    if mot[0] in 'aeiouy':\n      cpt+=1\n    for i in range(1,len(mot)):\n      if mot[i] in 'aeiouy' and mot[i-1] not in 'aeiouy':\n        cpt+=1\n    if mot[-1]=='e':\n      cpt-=1\n    if cpt==0:\n      cpt+=1\n    return cpt", "user": "userdId_18", "attemptID": 4723, "exercise": "1c86bec0f4df503e23db53994f3d2991", "exercise_name": "nbSyllabes", "embeddingX": "-24.657522", "embeddingY": "-69.97688"},{"extension": "py", "date": "2020-04-07 02:04:48", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res = True\n  i = 0\n  while res and i < len(liste):\n    if liste[i+1] != a*liste[i]+b :\n      i = i + 1\n  return res", "user": "userdId_17", "attemptID": 4724, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-74.71519", "embeddingY": "13.297722"},{"extension": "py", "date": "2020-04-05 08:26:36", "correct": "1", "upload": "def plusLongueSuite(liste):\n    if liste==[]:\n      cptMax=0\n    else:\n      cpt=1\n      cptMax=1\n      prec=liste[0]\n      for i in range(1,len(liste)):\n        if prec==liste[i]:\n          cpt+=1\n          if cpt>cptMax:\n            cptMax=cpt\n        else:\n          cpt=1\n        prec=liste[i]\n    return cptMax\n      ", "user": "userdId_18", "attemptID": 4725, "exercise": "deed004abb317b11778f7e8247197a40", "exercise_name": "plusLongueSuite", "embeddingX": "-2.12728", "embeddingY": "-78.77016"},{"extension": "py", "date": "2020-04-06 05:32:22", "correct": "1", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  res=''\n  if annee1==annee2 and mois1==mois2 and jour1==jour2:\n    res=0\n  if annee1<annee2:\n    res=-1\n  elif annee1>annee2:\n      res=1\n  if annee1==annee2 and mois1<mois2:\n    res=-1\n  elif annee1==annee2 and mois1>mois2:\n      res=1\n  if annee1==annee2 and mois1==mois2 and jour1<jour2:\n    res=-1\n  elif annee1==annee2 and mois1==mois2 and jour1>jour2:\n      res=1\n  return res", "user": "userdId_16", "attemptID": 4726, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "82.77472", "embeddingY": "-25.98875"},{"extension": "py", "date": "2020-04-03 00:33:33", "correct": "1", "upload": "def doubleChiffre(nombre):\n  res=False\n  prec=nombre%10\n  while nombre!=0 and res==False:\n    nombre=nombre//10\n    if nombre%10==prec:\n      res=True\n    prec=nombre%10\n  return res", "user": "userdId_12", "attemptID": 4727, "exercise": "c83ea6acd3e9f6f5543e87d515e8a44a", "exercise_name": "doubleChiffre", "embeddingX": "13.249565", "embeddingY": "20.139513"},{"extension": "py", "date": "2020-04-13 21:47:15", "correct": "0", "upload": "def suiteAri(liste):\n  res=True\n  if len(liste)>1:\n    r=liste[1]-liste[0]\n  res=True\n  n=1\n  while n<len(liste) and res:\n    if liste[n]!=liste[n-1]*a+b:\n      res=False\n    n+=1\n  return res", "user": "userdId_8", "attemptID": 4728, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "18.29216", "embeddingY": "58.765335"},{"extension": "py", "date": "2020-03-13 00:59:31", "correct": "0", "upload": "def plusLongueSuite(liste):\n  res=0\n  for n1 in range(len(liste)):\n     for n2 in range (1,len(liste)):\n      if n1==n2:\n        res=res+1\n  \n  return res", "user": "userdId_15", "attemptID": 4729, "exercise": "deed004abb317b11778f7e8247197a40", "exercise_name": "plusLongueSuite", "embeddingX": "-1.3585025", "embeddingY": "-40.050453"},{"extension": "py", "date": "2020-04-17 01:20:38", "correct": "0", "upload": "def nbOccurrencesJoueur(joueurs,nom):\n  cpt=0\n  for i in joueurs:\n    if joueurs==nom:\n      cpt=cpt+1\n    return cpt", "user": "userdId_5", "attemptID": 4730, "exercise": "00ee5faf82e54951fbdb2ba2656f7ae7", "exercise_name": "nbOccurrencesJoueur", "embeddingX": "-12.016059", "embeddingY": "-27.019072"},{"extension": "py", "date": "2020-03-14 09:12:09", "correct": "0", "upload": "def rendezVous(d1,f1,d2,f2):\n    if d1<f2:\n      res=False\n    if d2>f1: \n      res=False\n    else:\n      res=True\n    return res", "user": "userdId_21", "attemptID": 4731, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "63.813717", "embeddingY": "-19.837976"},{"extension": "py", "date": "2020-04-14 03:29:15", "correct": "1", "upload": "def listeDecroissante(scores):\n  if scores==[]:\n    ok=True\n  else:\n    scorePrec=scores[0]\n    ok=True\n    i=1\n    while i<len(scores) and ok:\n      if scorePrec<=scores[i]:\n        ok=False\n      scorePrec=scores[i]\n      i+=1\n  return ok", "user": "userdId_18", "attemptID": 4732, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "32.045696", "embeddingY": "42.583668"},{"extension": "py", "date": "2020-04-21 02:31:38", "correct": "0", "upload": "def listeDecroissante(scores):\n    if len(scores)==0:\n      ok=True\n    else:\n      ok=True\n      i=0\n      while i<len(scores) and ok:\n        if scores[i]<scores[i+1]:\n          ok=False\n    return ok", "user": "userdId_11", "attemptID": 4733, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "19.52027", "embeddingY": "37.679264"},{"extension": "py", "date": "2020-03-12 23:47:13", "correct": "0", "upload": "def jourNuit(heure):\n  res=[]\n  if heure<0:\n    res=\"l'heure saisie est invalide\"\n  if heure>24:\n    res=\"l'heure saisie est invalide\"\n  if 6<=heure<=18:\n    if 5<=heure<=12:\n      res=\"on est le matin et il fait jour\"\n    if 12<=heure<=17:\n      res=\"on est l'apr\u00e8s-midi et il fait jour\"\n    if 17<=heure<=18:\n      res=\"on est le soir et il fait jour\"\n  if 1<=heure<=5 or 19<=heure<=24:\n    if 1<=heure<=4:\n      res=\"on est la nuit et il fait nuit\"\n    if 21<=heure<=24:\n      res=\"on est la nuit et il fait nuit\"\n    if 19<=heure<=20:\n      res=\"on est le soir et il fait nuit\"\n  return res", "user": "userdId_13", "attemptID": 4734, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "70.71399", "embeddingY": "23.842499"},{"extension": "py", "date": "2020-03-31 05:36:48", "correct": "0", "upload": "def nbChiffres(nombre):\n  res=0\n  nb=nombre\n  cpt=1\n  while nb%10:\n    cpt=cpt+1\n    nb=nb//10\n  return cpt\n    \n    ", "user": "userdId_28", "attemptID": 4735, "exercise": "3dcf332c003a1f3bf15df22ee17884a3", "exercise_name": "nbChiffres", "embeddingX": "-1.1711286", "embeddingY": "15.379923"},{"extension": "py", "date": "2020-03-06 23:57:09", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut1>=debut2 or fin1<=fin2:\n    if fin1>=debut2:\n      res=True\n  else:\n    res=False\n  return res", "user": "userdId_8", "attemptID": 4736, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "53.99802", "embeddingY": "-21.090767"},{"extension": "py", "date": "2020-03-19 23:47:06", "correct": "0", "upload": "def reconstruireChainePartielle(s,n):\n  res=''\n  for lettre in (0,s,n):\n    res=res+lettre\n  return res", "user": "userdId_2", "attemptID": 4737, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-38.989773", "embeddingY": "-4.881303"},{"extension": "py", "date": "2020-03-05 23:49:04", "correct": "0", "upload": "def maximum(liste):\n  res=0\n  for i in range (len(liste)):\n      res=res+liste[i]\n  return res", "user": "userdId_41", "attemptID": 4738, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-44.378735", "embeddingY": "-36.754616"},{"extension": "py", "date": "2020-04-12 07:52:04", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n    cpt=0\n    decomp=nombre\n    x=nombre%10\n    while decomp!=0 and x!=0:\n      if x!=chiffre:\n        decomp=decomp//10\n        x=decomp%10\n      else:\n        cpt+=1\n    return cpt", "user": "userdId_11", "attemptID": 4739, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "7.095607", "embeddingY": "12.683815"},{"extension": "py", "date": "2020-03-13 00:42:54", "correct": "0", "upload": "def doubleLettre(mot):\n  lettre2 = ' '\n  cpt = 0\n  for lettre1 in mot :\n    if lettre1 == lettre2 :\n      lettre2 = lettre1\n      cpt =  cpt + 1\n    else :\n      cpt = 0\n  if cpt > 2 :\n    res = True\n  return res", "user": "userdId_17", "attemptID": 4740, "exercise": "00da9cf1fa2b468d915724499459ed8f", "exercise_name": "doubleLettre", "embeddingX": "10.739046", "embeddingY": "-6.899255"},{"extension": "py", "date": "2020-04-07 03:44:41", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  while nombre!=0:\n    nombre=nombre//10\n  if nombre==chiffre:\n    cpt=cpt+1\n  return cpt", "user": "userdId_50", "attemptID": 4741, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "21.011753", "embeddingY": "12.441214"},{"extension": "py", "date": "2020-04-08 00:04:51", "correct": "1", "upload": "def suiteGeo(liste):\n  i = 0\n  j = 0\n  raison = 0\n  if liste == [] or len(liste) == 1 :\n    res = True\n  else :\n    res = True \n  while raison == 0 and j < len(liste) - 1 :\n    if liste[j] != 0 :\n       raison = liste[j+1]/liste[j]\n    j = j + 1\n  while res and i < len(liste) - 1 :\n    if liste[i]*raison != liste[i+1]:\n      res = False\n    i = i + 1\n  return res", "user": "userdId_32", "attemptID": 4742, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "31.813145", "embeddingY": "73.39351"},{"extension": "py", "date": "2020-04-20 21:07:21", "correct": "1", "upload": "def nombresPremiers(n):\n  res = []\n  cpt = 2\n  isPrime = True\n  while len(res)<n:\n    res.append(cpt)\n    isPrime =False\n    while not isPrime:\n      cpt+=1\n      isPrime=True\n      for i in range(2,cpt):\n        if cpt%i==0:\n          isPrime=False\n    \n  return res", "user": "userdId_6", "attemptID": 4743, "exercise": "7eda5a2bd3cdd0a510f96448337384d9", "exercise_name": "nombresPremiers", "embeddingX": "30.051046", "embeddingY": "-7.041937"},{"extension": "py", "date": "2020-03-12 21:56:48", "correct": "0", "upload": "def maximum(liste):\n   if len(liste)==0:\n      res=None\n   else:\n      res=liste[0]\n      for i in liste:\n         if liste[i]>res:\n            res=liste[1]\n   return res", "user": "userdId_14", "attemptID": 4744, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "7.913518", "embeddingY": "-61.342785"},{"extension": "py", "date": "2020-03-17 06:19:11", "correct": "0", "upload": "def permutationChaine(s):\n  res=''\n  for i in range(0,len(s)+1,2):\n    res=res+s[1+i]+s[i]\n  return res", "user": "userdId_25", "attemptID": 4745, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-46.923534", "embeddingY": "-47.658066"},{"extension": "py", "date": "2020-04-02 23:44:06", "correct": "1", "upload": "def stockerChiffres(nombre):\n  if nombre == 0 :\n    res = [0]\n  else :\n    res = []\n  while nombre != 0 :\n    res.append (nombre%10)\n    nombre = nombre//10\n  return res", "user": "userdId_17", "attemptID": 4746, "exercise": "49a87f644f84a443327fb4315b47f249", "exercise_name": "stockerChiffres", "embeddingX": "41.95715", "embeddingY": "13.1495075"},{"extension": "py", "date": "2020-04-07 04:37:33", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  while i<len(liste)-1 and res==True:\n    if liste[0]==0:\n      res=False\n    else:\n      r=liste[1]/liste[0]\n      if liste[i+1]/liste[i]==r:\n        res=True\n      else:\n        res=False\n    i+=1\n  return res", "user": "userdId_26", "attemptID": 4747, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "-8.687408", "embeddingY": "44.071075"},{"extension": "py", "date": "2020-03-06 00:26:43", "correct": "0", "upload": "def minimum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=liste[0]\n    for elem in liste:\n      if elem<liste[elem]:\n        res=liste[elem]\n  return res", "user": "userdId_14", "attemptID": 4748, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "29.285137", "embeddingY": "-62.09743"},{"extension": "py", "date": "2020-03-16 04:41:15", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n    if lettre=='' or mot=='':\n      res=None\n    else:\n      res=None\n      for c in mot:\n        if lettre==c:\n          res=range(len(mot))\n    return res", "user": "userdId_18", "attemptID": 4749, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-14.469202", "embeddingY": "-38.449272"},{"extension": "py", "date": "2020-03-23 00:49:21", "correct": "0", "upload": "def sommeNPremiersEntiers(n):\n    if n<0:\n      res=0\n    else:\n      res=0\n      for i in range(n):\n        res=res+[i]\n    return res", "user": "userdId_11", "attemptID": 4750, "exercise": "c315a540cf0bfb0182dc114c6f0eafd1", "exercise_name": "sommeNPremiersEntiers", "embeddingX": "28.140968", "embeddingY": "-56.2632"},{"extension": "py", "date": "2020-04-12 05:55:31", "correct": "0", "upload": "def suiteGeo(liste):\n    if len(liste)==0:\n      res=True\n    else:\n      res=True\n      for i in range(1,len(liste)):\n        x=liste[1]//liste[0]\n        if liste[i]==liste[i-1]*x:\n          res=True\n        else:\n          res=False\n    return res", "user": "userdId_11", "attemptID": 4751, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "-13.864352", "embeddingY": "-81.62818"},{"extension": "py", "date": "2020-04-05 09:05:33", "correct": "0", "upload": "def phrasePalindrome(phrase):\n    if phrase=='':\n      ok=True\n    else:\n      ok=True\n      i=0\n      j=-1\n      while i<len(phrase) and j<(-len(phrase)-1) and ok:\n        if phrase[i]!=phrase[j] and phrase[i]!='' and phrase[j]!='':\n          ok=False\n        if phrase[i]=='' and phrase[j]!='':\n          i+=1\n        if phrase[j]=='' and phrase[i]!='':\n          j-=1\n    return ok", "user": "userdId_18", "attemptID": 4752, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "5.9831247", "embeddingY": "46.551243"},{"extension": "py", "date": "2020-03-10 04:14:51", "correct": "0", "upload": "def sommeNPremiersEntiers(n):\n  res=0\n  if x in range(n):\n    res=res+x\n  return res", "user": "userdId_8", "attemptID": 4753, "exercise": "c315a540cf0bfb0182dc114c6f0eafd1", "exercise_name": "sommeNPremiersEntiers", "embeddingX": "7.240556", "embeddingY": "-19.030958"},{"extension": "py", "date": "2020-04-08 07:08:27", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n    cpt=0\n    if chiffre in nombre:\n      cpt+=1\n    return cpt", "user": "userdId_11", "attemptID": 4754, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "10.923749", "embeddingY": "-15.577561"},{"extension": "py", "date": "2020-03-05 06:36:25", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  for debut1 in range (debut2,fin2):\n    res=True\n    \n  for debut2 in range(debut1,fin1):\n    res=True\n    \n  \n  return res\n  ", "user": "userdId_5", "attemptID": 4755, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "65.103546", "embeddingY": "-31.11916"},{"extension": "py", "date": "2020-03-05 23:50:28", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n    return None\n  else:\n    max=liste[0]\n    for i in range (1,len(liste)):\n      if liste[i]>max:\n        max=liste[i]\n      return max", "user": "userdId_1", "attemptID": 4756, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "12.250134", "embeddingY": "-70.06204"},{"extension": "py", "date": "2020-02-29 05:17:43", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n    if debut1>debut2:\n      if debut1>fin2:\n        res=True\n      else:\n        res=False\n    else:\n      if fin1>debut2:\n        res=True\n      else:\n        res=False\n    return res", "user": "userdId_18", "attemptID": 4757, "exercise": "6fd66bb2393fbf3809f1c6d04f3831f7", "exercise_name": "rendezVous", "embeddingX": "64.92665", "embeddingY": "-20.868929"},{"extension": "py", "date": "2020-03-06 00:41:02", "correct": "0", "upload": "def moyenne(liste):\n  res=0\n  cpt=0\n  if len(liste)==0:\n    moy=0\n  else:\n     for i in liste:\n       res=res+i\n       cpt=cpt+1\n  moy=res*cpt\n  return moy", "user": "userdId_14", "attemptID": 4758, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "2.9275577", "embeddingY": "-7.835211"},{"extension": "py", "date": "2020-04-06 16:23:08", "correct": "0", "upload": "def suiteGeo(liste):\n    if 0 not in liste:\n        if len(liste) == 0 or len(liste) == 1:\n            res = True\n        else:\n            test = liste[1]/liste[0]\n            if len(liste) >= 3:\n                for i in range(2,len(liste)):\n                    if liste[i]/liste[i-1] == test:\n                        res = True\n                    else:\n                        res = False\n            else:\n                res = True\n    else:\n        res = False\n    return res", "user": "userdId_42", "attemptID": 4759, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "-17.675928", "embeddingY": "-82.85144"},{"extension": "py", "date": "2020-03-31 05:56:12", "correct": "1", "upload": "def stockerChiffres(nombre):\n  res=[]\n  cpt=0\n  while nombre!=0:\n    res.append(nombre%10)\n    nombre=nombre//10\n    cpt+=1\n  if cpt==0:\n    res.append(0)\n  return res", "user": "userdId_27", "attemptID": 4760, "exercise": "49a87f644f84a443327fb4315b47f249", "exercise_name": "stockerChiffres", "embeddingX": "39.961426", "embeddingY": "15.885185"},{"extension": "py", "date": "2020-04-12 08:19:36", "correct": "0", "upload": "def suiteAriGeo(liste):\n  i=0\n  while i<len(liste)-1:\n    a=liste[1]-liste[0]\n    b=liste[0]\n    if liste[0]==0:\n      a=1\n      b=liste[i+1]\n    if liste[i+1]==liste[i]+(liste[1]-liste[0]):\n      b=liste[1]-liste[0]\n    if liste[0]!=0:                        \n      if liste[i+1]==liste[1]/liste[0]:\n        a=liste[1]/liste[0]\n        b=0\n    if liste[i+1]==liste[1]-liste[0]+liste[0]:\n      b=liste[0]\n    i=i+1\n  ok=True\n  i=0\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=a*liste[i]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 4761, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "37.268635", "embeddingY": "82.53294"},{"extension": "py", "date": "2020-03-10 04:21:31", "correct": "0", "upload": "def sommeNbPairs(liste):\n  res=0\n  for x in liste:\n    if x%2==0:\n      res=res+0\n  return res", "user": "userdId_25", "attemptID": 4762, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "29.28268", "embeddingY": "-19.33813"},{"extension": "py", "date": "2020-03-07 00:46:42", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1<annee2:\n    res=-1\n  elif annee1>annee2:\n      res=1\n  if mois1<mois2:\n      res=-1\n      if mois1>mois2:\n        res=1\n      elif jour1<jour2:\n        res=-1\n        if jour1>jour2:\n          res=1\n  else:\n    res=0\n  return res", "user": "userdId_8", "attemptID": 4763, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "81.15523", "embeddingY": "-32.352867"},{"extension": "py", "date": "2020-03-17 06:02:16", "correct": "0", "upload": "def sommeNbPairs(liste):\n    if len(liste)==0:\n      res=0\n    else:\n      res=0\n      for elem in liste:\n        if elem%2==0:\n          res=res+liste[i]\n    return res", "user": "userdId_11", "attemptID": 4764, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "26.468117", "embeddingY": "-21.018383"},{"extension": "py", "date": "2020-03-12 22:00:43", "correct": "0", "upload": "def maximum(liste):\n  res=0\n  for i in range(len(liste)):\n    if(liste[i])>res:\n      res=(liste[i])\n  return res", "user": "userdId_32", "attemptID": 4765, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-1.2493124", "embeddingY": "-64.97095"},{"extension": "py", "date": "2020-03-27 06:53:36", "correct": "1", "upload": "def compare(chaine1,chaine2):\n  i=0\n  res=0\n  while res==0 and i<len(chaine1) and i<len(chaine2):\n    if chaine1[i]<chaine2[i]:\n      res=-1\n    elif chaine1[i]>chaine2[i]:\n      res=1\n    i=i+1\n  if res==0 and len(chaine1)!=len(chaine2):\n    if len(chaine1)>len(chaine2):\n      res=1\n    elif len(chaine2)>len(chaine1):\n      res=-1\n  return res", "user": "userdId_12", "attemptID": 4766, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-25.534555", "embeddingY": "64.18209"},{"extension": "py", "date": "2020-03-03 06:11:22", "correct": "0", "upload": "def nbVoyelles(mot):\n  res=0\n  for c in range(len(mot)):\n    if c in mot[\"aeiouy\"]:\n      res=res+1\n    else:\n      res=0\n  return res", "user": "userdId_35", "attemptID": 4767, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-5.151956", "embeddingY": "-48.756405"},{"extension": "py", "date": "2020-03-06 00:56:19", "correct": "1", "upload": "def ecart(liste):\n\tif len(liste) == 0:\n\t\tres = None\n\telse:\n\t\tma = liste[0]\n\t\tmi = liste[0]\n\t\tfor i in range(len(liste)):\n\t\t\tif liste[i] > ma and liste[i] > mi:\n\t\t\t\tma = liste[i]\n\t\t\telif liste[i] < ma and liste[i]< mi:\n\t\t\t\tmi = liste[i]\n\t\tres = ma - mi\n\treturn res", "user": "userdId_29", "attemptID": 4768, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "-2.1677978", "embeddingY": "-84.99447"},{"extension": "py", "date": "2020-03-19 23:38:13", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  res=''\n  if s[debut] not in s:\n    res=''\n  elif (debut+longueur)>len(s):\n    for i in range(debut,len(s)-debut):\n      res=res+s[i]\n  return res\n    ", "user": "userdId_40", "attemptID": 4769, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-80.80447", "embeddingY": "11.063303"},{"extension": "py", "date": "2020-04-17 00:40:42", "correct": "0", "upload": "def meilleurScoreJoueur(scores,joueurs,nom):\n    return None", "user": "userdId_14", "attemptID": 4770, "exercise": "c96fadc94086276f98451a798b3bb730", "exercise_name": "meilleurScoreJoueur", "embeddingX": "-88.2457", "embeddingY": "3.4116578"},{"extension": "py", "date": "2020-04-06 22:27:20", "correct": "0", "upload": "def motPalindrome(mot):\n    if len(mot)==0:\n      res=True\n    else:\n      res=True\n      i=0\n      while i<len(mot) and res==True:\n        if mot[i]==mot[-i]:\n          res=True\n          i+=1\n        else:\n          res=False\n    return res\n", "user": "userdId_11", "attemptID": 4771, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "26.61182", "embeddingY": "43.986355"},{"extension": "py", "date": "2020-03-17 08:57:38", "correct": "0", "upload": "def nombrePair(n):\n  if n in (0,2,4,6,8):\n    res=True\n  else :\n    res=False\n    return res", "user": "userdId_24", "attemptID": 4772, "exercise": "3001254263845e9a478696f81a704d33", "exercise_name": "nombrePair", "embeddingX": "45.7918", "embeddingY": "-13.941242"},{"extension": "py", "date": "2020-04-07 03:30:02", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=True\n  i=1\n  while i<len(liste):\n    if liste[i]!=a*liste[i-1]+b:\n      res=False\n    i+=1\n  return res\ndef suiteAriGeo(liste):\n  i=1\n  res=True\n  while i<len(liste):\n    if liste[i-1]==0:\n      i+=1\n    else:\n      if liste[i]!=liste[i-1]:\n        a=liste[i]//liste[i-1]\n        b=liste[i]-a*liste[i-1]\n        res=verifSuiteAriGeo(liste,a,b)\n      else:\n        res=False\n    i+=1 \n  return res", "user": "userdId_27", "attemptID": 4773, "exercise": "4c9665daf155b115fe13218141fa1aff", "exercise_name": "suiteAriGeo", "embeddingX": "14.123727", "embeddingY": "79.00731"},{"extension": "py", "date": "2020-03-10 04:32:27", "correct": "0", "upload": "def nbSyllabes(mot):\n  if mot=='':\n    res=0\n  else:\n    res=0\n    Voyelles=['a','e','i','o','u','y']\n    ch=\"\"\n    for i in range(1,len(mot)):\n      if mot[i-1] not in Voyelles and mot[i] in Voyelles:\n        res=res+1\n      else:\n        ch=mot[i]\n    if mot[0] in Voyelles :\n      res=res+1\n    elif mot[-1] not in Voyelles:\n      res=res-1\n    else:\n      if res==0:\n        res=res+1\n  return res", "user": "userdId_15", "attemptID": 4774, "exercise": "1c86bec0f4df503e23db53994f3d2991", "exercise_name": "nbSyllabes", "embeddingX": "-19.695444", "embeddingY": "-72.731926"},{"extension": "py", "date": "2020-03-12 07:52:42", "correct": "0", "upload": "def semestreValide(ue1,ue2):\n  if ue1==10 and ue2==10:\n    return True\n  if ue1>ue2 and ue1-ue2>=0:\n    return True\n  if ue1<ue2 and ue2-ue1>=0:\n    return True\n  else:\n    return False", "user": "userdId_1", "attemptID": 4775, "exercise": "70ae7ad6cf504e0fa8cedebd8e8a825f", "exercise_name": "semestreValide", "embeddingX": "75.28163", "embeddingY": "-5.1606803"},{"extension": "py", "date": "2020-04-13 21:25:44", "correct": "0", "upload": "def suiteAri(liste):\n  res=True\n  if len(liste)>1:\n    r=liste[1]-liste[0]\n    res= verifSuiteAriGeo(liste,1,r)\n  return res", "user": "userdId_8", "attemptID": 4776, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "-5.609419", "embeddingY": "-73.17585"},{"extension": "py", "date": "2020-04-11 04:55:19", "correct": "1", "upload": "def compteChiffre(chiffre,nombre):\n  if chiffre==0 and nombre==0:\n    res=1\n  else:\n    res=0\n    x=nombre\n    while x!=0:\n      if x%10==chiffre:\n        res+=1\n      x=x//10\n  return res", "user": "userdId_16", "attemptID": 4777, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "13.937502", "embeddingY": "13.012724"},{"extension": "py", "date": "2020-03-09 03:12:24", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut1>fin2:\n    res=False\n  if debut2>fin1:\n    res=False\n  else:\n    res=True\n  return res", "user": "userdId_12", "attemptID": 4778, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "64.862946", "embeddingY": "-21.100473"},{"extension": "py", "date": "2020-03-06 00:25:27", "correct": "0", "upload": "def ecart(liste):\n    if liste==[]:\n      return None\n    elif len(liste)==1:\n      return 0\n    else:\n      res=liste[0]\n      for i in range(1,len(liste)):\n        max=0\n        if res>liste[i]:\n          max=liste[i]\n      for i in range(1,len(liste)):\n        min=0\n        if res<liste[i]:\n          min=liste[i]\n      ecart=max-min\n      return ecart\n          \n      \n      \n      ", "user": "userdId_2", "attemptID": 4779, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "10.425944", "embeddingY": "-84.56454"},{"extension": "py", "date": "2020-04-12 11:23:45", "correct": "0", "upload": "def phrasePalindrome(phrase):\n    if len(phrase)==0:\n      res=True\n    else:\n      res=True\n      i=0\n      x=''\n      while i<len(phrase)//2 and res:\n        if phrase[i]==x:\n          i+=2\n        else:\n          if phrase[i]!=phrase[-(i+1)]:\n            res=False\n        i+=1\n    return res", "user": "userdId_11", "attemptID": 4780, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "33.96685", "embeddingY": "35.413635"},{"extension": "py", "date": "2020-03-15 01:40:32", "correct": "0", "upload": "def qualifJO(sexe,record,nbvictoires,champion):\n  if champion==True:\n    res=True\n  elif champion==False:\n    if sexe==M and record<12.0 and nbvictoires>=3:\n      res=True\n    elif sexe==F and record<15.0 and nbvictoires>=3:\n      res=True\n    else:\n      res=False\n  return res", "user": "userdId_8", "attemptID": 4781, "exercise": "78ec7738f3a7f3553d4a5c653534c32d", "exercise_name": "qualifJO", "embeddingX": "61.326286", "embeddingY": "-11.427286"},{"extension": "py", "date": "2020-03-12 21:54:28", "correct": "0", "upload": "def minimum(liste):\n  res=l[0]\n  for elem in liste:\n    if res>elem:\n      res=elem\n  return res", "user": "userdId_23", "attemptID": 4782, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "31.122633", "embeddingY": "-48.152138"},{"extension": "py", "date": "2020-03-23 22:15:01", "correct": "0", "upload": "def quatrePlus100(liste):\n  res=[]\n  for i in range(len(liste)) :\n      if liste[i]>100 :\n          res=res+liste[i]\n  return res\n\n", "user": "userdId_28", "attemptID": 4783, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-7.81798", "embeddingY": "-62.80713"},{"extension": "py", "date": "2020-04-06 22:21:43", "correct": "0", "upload": "def sousChaine(s1,s2):\n  i=0\n  j=0\n  cpt=0\n  while i<len(s2) and j<len(s1): \n    if s2[i]==s1[j]:\n      cpt+=1 \n      j+=1\n    else:\n      cpt=0\n    i+=1\n  return cpt==len(s1)", "user": "userdId_12", "attemptID": 4784, "exercise": "a7cdd094daa2f0bfccc7a4ec419f7243", "exercise_name": "sousChaine", "embeddingX": "-7.402532", "embeddingY": "61.47183"},{"extension": "py", "date": "2020-03-06 23:53:24", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut1>=debut2 or fin1<=fin2 and fin1>=debut2:\n      res=True\n  else:\n    res=False\n  return res", "user": "userdId_8", "attemptID": 4785, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "53.41814", "embeddingY": "-23.97687"},{"extension": "py", "date": "2020-04-16 22:13:30", "correct": "0", "upload": "def polynome(a,b,c):\n  determinant = b*b -4*a*c\n  if determinant<0:\n    print(\"pas de solution\")\n  elif determinant==0:\n    x=-b/(2*a)\n  else:\n    x1=(-b-determinant**0,5)/(2*a)\n    x2=(-b+determinant**0,5)/(2*a)", "user": "userdId_21", "attemptID": 4786, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-51.557404", "embeddingY": "9.993152"},{"extension": "py", "date": "2020-03-31 04:08:05", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n  cpt=0\n  i=0\n  while i<len(l) and cpt<n:\n    if l[i]==x:\n      cpt=cpt+1\n    i=i+1\n  if cpt==0:\n    res=None\n  else:\n    res=l[l[cpt]]\n  return res", "user": "userdId_12", "attemptID": 4787, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-6.1269226", "embeddingY": "77.263954"},{"extension": "py", "date": "2020-03-03 06:41:08", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1<annee2:\n    res=-1\n  elif annee1>annee2:\n    res=1\n  else:\n    if annee1==annee2:\n      res=0\n    else:\n      if mois1==mois2:\n        res=0\n      else:\n        if jour1==jour2:\n          res=0\n  return res", "user": "userdId_30", "attemptID": 4788, "exercise": "af7c1467ef9f7684d9ff58734067ae98", "exercise_name": "compareDates", "embeddingX": "78.89159", "embeddingY": "-36.154835"},{"extension": "py", "date": "2020-04-12 08:10:56", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n    cpt=0\n    x=nombre%10\n    decomp=nombre\n    while decomp!=0 and x:\n      if x==chiffre:\n        cpt+=1\n        decomp=decomp//10\n        x=decomp%10\n      else:\n        decomp=decomp//10\n        x=decomp%10\n    if x==0:\n      cpt=1\n    return cpt", "user": "userdId_11", "attemptID": 4789, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "8.520261", "embeddingY": "14.623502"},{"extension": "py", "date": "2020-04-07 19:52:52", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  for i in range(nombre):\n    if chiffre==nombre[i]:\n      cpt=cpt+1\n  return cpt", "user": "userdId_3", "attemptID": 4790, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-21.198559", "embeddingY": "-31.026735"},{"extension": "py", "date": "2020-03-31 07:04:20", "correct": "0", "upload": "def nombreSymetrique(nombre):\n  res=[]\n  if nombre==0:\n    res=[0]\n  while nombre!=0:\n    res.append(nombre%10)\n    nombre=nombre//10\n  return res\n  ok=True\n  i=0\n  while i<len(res)//2 and ok:\n    if res[i]!=res[-i-1]:\n      ok=False\n    i+=1\n  return ok", "user": "userdId_8", "attemptID": 4791, "exercise": "fae4d6a34289cf5bf06f9d6d17e8547e", "exercise_name": "nombreSymetrique", "embeddingX": "42.426132", "embeddingY": "14.390797"},{"extension": "py", "date": "2020-03-19 23:45:33", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  res=''\n  if debut<0 or debut>len(s):\n    res=''\n  elif (debut+longueur)>len(s):\n    for i in range(debut,len(s)-debut):\n      res=res+s[i]\n  else:\n    for i in range (debut,longueur):\n      res=res+s[i]\n  return res\n    ", "user": "userdId_40", "attemptID": 4792, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-71.18615", "embeddingY": "14.922186"},{"extension": "py", "date": "2020-03-22 12:09:58", "correct": "0", "upload": "def maximum(liste):\n  max=liste[0]\n  for i in range(0,len(liste)): \n    if liste[i]>max:\n      max=l[i]\t\n  return max", "user": "userdId_21", "attemptID": 4793, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "9.208624", "embeddingY": "-71.403564"},{"extension": "py", "date": "2020-03-19 23:38:19", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  res=\"\"\n  if longueur>=len(s):\n    longueur=longueur-(longueur-len(s))\n  for i in range(debut,longueur):\n    res=res+s[i]\n  return res\n", "user": "userdId_13", "attemptID": 4794, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-72.9273", "embeddingY": "19.526546"},{"extension": "py", "date": "2020-04-07 11:12:25", "correct": "0", "upload": "def suiteGeo(liste):\n  ok=True\n  i=0\n  if len(liste)==0 and len(liste)==1:\n    ok=True\n  if liste[i]==0:\n    ok=False\n  while i<len(liste)-1 and ok:\n    if liste[i]!=0:\n      q=liste[1]/liste[0]\n    if liste[i]!=0:\n      if liste[i+1]/liste[i]!=q:\n        ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 4795, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "28.741724", "embeddingY": "62.506634"},{"extension": "py", "date": "2020-03-15 03:11:33", "correct": "0", "upload": "def doubleLettre(mot):\n  l1=\" \"\n  for l2 in mot:\n    if l1==\" \" and l2!=\" \":\n      res=True\n  else:\n    res=False\n    l2=l1\n  return res", "user": "userdId_8", "attemptID": 4796, "exercise": "00da9cf1fa2b468d915724499459ed8f", "exercise_name": "doubleLettre", "embeddingX": "20.075853", "embeddingY": "-6.046869"},{"extension": "py", "date": "2020-03-10 03:13:17", "correct": "0", "upload": "def jourNuit(heure):\n  if heure<0 or heure>24:\n    res=\"l'heure saisie est invalide\"\n  else:#l'heure est valide\n    if heure<5 or heure>=21:\n      res=\"On est la nuit\"\n    elif heure<12:\n      res=\"On est le matin\"\n    elif heure <17:\n      res=\"On est l'apr\u00e8s-midi\"\n    else:\n      res=\"On est le soir\"\n    if heure<6 or heure>=18:\n      res=res+\"et il fait nuit\"\n    else:\n      res=res+\"et il fait jour\"\n  return res", "user": "userdId_8", "attemptID": 4797, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "72.410675", "embeddingY": "14.995074"},{"extension": "py", "date": "2020-03-03 05:28:26", "correct": "0", "upload": "def nbVoyelles(mot):\n  res=0\n  for elem in mot:\n    if elem in 'aeiouy':\n      res= res+1\n    return res", "user": "userdId_7", "attemptID": 4798, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "13.92581", "embeddingY": "-26.302155"},{"extension": "py", "date": "2020-03-06 00:33:45", "correct": "1", "upload": "def ecart(liste):\n    if len(liste) == 0:\n      res = None\n    else:\n      res = max(liste) - min(liste)\n    return res", "user": "userdId_29", "attemptID": 4799, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "11.389519", "embeddingY": "-45.302563"},{"extension": "py", "date": "2020-05-04 22:42:29", "correct": "0", "upload": "def prononcable(mot):\n  res=True\n  x=\"aeiouy\"\n  i=0\n  while i<len(mot) and not x:\n    cpt+=1\n    i+=1\n  if cpt>3:\n    res=False\n  return res", "user": "userdId_8", "attemptID": 4800, "exercise": "6318b210c201fba050d60bc0913cb7ef", "exercise_name": "prononcable", "embeddingX": "4.3133907", "embeddingY": "50.489456"},{"extension": "py", "date": "2020-03-30 22:51:01", "correct": "1", "upload": "def listeSymetrique(l):\n  i=0\n  n=0\n  while i<len(l) and n==0:\n    if l[i]==l[len(l)-i-1]:\n      i=i+1\n      n=0\n    else:\n      n=1\n  if n==0:\n    res=True\n  else:\n    res=False\n  return res\n", "user": "userdId_19", "attemptID": 4801, "exercise": "8eb27aeda471a467e2223abebeca886e", "exercise_name": "listeSymetrique", "embeddingX": "24.56961", "embeddingY": "56.957123"},{"extension": "py", "date": "2020-04-14 04:48:29", "correct": "0", "upload": "def indiceInsertion(sc,scores):\n  i=0\n  j=-1\n  res=None\n  while i<len(scores) and j<len(scores) and res==None:\n    if sc>=scores[i]:\n      res=i\n    elif sc<scores[-1]:\n      res=scores[j]\n    i=i+1\n  return res", "user": "userdId_7", "attemptID": 4802, "exercise": "f8a820b2bd54d18d36716e3d703858f7", "exercise_name": "indiceInsertion", "embeddingX": "-22.918259", "embeddingY": "70.57645"},{"extension": "py", "date": "2020-05-04 22:07:02", "correct": "0", "upload": "def ecart(liste):\n  if liste==[]:\n    res=None\n  else:\n    max0=liste[0]\n    min0=liste[0]\n    for i in range(1,len(liste)):\n      if max0<liste[i]:\n        max0=lite[i]\n      if min0>liste[i]:\n        min0=liste[i]\n    res=max0-min0\n  return res", "user": "userdId_26", "attemptID": 4803, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "0.6488922", "embeddingY": "-85.36897"},{"extension": "py", "date": "2020-03-12 08:38:32", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    return 0\n  cpt=0\n  for lettre in mot:\n    if lettre in mot=='aeiouy':\n      cpt=cpt+1\n  return cpt\n  ", "user": "userdId_1", "attemptID": 4804, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "7.551226", "embeddingY": "-32.06502"},{"extension": "py", "date": "2020-03-16 04:34:04", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n    if lettre=='' or mot=='':\n      res=None\n    else:\n      res=None\n      for c in mot:\n        if lettre==c:\n          res=range(len(liste))\n    return res", "user": "userdId_18", "attemptID": 4805, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-14.431573", "embeddingY": "-38.425484"},{"extension": "py", "date": "2020-03-14 00:17:34", "correct": "0", "upload": "def minimum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=liste[0]\n    for i in liste[i]:\n      if liste[i]<res:\n        res=liste[i]\n  return res", "user": "userdId_14", "attemptID": 4806, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "15.788228", "embeddingY": "-54.25815"},{"extension": "py", "date": "2020-04-07 19:52:29", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  for i in nombre:\n    if chiffre==nombre[i]:\n      cpt=cpt+1\n  return cpt", "user": "userdId_3", "attemptID": 4807, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-36.378", "embeddingY": "-13.130997"},{"extension": "py", "date": "2020-04-12 03:55:43", "correct": "0", "upload": "def elemAri(n,u0,r):\n    return u0+nr", "user": "userdId_8", "attemptID": 4808, "exercise": "f239498950e974e29e01472749d9a09d", "exercise_name": "elemAri", "embeddingX": "-34.11311", "embeddingY": "17.609943"},{"extension": "py", "date": "2020-03-13 00:48:09", "correct": "1", "upload": "def sommeNPremiersEntiersPairs(n):\n  res=0\n  for i in range(2,n+1,2):\n      res=res+i\n    \n  return res", "user": "userdId_38", "attemptID": 4809, "exercise": "3030dc079e6607c253e89e8ef4784b74", "exercise_name": "sommeNPremiersEntiersPairs", "embeddingX": "-18.442808", "embeddingY": "12.461787"},{"extension": "py", "date": "2020-04-12 07:53:27", "correct": "0", "upload": "def suiteAriGeo(liste):\n  i=0\n  a=0\n  b=0\n  while i<len(liste)-1:\n    if liste[i+1]==liste[i]+b:\n      a=1\n    if liste[0]!=0:\n      if liste[i+1]==liste[1]/liste[0]:\n        a=liste[1]/liste[0]\n        b=0\n    i=i+1\n  ok=True\n  i=0\n  if len(liste)==0 or len(liste)==1 or len(liste)==2:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=a*liste[i]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 4810, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "35.59444", "embeddingY": "80.40694"},{"extension": "py", "date": "2020-03-03 05:32:34", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    for i in range(len(liste)):\n      res<liste[i]\n      res=liste[i]\n  return res", "user": "userdId_8", "attemptID": 4811, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "23.822987", "embeddingY": "-64.0724"},{"extension": "py", "date": "2020-03-23 01:38:09", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n    res=''\n    fin=debut+longueur\n    if fin>len(s):\n      fin=len(s)\n    else:\n      for i in range(debut,fin):\n        res=res+s[i]\n    return res", "user": "userdId_11", "attemptID": 4812, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-76.846016", "embeddingY": "23.40647"},{"extension": "py", "date": "2020-04-12 06:43:21", "correct": "0", "upload": "def phrasePalindrome(phrase):\n    if len(phrase)==0:\n      res=True\n    else:\n      res=True\n      i=0\n      while i<len(phrase)//2 and res:\n        if phrase[i]!=phrase[-(i+1)] and phrase[i]=='':\n          res=False\n        i+=1\n    return res", "user": "userdId_11", "attemptID": 4813, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "28.00148", "embeddingY": "35.690914"},{"extension": "py", "date": "2020-03-17 00:02:06", "correct": "1", "upload": "def sommeNPremiersEntiersPairs(n):\n  res=0\n  for i in range(0,n+1,1):\n    if i%2==0:\n      res=res+i\n  return res", "user": "userdId_12", "attemptID": 4814, "exercise": "3030dc079e6607c253e89e8ef4784b74", "exercise_name": "sommeNPremiersEntiersPairs", "embeddingX": "29.895943", "embeddingY": "-11.596241"},{"extension": "py", "date": "2020-04-06 15:18:09", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  i=0\n  for i in range(nombre):\n    if nombre[i]==chiffre:\n      cpt=cpt+1\n    i=i+1\n  return cpt", "user": "userdId_3", "attemptID": 4815, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-20.577557", "embeddingY": "-30.944412"},{"extension": "py", "date": "2020-04-12 07:03:09", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  if liste==[]:\n    res=True\n  c=[]\n  res=False\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n    c=[liste[0]]*2+c\n  return c", "user": "userdId_8", "attemptID": 4816, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-67.17697", "embeddingY": "19.093088"},{"extension": "py", "date": "2020-03-17 05:28:12", "correct": "0", "upload": "def distribution(liste,n):\n  cpt=[0]*4\n  for elem in liste:\n    cpt=cpt[elem]+1\n  return cpt ", "user": "userdId_35", "attemptID": 4817, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-59.570477", "embeddingY": "-9.23618"},{"extension": "py", "date": "2020-04-13 21:18:51", "correct": "0", "upload": "def suiteAri(liste):\n  res=True\n  if len(liste)>1:\n    r=liste[1]-liste[0]\n    res=verifSuiteAriGeo(liste,1,r)\n  return res", "user": "userdId_8", "attemptID": 4818, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "-6.421454", "embeddingY": "-74.14224"},{"extension": "py", "date": "2020-03-17 06:43:20", "correct": "0", "upload": "def permutationListe(liste,permutation):\n  res=liste[n+1]\n  for elem in liste:\n    res[n]=liste[i]\n  return res", "user": "userdId_25", "attemptID": 4819, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-48.925766", "embeddingY": "-10.95173"},{"extension": "py", "date": "2020-03-19 05:45:35", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if jour1<jour2 and mois1<mois2 and annee1<annee2:\n    res=-1\n  elif jour1==jour2 and mois1==mois2 and annee1==annee2:\n      res=0\n  else:\n    res=1\n  return res", "user": "userdId_34", "attemptID": 4820, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "79.55229", "embeddingY": "-24.78446"},{"extension": "py", "date": "2020-03-24 06:05:51", "correct": "0", "upload": "def compare(chaine1,chaine2):\n    if chaine1=='':\n      res=-1\n    elif chaine2=='':\n      res=1\n    else:\n      res=0\n      i=0\n      while i<len(chaine1) and i<len(chaine2) and res==0:\n        if chaine1[i]<chaine2[i]:\n          res=-1\n        elif chaine1[i]>chaine2[i]:\n          res=1\n        i=i+1\n      mmlttr=0\n      if res==0:\n        i=0\n        if len(chaine1)>len(chaine2):\n          for i in range(len(chaine1)):\n            if chaine1[i]==chaine2[i]:\n              mmlttr=mmlttr+1\n        else:\n          if len(chaine1)<len(chaine2):\n            for i in range(len(chaine2)):\n              if chaine1[i]==chaine2[i]:\n                mmlttr=mmlttr+1\n      if len(chaine1)>len(chaine2):\n        if len(chaine2)==mmlttr:\n          res=1\n      elif len(chaine1)<len(chaine2):\n        if len(chaine1)==mmlttr:\n          res=-1\n    return res", "user": "userdId_18", "attemptID": 4821, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-29.465656", "embeddingY": "62.789223"},{"extension": "py", "date": "2020-03-17 06:24:47", "correct": "0", "upload": "def permutationListe(liste,permutation):\n  res=[]*(len(permutation))\n  for i in range(len(liste)):\n    permutation[i]=liste[i] \n  return res", "user": "userdId_35", "attemptID": 4822, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-52.13594", "embeddingY": "-31.759651"},{"extension": "py", "date": "2020-04-07 03:49:11", "correct": "0", "upload": "def motPalindrome(mot):\n  res=False\n  if mot(0)==mot(-1):\n    res=True\n  return res", "user": "userdId_30", "attemptID": 4823, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "-47.620014", "embeddingY": "-0.43423986"},{"extension": "py", "date": "2020-06-02 22:37:11", "correct": "0", "upload": "def somme(liste):\n  res=0\n  for elem in liste:\n    res+=liste[elem]\n  return res", "user": "userdId_12", "attemptID": 4824, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-66.49024", "embeddingY": "-12.335715"},{"extension": "py", "date": "2020-03-10 03:20:20", "correct": "1", "upload": "def jourNuit(heure):\n    if heure<0 or heure>24:\n      res=\"l'heure saisie est invalide\"\n    else:\n      if heure<5 or heure>=21:\n        res=\"on est la nuit\"\n      elif heure<12:\n        res=\"on est le matin\"\n      elif heure<17:\n        res=\"on est l'apr\u00e8s-midi\"\n      else:\n        res=\"on est le soir\"\n      if heure<6 or heure>=18:\n        res=res+\" et il fait nuit\"\n      else:\n        res=res+\" et il fait jour\"\n    return res", "user": "userdId_9", "attemptID": 4825, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "70.865326", "embeddingY": "14.982117"},{"extension": "py", "date": "2020-03-12 08:30:32", "correct": "0", "upload": "def nombrePair(n):\n    res=0\n    if n in (0,2,4,6,8) :\n      res=true\n    else :\n      res=false\n    return res", "user": "userdId_24", "attemptID": 4826, "exercise": "3001254263845e9a478696f81a704d33", "exercise_name": "nombrePair", "embeddingX": "9.100671", "embeddingY": "-16.246445"},{"extension": "py", "date": "2020-03-06 00:38:48", "correct": "0", "upload": "def moyenne(liste):\n  res=0\n  cpt=0\n  if len(liste)==0:\n    res=0\n  else:\n     for i in liste:\n       res=res+i\n       cpt=cpt+1\n  return res/cpt", "user": "userdId_14", "attemptID": 4827, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-4.549679", "embeddingY": "-8.475245"},{"extension": "py", "date": "2020-03-06 00:01:18", "correct": "0", "upload": "def nbVoyelles(mot):\n    res=0\n    for elem in mot :\n       res=res+elem\n    return res", "user": "userdId_24", "attemptID": 4828, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-27.017212", "embeddingY": "5.5084934"},{"extension": "py", "date": "2020-03-31 07:53:58", "correct": "1", "upload": "def nbOccurrencesLettre(lettre,mot):\n    if len(mot)==0:\n      res=0\n    else:\n      res=0\n      for i in range(len(mot)):\n        if mot[i]==lettre:\n          res+=1\n    return res", "user": "userdId_11", "attemptID": 4829, "exercise": "2864c9e5861229d2ff32570f6bc944fb", "exercise_name": "nbOccurrencesLettre", "embeddingX": "-21.012127", "embeddingY": "-38.82046"},{"extension": "py", "date": "2020-03-05 22:16:26", "correct": "0", "upload": "def maximum(liste):\n    max = 0\n    for i in range(0,len(liste)):\n      if liste[i] > max:\n        max = liste[i]\n    return max", "user": "userdId_29", "attemptID": 4830, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "10.944535", "embeddingY": "-72.646126"},{"extension": "py", "date": "2020-04-07 23:43:11", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  ok=False\n  i=0\n  while i<len(phrase)//2 and not ok:\n    if phrase[i]==\" \" and phrase[-i]==\" \":\n      i+=1\n    elif phrase[i]!=phrase[-i-1]:\n      ok=False\n      i+=1\n    else:\n      ok=True\n      i+=1\n  if phrase==\"\":\n    ok=True\n  return ok", "user": "userdId_13", "attemptID": 4831, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "27.297527", "embeddingY": "37.82146"},{"extension": "py", "date": "2020-03-13 00:56:40", "correct": "0", "upload": "def doubleLettre(mot):\n  res=False \n  c1=''\n  for c2 in mot:\n    c1=c2\n    if c1=='' and c2=='':\n      res=True\n  return res\n      \n    \n\t", "user": "userdId_2", "attemptID": 4832, "exercise": "00da9cf1fa2b468d915724499459ed8f", "exercise_name": "doubleLettre", "embeddingX": "18.77807", "embeddingY": "-6.3708425"},{"extension": "py", "date": "2020-04-12 10:32:05", "correct": "0", "upload": "def phrasePalindrome(phrase):\n    if len(phrase)==0:\n      res=True\n    else:\n      res=True\n      i=0\n      x=''\n      while i<len(phrase)//2 and res:\n        if phrase[i]!=phrase[-(i+1)]:\n          res=False\n          i+=1\n        if (phrase[i]==x)!=phrase[-(i+1)]:\n          res=False\n        i+=1\n    return res", "user": "userdId_11", "attemptID": 4833, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "33.213627", "embeddingY": "35.329075"},{"extension": "py", "date": "2020-04-12 10:45:55", "correct": "0", "upload": "def phrasePalindrome(phrase):\n    if len(phrase)==0:\n      res=True\n    else:\n      res=True\n      i=0\n      x=''\n      while i<len(phrase)//2 and res:\n        if phrase[i]!=phrase[-(i+1)]:\n          res=False\n          i+=1\n        if phrase[i]==x:\n          i+=1\n    return res", "user": "userdId_11", "attemptID": 4834, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "31.437029", "embeddingY": "34.1315"},{"extension": "py", "date": "2020-03-20 00:15:00", "correct": "0", "upload": "def permutationChaine(s):\n  res=''\n  if len(s)<1:\n  \tres=' '\n  else:\n    for i in range(0,len(s)-1,2):\n      res=res+s[i+1]\n      res=res+s[i]\n  return res", "user": "userdId_40", "attemptID": 4835, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-39.84826", "embeddingY": "-55.283688"},{"extension": "py", "date": "2020-03-13 00:54:25", "correct": "0", "upload": "def sommeNPremiersEntiers(n):\n  res=0\n  for elem in (1,len(n)) :\n    res=res+n\n  return res", "user": "userdId_1", "attemptID": 4836, "exercise": "c315a540cf0bfb0182dc114c6f0eafd1", "exercise_name": "sommeNPremiersEntiers", "embeddingX": "-34.558815", "embeddingY": "-12.060154"},{"extension": "py", "date": "2020-03-13 00:54:22", "correct": "0", "upload": "def doubleLettre(mot):\n  res=False \n  c1=''\n  for c2 in param:\n    if c1=='' and c2!='':\n      c1=c2\n    else:\n      res=True\n  return res\n      \n    \n\t", "user": "userdId_2", "attemptID": 4837, "exercise": "00da9cf1fa2b468d915724499459ed8f", "exercise_name": "doubleLettre", "embeddingX": "-46.16339", "embeddingY": "-8.243855"},{"extension": "py", "date": "2020-05-11 01:29:52", "correct": "1", "upload": "def meilleurClassementJoueur(scores,joueurs,nom):\n  if nom not in joueurs:\n    return -1\n  else:\n    for i in range(len(joueurs)):\n      if joueurs[i]==nom:\n        return i+1\n   ", "user": "userdId_12", "attemptID": 4838, "exercise": "be6ce0a06c5d396190024c7c681da95d", "exercise_name": "meilleurClassementJoueur", "embeddingX": "-25.313643", "embeddingY": "-38.112286"},{"extension": "py", "date": "2020-04-13 21:16:26", "correct": "0", "upload": "def suiteAri(liste):\n  res=True\n  if len(liste)>1:\n    r=liste[1]-liste[0]\n    res=verifSuiteAriGeo(liste,1,r)\n  return res", "user": "userdId_8", "attemptID": 4839, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "-6.4108396", "embeddingY": "-74.12768"},{"extension": "py", "date": "2020-03-12 08:48:47", "correct": "0", "upload": "def maximum(liste):\n    for i in liste :\n      res= liste[0]\n    if res<i in liste :\n      res=liste(i)\n    return res", "user": "userdId_24", "attemptID": 4840, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "44.47944", "embeddingY": "-57.76546"},{"extension": "py", "date": "2020-03-09 21:51:58", "correct": "0", "upload": "def nombrePair(n):\n  if n%2:\n    res=True\n  else:\n    res=False\n  return res", "user": "userdId_12", "attemptID": 4841, "exercise": "3001254263845e9a478696f81a704d33", "exercise_name": "nombrePair", "embeddingX": "44.32426", "embeddingY": "-5.6189127"},{"extension": "py", "date": "2020-04-08 00:45:01", "correct": "0", "upload": "def elemAri(n,u0,r):\n  i=0\n  res=0\n  while i!=n:\n    res=res+u0+r\n    i+=1\n  return res", "user": "userdId_13", "attemptID": 4842, "exercise": "f239498950e974e29e01472749d9a09d", "exercise_name": "elemAri", "embeddingX": "-7.209918", "embeddingY": "23.34663"},{"extension": "py", "date": "2020-03-23 01:22:45", "correct": "1", "upload": "def nbOccurrencesLettre(lettre,mot):\n    res=0\n    for l in mot:\n      if l==lettre:\n        res=res+1\n    return res", "user": "userdId_10", "attemptID": 4843, "exercise": "2864c9e5861229d2ff32570f6bc944fb", "exercise_name": "nbOccurrencesLettre", "embeddingX": "-12.29411", "embeddingY": "-28.003479"},{"extension": "py", "date": "2020-03-23 02:07:41", "correct": "0", "upload": "def nbOccurrencesLettre(lettre,mot):\n    res=0\n    l=lettre\n    for l in range (len(mot)):\n      res=res+1\n    return res", "user": "userdId_24", "attemptID": 4844, "exercise": "2864c9e5861229d2ff32570f6bc944fb", "exercise_name": "nbOccurrencesLettre", "embeddingX": "-43.43442", "embeddingY": "-29.118628"},{"extension": "py", "date": "2020-03-16 04:25:58", "correct": "1", "upload": "def ecart(liste):\n    if liste==[]:\n      res=None\n    else:\n      x=min(liste)\n      y=max(liste)\n      res=abs(x-y)\n    return res", "user": "userdId_18", "attemptID": 4845, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "11.645701", "embeddingY": "-43.788776"},{"extension": "py", "date": "2020-03-06 00:00:05", "correct": "0", "upload": "def maximum(liste):\n  res=0\n  for i in liste:\n    res=res+i\n    if res<i:\n      res=i\n    \n  return res", "user": "userdId_5", "attemptID": 4846, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "42.389153", "embeddingY": "-53.888294"},{"extension": "py", "date": "2020-04-10 01:03:28", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  str(nombre)\n  for i in nombre:\n    if chiffre==nombre[i]:\n      cpt=cpt+1\n  return cpt", "user": "userdId_3", "attemptID": 4847, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-34.413124", "embeddingY": "-13.60033"},{"extension": "py", "date": "2020-03-27 05:45:56", "correct": "0", "upload": "def quatrePlus100(liste):\n  i=0\n  while i>len(liste):\n    if l[i]>100:\n      res.append(l[i])\n      i=i+1\n  if len(liste)<4:\n    res=i+1\n  return i", "user": "userdId_20", "attemptID": 4848, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-21.401064", "embeddingY": "33.78111"},{"extension": "py", "date": "2020-03-12 22:12:44", "correct": "0", "upload": "def moyenne(liste):\n  if len (liste)==0:\n    res=None\n  else:\n    res=0\n    cpt=0\n    for elem in liste:\n      res=res+elem\n      cpt=cpt+elem\n    res=elem%cpt\n  return res ", "user": "userdId_20", "attemptID": 4849, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-4.695234", "embeddingY": "-4.0872865"},{"extension": "py", "date": "2020-04-14 04:15:38", "correct": "1", "upload": "def nbOccurrencesJoueur(joueurs,nom):\n  cpt=0\n  for i in range(len(joueurs)):\n    if nom==joueurs[i]:\n      cpt+=1\n  return cpt", "user": "userdId_27", "attemptID": 4850, "exercise": "00ee5faf82e54951fbdb2ba2656f7ae7", "exercise_name": "nbOccurrencesJoueur", "embeddingX": "-20.909412", "embeddingY": "-38.60011"},{"extension": "py", "date": "2020-03-17 05:48:18", "correct": "0", "upload": "def maximum(liste):\n    if len (liste)==0:\n      res=none\n    else:\n         res=liste[0]\n         for elem in liste:\n             res=elem\n          \n    return res", "user": "userdId_22", "attemptID": 4851, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-3.0486522", "embeddingY": "-36.092384"},{"extension": "py", "date": "2020-03-14 04:04:53", "correct": "0", "upload": "def bissextile(annee):\n  if annee%4==0 and annee%400==0:\n    res=True\n  else:\n    res=False\n  return res", "user": "userdId_14", "attemptID": 4852, "exercise": "a7d37636649c0ada991520788deeb2d0", "exercise_name": "bissextile", "embeddingX": "47.11385", "embeddingY": "-1.6820736"},{"extension": "py", "date": "2020-03-24 05:04:24", "correct": "0", "upload": "def fusion(liste1,liste2):\n    if liste1==[]:\n      res=liste2\n    elif liste2==[]:\n      res=liste1\n    else:\n      res=[]\n      i=0\n      while i<len(liste1) and i<len(liste2):\n        res=res+[liste1[i]]+[liste2[i]]\n      if len(liste1)>len(liste2):\n        while i<len(liste1):\n          res=res+[liste1[i]]\n          i=i+1\n      elif len(liste1)<len(liste2):\n        while i<len(liste2):\n          res=res+[liste2[i]]\n          i=i+1\n    res.sort()\n    return res", "user": "userdId_18", "attemptID": 4853, "exercise": "6613efb6c873b142dc2b6040c14eb616", "exercise_name": "fusion", "embeddingX": "-25.14483", "embeddingY": "51.10744"},{"extension": "py", "date": "2020-04-05 10:01:13", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n\treturn list(str(nombre)).count(str(2))", "user": "userdId_4", "attemptID": 4854, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-61.20298", "embeddingY": "9.845449"},{"extension": "py", "date": "2020-03-20 00:24:09", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  res=\"\"\n  if debut+longueur>len(s):\n    fin=len(s)\n  for i in range(debut,debut+longueur):\n    res=res+s[i]\n  else:\n    fin=debut+longueur\n  return res\n    ", "user": "userdId_34", "attemptID": 4855, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-75.9113", "embeddingY": "20.460697"},{"extension": "py", "date": "2020-03-13 00:45:58", "correct": "1", "upload": "def sommeNbPairs(liste):\n  somme=0\n  if liste==[]:\n    somme=0\n  for elem in liste:\n    if elem%2==0:\n      somme=somme+elem\n  return somme", "user": "userdId_13", "attemptID": 4856, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "30.74296", "embeddingY": "-18.612656"},{"extension": "py", "date": "2020-04-03 01:04:32", "correct": "0", "upload": "def doubleChiffre(nombre):\n  res=0\n  x=nombre%10\n  while nombre>=10:\n    y=x//10\n    if x==y:\n      res=True\n    else:\n      res=False\n  return res", "user": "userdId_14", "attemptID": 4857, "exercise": "c83ea6acd3e9f6f5543e87d515e8a44a", "exercise_name": "doubleChiffre", "embeddingX": "6.153871", "embeddingY": "8.911224"},{"extension": "py", "date": "2020-03-17 05:19:34", "correct": "0", "upload": "def distribution(liste,n):\n  cpt=[0]*(n+1)\n  for elem in liste:\n    cpt=liste[elem]\n  return cpt", "user": "userdId_7", "attemptID": 4858, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-57.75406", "embeddingY": "-15.597143"},{"extension": "py", "date": "2020-04-13 21:26:17", "correct": "1", "upload": "def verifSuiteAriGeo(liste,a,b):\n  ok=True\n  n=1\n  while n<len(liste) and ok:\n    if liste[n]!=liste[n-1]*a+b:\n      ok=False\n    n+=1\n  return ok", "user": "userdId_8", "attemptID": 4859, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-73.07253", "embeddingY": "10.440631"},{"extension": "py", "date": "2020-04-08 01:23:13", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  end=False\n  res=True\n  while i<len(liste) and res==True and end==False:\n    if liste[i]==0:\n      res=False\n    elif len(liste)==1 and liste[i]>=1:\n      end=True\n      res=True\n    else:\n      q=liste[1]/liste[0]\n      if liste[i+1]/liste[i]==q:\n        res=True\n      else:\n        res=False\n    i+=1\n  return res", "user": "userdId_26", "attemptID": 4860, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "38.637123", "embeddingY": "57.570396"},{"extension": "py", "date": "2020-03-12 23:46:41", "correct": "0", "upload": "def jourNuit(heure):\n  Error=\"l'heure saisie est invalide\"\n  Time=\"on est\"\n  if heure<0 or heure>24:\n    res=Error\n  elif heure>=5 and heure<12:\n    res=Time+' le matin'\n    if heure>=6 and heure<=18:\n      res=res+' et il fait jour'\n    else:\n      res=res+' et il fait nuit'\n  elif heure>=12 and heure<17:\n    res=Time+\" l'apr\u00e8s-midi et il fait jour\"\n  elif heure>=17 and heure<21:\n    res=Time+' le soir'\n    if heure>=6 and heure<=18:\n      res=res+' et il fait jour'\n    else:\n      res=res+' et il fait nuit'\n  else:\n    res=Time+' la nuit et il fait nuit'\n  return res\n    \n  \n    ", "user": "userdId_2", "attemptID": 4861, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "80.80059", "embeddingY": "15.263562"},{"extension": "py", "date": "2020-05-04 21:29:37", "correct": "0", "upload": "def semestreValide(ue1,ue2):\n  res=False\n  if ue1>=10 and ue2>=10 or ue1+ue2>=20:\n    res=True\n  return res", "user": "userdId_8", "attemptID": 4862, "exercise": "70ae7ad6cf504e0fa8cedebd8e8a825f", "exercise_name": "semestreValide", "embeddingX": "68.30852", "embeddingY": "-1.3264818"},{"extension": "py", "date": "2020-03-06 00:17:17", "correct": "0", "upload": "def moyenne(liste):\n\tif len(liste) == 0:\n\t\tres= None\n\telse:\n\t\tnb = 0\n\t\tres = 0\n\t\tmoy = ''\n\t\tfor elem in liste:\n\t\t\tres = res + elem\n\t\t\tnb+=1\n\t\tmoy = res / nb\n\treturn moy", "user": "userdId_29", "attemptID": 4863, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "0.042272165", "embeddingY": "-10.412146"},{"extension": "py", "date": "2020-03-24 04:00:12", "correct": "0", "upload": "def compare(chaine1,chaine2):\n  i=0\n  while i<len(chaine1) and i<len(chaine2) and res==0:\n    if chaine1[i]>chaine2[i]:\n      res=-1\n    elif chaine1[i]<chaine2[i]:\n      res=1\n    i=i+1\n  return res", "user": "userdId_26", "attemptID": 4864, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-11.539595", "embeddingY": "43.362053"},{"extension": "py", "date": "2020-03-12 22:04:12", "correct": "0", "upload": "def moyenne(liste):\n  if len (liste)==0:\n    res=None\n  else:\n    res=0\n    cpt=0\n    for elem in range(len(liste)):\n      res=res+elem\n      cpt=cpt+1\n      res=res%cpt\n  return res ", "user": "userdId_20", "attemptID": 4865, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-6.515117", "embeddingY": "-2.849121"},{"extension": "py", "date": "2020-04-07 02:50:34", "correct": "0", "upload": "def qualifJO(sexe,record,nbvictoires,champion):\n  res=False\n  if sexe=='M' and champion:\n    res=True\n  elif record<12.0 and nbvictoires>=3:\n    res=True\n  if sexe=='F' and champion:\n    res=True\n  elif record<15 and nbvictoires>=3:\n    res=True\n  return res", "user": "userdId_16", "attemptID": 4866, "exercise": "891e7b0ed5fbddb755edc84d479bc1ef", "exercise_name": "qualifJO", "embeddingX": "64.312744", "embeddingY": "-11.111945"},{"extension": "py", "date": "2020-03-12 21:56:19", "correct": "1", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=0\n    res=liste[0]\n    for i in range(len(liste)):\n      if liste[i]>res:\n        res=liste[i]\n  return res", "user": "userdId_25", "attemptID": 4867, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "0.7818132", "embeddingY": "-62.048103"},{"extension": "py", "date": "2020-03-31 04:27:16", "correct": "0", "upload": "def indiceOccurence(n,x,l):\n  cpt=0\n  trouve=0\n  i=0  \n  while i<len(l) and trouve==False:\n    if l[i]==x:\n      cpt=cpt+1\n    if cpt==n:\n      trouve=True\n  i=i+1    \n#post-traitement\n  if trouve:\n    res=i-1\n  else:\n    res=None  \n  return res      \n", "user": "userdId_39", "attemptID": 4868, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-2.5970807", "embeddingY": "75.166595"},{"extension": "py", "date": "2020-03-24 03:59:50", "correct": "0", "upload": "def compare(chaine1,chaine2):\n  i=0\n  while i<len(chaine1) and i<len(chaine2) and res==0:\n    if chaine1[i]>chaine2[i]:\n      res=-1\n    elif chaine1[i]<chaine2[i]:\n      res=1\n    i=i+1\n  return res", "user": "userdId_26", "attemptID": 4869, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-11.509013", "embeddingY": "43.3166"},{"extension": "py", "date": "2020-04-06 14:22:30", "correct": "0", "upload": "def produitScalaire(vec1,vec2):\n  res=0\n  for i in range(0,4):\n    res=(vec1[i]*vec2[i])+res\n  return res", "user": "userdId_3", "attemptID": 4870, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-63.629303", "embeddingY": "-16.510523"},{"extension": "py", "date": "2020-04-07 03:50:46", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  \n  if len(liste)==1 and liste[0]!=0:\n    res=True\n  if len(liste)>=2 and liste[0]==0:\n    res=False\n  if len(liste)==0:\n    res=True\n  else:\n    end=False\n    while i<len(liste)-1 and end==False:\n      r=liste[0]/liste[1]\n      if liste[i]/liste[i+1]==r:\n        res=True\n      else:\n        res=False\n        end=True\n      i+=1\n  return res\n  ", "user": "userdId_26", "attemptID": 4871, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "38.71612", "embeddingY": "58.8651"},{"extension": "py", "date": "2020-04-07 10:44:48", "correct": "0", "upload": "def suiteGeo(liste):\n  ok=True\n  i=0\n  if len(liste)==0 and len(liste)==1:\n    ok=True\n  if liste[i]==0:\n     ok=False\n  while i<len(liste)-1 and ok:\n    q=liste[i+1]*liste[i]\n    if liste[i+1]/liste[i]!=q:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 4872, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "28.37071", "embeddingY": "68.30923"},{"extension": "py", "date": "2020-03-31 06:38:50", "correct": "0", "upload": "def semestreValide(ue1,ue2):\n    res=False\n    if ue1>=10.0 and ue2>=10.0:\n      res=True\n    else:\n      res=False\n    if ue1>=10.0 and ue2<10.0:\n      res=True\n    else:\n      res=False\n    return res", "user": "userdId_11", "attemptID": 4873, "exercise": "70ae7ad6cf504e0fa8cedebd8e8a825f", "exercise_name": "semestreValide", "embeddingX": "56.60867", "embeddingY": "-12.767308"},{"extension": "py", "date": "2020-03-20 00:26:08", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  res=''\n  if debut+longueur > len(s):\n    longueur=len(s)-debut\n  else:\n    for i in range (debut,debut+longueur):\n      res=res+(debut+longueur)[i]\n  return res", "user": "userdId_15", "attemptID": 4874, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-79.04665", "embeddingY": "25.64523"},{"extension": "py", "date": "2020-03-21 06:05:28", "correct": "0", "upload": "def sommeNbPairs(liste):\n  res=0\n  for i in range(len(liste)):\n    if len(liste[i])%2!=0:\n      res=res+liste[i]\n  return res", "user": "userdId_9", "attemptID": 4875, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "-4.2110558", "embeddingY": "-48.366356"},{"extension": "py", "date": "2020-03-19 23:26:18", "correct": "0", "upload": "def reconstruireChainePartielle(s,n):\n  res=\"\"\n  for k in range(len[s],n):\n    res=res+s[k]\n\n  return res", "user": "userdId_5", "attemptID": 4876, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-47.161324", "embeddingY": "-21.430347"},{"extension": "py", "date": "2020-03-20 00:21:05", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  res=''\n  cpt=0\n  for i in range (debut,len(s)):\n    res=res+s[i]\n    cpt=cpt+1\n  if cpt==longueur:\n    return res\n\n", "user": "userdId_15", "attemptID": 4877, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-72.89019", "embeddingY": "28.982544"},{"extension": "py", "date": "2020-04-12 06:39:24", "correct": "0", "upload": "def phrasePalindrome(phrase):\n    if len(phrase)==0:\n      res=True\n    else:\n      res=True\n      i=0\n      while i<len(phrase)//2 and res:\n        if phrase[i]!=phrase[-(i+1)] and phrase[i]!='':\n          res=False\n        i+=1\n    return res", "user": "userdId_11", "attemptID": 4878, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "27.710623", "embeddingY": "36.120865"},{"extension": "py", "date": "2020-04-07 20:41:19", "correct": "0", "upload": "def suiteAri(liste):\n  res=0\n  i=1\n  for i in liste:\n    if liste[i]%liste[i+1]==0:\n      res=False\n    elif liste[i]%liste[i+1]!=liste[i+1]%liste[i+2]:\n      res=False\n    else:\n      res=True\n  return res", "user": "userdId_3", "attemptID": 4879, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "34.034653", "embeddingY": "-24.114529"},{"extension": "py", "date": "2020-03-20 00:36:19", "correct": "0", "upload": "def permutationChaine(o):\n  res=\"\"\n  for i in range(o,len(s)-1,2):\n    res=res+s[i+1]+s[i]\n  if (len(s)%2!=0):\n    res=res+[-1]\n  return res", "user": "userdId_20", "attemptID": 4880, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-35.961407", "embeddingY": "-23.956604"},{"extension": "py", "date": "2020-03-22 08:24:12", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n    if fin2>=debut1 and fin1>=debut2:\n      res=True\n    else:\n      res=False ", "user": "userdId_47", "attemptID": 4881, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "50.15622", "embeddingY": "-25.083075"},{"extension": "py", "date": "2020-03-12 21:58:06", "correct": "1", "upload": "def maximum(liste):\n   if len(liste)==0:\n      res=None\n   else:\n      res=liste[0]\n      for i in range(len(liste)):\n         if liste[i]>res:\n            res=liste[i]\n   return res", "user": "userdId_14", "attemptID": 4882, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "1.1888405", "embeddingY": "-62.976128"},{"extension": "py", "date": "2020-03-06 00:42:57", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    res=None\n  else:\n    for mot in \"aeiouy\":\n      res=res+1\n  \n  return res", "user": "userdId_5", "attemptID": 4883, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-0.24769753", "embeddingY": "-29.872112"},{"extension": "py", "date": "2020-04-12 05:57:04", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=False\n  c=[]\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n  for i in range(0,len(liste),0):\n    c=liste[i]+c\n  return c", "user": "userdId_8", "attemptID": 4884, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-77.212036", "embeddingY": "21.92604"},{"extension": "py", "date": "2020-04-05 12:16:08", "correct": "1", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  if nombre==0 and cpt==0:\n    cpt=1\n  while nombre>0:\n    if nombre%10==chiffre:\n      cpt+=1\n    nombre=int(nombre/10)\n  return cpt", "user": "userdId_4", "attemptID": 4885, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "24.687965", "embeddingY": "6.3740335"},{"extension": "py", "date": "2020-04-07 03:45:51", "correct": "0", "upload": "def motPalindrome(mot):\n  res=False\n  if mot[0]==mot[-1]:\n    res=True\n  else:\n    res=False\n  return res", "user": "userdId_30", "attemptID": 4886, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "43.82367", "embeddingY": "-9.310402"},{"extension": "py", "date": "2020-03-31 03:05:29", "correct": "0", "upload": "def fusion(liste1,liste2):\n  res=[]\n  i=0\n  j=0\n  while i<len(liste1) and j<len(liste2):\n    if liste1[i]<liste2[j]:\n      res.append(liste1[i])\n      i+=1\n    else:\n      res.append(liste2[j])\n      j+=1\n  return res", "user": "userdId_13", "attemptID": 4887, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-42.377052", "embeddingY": "52.677116"},{"extension": "py", "date": "2020-04-07 20:04:23", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  for i in nombre:\n    if i==chiffre:\n      cpt=cpt+1\n    i=i+1\n  return cpt", "user": "userdId_3", "attemptID": 4888, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-36.012306", "embeddingY": "-13.498526"},{"extension": "py", "date": "2020-04-07 20:15:02", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  chiffre=str(chiffre)\n  nombre=str(nombre)\n  i=0\n  for i in nombre:\n    if chiffre==nombre:\n      cpt=cpt+1\n    i=i+1\n  return cpt", "user": "userdId_3", "attemptID": 4889, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-24.90211", "embeddingY": "-27.01405"},{"extension": "py", "date": "2020-03-02 02:41:47", "correct": "0", "upload": "def nombrePair(n):\n  n=int(input())\n  a=(n/2)\n  b=(n//2)\n  if a==b :\n    res=True\n  else :\n    res=False\n    \n  return res", "user": "userdId_15", "attemptID": 4890, "exercise": "864911b08708fc8bae69311a8ddd3da7", "exercise_name": "nombrePair", "embeddingX": "-60.87817", "embeddingY": "10.121332"},{"extension": "py", "date": "2020-05-04 21:48:32", "correct": "0", "upload": "def minimum(liste):\n  if liste==[]:\n    res=None\n  else:\n    res=liste[0]\n    for i in range(1,len(liste)-1):\n      if liste[i]<res:\n        res=liste[i]\n  return res\n", "user": "userdId_26", "attemptID": 4891, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "23.291073", "embeddingY": "-70.7527"},{"extension": "py", "date": "2020-03-18 02:43:27", "correct": "1", "upload": "def reconstruireChainePartielle(s,n):\n  res = ''\n  for i in range (0,len(s),n):\n    res = res + s[i]\n  return res", "user": "userdId_17", "attemptID": 4892, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-60.059437", "embeddingY": "-40.63023"},{"extension": "py", "date": "2020-03-17 05:39:07", "correct": "0", "upload": "def permutationChaine(s):\n  res=\"\"\n  for i in range(0,len(s)-1,2):\n    res=res+s[1+i]+s[i]\n  if i%2!=0:\n    res=res+s[i-1]\n  return res", "user": "userdId_8", "attemptID": 4893, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-34.201553", "embeddingY": "-58.0012"},{"extension": "py", "date": "2020-03-17 08:48:14", "correct": "1", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n    if debut1 <= fin2 and fin1>=debut2 :\n      res=True\n    else :\n      res=False\n    return res", "user": "userdId_24", "attemptID": 4894, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "52.163773", "embeddingY": "-23.966429"},{"extension": "py", "date": "2020-03-06 00:16:26", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    return None\n  cpt=0\n  for elem in (mot) in 'aeiouy':\n    cpt=cpt+1\n  return cpt", "user": "userdId_1", "attemptID": 4895, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "3.2222538", "embeddingY": "-43.693302"},{"extension": "py", "date": "2020-03-06 00:20:56", "correct": "0", "upload": "def nbVoyelles(mot):\n  voyel=\"aeiouy\"\n  if len(mot)==0:\n    voy=None\n  else:\n    voy=0\n    for i in mot:\n      if voyel[i]==mot[i]:\n        voy=voy+1\n  return voy", "user": "userdId_13", "attemptID": 4896, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "0.9337806", "embeddingY": "-42.957157"},{"extension": "py", "date": "2020-03-27 06:55:59", "correct": "1", "upload": "def quatrePlus100(liste):\n  i=0\n  res=[]\n  while i<len(liste) and len(res)<4:\n    if liste[i]>100:\n      res.append(liste[i])\n    i=i+1\n  return res", "user": "userdId_12", "attemptID": 4897, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-25.680798", "embeddingY": "40.506454"},{"extension": "py", "date": "2020-05-04 20:13:14", "correct": "0", "upload": "def polynome(a,b,c):\n  res=\"pas de solution\"\n  delta=b**2-4*a*c\n  if delta>0:\n    res=(-b+sqrt(delta))/2*a\n  return res", "user": "userdId_8", "attemptID": 4898, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-58.380463", "embeddingY": "6.5517907"},{"extension": "py", "date": "2020-03-17 05:42:20", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  res=''\n  if debut+longueur>len(s):\n    res=debut+longueur\n  else:\n    if debut+longueur<len(s):\n      fin=debut+longueur\n  for i in range(debut,debut+longueur): \n    res=res+s[i]\n  return res", "user": "userdId_25", "attemptID": 4899, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-76.64724", "embeddingY": "14.749264"},{"extension": "py", "date": "2020-04-07 20:10:26", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  chiffre=int(chiffre)\n  nombre=int(nombre)\n  for i in range(len(nombre)):\n    if nombre[i]==chiffre:\n      cpt=cpt+1\n    i=i+1\n  return cpt", "user": "userdId_3", "attemptID": 4900, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-27.054405", "embeddingY": "-26.472815"},{"extension": "py", "date": "2020-03-06 00:32:38", "correct": "1", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None \n  else:\n      res=liste[0]\n      for elem in liste:\n          if elem>res:\n            res=elem\n  return res\n    ", "user": "userdId_33", "attemptID": 4901, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "9.495346", "embeddingY": "-61.469707"},{"extension": "py", "date": "2020-04-14 04:05:24", "correct": "0", "upload": "def listeDecroissante(scores):\n  ok=True\n  while i<len(scores) and ok:\n    if scores[i]>=scores[i+1]:\n      res=ok\n  return res", "user": "userdId_21", "attemptID": 4902, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "-1.511368", "embeddingY": "40.318497"},{"extension": "py", "date": "2020-04-11 07:04:17", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  res=True\n  i=0\n  while i<len(phrase) and res:\n    if phrase[i]==' ':\n      phrase[i]=''\n    elif phrase[i]!=phrase[-i-1]:\n      res=False\n    i+=1\n  return res", "user": "userdId_8", "attemptID": 4903, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "28.550165", "embeddingY": "39.889446"},{"extension": "py", "date": "2020-04-12 04:53:33", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=False\n  c=[]\n  for i in range(len(liste)-1):\n    c=a*liste[i]+b\n    c.append(liste)\n    if c==liste:\n      res=True\n  return res", "user": "userdId_8", "attemptID": 4904, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-79.046616", "embeddingY": "17.315321"},{"extension": "py", "date": "2020-04-08 00:51:06", "correct": "1", "upload": "def elemAri(n,u0,r):\n  res=(n)*r+u0\n  return res\n", "user": "userdId_19", "attemptID": 4905, "exercise": "f239498950e974e29e01472749d9a09d", "exercise_name": "elemAri", "embeddingX": "-35.495304", "embeddingY": "18.659512"},{"extension": "py", "date": "2020-03-10 04:21:43", "correct": "0", "upload": "def doubleLettre(mot):\n  prec=' '\n  for c in mot:\n    if prec==' ' and c!=' ':\n      prec=c\n      if prec==c:\n        res=True\n    else:\n      res=False\n  return res", "user": "userdId_18", "attemptID": 4906, "exercise": "00da9cf1fa2b468d915724499459ed8f", "exercise_name": "doubleLettre", "embeddingX": "20.094002", "embeddingY": "-6.216442"},{"extension": "py", "date": "2020-03-05 06:44:14", "correct": "0", "upload": "from math import sqrt\ndef polynome(a,b,c):\n  x=0\n  delta=b**2-(4*a*c)\n  if delta>0 :\n    x=(-b-sqrt(delta))/2*a,(-b+sqrt(delta))/2-a\n  elif delta==0 :\n    x=(-b)/2*a\n  else :\n    x='pas de solution'\n  return x\n\n    \n", "user": "userdId_28", "attemptID": 4907, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-50.308846", "embeddingY": "10.345894"},{"extension": "py", "date": "2020-03-03 05:31:19", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    for i in range(liste):\n      if liste[i]>res:\n        res=liste[i]\n  return res", "user": "userdId_8", "attemptID": 4908, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "2.589682", "embeddingY": "-46.81428"},{"extension": "py", "date": "2020-03-17 06:40:51", "correct": "0", "upload": "def doubleLettre(mot):\n  c1=(0,len(mot),2)\n  c2=(1,len(mot),2)\n  for c2 in mot:\n    if c1==c2:\n      res=True\n  else:\n    res=False\n  return res", "user": "userdId_8", "attemptID": 4909, "exercise": "00da9cf1fa2b468d915724499459ed8f", "exercise_name": "doubleLettre", "embeddingX": "17.749063", "embeddingY": "-1.9350274"},{"extension": "py", "date": "2020-03-14 03:10:03", "correct": "0", "upload": "def ecart(liste):\n   res=0\n   if len(liste)==0:\n      res=None\n   if len(liste)==1:\n      res=0\n   else:\n      max=liste[0]\n      min=max\n      for elem in range(len(liste)):\n         if elem>max:\n            max=elem\n      for elem in range(len(liste)):\n         if elem<min:\n            min=elem\n   res=res+max-min\n   return res", "user": "userdId_14", "attemptID": 4910, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "14.429115", "embeddingY": "-86.73715"},{"extension": "py", "date": "2020-03-31 05:39:14", "correct": "1", "upload": "def nbChiffres(nombre):\n  res=0\n  while nombre!=0:\n      nombre=nombre//10\n      res+=1\n  if res==0:\n    res=1\n  return res", "user": "userdId_8", "attemptID": 4911, "exercise": "3dcf332c003a1f3bf15df22ee17884a3", "exercise_name": "nbChiffres", "embeddingX": "31.935648", "embeddingY": "14.131441"},{"extension": "py", "date": "2020-03-12 21:41:38", "correct": "0", "upload": "def nbVoyelles(mot):\n  cpt=0\n  for letrre in mot:\n    if lettre in 'aeiouy':\n      cpt=cpt+1\n  return cpt", "user": "userdId_25", "attemptID": 4912, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "15.608721", "embeddingY": "-28.350443"},{"extension": "py", "date": "2020-04-10 00:47:01", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i]!=0:\n      q=liste[i]/liste[0]\n      if liste[i+1]/liste[i]!=q:\n        ok=False\n    i=i+1\n  return ok", "user": "userdId_3", "attemptID": 4913, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "23.59782", "embeddingY": "60.686394"},{"extension": "py", "date": "2020-04-17 00:39:47", "correct": "1", "upload": "def listeDecroissante(scores):\n  i=0\n  while i<len(scores)-1:\n    if scores[i]<scores[i+1]:\n      return False\n    i=i+1\n  return True", "user": "userdId_14", "attemptID": 4914, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "16.542545", "embeddingY": "47.110935"},{"extension": "py", "date": "2020-04-08 01:03:48", "correct": "0", "upload": "def elemGeo(n,u0,q):\n  res=Q**n*u0\n  return res", "user": "userdId_19", "attemptID": 4915, "exercise": "d7c83a7fb9b49e28804e55955ad06968", "exercise_name": "elemGeo", "embeddingX": "-38.136684", "embeddingY": "11.916014"},{"extension": "py", "date": "2020-03-22 08:45:45", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n    if annee1<annee2:\n      res=-1\n    if annee1>annee2: \n      res=1\n    else:\n      if mois1<mois2:\n        res=-1\n      if mois1>mois2:\n        res=1\n      else:\n        if jour1<jour2:\n          res=-1\n        if jour1>jour2:\n          res=1\n        else:\n          res=0\n    return res\n      ", "user": "userdId_47", "attemptID": 4916, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "82.6659", "embeddingY": "-33.12128"},{"extension": "py", "date": "2020-03-05 23:46:05", "correct": "1", "upload": "def maximum(liste):\n    if len(liste) == 0:\n      res = None\n    else:\n    \tres = liste[0]\n    \tfor i in range(0,len(liste)):\n      \t\tif liste[i] > res :\n        \t\tres = liste[i]  \n    return res", "user": "userdId_29", "attemptID": 4917, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-0.1260979", "embeddingY": "-60.93002"},{"extension": "py", "date": "2020-04-09 11:31:59", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  ok=True\n  if 0 in liste:\n    ok=False\n  elif len(liste)>1:\n    raison=liste[-1]/liste[-2]\n    while i<len(liste)-1:\n      if liste[i+1]!=liste[i]*raison:\n        ok=False\n      i+=1\n  elif liste==[0]:\n    ok=True\n  return ok", "user": "userdId_12", "attemptID": 4918, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "23.563013", "embeddingY": "74.48609"},{"extension": "py", "date": "2020-04-12 11:36:43", "correct": "0", "upload": "def phrasePalindrome(phrase):\n    if len(phrase)==0:\n      res=True\n    else:\n      res=True\n      i=0\n      x=''\n      while i<len(phrase)//2 and res:\n        if phrase[i]!=phrase[-(i+1)]:\n          res=False\n          i+=1\n        if phrase[i]!=x or phrase[-(i+1)]!=x:\n          res=False\n          i+=1\n    return res", "user": "userdId_11", "attemptID": 4919, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "31.757982", "embeddingY": "31.21027"},{"extension": "py", "date": "2020-04-05 10:31:04", "correct": "1", "upload": "def sousChaine(s1,s2):\n    res = True\n    if s1 not in s2:\n        res = False\n        \n    return res", "user": "userdId_4", "attemptID": 4920, "exercise": "a7cdd094daa2f0bfccc7a4ec419f7243", "exercise_name": "sousChaine", "embeddingX": "47.97016", "embeddingY": "-15.31434"},{"extension": "py", "date": "2020-03-06 00:00:12", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    res=0\n  else:\n    for elem in mot:\n      res=0\n      if elem==o:\n        res=res+1\n  return res     ", "user": "userdId_14", "attemptID": 4921, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "0.4386278", "embeddingY": "-37.334343"},{"extension": "py", "date": "2020-04-11 06:43:21", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  res=True\n  i=0\n  while i<len(phrase) and res:\n    if phrase[i]!=phrase[-i-1]:\n      res=False\n    i+=1\n  return res", "user": "userdId_8", "attemptID": 4922, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "22.744139", "embeddingY": "40.775753"},{"extension": "py", "date": "2020-03-15 00:14:42", "correct": "1", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if fin1<debut2 or fin2<debut1:\n    res=False\n  else:\n    res=True\n  return res", "user": "userdId_8", "attemptID": 4923, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "61.050587", "embeddingY": "-19.840103"},{"extension": "py", "date": "2020-06-02 21:32:25", "correct": "1", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n    if annee1==annee2:\n      if mois1==mois2:\n        if jour1==jour2:\n          return 0\n        elif jour1<jour2:\n          return -1\n        else:\n          return 1\n      elif mois1<mois2:\n        return -1\n      else:\n        return 1\n    elif annee1<annee2:\n      return -1\n    else:\n      return 1", "user": "userdId_12", "attemptID": 4924, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "89.524666", "embeddingY": "-14.298898"},{"extension": "py", "date": "2020-03-12 08:37:46", "correct": "0", "upload": "def bissextile(annee):\n    if annee%400==0 :\n      res=True \n    else :\n      res=False\n    return res", "user": "userdId_24", "attemptID": 4925, "exercise": "a7d37636649c0ada991520788deeb2d0", "exercise_name": "bissextile", "embeddingX": "44.41956", "embeddingY": "-4.2183423"},{"extension": "py", "date": "2020-03-06 00:17:38", "correct": "0", "upload": "def maximum(liste):\n  res=liste([0])\n  for elem in liste:\n    if res<elem:\n      res=elem\n  return res", "user": "userdId_23", "attemptID": 4926, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-25.201136", "embeddingY": "6.2918143"},{"extension": "py", "date": "2020-03-12 21:43:13", "correct": "1", "upload": "def nbVoyelles(mot):\n  cpt=0\n  for lettre in mot:\n    if lettre in 'aeiouy':\n      cpt=cpt+1\n  return cpt", "user": "userdId_25", "attemptID": 4927, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "15.568321", "embeddingY": "-23.96496"},{"extension": "py", "date": "2020-03-10 03:24:03", "correct": "0", "upload": "def jourNuit(heure):\n  if heure<0 or heure>24:\n    res=\"l'heure saisie est invalide\"\n  else:\n    if heure<5 or heure>=21:\n      res=\"on est la nuit\"\n    elif heure<12:\n      res=\"on est le matin\"\n    elif heure<17:\n      res=\"on est l'apres-midi\"\n    else:\n      res=\"on est le soir\"\n    if heure<6 or heure >=18:\n      res=res+\" et il fait jour\"\n    else:\n      res=res+\" et il fait nuit\"\n  return res", "user": "userdId_31", "attemptID": 4928, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "71.61593", "embeddingY": "14.603378"},{"extension": "py", "date": "2020-03-05 21:40:24", "correct": "1", "upload": "def somme(liste):\n  res=0\n  for i in range (len(liste)):\n    res=res+liste[i]\n  return res", "user": "userdId_25", "attemptID": 4929, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-44.48843", "embeddingY": "-36.570915"},{"extension": "py", "date": "2020-04-07 04:58:48", "correct": "0", "upload": "def suiteAri(liste):\n  ok=True\n  i=0\n  if len(liste)==0:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=liste[i]+liste[i+1]-liste[i]:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 4930, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "20.339922", "embeddingY": "52.606865"},{"extension": "py", "date": "2020-03-31 05:34:22", "correct": "0", "upload": "def nbChiffres(nombre):\n  res=0\n  nb=nombre\n  cpt=1\n  while nb%10!=0:\n    cpt=cpt+1\n    nb=nb//10\n  return cpt-1\n    \n    ", "user": "userdId_28", "attemptID": 4931, "exercise": "3dcf332c003a1f3bf15df22ee17884a3", "exercise_name": "nbChiffres", "embeddingX": "0.60788983", "embeddingY": "17.27823"},{"extension": "py", "date": "2020-04-16 21:11:02", "correct": "0", "upload": "def meilleurClassementJoueur(scores,joueurs,nom):\n  i=0\n  while i<len(scores):\n    if nom==joueurs[i]:\n      return i\n    i=i+1\n    ", "user": "userdId_1", "attemptID": 4932, "exercise": "be6ce0a06c5d396190024c7c681da95d", "exercise_name": "meilleurClassementJoueur", "embeddingX": "-13.377917", "embeddingY": "66.77557"},{"extension": "py", "date": "2020-03-06 00:12:20", "correct": "0", "upload": "def ecart(liste):\n  if len(liste)==0:\n    res=None\n  elif len(liste)==1:\n    res=0\n  else:\n    res=0\n    m1=m2=liste[i]\n    for i in range(len(liste)):\n      if m1>liste[i]:\n        m1=liste[i]\n      if m2<liste[i]:\n        m2=liste[i]\n    res=m1-m2\n  return res", "user": "userdId_30", "attemptID": 4933, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "13.756752", "embeddingY": "-52.041424"},{"extension": "py", "date": "2020-03-24 03:32:55", "correct": "0", "upload": "def quatrePlus100(liste):\n  res=0\n  i = 0\n  while i<len(liste) and len(res)<=4:\n    if liste[i]>100:\n      res=res+[liste[i]]\n    i=i+1\n  return res ", "user": "userdId_10", "attemptID": 4934, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-16.788702", "embeddingY": "43.93783"},{"extension": "py", "date": "2020-03-02 02:32:44", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if fin1>debut2 and fin2<debut1:\n    return(\"True\")\n  else:\n    return(\"False\")\n  \nrendezVous(1,10,7,20)\nrendezVous(1,7,10,20)", "user": "userdId_1", "attemptID": 4935, "exercise": "6fd66bb2393fbf3809f1c6d04f3831f7", "exercise_name": "rendezVous", "embeddingX": "61.03694", "embeddingY": "-24.539272"},{"extension": "py", "date": "2020-03-17 04:59:23", "correct": "0", "upload": "def reconstruireChainePartielle(s,n):\n  res=''\n  for i in range (0,len(s),n):\n    res=res+1\n  return res", "user": "userdId_25", "attemptID": 4936, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-61.572582", "embeddingY": "-37.34398"},{"extension": "py", "date": "2020-03-10 03:30:40", "correct": "1", "upload": "def prononcable(mot):\n  if mot=='':\n    res=True\n  else:\n    res=True\n    Voyelles=['a','e','i','o','u','y']\n    ch=\"\"\n    for i in range(len(mot)):\n      if mot[i] in Voyelles:\n        ch=ch+\"1\"\n      elif mot[i] not in Voyelles:\n        ch=ch+\"0\"\n    if \"0000\" in ch or \"1111\" in ch :\n      res=False\n  return res", "user": "userdId_15", "attemptID": 4937, "exercise": "6318b210c201fba050d60bc0913cb7ef", "exercise_name": "prononcable", "embeddingX": "-19.36041", "embeddingY": "-71.50699"},{"extension": "py", "date": "2020-03-19 05:40:27", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if jour1<jour2 or mois1<mois2 or annee1<annee2:\n    res=-1\n  elif jour1>jour2 and mois1>mois2 and annee1>annee2:\n      res=0\n  else:\n    res=1\n  return res", "user": "userdId_34", "attemptID": 4938, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "80.39277", "embeddingY": "-28.551973"},{"extension": "py", "date": "2020-03-08 22:00:11", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1==annee2 and mois1==mois2 and jour1==jour2:\n    return 0\n  elif annee1<=annee2 and mois1<mois2 and jour1<jour2:\n    return -1\n  elif annee1<=annee2 and mois1>mois2 and jour1>jour2:\n    return -1\n  elif annee1<=annee2 and mois1<mois2 and jour1>jour2:\n    return-1\n  else:\n    return 1", "user": "userdId_1", "attemptID": 4939, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "86.16933", "embeddingY": "-14.610694"},{"extension": "py", "date": "2020-03-06 00:25:33", "correct": "0", "upload": "def ecart(liste):\n    if liste==[]:\n      return None\n    elif len(liste)==1:\n      return 0\n    else:\n      res=liste[0]\n      for i in range(1,len(liste)):\n        max=0\n        if res>liste[i]:\n          max=liste[i]\n      for i in range(1,len(liste)):\n        min=0\n        if res<liste[i]:\n          min=liste[i]\n      ecart=max-min\n      return ecart\n          \n      \n      \n      ", "user": "userdId_2", "attemptID": 4940, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "10.403657", "embeddingY": "-84.57791"},{"extension": "py", "date": "2020-03-12 22:07:51", "correct": "0", "upload": "def maximum(liste):\n  res=liste[0]\n  for i in range(len(liste)):\n    if i>=res:\n      res=i\n  return res", "user": "userdId_35", "attemptID": 4941, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "4.327096", "embeddingY": "-59.340725"},{"extension": "py", "date": "2020-03-06 00:31:29", "correct": "1", "upload": "def moyenne(liste):\n    if len(liste) == 0:\n      moy = None\n    else:\n      res = 0\n      for nb in liste:\n        res = res + nb\n      moy = res/len(liste)\n    return moy", "user": "userdId_29", "attemptID": 4942, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-4.58278", "embeddingY": "-9.194089"},{"extension": "py", "date": "2020-04-12 06:04:07", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=False\n  c=[liste[0]]\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n  return c", "user": "userdId_8", "attemptID": 4943, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-78.56033", "embeddingY": "12.374491"},{"extension": "py", "date": "2020-03-12 23:49:36", "correct": "0", "upload": "def jourNuit(heure):\n  res=''\n  res1=''\n  res2=''\n  if heure<0 or heure>24 :\n    res=\"l'heure saisie est invalide\"\n  else : \n    if heure>=6 and heure<18 :\n      res1=\"il fait jour\"\n    elif (heure>=0 and heure<6) or (heure>=18 and heure<24) :\n      res1=\"il fait nuit\"\n    else :\n      if heure>=5 and heure<12 :\n        res2=\"on est le matin\"\n      elif heure>=12 and heure<17 :\n        res2=\"on est l'apr\u00e8s-midi\"\n      elif heure>=17 and heure<21 :\n        res2=\"on est le soir\"\n      else :\n        res2=\"on est la nuit\"\n      \n  res=(res1+\" et \"+res2)\n  return res", "user": "userdId_15", "attemptID": 4944, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "81.81462", "embeddingY": "16.056383"},{"extension": "py", "date": "2020-03-31 03:35:13", "correct": "1", "upload": "def fusion(liste1,liste2):\n  res=[]\n  i=0\n  j=0\n  while i<len(liste1) and j<len(liste2):\n    if liste1[i]<liste2[j]:\n      res.append(liste1[i])\n      i+=1\n    else:\n      res.append(liste2[j])\n      j+=1\n  while j<len(liste2):\n      res.append(liste2[j])\n      j+=1\n  while i<len(liste1):\n      res.append(liste1[i])\n      i+=1\n  return res", "user": "userdId_8", "attemptID": 4945, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-42.373466", "embeddingY": "52.674004"},{"extension": "py", "date": "2020-03-10 03:15:24", "correct": "1", "upload": "def jourNuit(heure):\n  if heure<0 or heure>24:\n    res=\"l'heure saisie est invalide\"\n  else:\n    if heure<5 or heure>=21:\n      res=\"on est la nuit\"\n    elif heure<12:\n      res=\"on est le matin\"\n    elif heure<17:\n      res=\"on est l'apr\u00e8s-midi\"\n    else:\n      res=\"on est le soir\"\n    if heure<6 or heure>=18:\n      res=res+\" et il fait nuit\"\n    else:\n      res=res+\" et il fait jour\"\n  return res        ", "user": "userdId_35", "attemptID": 4946, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "72.2439", "embeddingY": "14.379641"},{"extension": "py", "date": "2020-04-06 06:35:53", "correct": "0", "upload": "def motPalindrome(mot):\n  ok=True\n  i=0\n  j=len(mot)-1\n  while i<j and ok:\n    if mot[i]!=mot[j]:\n      ok=False\n    i=i+1\n    j=j+1\n  return ok", "user": "userdId_3", "attemptID": 4947, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "20.663074", "embeddingY": "59.277115"},{"extension": "py", "date": "2020-03-17 05:34:22", "correct": "0", "upload": "def distribution(liste,n):\n  cpts=[0]*(n+1)\n  for elem in [liste]:\n    cpts[elem]=cpts[elem]+1\n  return cpts[elem]", "user": "userdId_8", "attemptID": 4948, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-58.77004", "embeddingY": "-8.912081"},{"extension": "py", "date": "2020-02-29 05:10:24", "correct": "1", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n    if annee1<annee2:\n      res=-1\n    elif annee1>annee2:\n      res=1\n    else:\n      if mois1<mois2:\n        res=-1\n      elif mois1>mois2:\n        res=1\n      else:\n        if jour1<jour2:\n          res=-1\n        elif jour1>jour2:\n          res=1\n        else:\n          res=0\n    return res", "user": "userdId_18", "attemptID": 4949, "exercise": "af7c1467ef9f7684d9ff58734067ae98", "exercise_name": "compareDates", "embeddingX": "81.67654", "embeddingY": "-32.617756"},{"extension": "py", "date": "2020-03-12 23:49:06", "correct": "0", "upload": "def jourNuit(heure):\n  res=[]\n  if heure<0:\n    res=\"l'heure saisie est invalide\"\n  if heure>24:\n    res=\"l'heure saisie est invalide\"\n  if 6<=heure<=18:\n    if heure==5:\n      res=\"on est le matin et il fait nuit\"\n    if 5<heure<=12:\n      res=\"on est le matin et il fait jour\"\n    if 12<=heure<=17:\n      res=\"on est l'apr\u00e8s-midi et il fait jour\"\n    if 17<=heure<=18:\n      res=\"on est le soir et il fait jour\"\n  if 1<=heure<=5 or 19<=heure<=24:\n    if 1<=heure<=4:\n      res=\"on est la nuit et il fait nuit\"\n    if 21<=heure<=24:\n      res=\"on est la nuit et il fait nuit\"\n    if 19<=heure<=20:\n      res=\"on est le soir et il fait nuit\"\n  return res", "user": "userdId_13", "attemptID": 4950, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "68.8759", "embeddingY": "22.927784"},{"extension": "py", "date": "2020-04-06 17:23:13", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  i=0\n  for i in range(nombre):\n    if chiffre==nombre[i]:\n      cpt=cpt+1\n    i=i+1\n  return cpt", "user": "userdId_3", "attemptID": 4951, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-20.624798", "embeddingY": "-31.023705"},{"extension": "py", "date": "2020-04-08 00:32:33", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  ok=False\n  i=0\n  j=0\n  while i<len(phrase)//2 and j<len(phrase)//2:\n    if phrase[i]==\" \":\n      i+=1\n    elif phrase[-j-1]==\" \":\n      j+=1\n    elif phrase[i]==phrase[-j-1]:\n      ok=True\n      i+=1\n      j+=1\n    else:\n      ok=False\n  if phrase==\"\":\n    ok=True\n  return ok", "user": "userdId_13", "attemptID": 4952, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "36.065136", "embeddingY": "32.41562"},{"extension": "py", "date": "2020-03-03 06:19:32", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut1 or fin1 in debut2 and fin2:\n    return True\n  else:\n    return False", "user": "userdId_8", "attemptID": 4953, "exercise": "6fd66bb2393fbf3809f1c6d04f3831f7", "exercise_name": "rendezVous", "embeddingX": "58.088985", "embeddingY": "-28.632008"},{"extension": "py", "date": "2020-03-30 03:06:02", "correct": "0", "upload": "def fusion(liste1,liste2):\n    res = liste1 + liste2\n    res.sort()\n\n    return (res)", "user": "userdId_4", "attemptID": 4954, "exercise": "6613efb6c873b142dc2b6040c14eb616", "exercise_name": "fusion", "embeddingX": "-34.885555", "embeddingY": "16.467966"},{"extension": "py", "date": "2020-03-22 05:27:57", "correct": "0", "upload": "def nbVoyelles(mot):\n  res=0\n  for lettre in mot:\n    res=res+1\n  return res", "user": "userdId_12", "attemptID": 4955, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-31.114359", "embeddingY": "-0.009822773"},{"extension": "py", "date": "2020-04-14 04:10:35", "correct": "0", "upload": "def listeDecroissante(scores):\n  i=0\n  ok=True\n  while i<len(scores)-1 and ok:\n    if scores[i]<scores[i+1]:\n      ok=False\n    i+=1\n  return res", "user": "userdId_21", "attemptID": 4956, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "19.953394", "embeddingY": "46.001186"},{"extension": "py", "date": "2020-03-13 00:04:37", "correct": "1", "upload": "def jourNuit(heure):\n  \n  if heure<0 or heure>24 :\n    res=\"l'heure saisie est invalide\"\n  else : \n    if heure>=6 and heure<18 :\n      res=\" et il fait jour\"\n    else :\n      res=\" et il fait nuit\"\n    if heure>=5 and heure<12 :\n      res=\"on est le matin\"+res\n    elif heure>=12 and heure<17 :\n      res=\"on est l'apr\u00e8s-midi\"+res\n    elif heure>=17 and heure<21 :\n      res=\"on est le soir\"+res\n    else :\n      res=\"on est la nuit\"+res\n    \n  return res", "user": "userdId_15", "attemptID": 4957, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "78.167694", "embeddingY": "19.860312"},{"extension": "py", "date": "2020-03-10 02:48:26", "correct": "1", "upload": "def nbOccurrencesLettre(lettre,mot):\n  if mot=='':\n    res=0\n  else:\n    res=0\n    for i in range(len(mot)):\n      if mot[i]==lettre:\n        res=res+1\n  return res\n", "user": "userdId_15", "attemptID": 4958, "exercise": "2864c9e5861229d2ff32570f6bc944fb", "exercise_name": "nbOccurrencesLettre", "embeddingX": "-20.844217", "embeddingY": "-42.26838"},{"extension": "py", "date": "2020-03-17 06:18:30", "correct": "0", "upload": "def permutationChaine(s):\n  res=''\n  for i in range(0,len(s)+1,2):\n    res=res+s[n+i]+s[i]\n  return res", "user": "userdId_25", "attemptID": 4959, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-48.536407", "embeddingY": "-47.025013"},{"extension": "py", "date": "2020-03-03 06:20:31", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut1 or fin1 in debut2 and fin2:\n    return True\n  else:\n    return False", "user": "userdId_8", "attemptID": 4960, "exercise": "6fd66bb2393fbf3809f1c6d04f3831f7", "exercise_name": "rendezVous", "embeddingX": "58.08871", "embeddingY": "-28.63435"},{"extension": "py", "date": "2020-03-03 05:30:58", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    for i in range([liste]):\n      if liste[i]>res:\n        res=liste[i]\n  return res", "user": "userdId_8", "attemptID": 4961, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "1.7960913", "embeddingY": "-47.3333"},{"extension": "py", "date": "2020-03-06 00:31:03", "correct": "1", "upload": "def maximum(liste):\n    if len(liste)==0:\n        res=None\n    else:\n        res=liste[0]\n        for elem in liste:\n            if elem>res:\n                res=elem\n    return res", "user": "userdId_45", "attemptID": 4962, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "9.499951", "embeddingY": "-61.463852"},{"extension": "py", "date": "2020-03-19 05:43:43", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if jour1<jour2 and mois1<mois2 and annee1<annee2:\n    res=-1\n  elif jour1==jour2 and mois1==mois2 and annee1==annee2:\n      res=1\n  else:\n    res=0\n  return res", "user": "userdId_34", "attemptID": 4963, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "79.55501", "embeddingY": "-24.803892"},{"extension": "py", "date": "2020-04-12 07:57:06", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n    cpt=0\n    decomp=nombre\n    x=nombre%10\n    while decomp!=0:\n      decomp=nombre//10\n      x=decomp%10\n      if x!=chiffre:\n        decomp=decomp//10\n        x=decomp%10\n      else:\n        cpt+=1\n    return cpt", "user": "userdId_11", "attemptID": 4964, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "5.330332", "embeddingY": "14.946563"},{"extension": "py", "date": "2020-03-23 22:52:29", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n    if jour1==jour2 and mois1==mois2 and annee1==annee2:\n      res=0\n      if jour1<jour2 or mois1<mois2 or annee1<annee2:\n        res=-1 \n    else:\n      res=1\n    return res", "user": "userdId_9", "attemptID": 4965, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "80.52464", "embeddingY": "-24.609509"},{"extension": "py", "date": "2020-04-06 06:41:07", "correct": "0", "upload": "def sousChaine(s1,s2):\n  res=True\n  i=0\n  j=0\n  while i<len(s1) and j<len(s2):\n    if s1[i]==s2[j]:\n      i+=1\n    j+=1\n  if i!=len(s1) or len(s2)<len(s1):\n    res=False\n  return res", "user": "userdId_27", "attemptID": 4966, "exercise": "a7cdd094daa2f0bfccc7a4ec419f7243", "exercise_name": "sousChaine", "embeddingX": "-5.4763837", "embeddingY": "59.542885"},{"extension": "py", "date": "2020-03-31 03:25:57", "correct": "1", "upload": "def fusion(liste1,liste2):\n  res=[]\n  i=0\n  j=0\n  while i<len(liste1) and j<len(liste2):\n    if liste1[i]<liste2[j]:\n      res.append(liste1[i])\n      i+=1\n    else:\n      res.append(liste2[j])\n      j+=1\n  if j<len(liste2):\n    while j<len(liste2):\n      res.append(liste2[j])\n      j+=1\n  else:\n    while i<len(liste1):\n      res.append(liste1[i])\n      i+=1\n  return res\n", "user": "userdId_13", "attemptID": 4967, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-42.39534", "embeddingY": "52.650833"},{"extension": "py", "date": "2020-04-17 03:14:06", "correct": "0", "upload": "def minimum(liste):\n  min=liste[0]\n  for i in range(1,len(liste),-1): \n    if liste[i]<liste[i+1]:\n      min=liste[i]\n    else:\n      min=None\n  return min", "user": "userdId_21", "attemptID": 4968, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "17.97234", "embeddingY": "-78.23712"},{"extension": "py", "date": "2020-03-12 09:43:08", "correct": "0", "upload": "def maximum(liste):\n  max=liste[0]\n  for i in (liste):\n      if max<liste(i):\n          max=liste(i)\n      else:\n        if max>liste(i):\n          max= max\n  return max", "user": "userdId_20", "attemptID": 4969, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "37.537395", "embeddingY": "-58.440926"},{"extension": "py", "date": "2020-03-27 06:42:12", "correct": "0", "upload": "def compare(chaine1,chaine2):\n  res=0\n  i=0\n  while i<len(chaine1) and i<len(chaine2):\n    if chaine[i]<chaine2[i]:\n      res=res-1\n    else:\n      res=res+1\n    i=i+1\n  return res", "user": "userdId_14", "attemptID": 4970, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-12.868545", "embeddingY": "54.93794"},{"extension": "py", "date": "2020-03-06 00:51:04", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n  if len(mot)==0:\n    return None\n  else:\n    res=-1\n    for elem in mot:\n      if lettre==elem:\n        res=res+1\n        return res\n        ", "user": "userdId_2", "attemptID": 4971, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-10.976977", "embeddingY": "-31.280117"},{"extension": "py", "date": "2020-03-22 07:57:50", "correct": "0", "upload": "def maximum(liste):\n  if liste==():\n    res=none\n  else: \n    res=liste[0]\n    for i in range(len(liste)):\n      if res<liste[i]:\n        res=liste[i]\n  return res", "user": "userdId_16", "attemptID": 4972, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "19.97241", "embeddingY": "-64.33439"},{"extension": "py", "date": "2020-03-23 00:51:48", "correct": "1", "upload": "def somme(liste):\n    res= 0\n    for elem in liste :\n      res=res+ elem\n    return res", "user": "userdId_24", "attemptID": 4973, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-27.998257", "embeddingY": "2.2926435"},{"extension": "py", "date": "2020-03-31 03:38:34", "correct": "0", "upload": "def fusion (liste1,liste2):\n  res = []\n  i = 0\n  j = 0\n  while i < len(liste1) and j < len(liste2):\n    if liste1[i] < liste2[j] :\n      res.append (liste1[i])\n      i = i + 1\n    else :\n      res.append (liste2[j])\n      j = j + 1\n  while j < len(liste2) :\n    res.append(liste2[j])\n    j = j + 1\n  while i < len(liste1):\n    res.append(liste2[i])\n    i = i + 1\n  return res\n", "user": "userdId_17", "attemptID": 4974, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-39.42013", "embeddingY": "48.871372"},{"extension": "py", "date": "2020-03-07 02:44:46", "correct": "0", "upload": "def nbSyllabes(mot):\n  cpt=0\n  if mot[0] in 'aeiouy':\n    cpt+=1\n  for i in range(0,len(mot)-1):\n    if (mot[i] in 'aeiouy') and not(mot[i+1] in 'aeiouy'):\n      cpt+=1\n  return cpt", "user": "userdId_6", "attemptID": 4975, "exercise": "1c86bec0f4df503e23db53994f3d2991", "exercise_name": "nbSyllabes", "embeddingX": "-29.84882", "embeddingY": "-69.58734"},{"extension": "py", "date": "2020-03-17 06:44:30", "correct": "0", "upload": "def permutationListe(liste,permutation):\n  res=liste[0]\n  for elem in liste:\n    res[liste]=liste[permutation]\n  return res", "user": "userdId_25", "attemptID": 4976, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-50.216854", "embeddingY": "-15.762448"},{"extension": "py", "date": "2020-03-30 23:12:19", "correct": "0", "upload": "def listeSymetrique(l):\n  l2 = []\n  flag = False\n  i = 0\n  while flag == False and i < len(l)-1:\n    if l[i] < l[i+1] and l[i] >= 0:\n      l2.append(l[i])\n      l2.append(l[i+1])\n      i=+2\n    elif l[i] > l[i+1] and l[i] < 0:\n      l2.append(l[i])\n      l2.append(l[i+1])\n      i=+2\n    else:\n      l2.reverse()\n      flag = True\n  \n  print(l[i+1:],l2)\n  if l[i+1:] == l2:\n    res = True\n  else:\n    res = False\n  \n  return res", "user": "userdId_4", "attemptID": 4977, "exercise": "8eb27aeda471a467e2223abebeca886e", "exercise_name": "listeSymetrique", "embeddingX": "12.405332", "embeddingY": "58.823917"},{"extension": "py", "date": "2020-03-09 08:10:06", "correct": "1", "upload": "def somme(liste):\n    res=0\n    for elem in liste:\n      res=res+elem\n    return res\n  \n ", "user": "userdId_11", "attemptID": 4978, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-29.50189", "embeddingY": "3.5970507"},{"extension": "py", "date": "2020-03-04 10:19:23", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut2<=fin1 and fin2>=debut1 :\n    return\n  else :\n    return\n  \n\n    \n    ", "user": "userdId_28", "attemptID": 4979, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "53.540333", "embeddingY": "-26.655594"},{"extension": "py", "date": "2020-03-06 00:00:30", "correct": "0", "upload": "def nbVoyelles(mot):\n    res=0\n    for elem in mot :\n       res=res+len([i])\n    return res", "user": "userdId_24", "attemptID": 4980, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-24.898825", "embeddingY": "4.1210704"},{"extension": "py", "date": "2020-04-17 00:28:37", "correct": "0", "upload": "def listeDecroissante(scores):\n  res=True\n  if len(scores)==0:\n    return res\n  else:\n    x=True\n    i=0\n    while i<len(scores) and x:\n      if scores[i]<scores[i+1]:\n        x=False\n      i=i+1\n    return x", "user": "userdId_14", "attemptID": 4981, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "24.014086", "embeddingY": "56.986008"},{"extension": "py", "date": "2020-03-05 22:07:40", "correct": "0", "upload": "def maximum(liste):\n    res=0\n    for elen in liste:\n     \tif elen>0:\n        \tres=elen\n    return res\n  \n  ", "user": "userdId_49", "attemptID": 4982, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "30.636497", "embeddingY": "-42.25791"},{"extension": "py", "date": "2020-04-14 04:44:35", "correct": "0", "upload": "def indiceInsertion(sc,scores):\n  i=0\n  res=None\n  while i<len(scores) and res==None:\n    if sc>=scores[i]:\n      res=i\n    elif sc<scores[-1]:\n      res=scores[-1]\n    i=i+1\n  return res", "user": "userdId_7", "attemptID": 4983, "exercise": "f8a820b2bd54d18d36716e3d703858f7", "exercise_name": "indiceInsertion", "embeddingX": "-22.446022", "embeddingY": "70.261635"},{"extension": "py", "date": "2020-03-03 00:05:40", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if jour1 < jour2 and mois1 < mois2 and annee1 < annee2:\n    res= -1\n  elif jour1 == jour2 and mois1 == mois2 and annee1 == annee2:\n    res= 0\n  else:\n    res= 1\n    \n    return res\n  \n  assert compareDates(10, 1, 2020, 14, 2, 2020)== -1 , \"pb avec compareDates(10, 1, 2020, 14, 2, 2020)\"\n  assert compareDates(14, 2, 2020, 11, 2, 2020)== 1 , \"pb avec compareDates(14, 2, 2020, 11, 2, 2020)\"\n  assert compareDates(10, 1, 2020, 10, 1, 2020)== 0 , \"pb avec compareDates(10, 1, 2020, 10, 1, 2020)\"", "user": "userdId_7", "attemptID": 4984, "exercise": "af7c1467ef9f7684d9ff58734067ae98", "exercise_name": "compareDates", "embeddingX": "79.75525", "embeddingY": "-24.247355"},{"extension": "py", "date": "2020-03-09 22:55:57", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n    return None", "user": "userdId_32", "attemptID": 4985, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "-87.981514", "embeddingY": "3.9394143"},{"extension": "py", "date": "2020-03-16 04:34:13", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n    if lettre=='' or mot=='':\n      res=None\n    else:\n      res=None\n      for c in mot:\n        if lettre==c:\n          res=range(len(mot))\n    return res", "user": "userdId_18", "attemptID": 4986, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-14.465115", "embeddingY": "-38.442173"},{"extension": "py", "date": "2020-03-31 04:00:07", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n  cpt=0\n  i=0\n  while i<len(l) and cpt<n:\n    if l[i]==x:\n       cpt=cpt+1\n    i=i+1\n  return cpt", "user": "userdId_12", "attemptID": 4987, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-7.528731", "embeddingY": "78.712975"},{"extension": "py", "date": "2020-03-22 05:09:38", "correct": "0", "upload": "def bissextile(annee):\n  res=False\n  if annee%4==0 and annee%4!=0 or annee%400==0:\n    res=True\n  return res", "user": "userdId_12", "attemptID": 4988, "exercise": "a7d37636649c0ada991520788deeb2d0", "exercise_name": "bissextile", "embeddingX": "48.252357", "embeddingY": "1.325164"},{"extension": "py", "date": "2020-03-03 05:30:21", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    for i in range(liste):\n      if liste[i]>res:\n        res=liste[i]\n  return res", "user": "userdId_8", "attemptID": 4989, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "2.5519376", "embeddingY": "-46.839207"},{"extension": "py", "date": "2020-04-17 03:17:41", "correct": "0", "upload": "def minimum(liste):\n  min=liste[0]\n  for i in liste: \n    if i<min:\n      min=i\n  return min", "user": "userdId_21", "attemptID": 4990, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "35.461594", "embeddingY": "-57.496174"},{"extension": "py", "date": "2020-03-12 23:48:21", "correct": "0", "upload": "def jourNuit(heure):\n  res=[]\n  if heure<0:\n    res=\"l'heure saisie est invalide\"\n  if heure>24:\n    res=\"l'heure saisie est invalide\"\n  if 6<=heure<=18:\n    if 5<heure<=12:\n      res=\"on est le matin et il fait jour\"\n    if 12<=heure<=17:\n      res=\"on est l'apr\u00e8s-midi et il fait jour\"\n    if 17<=heure<=18:\n      res=\"on est le soir et il fait jour\"\n  if 1<=heure<=5 or 19<=heure<=24:\n    if 1<=heure<=4:\n      res=\"on est la nuit et il fait nuit\"\n    if 21<=heure<=24:\n      res=\"on est la nuit et il fait nuit\"\n    if 19<=heure<=20:\n      res=\"on est le soir et il fait nuit\"\n  return res", "user": "userdId_13", "attemptID": 4991, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "70.7279", "embeddingY": "23.863346"},{"extension": "py", "date": "2020-04-11 03:52:24", "correct": "0", "upload": "def produitScalaire(vec1,vec2):\n  res=0\n  for i in range(len(vec1)):\n     res+=vec1[i]+vec2[i]\n  return res", "user": "userdId_8", "attemptID": 4992, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-51.436268", "embeddingY": "-40.04589"},{"extension": "py", "date": "2020-04-06 00:10:00", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  ok=True\n  i=0\n  j=0\n  while i<j and ok:\n    if phrase[i]=='':\n      i=i+1\n    if phrase[j]=='':\n      j=j-1\n    i=i+1\n    j=j-1\n    if phrase[i]!=phrase[-j-1]:\n      ok=False\n  return ok\n\n  ", "user": "userdId_1", "attemptID": 4993, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "-1.1055459", "embeddingY": "47.76334"},{"extension": "py", "date": "2020-03-10 03:14:55", "correct": "1", "upload": "def jourNuit(heure):\n  if heure<0 or heure>24:\n    res=\"l'heure saisie est invalide\"\n  else:#l'heure est valide\n    if heure<5 or heure>=21:\n      res=\"on est la nuit\"\n    elif heure<12:\n      res=\"on est le matin\"\n    elif heure <17:\n      res=\"on est l'apr\u00e8s-midi\"\n    else:\n      res=\"on est le soir\"\n    if heure<6 or heure>=18:\n      res=res+\" et il fait nuit\"\n    else:\n      res=res+\" et il fait jour\"\n  return res", "user": "userdId_8", "attemptID": 4994, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "72.116356", "embeddingY": "14.464688"},{"extension": "py", "date": "2020-04-07 19:47:55", "correct": "1", "upload": "def produitScalaire(vec1,vec2):\n  res=0\n  for i in range(len(vec1)):\n    res=vec1[i]*vec2[i]+res\n  return res", "user": "userdId_3", "attemptID": 4995, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-49.49396", "embeddingY": "-35.981533"},{"extension": "py", "date": "2020-03-20 00:42:30", "correct": "0", "upload": "def PermutationChaine(mot):\n  res=\"\"\n  for k in range(0,len(mot),2):\n    res=mot[k+1]+mot[k]\n\n  return res", "user": "userdId_5", "attemptID": 4996, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-48.58057", "embeddingY": "-46.996246"},{"extension": "py", "date": "2020-03-09 21:48:22", "correct": "1", "upload": "def nbVoyelles(mot):\n  listeVoyelles = [\"a\",\"e\",\"i\",\"o\",\"u\",\"y\"]\n  res = 0\n  for c in mot:\n    if c in listeVoyelles:\n      res += 1\n  return res", "user": "userdId_42", "attemptID": 4997, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "17.607576", "embeddingY": "-30.17866"},{"extension": "py", "date": "2020-03-23 22:30:10", "correct": "0", "upload": "def quatrePlus100(liste):\n  res=[]\n  x=1\n  while len(res)<4 :\n    if liste[x]>100 :\n      res=res+[liste[x]]\n    x=x+1\n  return res", "user": "userdId_28", "attemptID": 4998, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-28.249966", "embeddingY": "37.462933"},{"extension": "py", "date": "2020-04-06 15:07:05", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  i=0\n  for i in nombre:\n    if chiffre==nombre[i]:\n      cpt=cpt+1\n    i=i+1\n  return cpt", "user": "userdId_3", "attemptID": 4999, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-36.977528", "embeddingY": "-13.760617"},{"extension": "py", "date": "2020-04-12 10:56:32", "correct": "1", "upload": "def produitScalaire(vec1,vec2):\n    if len(vec1)==0 or len(vec2)==0:\n      res=0\n    else:\n      res=0\n      for i in range(len(vec1) and len(vec2)):\n        res=res+vec1[i]*vec2[i]\n    return res", "user": "userdId_11", "attemptID": 5000, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-32.011383", "embeddingY": "-41.75589"},{"extension": "py", "date": "2020-03-05 22:03:51", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n     res=None\n  else:\n    res=None\n    for i in range(len(liste)):\n      if liste[i]>res:\n        res=res\n  return res", "user": "userdId_30", "attemptID": 5001, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "1.087405", "embeddingY": "-56.60055"},{"extension": "py", "date": "2020-03-24 05:00:27", "correct": "0", "upload": "def quatrePlus100(liste):\n  i=0\n  res=[]\n  while i<len(liste) and i<8:\n    if liste[i]>100:\n      res.append(liste[i])\n    i=i+1\n  return res\n", "user": "userdId_13", "attemptID": 5002, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-25.47703", "embeddingY": "39.796413"},{"extension": "py", "date": "2020-03-06 00:18:55", "correct": "1", "upload": "def minimum(liste):\n    if len(liste) == 0:\n      res = None\n    else:\n    \tres = liste[0]\n    \tfor i in range(0,len(liste)):\n      \t\tif liste[i] < res :\n        \t\tres = liste[i]  \n    return res", "user": "userdId_29", "attemptID": 5003, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "25.975363", "embeddingY": "-68.62889"},{"extension": "py", "date": "2020-03-05 23:44:56", "correct": "0", "upload": "def nbVoyelles(mot):\n  res=0\n  for i in range(len(mot)):\n    if mot[i]==len('aeyuio'):\n      res=res+1\n  return res", "user": "userdId_30", "attemptID": 5004, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-8.9103985", "embeddingY": "-52.02743"},{"extension": "py", "date": "2020-03-19 23:46:02", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  res=''\n  if debut<0 or debut>len(s):\n    res=''\n  elif (debut+longueur)>len(s):\n    for i in range(debut,len(s)-debut):\n      res=res+s[i]\n  else:\n    for i in range (debut,debut+longueur):\n      res=res+s[i]\n  return res\n    ", "user": "userdId_40", "attemptID": 5005, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-72.81985", "embeddingY": "28.862097"},{"extension": "py", "date": "2020-03-19 23:44:42", "correct": "1", "upload": "def distribution(liste,n):\n  res=[0]*(n+1)\n  for elem in liste:\n    res[elem]=res[elem]+1\n  return res", "user": "userdId_12", "attemptID": 5006, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-59.360226", "embeddingY": "-15.403922"},{"extension": "py", "date": "2020-03-19 23:57:59", "correct": "0", "upload": "def permutationListe(liste,permutation):\n  res=[0]*len(liste)\n  for elem,smt in zip(liste,permutation):\n    res[smt]=liste[elem]\n  return res", "user": "userdId_12", "attemptID": 5007, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-54.380814", "embeddingY": "-25.798683"},{"extension": "py", "date": "2020-03-13 00:44:27", "correct": "1", "upload": "def sommeNbPairs(liste):\n    res=0\n    for n in liste:\n      if n%2==0:\n        res=res+n\n    return res\n        \n        \n      ", "user": "userdId_2", "attemptID": 5008, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "29.360699", "embeddingY": "-18.214571"},{"extension": "py", "date": "2020-03-23 00:38:23", "correct": "0", "upload": "def reconstruireChainePartielle(s,n):\n  res=\"\"\n  for i in range(0,len(s),2):\n    res=res+s[i]\n  return res", "user": "userdId_35", "attemptID": 5009, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-45.93309", "embeddingY": "-45.80741"},{"extension": "py", "date": "2020-03-19 05:34:38", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if jour1<jour2 or mois1<mois2 or annee1<annee2:\n    res=-1\n    if jour1==jour2 and mois==mois2 and annee1==annee2:\n      res=0\n  else:\n    res=1\n  return res", "user": "userdId_34", "attemptID": 5010, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "77.54347", "embeddingY": "-26.222828"},{"extension": "py", "date": "2020-03-06 00:45:19", "correct": "1", "upload": "def premiereOccurrenceLettre(lettre,mot):\n\tres = None\n\tfor l in range(len(mot)):\n\t\tif lettre == mot[l]:\n\t\t\tif res == None:\n\t\t\t\tres = l\n\treturn res", "user": "userdId_29", "attemptID": 5011, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-17.754862", "embeddingY": "-41.018875"},{"extension": "py", "date": "2020-04-07 23:38:01", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  res=0\n  while nombre>0:\n    if chiffre==nombre%10:\n      res=res+1\n    i=i+1\n    nombre=nombre//10\n  return res\n", "user": "userdId_19", "attemptID": 5012, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "16.597334", "embeddingY": "13.976306"},{"extension": "py", "date": "2020-03-06 22:03:08", "correct": "0", "upload": "def maximum(liste):\n    res = None\n    if len(liste) > 0:\n        liste.sort()\n        res = liste\n    return res[-1]", "user": "userdId_4", "attemptID": 5013, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "7.956702", "embeddingY": "-56.40743"},{"extension": "py", "date": "2020-03-08 22:01:46", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1==annee2 and mois1==mois2 and jour1==jour2:\n    return 0\n  elif annee1<=annee2 and mois1<=mois2 and jour1<jour2:\n    return -1\n  elif annee1<=annee2 and mois1>=mois2 and jour1>jour2:\n    return -1\n  elif annee1<=annee2 and mois1<=mois2 and jour1>jour2:\n    return-1\n  else:\n    return 1", "user": "userdId_1", "attemptID": 5014, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "83.74662", "embeddingY": "-14.677682"},{"extension": "py", "date": "2020-04-07 03:29:52", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=True\n  i=1\n  while i<len(liste):\n    if liste[i]!=a*liste[i-1]+b:\n      res=False\n    i+=1\n  return res\ndef suiteAriGeo(liste):\n  i=1\n  res=True\n  while i<len(liste):\n    if liste[i-1]==0:\n      i+=1\n    else:\n      if liste[i]!=liste[i-1]:\n        a=liste[i]//liste[i-1]\n        b=liste[i]-a*liste[i-1]\n        res=verifSuiteAriGeo(liste,a,b)\n      else:\n        res=False\n    i+=1 \n  return res", "user": "userdId_27", "attemptID": 5015, "exercise": "4c9665daf155b115fe13218141fa1aff", "exercise_name": "suiteAriGeo", "embeddingX": "14.119222", "embeddingY": "79.00847"},{"extension": "py", "date": "2020-03-31 04:23:53", "correct": "0", "upload": "def indiceOccurence(n,x,l):\n  res=None\n  i=0\n  cpt=0\n  while i<len(l) and cpt!=n:\n      if l[i]==x:\n        cpt+=1\n      i+=1\n  if cpt==n:\n    res=i-1\n  return res\n    ", "user": "userdId_16", "attemptID": 5016, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-9.440045", "embeddingY": "75.75603"},{"extension": "py", "date": "2020-04-07 23:14:27", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  res=False\n  prec=None\n  while nombre!=0 and not res:\n    numero=nombre%10\n    nombre=nombre//10\n    if chiffre==prec:\n      res=True\n      cpt=cpt+1\n    prec=numero\n  return cpt ", "user": "userdId_13", "attemptID": 5017, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "9.169633", "embeddingY": "23.782818"},{"extension": "py", "date": "2020-03-01 01:25:20", "correct": "1", "upload": "def nombrePair(n):\n    res = False \n    if n%2 == 0: res = True\n    return res", "user": "userdId_4", "attemptID": 5018, "exercise": "864911b08708fc8bae69311a8ddd3da7", "exercise_name": "nombrePair", "embeddingX": "43.654", "embeddingY": "-3.6303456"},{"extension": "py", "date": "2020-03-24 04:07:05", "correct": "0", "upload": "def compare(chaine1,chaine2):\n  res=0\n  i=0\n  while i<len(chaine1) and i<len(chaine2) and res==0:\n    if chaine1[i]>chaine2[i]:\n      res=-1\n    elif chaine1[i]<chaine2[i]:\n      res=1\n    i=i+1\n    return res\n  ", "user": "userdId_21", "attemptID": 5019, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-23.439766", "embeddingY": "60.118343"},{"extension": "py", "date": "2020-04-08 00:52:35", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res = True\n  i = 0\n  while res and i < len(liste)-1:\n    if liste[i+1] != (a*liste[i]+b) :\n      res = False\n    i = i + 1\n  return res\n\ndef suiteAriGeo(liste):\n  if len(liste) < 3 :\n    res = True\n  else :\n    ecart1 = liste[1]-liste[0]\n    ecart2 = liste[2]-liste[1]\n    if ecart1 == 0 :\n      res = False\n    else :\n      a = ecart2/ecart1\n      b = liste[1]-a*liste[0]\n      res = verifSuiteAriGeo(liste,a,b)\n  return res\n", "user": "userdId_17", "attemptID": 5020, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "16.560406", "embeddingY": "71.31566"},{"extension": "py", "date": "2020-03-03 05:36:50", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    for i in range(len(liste)):\n      if liste[i]>res:\n        res=liste[i]\n  return res", "user": "userdId_8", "attemptID": 5021, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "5.137648", "embeddingY": "-62.078472"},{"extension": "py", "date": "2020-04-02 23:14:06", "correct": "1", "upload": "def listeSymetrique(l):\n  i=0\n  n=0\n  while i<len(l)/2 and n==0:\n    if l[i]==l[len(l)-i-1]:\n      i=i+1\n      n=0\n    else:\n      n=1\n  if n==0:\n    res=True\n  else:\n    res=False\n  return res\n    ", "user": "userdId_19", "attemptID": 5022, "exercise": "8eb27aeda471a467e2223abebeca886e", "exercise_name": "listeSymetrique", "embeddingX": "25.177832", "embeddingY": "56.946957"},{"extension": "py", "date": "2020-03-22 23:43:42", "correct": "1", "upload": "def minimum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n      res=liste[0]\n      for i in range(len(liste)):\n        if res>liste[i]:\n          res=liste[i]\n  return res", "user": "userdId_16", "attemptID": 5023, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "1.2401507", "embeddingY": "-62.54595"},{"extension": "py", "date": "2020-04-05 09:03:10", "correct": "0", "upload": "def phrasePalindrome(phrase):\n    if phrase=='':\n      ok=True\n    else:\n      ok=True\n      i=0\n      j=-1\n      while i<len(phrase) and j<len(phrase) and ok:\n        if phrase[i]!=phrase[j] and phrase[i]!='' and phrase[j]!='':\n          ok=False\n        if phrase[i]=='' and phrase[j]!='':\n          i+=1\n        if phrase[j]=='' and phrase[i]!='':\n          j-=1\n    return ok", "user": "userdId_18", "attemptID": 5024, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "38.197975", "embeddingY": "38.21263"},{"extension": "py", "date": "2020-04-12 10:02:31", "correct": "0", "upload": "def phrasePalindrome(phrase):\n    if len(phrase)==0:\n      res=True\n    else:\n      res=True\n      i=0\n      while i<len(phrase)//2 and res:\n        if phrase[i]!=phrase[-(i+1)]:\n          res=False\n        if phrase[i]=='':\n            res=False\n        i+=1\n    return res", "user": "userdId_11", "attemptID": 5025, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "27.984705", "embeddingY": "36.133236"},{"extension": "py", "date": "2020-03-05 21:33:02", "correct": "0", "upload": "def somme(liste):\n  if liste[i]==0:\n    res=0\n  else:\n    res=0\n    for i in range(len(liste)):\n      res=res+liste[i]\n    return res", "user": "userdId_30", "attemptID": 5026, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "15.145727", "embeddingY": "-55.49911"},{"extension": "py", "date": "2020-04-12 11:35:35", "correct": "0", "upload": "def phrasePalindrome(phrase):\n    if len(phrase)==0:\n      res=True\n    else:\n      res=True\n      i=0\n      x=''\n      while i<len(phrase)//2 and res:\n        if phrase[i]!=phrase[-(i+1)]:\n          res=False\n        if phrase[i]==x or phrase[-(i+1)]==x:\n          res=False\n        i+=2\n    return res", "user": "userdId_11", "attemptID": 5027, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "31.73035", "embeddingY": "31.08536"},{"extension": "py", "date": "2020-03-06 00:27:03", "correct": "0", "upload": "def moyenne(liste):\n    res = 0\n    nb = 0\n    for nb in liste:\n      res = res + nb\n      nb+=1\n    moy = res/nb\n\t\n    return moy", "user": "userdId_29", "attemptID": 5028, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-22.360794", "embeddingY": "-0.502937"},{"extension": "py", "date": "2020-04-12 10:06:14", "correct": "0", "upload": "def phrasePalindrome(phrase):\n    if len(phrase)==0:\n      res=True\n    else:\n      res=True\n      i=0\n      x=''\n      while i<len(phrase)//2 and res:\n        if phrase[i]!=phrase[-(i+1)]:\n          res=False\n        i+=1\n        if x in phrase:\n          res=False\n    return res", "user": "userdId_11", "attemptID": 5029, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "33.315453", "embeddingY": "33.343243"},{"extension": "py", "date": "2020-03-16 08:36:51", "correct": "0", "upload": "def prononcable(mot):\n  if len(mot)==0:\n    return True\n  for lettre in mot:\n    if lettre=='aeiouy' and lettre!=3*lettre:\n      return True\n    else:\n      if lettre!='aeiouy' and lettre!=3*lettre:\n        return False", "user": "userdId_1", "attemptID": 5030, "exercise": "6318b210c201fba050d60bc0913cb7ef", "exercise_name": "prononcable", "embeddingX": "17.239449", "embeddingY": "-44.043987"},{"extension": "py", "date": "2020-03-14 03:27:58", "correct": "0", "upload": "def moyenne(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=0\n    x=0\n    for elem in liste:\n      res=res+elem\n      x=x+1\n  moy=x%res\n  return moy", "user": "userdId_14", "attemptID": 5031, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-3.8037877", "embeddingY": "-3.2703238"},{"extension": "py", "date": "2020-03-05 21:42:37", "correct": "1", "upload": "def somme(liste):\n  res=0\n  for i in range(len(liste)):\n  \tres=res+liste[i]\n  return res", "user": "userdId_14", "attemptID": 5032, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-45.59889", "embeddingY": "-37.80078"},{"extension": "py", "date": "2020-04-07 03:45:48", "correct": "1", "upload": "def produitScalaire(vec1,vec2):\n  if len(vec1)==[] and len(vec2)==[]:\n    res=0\n  else: \n    res=0\n    for i in range(len(vec1) and len(vec2)):\n      vec1[i]==vec2[i]\n      res=res+vec1[i]*vec2[i]\n  return res", "user": "userdId_21", "attemptID": 5033, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-29.487034", "embeddingY": "-44.487896"},{"extension": "py", "date": "2020-03-06 00:58:13", "correct": "1", "upload": "def ecart(liste):\n\tif len(liste) == 0:\n\t\tres = None\n\telse:\n\t\tma = liste[0]\n\t\tmi = liste[0]\n\t\tfor i in range(len(liste)):\n\t\t\tif liste[i] > ma and liste[i] > mi:\n\t\t\t\tma = liste[i]\n\t\t\telif liste[i] < ma and liste[i]< mi:\n\t\t\t\tmi = liste[i]\n\t\tres = ma - mi\n\treturn res", "user": "userdId_29", "attemptID": 5034, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "-2.1654382", "embeddingY": "-84.99297"},{"extension": "py", "date": "2020-03-22 05:25:36", "correct": "0", "upload": "def maximum(liste):\n  maxi=liste[0]\n  for i in range(len(liste)):\n    if liste[i]>maxi:\n      maxi=liste[i]\n  return maxi", "user": "userdId_12", "attemptID": 5035, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "0.6276821", "embeddingY": "-66.630684"},{"extension": "py", "date": "2020-03-31 02:35:37", "correct": "1", "upload": "def compare(chaine1,chaine2):\n    res=0\n    cpt=0\n    i=0\n    while i<len(chaine1) and i<len(chaine2) and cpt!=2:\n      if chaine1[i]>chaine2[i]:\n        res=1\n        cpt=cpt+1\n      elif chaine1[i]<chaine2[i]:\n        res=-1\n        cpt=cpt+1\n      i=i+1\n    if res==0:\n      if len(chaine1)>len(chaine2):\n        res=1\n      elif len(chaine1)==len(chaine2):\n        res=0\n      else:\n        res=-1\n    return res", "user": "userdId_21", "attemptID": 5036, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-29.611158", "embeddingY": "66.2553"},{"extension": "py", "date": "2020-03-05 22:13:22", "correct": "0", "upload": "def maximum(liste):\n    res=0\n    for elen in liste:\n     \tif elen>res:\n        \tres=elen\n    return res\n  \n  ", "user": "userdId_49", "attemptID": 5037, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "31.379581", "embeddingY": "-42.71051"},{"extension": "py", "date": "2020-03-19 23:31:46", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  res=\"\"\n  if longueur>len(s):\n    longueur=longueur-(longueur-len(s))\n  for i in range(debut,longueur):\n    res=res+s[i]\n  return res\n", "user": "userdId_13", "attemptID": 5038, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-73.69683", "embeddingY": "13.307688"},{"extension": "py", "date": "2020-05-04 21:22:24", "correct": "1", "upload": "def bissextile(annee):\n  res=False\n  if annee%4==0 and annee%100!=0 or annee%400==0:\n    res=True\n  return res", "user": "userdId_26", "attemptID": 5039, "exercise": "a7d37636649c0ada991520788deeb2d0", "exercise_name": "bissextile", "embeddingX": "47.712727", "embeddingY": "1.4067515"},{"extension": "py", "date": "2020-03-03 06:32:19", "correct": "1", "upload": "def minimum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=liste[0]\n    for i in range (1,len(liste)):\n      if liste [i]<res:\n        res=liste [i]\n    return res", "user": "userdId_25", "attemptID": 5040, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "26.072445", "embeddingY": "-67.89946"},{"extension": "py", "date": "2020-04-07 23:38:11", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  ok=False\n  i=0\n  while i<len(phrase)//2:\n    if phrase[i]==\" \" and phrase[-i]==\" \":\n      ok=False\n    elif phrase[i]!=phrase[-i-1]:\n      ok=False\n    else:\n      ok=True\n    i+=1\n  if phrase==\"\":\n    ok=True\n  return ok", "user": "userdId_13", "attemptID": 5041, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "28.439543", "embeddingY": "36.025784"},{"extension": "py", "date": "2020-03-27 06:31:27", "correct": "0", "upload": "def compare(chaine1,chaine2):\n  res=\"\"\n  i=0\n  while i<len(chaine1) and i<len(chaine2):\n    if chaine1[i]<chaine2[i]:\n      res=-1\n    elif chaine1[1]==chaine2[i]:\n      res=0\n    else:\n      res=1\n    i=i+1\n  return res\n   ", "user": "userdId_34", "attemptID": 5042, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-27.564976", "embeddingY": "61.046383"},{"extension": "py", "date": "2020-03-10 04:28:53", "correct": "1", "upload": "def sommeNPremiersEntiersPairs(n):\n    res=0\n    for x in range(1,n+1):\n        if x%2==0:\n            res=res+x        \n    return res", "user": "userdId_39", "attemptID": 5043, "exercise": "3030dc079e6607c253e89e8ef4784b74", "exercise_name": "sommeNPremiersEntiersPairs", "embeddingX": "30.209986", "embeddingY": "-11.957328"},{"extension": "py", "date": "2020-04-12 05:35:48", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=False\n  c=[]\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n    \n  return c", "user": "userdId_8", "attemptID": 5044, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-77.448586", "embeddingY": "21.901901"},{"extension": "py", "date": "2020-03-04 01:36:26", "correct": "0", "upload": "def polynome(a,b,c):\n    delta =  b**2 - (4*a*c)\n    \n    if delta > 0:\n        x = (-b + sqrt(delta))/2*a , (-b -sqrt(delta))/2*a\n        \n         \n    elif delta == 0:\n        x = -(b/2*a)\n        \n    else:\n        x = \"pas de solution\"\n        \n    return x", "user": "userdId_32", "attemptID": 5045, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-52.575798", "embeddingY": "3.4617355"},{"extension": "py", "date": "2020-03-04 01:38:21", "correct": "0", "upload": "import math\ndef polynome(a,b,c):\n    delta =  b**2 - (4*a*c)\n    \n    if delta > 0:\n        x = (-b + math.sqrt(delta))/2*a , (-b -math.sqrt(delta))/2*a\n        \n         \n    elif delta == 0:\n        x = -(b/2*a)\n        \n    else:\n        x = \"pas de solution\"\n        \n    return x", "user": "userdId_32", "attemptID": 5046, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-47.965134", "embeddingY": "9.977714"},{"extension": "py", "date": "2020-03-31 07:57:46", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n    if len(mot)==0 or lettre not in mot:\n      res=None\n    else:\n      res=0\n      for i in range(len(mot)):\n        if mot[i]==lettre:\n          res=mot[i]\n    return res", "user": "userdId_11", "attemptID": 5047, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-18.62185", "embeddingY": "-38.75199"},{"extension": "py", "date": "2020-06-02 21:30:16", "correct": "1", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  res=True\n  if debut1>fin2 or debut2>fin1:\n    res=False\n  return res", "user": "userdId_12", "attemptID": 5048, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "64.256096", "embeddingY": "-22.373613"},{"extension": "py", "date": "2020-04-07 11:18:00", "correct": "0", "upload": "def suiteGeo(liste):\n  ok=True\n  i=1\n  if len(liste)==0 and len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i]!=0:\n      q=liste[1]/liste[0]\n    if liste[i]!=0:\n      if liste[i+1]/liste[i]!=q:\n        ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 5049, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "29.138153", "embeddingY": "61.78693"},{"extension": "py", "date": "2020-03-31 06:35:28", "correct": "0", "upload": "def semestreValide(ue1,ue2):\n    res=False\n    if ue1>=10 and ue2>=10:\n      res=True\n    else:\n      res=False\n    if ue1>=10 and ue2<10:\n      res=True\n    else:\n      res=False\n    if ue1<10 and ue2<10:\n      res=False\n    return res", "user": "userdId_11", "attemptID": 5050, "exercise": "70ae7ad6cf504e0fa8cedebd8e8a825f", "exercise_name": "semestreValide", "embeddingX": "67.38016", "embeddingY": "-2.2702837"},{"extension": "py", "date": "2020-04-13 21:58:48", "correct": "1", "upload": "def nbOccurrencesJoueur(joueurs,nom):\n  res=0\n  for i in joueurs:\n    if nom==i:\n    \tres=res+1\n  return res", "user": "userdId_19", "attemptID": 5051, "exercise": "00ee5faf82e54951fbdb2ba2656f7ae7", "exercise_name": "nbOccurrencesJoueur", "embeddingX": "-12.38048", "embeddingY": "-27.94678"},{"extension": "py", "date": "2020-04-14 03:40:55", "correct": "0", "upload": "def meilleurScoreJoueur(scores,joueurs,nom):\n  if nom not in joueurs:\n    mSJ=0\n  else:\n    mSJ=None\n    for i in range(len(joueurs)):\n      if scores[i]>mSJ and joueurs[i]==nom:\n        mSJ=scores[i]\n  return mSJ", "user": "userdId_18", "attemptID": 5052, "exercise": "c96fadc94086276f98451a798b3bb730", "exercise_name": "meilleurScoreJoueur", "embeddingX": "-14.0068445", "embeddingY": "-49.745872"},{"extension": "py", "date": "2020-03-17 05:12:51", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  fin= debut+longueur\n  if fin>len(s):\n    fin=len(s)\n  for i in range(debut,fin):\n      res=res+s[i]\n  return res", "user": "userdId_9", "attemptID": 5053, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-77.99897", "embeddingY": "15.570522"},{"extension": "py", "date": "2020-03-06 00:17:19", "correct": "0", "upload": "def maximum(liste):\n  res=l[0]\n  for elem in liste:\n    if res<elem:\n      res=elem\n  return res", "user": "userdId_23", "attemptID": 5054, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "43.411522", "embeddingY": "-60.354404"},{"extension": "py", "date": "2020-05-04 22:42:33", "correct": "0", "upload": "def prononcable(mot):\n  res=True\n  cpt=0\n  i=0\n  while i<len(mot) and res:\n    if mot[i] not in 'aeiouy':\n      cpt+=1\n    elif mot[i] in 'aeiouy':\n      cpt=0\n    elif cpt>=3:\n      res=False\n    i+=1\n  return res", "user": "userdId_26", "attemptID": 5055, "exercise": "6318b210c201fba050d60bc0913cb7ef", "exercise_name": "prononcable", "embeddingX": "14.390871", "embeddingY": "38.434925"},{"extension": "py", "date": "2020-04-07 04:23:41", "correct": "1", "upload": "def compteChiffre(chiffre, nombre):\n  res = 0\n  if nombre == 0 and chiffre == 0:\n    res = 1\n  while nombre > 0:\n    if nombre % 10 == chiffre:\n      res += 1\n    nombre = nombre // 10\n\n  return res", "user": "userdId_42", "attemptID": 5056, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "23.981041", "embeddingY": "7.669757"},{"extension": "py", "date": "2020-04-08 00:01:52", "correct": "0", "upload": "def palindrome(phrase):\n  P=[]\n  i=0\n  c=True\n  for lettre in phrase:\n    if 'a'>=lettre>='z':\n      P.append(lettre)\n    \n  while i<(len(P)/2) and c:\n    \n    if P[i]==P[len(P)-i-1]:\n      c=True\n    else:\n      c=False\n    i=i+1\n  if c==True:\n    return True\n  else:\n    return False", "user": "userdId_19", "attemptID": 5057, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "9.861876", "embeddingY": "-2.085407"},{"extension": "py", "date": "2020-04-07 23:43:25", "correct": "0", "upload": "def produitScalaire(vec1,vec2):\n  if vec1==[] and vec2==[]:\n    res=0\n  else:\n    res=0\n    for i in range(len(vec1)):\n      res=res+vec1[i]*vec2[i]\n    return res\n      ", "user": "userdId_2", "attemptID": 5058, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-30.609797", "embeddingY": "-42.80915"},{"extension": "py", "date": "2020-04-06 15:13:31", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  ok=True\n  cpt=0\n  i=0\n  while i<len(nombre) and ok:\n    if chiffre==nombre[i]:\n      cpt=cpt+1\n    i=i+1\n  return cpt", "user": "userdId_3", "attemptID": 5059, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-3.294137", "embeddingY": "45.89218"},{"extension": "py", "date": "2020-03-14 00:50:17", "correct": "0", "upload": "def maximum(liste):\n    if len(liste)==0:\n      res=None\n    else:\n      max=liste[0]\n      for i in range(1,len(liste)):\n        if liste[i]>max:\n          max=liste[i]\n    return max\n  ", "user": "userdId_11", "attemptID": 5060, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "9.106306", "embeddingY": "-67.10426"},{"extension": "py", "date": "2020-04-07 10:39:01", "correct": "0", "upload": "def suiteGeo(liste):\n  ok=True\n  i=0\n  if len(liste)==0:\n    ok=True\n  while i<len(liste)-2 and ok:\n    q=liste[1]*liste[0]\n    if liste[i+2]/liste[i+1]!=q:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 5061, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "28.475191", "embeddingY": "68.53283"},{"extension": "py", "date": "2020-03-10 21:09:50", "correct": "0", "upload": "def ecart(liste):\n  res=0\n  if len(liste)==0 or 1:\n    res=None\n    return None", "user": "userdId_14", "attemptID": 5062, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "9.857241", "embeddingY": "-51.20575"},{"extension": "py", "date": "2020-04-06 03:49:15", "correct": "0", "upload": "def motPalindrome(mot):\n  i=0\n  if len(mot)==0:\n    res=True\n    good=True\n  else:\n    while i<len(mot)-1 and good==True:\n      l1=mot[i]\n      l2=mot[i+1]\n      if l1 in 'aeiouy' and l2 in 'bcdfghjklmnpqrstvxz' or l1 in 'bcdfghjklmnpqrstvxz' and l2 in 'aeiouy':\n        res=True\n      else:\n        res=False\n        good=False\n  return res", "user": "userdId_26", "attemptID": 5063, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "7.2870092", "embeddingY": "54.08143"},{"extension": "py", "date": "2020-05-04 20:27:05", "correct": "1", "upload": "def polynome(a,b,c):\n  res=\"pas de solution\"\n  delta=b**2-4*a*c\n  if delta>0:\n    S1=(-b+delta**(1/2))/(2*a)\n    S2=(-b-delta**(1/2))/(2*a)\n    res=(S1,S2)\n  elif delta==0:\n    res=-b/(2*a)\n  return res", "user": "userdId_8", "attemptID": 5064, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-54.43026", "embeddingY": "7.4085293"},{"extension": "py", "date": "2020-03-10 04:28:40", "correct": "0", "upload": "def sommeNPremiersEntiersPairs(n):\n    res=0\n    for x in range(1,n+1,2):\n        if x%2==0:\n            res=res+x        \n    return res", "user": "userdId_39", "attemptID": 5065, "exercise": "3030dc079e6607c253e89e8ef4784b74", "exercise_name": "sommeNPremiersEntiersPairs", "embeddingX": "30.670574", "embeddingY": "-11.300959"},{"extension": "py", "date": "2020-04-06 08:58:36", "correct": "0", "upload": "def nbSyllabes(mot):\n  voy='aeiouy'\n  if mot=='':\n    cpt=0\n  else:\n    cpt=0\n    if mot[0] in voy:\n      cpt+=1\n    for i in range(1,len(mot)):\n      if mot[i] in voy and mot[i-1] not in voy:\n        cpt+=1\n    if mot[-1]=='e':\n      cpt-=1\n    if cpt==0:\n      cpt+=1\n  return cpt", "user": "userdId_18", "attemptID": 5066, "exercise": "6d4e6a658243ba03c0794d044416daf2", "exercise_name": "nbSyllabes", "embeddingX": "-23.510157", "embeddingY": "-71.31252"},{"extension": "py", "date": "2020-04-07 03:23:12", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=True\n  i=1\n  while i<len(liste):\n    if liste[i]!=a*liste[i-1]+b:\n      res=False\n    i+=1\n  return res\ndef suiteAriGeo(liste):\n  i=1\n  res=True\n  while i<len(liste):\n    if liste[i-1]==0:\n      i+=1\n    else:\n      if liste[i]!=liste[i-1]:\n        a=liste[i]//liste[i-1]\n        b=liste[i]-a*liste[i-1]\n        res=verifSuiteAriGeo(liste,a,b)\n    i+=1 \n  return res", "user": "userdId_27", "attemptID": 5067, "exercise": "4c9665daf155b115fe13218141fa1aff", "exercise_name": "suiteAriGeo", "embeddingX": "14.126452", "embeddingY": "79.00558"},{"extension": "py", "date": "2020-04-11 07:05:28", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  res=True\n  i=0\n  while i<len(phrase) and res:\n    if phrase[i]==' ':\n      i=0\n    elif phrase[i]!=phrase[-i-1]:\n      res=False\n    i+=1\n  return res", "user": "userdId_8", "attemptID": 5068, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "28.904259", "embeddingY": "40.6529"},{"extension": "py", "date": "2020-03-09 22:50:14", "correct": "0", "upload": "def ecart(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    max=0\n    min=0\n    for i in range(len(liste)):\n      if liste[i]>max:\n        max=liste[i]\n    for i in range(len(liste)):\n      if liste[i]<min:\n        min=liste[i]\n    res=max-min\n    return res", "user": "userdId_12", "attemptID": 5069, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "13.151257", "embeddingY": "-84.27477"},{"extension": "py", "date": "2020-03-31 04:07:14", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n  ok=True\n  i=0\n  cpt=0\n  while i<len(l) and ok:\n    if l[i]==x:\n      #instructions\n      cpt=cpt+1\n    if cpt==n:\n      ok=False\n    i=i+1\n  if cpt!=n:\n    i=None\n  return i", "user": "userdId_3", "attemptID": 5070, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-3.1205785", "embeddingY": "76.62687"},{"extension": "py", "date": "2020-03-15 00:43:43", "correct": "1", "upload": "def jourNuit(heure):\n  if heure<0 or heure>24:\n    res=\"l'heure saisie est invalide\"\n  else:#l'heure est valide\n    if heure<5 or heure>=21:\n      res=\"on est la nuit \"\n    elif heure<12:\n      res=\"on est le matin \"\n    elif heure<17:\n      res=\"on est l'apr\u00e8s-midi \"\n    else:\n      res=\"on est le soir \"\n    if heure<6 or heure>=18:\n      res=res+\"et il fait nuit\"\n    else:\n      res=res+\"et il fait jour\"\n  return res", "user": "userdId_8", "attemptID": 5071, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "72.58567", "embeddingY": "15.664224"},{"extension": "py", "date": "2020-03-24 03:14:50", "correct": "1", "upload": "def quatrePlus100(liste):\n  res=[]\n  i=0\n  while i<len(liste) and len(res)<4:\n    if liste[i]>100:\n      res=res+[liste[i]]\n    i=i+1\n  return res", "user": "userdId_26", "attemptID": 5072, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-27.027021", "embeddingY": "43.024345"},{"extension": "py", "date": "2020-04-29 01:45:17", "correct": "1", "upload": "def nombresPremiers(n):\n    res=[]\n    nb=2\n    while len(res)<n:\n      ok=True\n      i=0\n      while i<len(res) and ok:\n        if nb%res[i]==0:\n          ok=False\n        i+=1\n      if ok:\n        res.append(nb)\n      nb+=1\n    return res\n  ", "user": "userdId_11", "attemptID": 5073, "exercise": "7eda5a2bd3cdd0a510f96448337384d9", "exercise_name": "nombresPremiers", "embeddingX": "9.217409", "embeddingY": "59.373894"},{"extension": "py", "date": "2020-03-10 21:42:22", "correct": "0", "upload": "def ecart(liste):\n  res1=liste[0]\n  res2=res1\n  for i in range(1,len(liste)):\n    if liste[i]>res1:\n      res1=liste[i]\n    if liste[i]<res2:\n      res2=liste[i]\n  res=res1-res2\n  return res", "user": "userdId_14", "attemptID": 5074, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "0.6833193", "embeddingY": "-82.50867"},{"extension": "py", "date": "2020-04-13 21:46:14", "correct": "0", "upload": "def meilleurScoreJoueur(scores,joueurs,nom):\n  res=0\n  for i in len(joueurs):\n    if nom==joueurs[i]:\n      if scores[i]>res:\n        res=scores[i]\n  return res", "user": "userdId_19", "attemptID": 5075, "exercise": "c96fadc94086276f98451a798b3bb730", "exercise_name": "meilleurScoreJoueur", "embeddingX": "-36.138344", "embeddingY": "-16.431854"},{"extension": "py", "date": "2020-05-11 00:31:01", "correct": "1", "upload": "def listeDecroissante(scores):\n  ok=True\n  i=0\n  while i<len(scores)-1 and ok:\n    ok=scores[i]>scores[i+1]\n    i+=1\n  return ok\n", "user": "userdId_12", "attemptID": 5076, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "14.678898", "embeddingY": "45.200558"},{"extension": "py", "date": "2020-03-06 00:14:42", "correct": "0", "upload": "def maximum(liste):\n  res=liste[0]\n  for i in range(len(liste)) :\n     if liste[i]>res :\n        res=res+liste[i]\n  return res", "user": "userdId_24", "attemptID": 5077, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "0.03139498", "embeddingY": "-66.57959"},{"extension": "py", "date": "2020-03-05 22:20:25", "correct": "0", "upload": "def maximum(liste):\n  res=-12\t\n  for elem in liste:\n    if res<elem:\n      res=elem\n  return res\n  ", "user": "userdId_23", "attemptID": 5078, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "43.783943", "embeddingY": "-53.400352"},{"extension": "py", "date": "2020-04-12 07:56:12", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n    cpt=0\n    decomp=nombre\n    x=nombre%10\n    while decomp!=0:\n      decomp=nombre//10\n      if x!=chiffre:\n        decomp=decomp//10\n        x=decomp%10\n      else:\n        cpt+=1\n    return cpt", "user": "userdId_11", "attemptID": 5079, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "4.9608984", "embeddingY": "15.577449"},{"extension": "py", "date": "2020-03-31 05:49:14", "correct": "0", "upload": "def stockerChiffres(nombre):\n  cpt=0\n  res=[]\n  nb=nombre\n  while nb!=0:\n    res=res+nb%10\n    nb=nb//10\n  return res\n    ", "user": "userdId_28", "attemptID": 5080, "exercise": "49a87f644f84a443327fb4315b47f249", "exercise_name": "stockerChiffres", "embeddingX": "0.6667196", "embeddingY": "16.672634"},{"extension": "py", "date": "2020-03-02 02:43:59", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if jour1<jour2 and mois1<mois2 and annee1!=annee2:\n    return -1\n  elif jour1!=jour2 and mois1!=mois2 and annee1!=annee2:\n    return 0\n  else:\n    return 1\n  \ncompareDates(10,1,2020,14,2,2020)\ncompareDates(14,2,2020,11,2,2020)\ncompareDates(10,1,2020,10,1,2020)", "user": "userdId_1", "attemptID": 5081, "exercise": "af7c1467ef9f7684d9ff58734067ae98", "exercise_name": "compareDates", "embeddingX": "88.87401", "embeddingY": "-17.43843"},{"extension": "py", "date": "2020-03-31 04:12:51", "correct": "1", "upload": "def indiceOccurrence(n,x,l):\n  ok=True\n  i=0\n  cpt=0\n  while i<len(l) and ok:\n    if l[i]==x:\n      #instructions\n      cpt=cpt+1\n    if cpt==n:\n      ok=False\n    i=i+1\n  i=i-1\n  if cpt!=n:\n    i=None\n  return i", "user": "userdId_3", "attemptID": 5082, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-3.298586", "embeddingY": "76.593254"},{"extension": "py", "date": "2020-03-23 12:05:40", "correct": "1", "upload": "def prononcable(mot):\n    consonne=True\n    cpt=0\n    i=0\n    while cpt<=3 and i<len(mot):\n        if mot[i] in 'aeiouy':    #on observe une voyelle\n            if consonne :\n                consonne=False\n                cpt=1         #on d\u00e9bute une nouvelle s\u00e9quence de voyelles\n            else:\n                cpt+=1        #on poursuit la s\u00e9quence de voyelles\n        else: #on suppose qu'une non voyelle est une consonne\n            if consonne:\n                cpt+=1        #on poursuit une s\u00e9quence de consonnes\n            else:\n                consonne=True\n                cpt=1         #on d\u00e9bute une nouvelle s\u00e9quence de consonnes\n        i+=1\n    return cpt<=3", "user": "userdId_32", "attemptID": 5083, "exercise": "6318b210c201fba050d60bc0913cb7ef", "exercise_name": "prononcable", "embeddingX": "15.519917", "embeddingY": "38.740215"},{"extension": "py", "date": "2020-04-17 03:17:32", "correct": "0", "upload": "def minimum(liste):\n  min=liste[1]\n  for i in liste: \n    if i<min:\n      min=i\n  return min", "user": "userdId_21", "attemptID": 5084, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "35.44107", "embeddingY": "-57.493797"},{"extension": "py", "date": "2020-03-15 06:22:42", "correct": "1", "upload": "def compareDates(j1,m1,a1,j2,m2,a2):\n    if a1<a2: \n      res=-1\n    elif a1>a2:\n      res=1\n    elif m1<m2:\n      res=-1\n    elif m1>m2:\n      res=1\n    elif j1<j2:\n      res=-1\n    elif j1>j2:\n      res=1\n    else: \n      res=0\n    return res", "user": "userdId_21", "attemptID": 5085, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "81.67033", "embeddingY": "-33.647648"},{"extension": "py", "date": "2020-03-03 06:17:22", "correct": "0", "upload": "def nbVoyelles(mot):\n  res=0\n  for lettre in range(len(mot)):\n       res=res+mot[lettre]\n  return res", "user": "userdId_25", "attemptID": 5086, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-42.09815", "embeddingY": "-33.99203"},{"extension": "py", "date": "2020-03-05 22:04:44", "correct": "0", "upload": "def maximum(liste):\n  if len(liste):\n    res=None \n  else:\n      res=0\n      for i in range(1,len(liste)):\n        res=len(liste)>res\n        res=len(liste)  \n  return res", "user": "userdId_25", "attemptID": 5087, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "5.05113", "embeddingY": "-55.531918"},{"extension": "py", "date": "2020-04-12 07:03:52", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  if liste==[]:\n    res=True\n  c=[]\n  res=False\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n    c=[liste[0]]//2+c\n  return c", "user": "userdId_8", "attemptID": 5088, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-76.9261", "embeddingY": "11.873"},{"extension": "py", "date": "2020-03-19 23:27:56", "correct": "1", "upload": "def reconstruireChainePartielle(s,n):\n  res=''\n  for i in range(0,len(s),n):\n    res=res+s[i]\n  return res\n", "user": "userdId_40", "attemptID": 5089, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-59.455715", "embeddingY": "-41.23673"},{"extension": "py", "date": "2020-03-15 07:18:54", "correct": "0", "upload": "def jourNuit(heure):\n  if heure<0 and heure>24:\n    res=\"l'heure saisie est invalide\"\n  else:\n    if heure<5 or heure>=21:\n      res=\"on est la nuit\"\n    elif heure<12:\n      res=\"on est le matin\"\n    elif heure<17:\n      res=\"on est l'apr\u00e8s-midi\"\n    else:\n      res=\"on est la soir\u00e9e\"\n    if heure>=6 and heure<18:\n      res=res+' et il fait jour'\n    else:\n      res=res+' et il fait nuit'\n  return res", "user": "userdId_12", "attemptID": 5090, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "78.40797", "embeddingY": "19.47588"},{"extension": "py", "date": "2020-03-05 06:31:54", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut1 in fin2:\n    res=True\n    \n    \n  if debut2 in fin1:\n    res=True\n    \n  \n  return res\n  ", "user": "userdId_5", "attemptID": 5091, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "-59.848175", "embeddingY": "23.754757"},{"extension": "py", "date": "2020-03-06 00:06:23", "correct": "0", "upload": "def nbVoyelles(mot):\n  cpt=0\n  if elem in liste==(a,e,i,o,u,y):\n    cpt=cpt+1\n  return cpt", "user": "userdId_1", "attemptID": 5092, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "8.149233", "embeddingY": "-16.12743"},{"extension": "py", "date": "2020-02-29 06:11:41", "correct": "0", "upload": "def polynome(a,b,c):\n    import math\n    delta=(b**2)-(4*a*c)\n    if delta>0:\n      x1=(-b-(math.sqrt(delta)))/(2*a)\n      x2=(-b+(math.sqrt(delta)))/(2*a)\n      return (x1,x2)\n    elif delta==0:\n      x0=-b/(2*a)\n      return x0\n    else:\n      return 'pas de solution'", "user": "userdId_18", "attemptID": 5093, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-52.758373", "embeddingY": "6.1404853"},{"extension": "py", "date": "2020-04-14 04:27:38", "correct": "1", "upload": "def meilleurScoreJoueur(score,listejoueur,nom):\n  res=0\n  trouve=False\n  i=0\n  while i<len(score) and not trouve:\n    if nom==listejoueur[i]:\n       res=score[i]\n       trouve=True     \n    i=i+1\n  return res", "user": "userdId_39", "attemptID": 5094, "exercise": "c96fadc94086276f98451a798b3bb730", "exercise_name": "meilleurScoreJoueur", "embeddingX": "-1.5037086", "embeddingY": "73.08242"},{"extension": "py", "date": "2020-04-03 01:09:36", "correct": "0", "upload": "def doubleChiffre(nombre):\n  trouve=False\n  prec=None\n  while nombre!=0 and not trouve:\n    if prec==nombre%10:\n      trouve=True\n    nombre=nombre//10\n    prec=nombre%10\n  return trouve", "user": "userdId_1", "attemptID": 5095, "exercise": "c83ea6acd3e9f6f5543e87d515e8a44a", "exercise_name": "doubleChiffre", "embeddingX": "12.755482", "embeddingY": "21.32723"},{"extension": "py", "date": "2020-04-11 04:54:41", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  res=0\n  while nombre!=0:\n    nombre=nombre//10\n    if nombre[i]==chiffre:\n      res+=1\n  return res", "user": "userdId_8", "attemptID": 5096, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "19.659302", "embeddingY": "10.909943"},{"extension": "py", "date": "2020-03-31 03:41:37", "correct": "0", "upload": "def fusion(liste1,liste2):\n  res=[]\n  i=0\n  j=0\n  while i<len(liste1) and i<len(liste2):\n    if liste1[i]<liste2[j]:\n      res.append(liste1[i])\n      i=i+1\n    else:\n      res.append(liste1[i])\n      j=j+1\n      while j<len(liste2):\n        res.append(liste2[j])\n        j=j+1\n      while i<len(liste1):\n          res.append(liste1[i])\n          i=i+1\n  return res", "user": "userdId_36", "attemptID": 5097, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-40.66493", "embeddingY": "46.49475"},{"extension": "py", "date": "2020-03-06 00:26:42", "correct": "0", "upload": "def ecart(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    def maximum(liste):\n      maxi=liste[0]\n      for i in range(len(liste)):\n        if liste[i]>maxi:\n          maxi=liste[i]\n    def minimum(liste):\n      mini=liste[0]\n      for i in range(len(liste)):\n        if liste [i]<mini:\n          mini=liste[i]\n    res=maxi-mini\n  return res", "user": "userdId_12", "attemptID": 5098, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "7.721889", "embeddingY": "-46.220085"},{"extension": "py", "date": "2020-04-07 03:30:50", "correct": "1", "upload": "def suiteAriGeo(liste):\n  if len(liste)<3:\n    ok=True\n  else:\n    ok=True\n    ecart1=liste[1]-liste[0]\n    ecart2=liste[2]-liste[1]\n    if ecart1==0 or ecart2==0:\n      a=1\n    else:\n      a=ecart2/ecart1\n    b=-a*liste[0]+liste[1]\n    i=1\n    while i<len(liste)-1 and ok:\n      if a*liste[i]+b!=liste[i+1]:\n        ok=False\n      i+=1\n  return ok", "user": "userdId_18", "attemptID": 5099, "exercise": "4c9665daf155b115fe13218141fa1aff", "exercise_name": "suiteAriGeo", "embeddingX": "35.967476", "embeddingY": "75.24409"},{"extension": "py", "date": "2020-03-31 03:43:57", "correct": "0", "upload": "def fusion(liste1,liste2):\n  res=[]\n  i=0\n  j=0\n  while i<len(liste1) and j<len(liste2):\n    if liste1[i]<liste2[j]:\n      res.append(liste1[i])\n      i=i+1\n    else:\n      res.append(liste2[j])\n      j=j+1\n      while j<len(liste2):\n        res.append(liste2[j])\n        j=j+1\n      while i<len(liste1):\n          res.append(liste1[i])\n          i=i+1\n  return res", "user": "userdId_36", "attemptID": 5100, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-40.69277", "embeddingY": "46.465107"},{"extension": "py", "date": "2020-04-05 03:00:54", "correct": "1", "upload": "def semestreValide(ue1,ue2):\n  if ue1>=10 and ue2>=10:\n    res=True\n  elif ue1>10 and ue2<10:\n    if ue1-10+ue2>10:\n      res=True\n  else:\n    res=False\n  return res", "user": "userdId_26", "attemptID": 5101, "exercise": "70ae7ad6cf504e0fa8cedebd8e8a825f", "exercise_name": "semestreValide", "embeddingX": "68.74889", "embeddingY": "-2.2658935"},{"extension": "py", "date": "2020-03-24 03:22:14", "correct": "0", "upload": "def quatrePlus100(l,x):\n  res=[]\n  i=0\n  while i<len(l) and len(res)<=4:\n      if l[i]>x:\n         res=res+[l[i]]\n      i=i+1\n  return res", "user": "userdId_16", "attemptID": 5102, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-52.976307", "embeddingY": "3.7290108"},{"extension": "py", "date": "2020-04-13 21:07:25", "correct": "1", "upload": "def listeDecroissante(scores):\n  res = True\n  for i in range(len(scores)-1):\n    if scores[i]<scores[i+1]:\n      res = False\n  return res", "user": "userdId_6", "attemptID": 5103, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "20.931707", "embeddingY": "-70.3102"},{"extension": "py", "date": "2020-03-06 00:30:39", "correct": "1", "upload": "def ecart(liste):\n    if liste==[]:\n      return None\n    elif len(liste)==1:\n      return 0\n    else:\n      min=liste[0]\n      for i in range(1,len(liste)):\n        if min>liste[i]:\n          min=liste[i]\n      max=liste[0]\n      for i in range(1,len(liste)):\n        if max<liste[i]:\n          max=liste[i]\n      ecart=max-min\n      return ecart\n          \n      \n      \n      ", "user": "userdId_2", "attemptID": 5104, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "11.622419", "embeddingY": "-83.64275"},{"extension": "py", "date": "2020-03-10 03:18:20", "correct": "0", "upload": "def jourNuit(heure):\n  if heure<0 or heure >24:\n    res=\"l'heure saisie est invalide\"\n  else:\n    if heure<5 or heure>=21:\n      res=\"on est la nuit\"\n    elif heure<12:\n      res=\"on est le matin\" \n    elif heure<17:\n      res=\"on est l'apr\u00e8s midi\"\n    elif heure<21:\n      res=\"on est le soir\"\n    if heure<6 or heure>18:\n      res=res+\" et il fait nuit\"\n    else:\n      res=res+\" et il fait jour\"\n  return res", "user": "userdId_16", "attemptID": 5105, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "71.049034", "embeddingY": "13.230777"},{"extension": "py", "date": "2020-04-20 22:35:25", "correct": "1", "upload": "def listeDecroissante(scores):\n  ok=True\n  i=0\n  while i<len(scores)-1 and ok:\n    if scores[i]<scores[i+1]:\n      ok=False\n    i+=1\n  else:\n    if len(scores)==[]:\n      ok=True\n  return ok", "user": "userdId_9", "attemptID": 5106, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "21.393225", "embeddingY": "45.741283"},{"extension": "py", "date": "2020-03-19 05:38:42", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if jour1<jour2 and mois1<mois2 and annee1<annee2:\n    res=-1\n  elif jour1==jour2 and mois==mois2 and annee1==annee2:\n      res=1\n  else:\n    res=0\n  return res", "user": "userdId_34", "attemptID": 5107, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "77.811386", "embeddingY": "-25.327099"},{"extension": "py", "date": "2020-03-22 05:49:05", "correct": "0", "upload": "def ecart(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    grand=liste[0]\n    petit=liste[i]\n    for i in range(len(liste)):\n      if liste[i]>grand:\n        grand=liste[i]\n      if liste[i]<petit:\n        petit=liste[i]\n    res=grand-petit\n    return res", "user": "userdId_12", "attemptID": 5108, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "14.907548", "embeddingY": "-53.012737"},{"extension": "py", "date": "2020-03-19 05:29:05", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1<annee2:\n    res=-1\n    if mois1==mois2:\n      res=1\n  else:\n    res=0\n  return res", "user": "userdId_34", "attemptID": 5109, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "79.44705", "embeddingY": "-34.13911"},{"extension": "py", "date": "2020-03-01 12:44:05", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if fin1 > debut2 or debut1 > fin2 :\n    res = True\n  else:\n    res = False\n  return res", "user": "userdId_42", "attemptID": 5110, "exercise": "6fd66bb2393fbf3809f1c6d04f3831f7", "exercise_name": "rendezVous", "embeddingX": "63.921803", "embeddingY": "-22.395689"},{"extension": "py", "date": "2020-04-05 03:35:21", "correct": "0", "upload": "def minimum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=liste[0]\n    for i in range(1,len(liste)-1):\n      if res>liste[i]:\n        res=liste[i]\n  return res", "user": "userdId_26", "attemptID": 5111, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "-5.3086567", "embeddingY": "-67.522285"},{"extension": "py", "date": "2020-04-07 03:45:22", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  while nombre!=0:\n    nombre=nombre//10\n  if nombre==chiffre:\n    cpt=cpt+1\n  return cpt", "user": "userdId_50", "attemptID": 5112, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "21.022707", "embeddingY": "12.448351"},{"extension": "py", "date": "2020-04-07 05:31:12", "correct": "1", "upload": "def verifSuiteAriGeo(liste,a,b):\n  if len(liste)>1:\n    suite=liste[0]\n  i=1\n  res=True\n  while i<len(liste) and res==True:\n    suite=a*suite+b\n    if suite==liste[i]:\n      res=True\n    else:\n      res=False\n    i+=1\n  return res", "user": "userdId_34", "attemptID": 5113, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-72.15116", "embeddingY": "10.157644"},{"extension": "py", "date": "2020-03-31 05:13:37", "correct": "1", "upload": "def listeSymetrique(l):\n  res=True\n  i=0\n  while i<len(l) and res:\n    if l[i]!=l[-i-1]:\n      res=False\n    i+=1\n  return res", "user": "userdId_8", "attemptID": 5114, "exercise": "8eb27aeda471a467e2223abebeca886e", "exercise_name": "listeSymetrique", "embeddingX": "22.93613", "embeddingY": "40.920315"},{"extension": "py", "date": "2020-03-17 05:28:41", "correct": "1", "upload": "def sousChaine(s,debut,longueur):\n  res=''\n  if debut+longueur>len(s):\n    fin=len(s)\n  else:\n    fin=debut+longueur\n  for i in range(debut,fin):\n    res=res+s[i]\n  return res", "user": "userdId_23", "attemptID": 5115, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-66.6686", "embeddingY": "18.014805"},{"extension": "py", "date": "2020-04-03 00:53:21", "correct": "0", "upload": "def doubleChiffre(nombre):\n    return None", "user": "userdId_43", "attemptID": 5116, "exercise": "c83ea6acd3e9f6f5543e87d515e8a44a", "exercise_name": "doubleChiffre", "embeddingX": "-87.91876", "embeddingY": "3.6994996"},{"extension": "py", "date": "2020-03-31 04:07:27", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n  cpt=0\n  i=0\n  while i<len(l) and i<=n:\n    if l[i]==x:\n      cpt+=1\n    i+=1\n  if cpt!=n:\n    res=None\n  else:\n    res=cpt\n  return res\n", "user": "userdId_13", "attemptID": 5117, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-8.798756", "embeddingY": "75.22299"},{"extension": "py", "date": "2020-03-05 22:20:14", "correct": "0", "upload": "def maximum(l):\n  if len(l)==0:\n    res=None\n  else:\n    res=l[0]\n    for i in range(1,len(l)):\n      if res<i:\n        res=i\n  return res", "user": "userdId_48", "attemptID": 5118, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "27.476284", "embeddingY": "-67.48973"},{"extension": "py", "date": "2020-04-07 03:50:06", "correct": "0", "upload": "def motPalindrome(mot):\n  res=False\n  if mot[0] == mot[-1]:\n    res=True\n  return res", "user": "userdId_30", "attemptID": 5119, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "43.81284", "embeddingY": "-9.311236"},{"extension": "py", "date": "2020-04-07 03:46:30", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  if nombre==0:\n    cpt=1\n  while nombre!=0:\n    nombre=nombre//10\n  if nombre==chiffre:\n    cpt=cpt+1\n  return cpt", "user": "userdId_50", "attemptID": 5120, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "21.09314", "embeddingY": "12.398208"},{"extension": "py", "date": "2020-03-20 00:02:44", "correct": "0", "upload": "def permutationChaine(s):\n  res=''\n  for i in range(0,len(s)-1,2):\n    res=res+s[i-1]+s[i]\n  if (len(s)%2!=0):\n    res=res+s[-1]\n  return res", "user": "userdId_2", "attemptID": 5121, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-35.307045", "embeddingY": "-59.534637"},{"extension": "py", "date": "2020-04-07 23:19:26", "correct": "1", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  res=False\n  prec=None\n  while nombre!=0 and not res:\n    numero=nombre%10\n    nombre=nombre//10\n    if chiffre==prec:\n      cpt=cpt+1\n    prec=numero\n  if chiffre==0 and nombre==0:\n    cpt=1\n  return cpt ", "user": "userdId_13", "attemptID": 5122, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "9.1688595", "embeddingY": "23.79757"},{"extension": "py", "date": "2020-04-05 08:24:46", "correct": "0", "upload": "def plusLongueSuite(liste):\n    if liste==[]:\n      res=0\n    else:\n      cpt=1\n      cptMax=1\n      prec=liste[0]\n      for i in range(1,len(liste)):\n        if prec==liste[i]:\n          cpt+=1\n          if cpt>cptMx:\n            cptMax=cpt\n        else:\n          cpt=0\n        prec=liste[i]\n    return cpt\n      ", "user": "userdId_18", "attemptID": 5123, "exercise": "deed004abb317b11778f7e8247197a40", "exercise_name": "plusLongueSuite", "embeddingX": "-3.243272", "embeddingY": "-78.985054"},{"extension": "py", "date": "2020-03-27 06:19:00", "correct": "0", "upload": "def compare (chaine1,chaine2):\n  i = 0\n  res = 0\n  while i < len(chaine1) and res == 0 :\n    if chaine1[i] < chaine2[i]:\n      res = -1\n    elif chaine1[i] > chaine2[i]:\n      res = 1\n    else :\n      res = 0\n    i = i + 1\n  if len(chaine1) > len(chaine2):\n    res =  1\n  elif len(chaine1) < len(chaine2): \n    res = -1\n  else :\n    res = 0\n  return res ", "user": "userdId_17", "attemptID": 5124, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-25.607672", "embeddingY": "59.94372"},{"extension": "py", "date": "2020-03-12 08:36:54", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    return 0\n  cpt=0\n  for lettre in mot:\n    if lettre in mot=='aeiouy':\n      cpt=cpt+1\n    return cpt\n  ", "user": "userdId_1", "attemptID": 5125, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "6.083163", "embeddingY": "-32.558105"},{"extension": "py", "date": "2020-03-02 02:47:16", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if jour1<jour2 and mois1<mois2 and annee1<annee2:\n    return -1\n  elif jour1!=jour2 and mois1!=mois2 and annee1!=annee2:\n    return 0\n  else:\n    return 1\n  \ncompareDates(10,1,2020,14,2,2020)\ncompareDates(14,2,2020,11,2,2020)\ncompareDates(10,1,2020,10,1,2020)", "user": "userdId_1", "attemptID": 5126, "exercise": "af7c1467ef9f7684d9ff58734067ae98", "exercise_name": "compareDates", "embeddingX": "88.891", "embeddingY": "-17.435331"},{"extension": "py", "date": "2020-03-06 23:38:49", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut1>=debut2 or fin1<=fin2:\n    if fin1<debut2:\n      res=True\n  else:\n    res=False\n  return res", "user": "userdId_8", "attemptID": 5127, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "56.594913", "embeddingY": "-21.089779"},{"extension": "py", "date": "2020-03-30 22:46:23", "correct": "1", "upload": "def indiceOccurrence(n,x,l):\n  trouve=False\n  i=0\n  cpt=0\n  while i<len(l) and not trouve:\n    if l[i]==x:\n      cpt+=1\n    if cpt==n:\n      trouve=True\n    i+=1\n  #post traitement\n  if trouve:\n    res=i-1\n  else:\n    res=None\n  return res", "user": "userdId_34", "attemptID": 5128, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-1.5356607", "embeddingY": "68.92596"},{"extension": "py", "date": "2020-04-08 00:04:22", "correct": "1", "upload": "def motPalindrome(mot):\n  ok=True\n  i=0\n  while i<len(mot)/2 and ok:\n    if mot[i]!=mot[-1-i]:\n      ok=False\n    i=i+1\n  return ok\n", "user": "userdId_14", "attemptID": 5129, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "25.730356", "embeddingY": "52.758705"},{"extension": "py", "date": "2020-03-12 23:39:26", "correct": "0", "upload": "def jourNuit(heure):\n  Error=\"l'heure saisie est invalide\"\n  Time=\"On est\"\n  if heure<0 or heure>24:\n    res=Error\n  elif heure>=5 and heure<=12:\n    res=Time+' le matin'\n    if heure>=6 and heure<=18:\n      res=res+' et il fait jour'\n    else:\n      res=res+' et il fait nuit'\n  elif heure>12 and heure<=17:\n    res=Time+' l apr\u00e8s-midi et il fait jour'\n  elif heure>17 and heure<=21:\n    res=Time+' le soir'\n    if heure>=6 and heure<=18:\n      res=res+' et il fait jour'\n    else:\n      res=res+' et il fait nuit'\n  else:\n    res=Time+' la nuit et il fait nuit'\n  return res\n    \n  \n    ", "user": "userdId_2", "attemptID": 5130, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "80.90604", "embeddingY": "14.977804"},{"extension": "py", "date": "2020-04-20 21:31:43", "correct": "0", "upload": "def rechercheDicho(liste,val):\n  index = None\n  nbAcces=0\n  acces = int(len(liste)/2)\n  found = False\n  while acces in range(len(liste)) and not found:\n    nbAcces+=1\n    if liste[acces]==val:\n      found = True\n      index = acces\n    elif liste[acces]>val:\n      acces = int(acces/2)\n    else :\n      acces = len(liste)-1-int(acces/2)\n  return (index,nbAcces)", "user": "userdId_6", "attemptID": 5131, "exercise": "434544c545ce211c7e57445707047bee", "exercise_name": "rechercheDicho", "embeddingX": "1.5647442", "embeddingY": "65.538536"},{"extension": "py", "date": "2020-04-06 09:02:41", "correct": "0", "upload": "def suiteGeo(liste):\n  cpt=0\n  i=1\n  a=1\n  b=0\n  while i<len(liste) and cpt!=2:\n    if liste[i-1]==0:\n      i+=1\n    else:\n      if liste[i]!=liste[i-1]:\n        a=liste[i]/liste[i-1]\n        cpt+=1\n    i+=1 \n  return verifSuiteAriGeo(liste,a,b)", "user": "userdId_27", "attemptID": 5132, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "40.287212", "embeddingY": "60.2069"},{"extension": "py", "date": "2020-03-06 00:35:10", "correct": "0", "upload": "def ecart(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=0\n    def maximum(liste):\n      maxi=liste[0]\n      for i in range(len(liste)):\n        if liste[i]>maxi:\n          maxi=liste[i]\n    def minimum(liste):\n      mini=liste[0]\n      for i in range(len(liste)):\n        if liste[i]<mini:\n          mini=liste[i]\n    res=maxi-mini\n  return res", "user": "userdId_12", "attemptID": 5133, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "7.72071", "embeddingY": "-46.226658"},{"extension": "py", "date": "2020-03-20 00:37:04", "correct": "0", "upload": "def permutationChaine(o):\n  res=\"\"\n  for i in range(o,len(o)-1,2):\n    res=res+o[i+1]+o[i]\n  if (len(o)%2!=0):\n    res=res+[-1]\n  return res", "user": "userdId_20", "attemptID": 5134, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-36.3059", "embeddingY": "-24.382893"},{"extension": "py", "date": "2020-03-22 12:26:41", "correct": "0", "upload": "def minimum(liste):\n  min=l[0]\n  for i in liste: \n    if i<min:\n      min=i\n  return min", "user": "userdId_21", "attemptID": 5135, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "34.15805", "embeddingY": "-57.850117"},{"extension": "py", "date": "2020-04-05 04:15:53", "correct": "0", "upload": "def moyenne(liste):\n  if len(liste)!=0:\n    s=0\n    for elem in liste:\n      s+=elem\n    res=s//len(liste)\n  else:\n    res=None\n    \n  return res", "user": "userdId_26", "attemptID": 5136, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-7.143158", "embeddingY": "-15.101646"},{"extension": "py", "date": "2020-03-23 21:56:27", "correct": "1", "upload": "def sommeNPremiersEntiers(n):\n    if n<0:\n      res=0\n    else:\n      res=0\n      for elem in range(n+1):\n        res=res+elem\n    return res\n        ", "user": "userdId_11", "attemptID": 5137, "exercise": "c315a540cf0bfb0182dc114c6f0eafd1", "exercise_name": "sommeNPremiersEntiers", "embeddingX": "-14.605371", "embeddingY": "12.153618"},{"extension": "py", "date": "2020-03-06 00:25:58", "correct": "0", "upload": "def ecart(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    def maximum(liste):\n      maxi=liste[0]\n      for i in range(len(liste)):\n        if liste[i]>maxi:\n          maxi=liste[i]\n    def minimum(liste):\n      mini=liste[0]\n      for i in range(len(liste)):\n        if liste [i]<mini:\n          mini=liste[i]\n  res=maxi-mini\n  return res", "user": "userdId_12", "attemptID": 5138, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "7.6972456", "embeddingY": "-46.22775"},{"extension": "py", "date": "2020-04-08 00:15:00", "correct": "1", "upload": "def sousChaine(s1,s2):\n  res=None\n  if s1 in s2:\n    res=True\n  else:\n    res=False\n  return res", "user": "userdId_13", "attemptID": 5139, "exercise": "a7cdd094daa2f0bfccc7a4ec419f7243", "exercise_name": "sousChaine", "embeddingX": "46.095493", "embeddingY": "-17.566277"},{"extension": "py", "date": "2020-03-03 06:26:10", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  res=None\n  if jour1<jour2:\n    if mois1<mois2:\n      if annee1<=annee2:\n        res=-1\n  else:\n    if jour1>jour2:\n      if mois1>mois2:\n        if annee1>=annee2:\n          res=1\n    else:\n      if jour1==jour2:\n        if jour1==jour2:\n          if annee1==annee2:\n            res=0\n  return res", "user": "userdId_30", "attemptID": 5140, "exercise": "af7c1467ef9f7684d9ff58734067ae98", "exercise_name": "compareDates", "embeddingX": "78.11325", "embeddingY": "-19.905474"},{"extension": "py", "date": "2020-04-07 02:55:50", "correct": "0", "upload": "def produitScalaire(vec1,vec2):\n  res=0\n  i=0\n  while i<len(vec1) and i<len(vec2) and res==0:\n    res=vec1[i]*vec2[i]\n    res+=res\n  return res", "user": "userdId_8", "attemptID": 5141, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-15.633706", "embeddingY": "48.151993"},{"extension": "py", "date": "2020-04-12 05:37:52", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n    if len(liste)==0:\n      res=True\n    else:\n      res=True\n      for i in range(len(liste)):\n        if liste[i+1]==a*liste[i]+b:\n          res=True\n        else:\n          res=False\n    return res\n    ", "user": "userdId_11", "attemptID": 5142, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-71.623924", "embeddingY": "17.358738"},{"extension": "py", "date": "2020-04-12 04:43:56", "correct": "1", "upload": "def elemGeo(n,u0,q):\n  res=u0*q**n\n  return res", "user": "userdId_16", "attemptID": 5143, "exercise": "d7c83a7fb9b49e28804e55955ad06968", "exercise_name": "elemGeo", "embeddingX": "-39.129772", "embeddingY": "17.6831"},{"extension": "py", "date": "2020-03-10 04:20:59", "correct": "0", "upload": "def doubleLettre(mot):\n  prec=' '\n  for c in mot:\n    if prec==' ' and c!=' ':\n      prec=c\n      if prec==c:\n        res=True\n  return res", "user": "userdId_18", "attemptID": 5144, "exercise": "00da9cf1fa2b468d915724499459ed8f", "exercise_name": "doubleLettre", "embeddingX": "20.183285", "embeddingY": "-6.444999"},{"extension": "py", "date": "2020-04-12 06:53:21", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  if liste==[]:\n    res=True\n  c=[liste[0]]\n  res=False\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n  return c", "user": "userdId_8", "attemptID": 5145, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-73.787506", "embeddingY": "27.512568"},{"extension": "py", "date": "2020-03-05 23:34:53", "correct": "0", "upload": "def somme(liste):\n  res=0\n  for elem in liste:\n    res=res+elem\n    return res", "user": "userdId_33", "attemptID": 5146, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-25.88176", "embeddingY": "4.9133153"},{"extension": "py", "date": "2020-04-07 04:09:02", "correct": "1", "upload": "def motPalindrome(mot):\n  ok=True\n  i=0\n  j=len(mot)-1\n  while i<j and ok:\n    if mot[i]!=mot[j]:\n      ok=False\n    i+=1\n    j-=1\n  return ok\n    ", "user": "userdId_21", "attemptID": 5147, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "36.38031", "embeddingY": "46.684277"},{"extension": "py", "date": "2020-03-09 22:26:34", "correct": "1", "upload": "def sommeNbPairs(liste):\n   res=0\n   for x in liste:\n      if x%2==0:\n         res+=x\n   return res", "user": "userdId_55", "attemptID": 5148, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "32.884697", "embeddingY": "-19.43197"},{"extension": "py", "date": "2020-03-06 00:57:22", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    res=None\n  else:\n    res=0\n    if mot in 'aeiouy':\n      res=res+1\n        \n     \n  return res", "user": "userdId_5", "attemptID": 5149, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "10.9192", "embeddingY": "-49.56332"},{"extension": "py", "date": "2020-04-13 22:09:11", "correct": "1", "upload": "def meilleurScoreJoueur(scores,joueurs,nom):\n  trouve=False\n  i=0\n  res=0\n  while i<len(scores) and not trouve:\n    if nom==joueurs[i]:\n      trouve=True\n      res=scores[i]\n    i=i+1\n  return res", "user": "userdId_1", "attemptID": 5150, "exercise": "c96fadc94086276f98451a798b3bb730", "exercise_name": "meilleurScoreJoueur", "embeddingX": "-1.4336888", "embeddingY": "73.0698"},{"extension": "py", "date": "2020-04-07 03:33:08", "correct": "1", "upload": "def sousChaine(s1,s2):\n  Trouve=False\n  i=0\n  while i<len(s1) and i<len(s2):\n    ok=False\n    if s1 in s2:\n      Trouve=True\n    i=i+1\n  if s1=='':\n    Trouve=True\n  return Trouve\n", "user": "userdId_1", "attemptID": 5151, "exercise": "a7cdd094daa2f0bfccc7a4ec419f7243", "exercise_name": "sousChaine", "embeddingX": "0.06399494", "embeddingY": "52.025455"},{"extension": "py", "date": "2020-03-23 01:25:25", "correct": "0", "upload": "def doubleLettre(mot):\n    res=False\n    for i in range(len(mot)):\n      if mot[i]==mot[i+1]:\n        res=True\n    return res\n      ", "user": "userdId_11", "attemptID": 5152, "exercise": "00da9cf1fa2b468d915724499459ed8f", "exercise_name": "doubleLettre", "embeddingX": "-0.90318024", "embeddingY": "-69.13277"},{"extension": "py", "date": "2020-03-06 00:28:46", "correct": "0", "upload": "def maximum(liste):\n    res=liste[0]\n    for elem in liste:\n        if elem>res:\n            res=elem\n    return res", "user": "userdId_45", "attemptID": 5153, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "32.002747", "embeddingY": "-46.57116"},{"extension": "py", "date": "2020-03-30 21:54:22", "correct": "0", "upload": "def fusion(liste1,liste2):\n  i=0\n  j=0\n  listefusion=[]\n  \n  while i<len(liste1) and j<len(liste2):\n    if liste1[i]>liste2[j]:\n      listefusion.append(liste2[j])\n      j=j+1\n    else:\n      listefusion.append(liste1[i])\n      i=i+1\n  if j==len(liste2):\n    while i<len(liste1):\n      listefusion.append(liste1[i])\n  if i==len(liste1):\n    while j<len(liste2):\n      listefusion.append(liste2[j])\n  \n  return listefusion\n    \n    \n", "user": "userdId_19", "attemptID": 5154, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-33.236656", "embeddingY": "51.11012"},{"extension": "py", "date": "2020-03-05 22:20:45", "correct": "0", "upload": "def ecart(liste):\n  if len(liste)==0:\n    res=None\n  elif len(liste)==1:\n    res=0\n  else:\n    res=0\n    res1=liste[0]\n    res2=liste[0]\n    for i in range(1,len(liste)):\n      if res<liste[i]:\n        res1=liste[i]\n      elif res>liste[i]:\n        res2=liste[i]\n    res=res1-res2\n  return res", "user": "userdId_30", "attemptID": 5155, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "-0.25759253", "embeddingY": "-83.58696"},{"extension": "py", "date": "2020-04-07 04:15:43", "correct": "0", "upload": "def compteChiffre(c,n):\n  cpt=0\n  while n!=0:\n    if c==n%10:\n      cpt+=1\n    n=n//10\n  return cpt", "user": "userdId_30", "attemptID": 5156, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "22.813076", "embeddingY": "10.362593"},{"extension": "py", "date": "2020-02-29 07:17:14", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n    return None", "user": "userdId_56", "attemptID": 5157, "exercise": "6fd66bb2393fbf3809f1c6d04f3831f7", "exercise_name": "rendezVous", "embeddingX": "-88.493965", "embeddingY": "3.9043183"},{"extension": "py", "date": "2020-03-17 05:32:13", "correct": "1", "upload": "def permutationChaine(s):\n  res=''\n  for i in range(0,len(s)-1,2):\n    res=res+s[i+1]+s[i]\n  if len(s)%2!=0:\n    res=res+s[-1]\n  return res\n    ", "user": "userdId_9", "attemptID": 5158, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-35.439896", "embeddingY": "-59.099827"},{"extension": "py", "date": "2020-03-06 23:16:30", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut1>=debut2 or fin1<=fin2:\n    res=True\n  else:\n    res=False\n  return res", "user": "userdId_8", "attemptID": 5159, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "54.733494", "embeddingY": "-21.58219"},{"extension": "py", "date": "2020-04-12 06:32:19", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  if liste==[]:\n    res=True\n  c=[]\n  res=False\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n    c=liste[0:]+c\n  if c==liste:\n    res=True\n    return res", "user": "userdId_8", "attemptID": 5160, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-88.12453", "embeddingY": "19.717617"},{"extension": "py", "date": "2020-03-11 00:01:26", "correct": "1", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut1>fin2 or debut2>fin1:\n    res=False \n  else:\n    res=True\n  return res\n", "user": "userdId_21", "attemptID": 5161, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "64.20997", "embeddingY": "-22.307116"},{"extension": "py", "date": "2020-04-07 04:41:08", "correct": "1", "upload": "def verifSuiteAriGeo(liste,a,b):\n  ok=True\n  i=0\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=a*liste[i]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 5162, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-81.18889", "embeddingY": "25.615221"},{"extension": "py", "date": "2020-04-28 04:04:25", "correct": "1", "upload": "def premier(n):\n  res=True\n  if n==0 or n==1:\n    return False\n  for i in range(2,n-1): \n    if n%i==0:\n      res=False\n  return res\n\ndef nombresPremiers(n):\n  liste=[]\n  i=0\n  while len(liste)<n:\n    if premier(i)==True:\n      liste.append(i)\n    i+=1\n  return liste", "user": "userdId_19", "attemptID": 5163, "exercise": "7eda5a2bd3cdd0a510f96448337384d9", "exercise_name": "nombresPremiers", "embeddingX": "32.558258", "embeddingY": "-6.9431095"},{"extension": "py", "date": "2020-03-10 04:03:23", "correct": "0", "upload": "def sommeNbPairs(liste):\n  res=0\n  for x in (liste):\n    res=res+x\n  return res", "user": "userdId_8", "attemptID": 5164, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "-32.48423", "embeddingY": "4.556346"},{"extension": "py", "date": "2020-04-12 05:39:10", "correct": "1", "upload": "def verifSuiteAriGeo(liste,a,b):\n    if len(liste)==0:\n      res=True\n    else:\n      res=True\n      for i in range(1,len(liste)):\n        if liste[i]==a*liste[i-1]+b:\n          res=True\n        else:\n          res=False\n    return res\n    ", "user": "userdId_11", "attemptID": 5165, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-70.56812", "embeddingY": "12.812685"},{"extension": "py", "date": "2020-04-05 12:15:34", "correct": "1", "upload": "def nextConway(s):\n    res = \"\"\n    nb = 1\n    for i in range(len(s)-1):\n        if s[i] == s[i+1]:\n            nb+=1\n        else:\n            res += str(nb)+s[i]\n            nb = 1\n    if len(s)>1:\n        res+= str(nb)+s[i+1]\n    else:\n        res+= str(nb)+s[0]\n    return res", "user": "userdId_4", "attemptID": 5166, "exercise": "a580c32690609356dae4401b3c89a3b8", "exercise_name": "nextConway", "embeddingX": "-28.238363", "embeddingY": "-57.74296"},{"extension": "py", "date": "2020-04-05 04:16:13", "correct": "0", "upload": "def moyenne(liste):\n  if len(liste)!=0:\n    s=0\n    for elem in liste:\n      s+=elem\n    res=s//len(liste)\n  else:\n    res=None\n    \n  return res", "user": "userdId_26", "attemptID": 5167, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-7.1675754", "embeddingY": "-15.110349"},{"extension": "py", "date": "2020-04-07 23:40:12", "correct": "0", "upload": "def suiteGeo(liste):\n  ok=True\n  i=0\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  if liste[i]!=0:\n    q=liste[1]/liste[0]\n  while i<len(liste)-1 and ok:\n    if liste[i]!=0:\n      if liste[i+1]/liste[i]!=q:\n        ok=False\n    i=i+1\n  return ok\n\n", "user": "userdId_1", "attemptID": 5168, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "31.355787", "embeddingY": "64.26516"},{"extension": "py", "date": "2020-03-31 06:51:22", "correct": "1", "upload": "def stockerChiffres(nombre):\n  res=[]\n  if nombre==0:\n    res=[0]\n  while nombre!=0:\n    res.append(nombre%10)\n    nombre=nombre//10\n  return res", "user": "userdId_8", "attemptID": 5169, "exercise": "49a87f644f84a443327fb4315b47f249", "exercise_name": "stockerChiffres", "embeddingX": "41.009525", "embeddingY": "13.577565"},{"extension": "py", "date": "2020-03-31 05:06:12", "correct": "1", "upload": "def reconstruireChainePartielle(s,n):\n    res=''\n    for i in range(0,len(s),n):\n      res+=s[i]\n    return res", "user": "userdId_18", "attemptID": 5170, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-58.750225", "embeddingY": "-42.558758"},{"extension": "py", "date": "2020-03-02 07:29:44", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1<=annee2 and mois1<=annee2 and jour1<=jour2:\n    return -1\n  elif annee1==annee2 and mois1==mois2 and jour1==jour2:\n    return 0\n  else:\n    return 1\n  \ncompareDates(10,1,2020,14,2,2020)\ncompareDates(14,2,2020,11,2,2020)\ncompareDates(10,1,2020,10,1,2020)", "user": "userdId_1", "attemptID": 5171, "exercise": "af7c1467ef9f7684d9ff58734067ae98", "exercise_name": "compareDates", "embeddingX": "89.12157", "embeddingY": "-10.956841"},{"extension": "py", "date": "2020-03-10 03:59:20", "correct": "0", "upload": "def sommeNbPairs(liste):\n    if liste==[]:\n      res=0\n    else:\n      for i in liste:\n        if i%2==0:\n          res=res+i\n    return res", "user": "userdId_18", "attemptID": 5172, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "30.199598", "embeddingY": "-20.994884"},{"extension": "py", "date": "2020-03-01 01:47:20", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n    return None", "user": "userdId_4", "attemptID": 5173, "exercise": "af7c1467ef9f7684d9ff58734067ae98", "exercise_name": "compareDates", "embeddingX": "-88.291916", "embeddingY": "4.1053433"},{"extension": "py", "date": "2020-04-14 10:19:57", "correct": "0", "upload": "def listedecroissante(scores):\n  ok=True\n  if len(scores)==0:\n    ok=True\n  i=0\n  while i<len(scores)-1:\n    if scores[i]<scores[i+1]:\n      ok=False\n    i+=1\n  return ok", "user": "userdId_34", "attemptID": 5174, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "20.861353", "embeddingY": "44.21849"},{"extension": "py", "date": "2020-04-14 03:30:22", "correct": "0", "upload": "def listeDecroissant(scores):\n  ok=True\n  i=0\n  while i<len(scores)-1 and ok:\n    if scores[i]<scores[i+1]:\n      ok=False\n    i+=1\n  return ok", "user": "userdId_27", "attemptID": 5175, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "20.706608", "embeddingY": "44.989197"},{"extension": "py", "date": "2020-03-12 21:42:26", "correct": "0", "upload": "def nbVoyelles(mot):\n   res=0\n   if len(mot)==0:\n      res=0\n   else:\n      if lettre in 'aeiouy':\n         res=res+1\n   return res", "user": "userdId_14", "attemptID": 5176, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "4.3414917", "embeddingY": "-34.51914"},{"extension": "py", "date": "2020-04-29 01:51:48", "correct": "0", "upload": "def listeMatchs(liste):\n    if len(liste)>0:\n      res=[]\n      l=()\n      for i in range(len(liste)-1):\n        for j in range(i+1,len(liste)):\n          l=(liste[i],liste[j])\n          res+=[l]             \n    return res\n        ", "user": "userdId_11", "attemptID": 5177, "exercise": "7425aa41502a932ef1011f8e2538120a", "exercise_name": "listeMatchs", "embeddingX": "-36.50361", "embeddingY": "-28.139818"},{"extension": "py", "date": "2020-03-13 00:58:01", "correct": "0", "upload": "def doubleLettre(mot):\n  res=None\n  prev=\" \"\n  for c in mot:\n    if prev==\" \" and c!=\" \":\n      prev=c \n      res=True\n    else:\n      res=False\n      \n  return res", "user": "userdId_38", "attemptID": 5178, "exercise": "00da9cf1fa2b468d915724499459ed8f", "exercise_name": "doubleLettre", "embeddingX": "20.57855", "embeddingY": "-5.8282733"},{"extension": "py", "date": "2020-03-29 22:34:31", "correct": "1", "upload": "def fusion(liste1,liste2):\n  res= []\n  res.extend(liste1)\n  res.extend(liste2)\n  for i in range(len(res)):\n    for j in range(0,len(res)-i-1):\n      if res[j]>res[j+1]:\n        res[j],res[j+1] = res[j+1], res[j]\n  return res", "user": "userdId_6", "attemptID": 5179, "exercise": "6613efb6c873b142dc2b6040c14eb616", "exercise_name": "fusion", "embeddingX": "-11.249326", "embeddingY": "-66.13782"},{"extension": "py", "date": "2020-03-06 00:24:39", "correct": "0", "upload": "def nbVoyelles(mot):\n  voyel=\"aeiouy\"\n  if len(mot)==0:\n    voy=None\n  else:\n    voy=0\n    for i in range(len(mot)):\n      if mot[i]==voyel[i]:\n        voy=voy+1\n  return voy", "user": "userdId_13", "attemptID": 5180, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-2.5633683", "embeddingY": "-44.6605"},{"extension": "py", "date": "2020-04-06 06:23:26", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  i=0\n  for i in range(nombre):\n    if i==chiffre:\n      cpt=cpt+1\n    i=i+1\n  return cpt", "user": "userdId_3", "attemptID": 5181, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-17.552774", "embeddingY": "-24.44577"},{"extension": "py", "date": "2020-04-12 07:58:48", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n    cpt=0\n    decomp=nombre\n    x=nombre%10\n    while decomp!=0:\n      x=nombre%10\n      if x!=chiffre:\n        decomp=decomp//10\n        x=decomp%10\n      else:\n        cpt+=1\n    return cpt", "user": "userdId_11", "attemptID": 5182, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "5.14443", "embeddingY": "15.482147"},{"extension": "py", "date": "2020-03-23 00:43:44", "correct": "1", "upload": "def sommeNbPairs(liste):\n    if len(liste)==0:\n      res=0\n    else:\n      res=0\n      for i in range(len(liste)):\n        if liste[i]%2==0:\n          res=res+liste[i]\n    return res\n  \n      ", "user": "userdId_11", "attemptID": 5183, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "-19.874247", "embeddingY": "-56.666107"},{"extension": "py", "date": "2020-03-06 00:26:14", "correct": "0", "upload": "def maximum(liste):\n if len(liste)==0:\n  return none \n  res=liste[0]\n for elem in liste:\n    if elem>res:\n      res=elem\n return res\n    ", "user": "userdId_33", "attemptID": 5184, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "1.2476363", "embeddingY": "-37.999714"},{"extension": "py", "date": "2020-04-05 11:21:31", "correct": "1", "upload": "def elemAri(n,u0,r):\n    return u0+n*r", "user": "userdId_18", "attemptID": 5185, "exercise": "f239498950e974e29e01472749d9a09d", "exercise_name": "elemAri", "embeddingX": "-35.44042", "embeddingY": "20.747307"},{"extension": "py", "date": "2020-03-31 04:14:05", "correct": "0", "upload": "def indiceOccurence(n,x,l):\n  cpt=0 \n  trouve=False \n  i=0\n  while i<len(l) and trouve==False:\n    if l[i]==x:\n      cpt+=1\n    if cpt==n:\n      trouve=True\n    i+=1\n    res=i", "user": "userdId_21", "attemptID": 5186, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-3.7043898", "embeddingY": "71.99439"},{"extension": "py", "date": "2020-04-07 23:19:24", "correct": "1", "upload": "def produitScalaire(L1,L2):\n  res=0\n  if len(L1)!=len(L2):\n    res=None\n  else:\n    for i in range (len(L1)):\n      res=res+L1[i]*L2[i]\n  return res", "user": "userdId_19", "attemptID": 5187, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-48.452305", "embeddingY": "-34.984253"},{"extension": "py", "date": "2020-03-09 22:52:39", "correct": "0", "upload": "def nbOccurrencesLettre(lettre,mot):\n  res=0\n  for i in range(len(liste)):\n    if liste[i]==lettre:\n      res=res+1\n  return res", "user": "userdId_12", "attemptID": 5188, "exercise": "2864c9e5861229d2ff32570f6bc944fb", "exercise_name": "nbOccurrencesLettre", "embeddingX": "-31.477676", "embeddingY": "-18.498747"},{"extension": "py", "date": "2020-04-03 00:14:56", "correct": "0", "upload": "def nbChiffres(nombre):\n cpt=0\n while nombre!=0:\n    nombre=nombre//10\n    cpt=cpt+1\n    return cpt ", "user": "userdId_5", "attemptID": 5189, "exercise": "3dcf332c003a1f3bf15df22ee17884a3", "exercise_name": "nbChiffres", "embeddingX": "32.445152", "embeddingY": "10.825874"},{"extension": "py", "date": "2020-03-12 09:31:17", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    return 0\n  cpt=0\n  for lettre in mot:\n    if elem in 'aeiouy':\n      cpt=cpt+1\n  return cpt", "user": "userdId_1", "attemptID": 5190, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "1.2062656", "embeddingY": "-36.885376"},{"extension": "py", "date": "2020-03-06 00:04:06", "correct": "0", "upload": "def moyenne(liste):\n  somme=0\n  for elem in liste:\n    somme=somme+elem\n  moy=somme/len(liste)\n  return moy\n\n  ", "user": "userdId_2", "attemptID": 5191, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-21.39452", "embeddingY": "-1.1643223"},{"extension": "py", "date": "2020-03-06 00:13:52", "correct": "0", "upload": "def ecart(liste):\n  if len(liste)==0:\n    res=None\n  elif len(liste)==1:\n    res=0\n  else:\n    res=0\n    res1=liste[0]\n    res2=liste[0]\n    for i in range(len(liste)):\n      if res1>liste[i]:\n        res1=liste[i]\n      if res2<liste[i]:\n        res2=liste[i]\n    res=res1-res2\n  return res", "user": "userdId_30", "attemptID": 5192, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "-0.2979981", "embeddingY": "-83.950966"},{"extension": "py", "date": "2020-04-07 05:16:31", "correct": "0", "upload": "def suiteAri(liste):\n  ok=True\n  i=0\n  if len(liste)==0:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=liste[i]+(liste[i+1]-liste[i]):\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 5193, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "20.346022", "embeddingY": "52.586254"},{"extension": "py", "date": "2020-03-06 00:18:55", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    return None\n  cpt=0\n  for lettre in (len(mot)):\n    if lettre in 'aeiouy':\n      cpt=cpt+1\n  return cpt", "user": "userdId_1", "attemptID": 5194, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "3.1883645", "embeddingY": "-44.931118"},{"extension": "py", "date": "2020-03-31 05:51:02", "correct": "0", "upload": "def stockerChiffres(nombre):\n  cpt=0\n  res=[]\n  nb=nombre\n  while nb!=0:\n    res=res+[nb%10]\n    nb=nb//10\n  if nb==0:\n    res=[0]\n  return res\n    ", "user": "userdId_28", "attemptID": 5195, "exercise": "49a87f644f84a443327fb4315b47f249", "exercise_name": "stockerChiffres", "embeddingX": "-1.3324872", "embeddingY": "18.627682"},{"extension": "py", "date": "2020-03-03 06:42:39", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1<annee2:\n    res=-1\n  elif annee1>annee2:\n    res=1\n  else:\n    if annee1==annee2:\n      if mois1==mois2:\n        if jour1==jour2:\n          res=0\n  return res", "user": "userdId_30", "attemptID": 5196, "exercise": "af7c1467ef9f7684d9ff58734067ae98", "exercise_name": "compareDates", "embeddingX": "79.20187", "embeddingY": "-35.81601"},{"extension": "py", "date": "2020-04-07 01:02:46", "correct": "1", "upload": "def phrasePalindrome(phrase):\n  i=0\n  end=False\n  res=True\n  while i<len(phrase) and end==False:\n    if phrase[i]==\" \":\n      end=True\n    elif phrase[i]==phrase[-i-1]:\n      res=True\n    elif phrase[-i-1]==\" \":\n      if phrase[i]==phrase[-i-2]:\n        res=True\n    else:\n      res=False\n    i+=1\n  return res", "user": "userdId_26", "attemptID": 5197, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "34.487923", "embeddingY": "40.793194"},{"extension": "py", "date": "2020-04-05 08:55:40", "correct": "0", "upload": "def phrasePalindrome(phrase):\n    if phrase=='':\n      ok=True\n    else:\n      ok=True\n      i=0\n      while i<len(phrase) and ok:\n        if phrase[i]!=phrase[-i-1] and phrase[i]!='' and phrase[-i-1]!='':\n          ok=False\n        i+=1\n    return ok", "user": "userdId_18", "attemptID": 5198, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "28.738337", "embeddingY": "39.45522"},{"extension": "py", "date": "2020-03-17 06:41:20", "correct": "0", "upload": "def doubleLettre(mot):\n  c1=(0,len(mot),2)\n  c2=(1,len(mot),2)\n  for c1 in mot:\n    if c1==c2:\n      res=True\n  else:\n    res=False\n  return res", "user": "userdId_8", "attemptID": 5199, "exercise": "00da9cf1fa2b468d915724499459ed8f", "exercise_name": "doubleLettre", "embeddingX": "17.401712", "embeddingY": "-2.4918122"},{"extension": "py", "date": "2020-03-12 21:43:29", "correct": "1", "upload": "def nbVoyelles(mot):\n   res=0\n   if len(mot)==0:\n      res=0\n   else:\n       for lettre in mot:\n          if lettre in 'aeiouy':\n             res=res+1\n   return res", "user": "userdId_14", "attemptID": 5200, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "6.17004", "embeddingY": "-29.24442"},{"extension": "py", "date": "2020-04-05 11:49:02", "correct": "1", "upload": "def produitScalaire(vec1,vec2):\n  cpt=0\n  for i in range (len(vec1)):\n    cpt=cpt+vec1[i]*vec2[i]\n  return cpt\n    \n    ", "user": "userdId_1", "attemptID": 5201, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-49.473522", "embeddingY": "-35.980724"},{"extension": "py", "date": "2020-03-17 06:39:39", "correct": "0", "upload": "def distribution(liste,n):\n  res=[0]*(n+1)\n  for elem in liste:\n    res=res\n  return res", "user": "userdId_23", "attemptID": 5202, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-30.243273", "embeddingY": "4.75908"},{"extension": "py", "date": "2020-03-29 09:51:49", "correct": "1", "upload": "def permutationListe(liste,permutation):\n  res=[0]*len(liste)\n  for i in range(len(liste)):\n    res[permutation[i]]=liste[i]\n  return res", "user": "userdId_12", "attemptID": 5203, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-50.573654", "embeddingY": "-30.475933"},{"extension": "py", "date": "2020-03-31 06:43:42", "correct": "0", "upload": "def doubleChiffre(nombre):\n  res=False\n  prec=0\n  while nombre!=0 and not res:\n    com1=nombre%10\n    nombre=nombre//10\n    if com1==prec:\n      res=True\n    prec=com1  \n  return res", "user": "userdId_13", "attemptID": 5204, "exercise": "c83ea6acd3e9f6f5543e87d515e8a44a", "exercise_name": "doubleChiffre", "embeddingX": "11.207916", "embeddingY": "21.303215"},{"extension": "py", "date": "2020-04-07 03:35:22", "correct": "0", "upload": "def motPalindrome(mot):\n  i=0\n  trouve=False\n  res=True\n  while i<len(mot)/2 and not trouve:\n    if mot[i]==mot[-i-1]:\n      i+=1\n      trouve=True\n  if trouve: \n    res=True\n  return res", "user": "userdId_16", "attemptID": 5205, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "28.138609", "embeddingY": "47.43491"},{"extension": "py", "date": "2020-03-07 01:00:28", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut1>=debut2:\n    res=True\n    if fin1<=fin2:\n      res=True\n  else:\n    res=False\n  return res", "user": "userdId_8", "attemptID": 5206, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "52.137657", "embeddingY": "-20.220495"},{"extension": "py", "date": "2020-04-11 06:39:36", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  res=True\n  i=0\n  while i<len(phrase) and res:\n    if phrase[i]!=phrase[-i-1]:\n      res=False\n    elif len(phrase)%2!=0:\n        res=True\n    i+=1\n  return res", "user": "userdId_8", "attemptID": 5207, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "22.15096", "embeddingY": "40.22152"},{"extension": "py", "date": "2020-03-24 06:45:21", "correct": "0", "upload": "def fusion(liste1,liste2):\n  res=[]\n  i=0\n  while i<len(liste1)+len(liste2):\n    if liste1[i]>liste2[i]:\n      res=res+[liste2[i]]\n    elif liste1[i]==liste2[i]:\n      res=res+[liste1[i]]+[liste2[i]]\n    else:\n      res=res+[liste1[i]]\n    i=i+1\n  return res", "user": "userdId_26", "attemptID": 5208, "exercise": "6613efb6c873b142dc2b6040c14eb616", "exercise_name": "fusion", "embeddingX": "-24.539848", "embeddingY": "55.485905"},{"extension": "py", "date": "2020-03-15 03:40:36", "correct": "0", "upload": "def polynome(a,b,c):\n    res=0\n    det=b**2-4*a*c\n    if det>0:\n      x1=-b-(racine(det))/2*a\n      x2=-b+(racine(det))/2*a\n      res=x1,x2\n    elif det<0:\n      res=0\n    else:\n      res=-b/2*a\n    return res\n      \n \n\n ", "user": "userdId_21", "attemptID": 5209, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-55.547535", "embeddingY": "7.239317"},{"extension": "py", "date": "2020-03-30 21:14:22", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n  cpt=0\n  i=0\n  res=0\n  while i<len(l):\n    if l[i] == x and cpt<n:\n      cpt+=1\n      res=i\n    i+=1   \n  if cpt < n:\n    return None\n  else: return res\n  return None", "user": "userdId_6", "attemptID": 5210, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-8.486176", "embeddingY": "74.181046"},{"extension": "py", "date": "2020-03-13 00:37:26", "correct": "0", "upload": "def sommeNbPairs(liste):\n  if liste==0:\n    res=0\n  else:\n    for n in (liste):\n      if liste[liste]%2==0:\n        res=res+liste[liste]\n    return res", "user": "userdId_5", "attemptID": 5211, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "30.901024", "embeddingY": "-23.279688"},{"extension": "py", "date": "2020-03-05 21:34:32", "correct": "1", "upload": "def somme(liste):\n  res=0\n  for i in range(len(liste)):\n  \tres=res+liste[i]\n  return res", "user": "userdId_14", "attemptID": 5212, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-45.809887", "embeddingY": "-37.043392"},{"extension": "py", "date": "2020-03-05 21:42:28", "correct": "0", "upload": "def somme(liste):\n  res=0\n  for i in range (len(liste)):\n    res=res+liste(i)\n    return None", "user": "userdId_23", "attemptID": 5213, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-40.192013", "embeddingY": "-30.625402"},{"extension": "py", "date": "2020-04-10 01:01:47", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  res=True\n  if len(liste)==0 or len(liste)==1:\n    res=True\n  while i<len(liste)-1 and res:\n    if liste[0]==0:\n      res=False\n    if liste[i]!=0:\n      q=liste[1]/liste[0]\n    if liste[i]!=0:\n      if liste[i+1]/liste[0]!=q:\n        res=False\n    if liste[i] and liste[i+1]==0:\n      res=True\n    if liste[i]==0 and liste[i+1]==0:\n      res=True\n    i+=1\n  return res", "user": "userdId_26", "attemptID": 5214, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "35.22557", "embeddingY": "62.272488"},{"extension": "py", "date": "2020-03-12 09:37:23", "correct": "1", "upload": "def moyenne(liste):\n  if len(liste)==0:\n    return None\n  res=0\n  cpt=0\n  for i in range (len(liste)):\n    res=res+liste[i]\n    cpt=cpt+1\n  if cpt==0:\n    return None\n  else:\n    res=res/cpt\n  return res", "user": "userdId_1", "attemptID": 5215, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-8.770249", "embeddingY": "-7.534108"},{"extension": "py", "date": "2020-03-06 22:12:10", "correct": "1", "upload": "def minimum(liste):\n    res = None\n    if len(liste) > 0:\n        liste.sort()\n        res = liste[0]\n    return res", "user": "userdId_4", "attemptID": 5216, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "8.041973", "embeddingY": "-56.389286"},{"extension": "py", "date": "2020-03-10 04:10:13", "correct": "0", "upload": "def nbSyllabes(mot):\n  if mot=='':\n    res=0\n  else:\n    res=0\n    Voyelles=['a','e','i','o','u','y']\n    ch=\"\"\n    for i in range(len(mot)):\n      if mot[i-1] not in Voyelles and mot[i] in Voyelles:\n        res=res+1\n      else:\n        ch=mot[i]\n    if mot[0] in Voyelles :\n      res=res+1\n    elif mot[-1] not in Voyelles:\n      res=res-1\n  return res\n    ", "user": "userdId_15", "attemptID": 5217, "exercise": "1c86bec0f4df503e23db53994f3d2991", "exercise_name": "nbSyllabes", "embeddingX": "-19.59948", "embeddingY": "-72.43253"},{"extension": "py", "date": "2020-03-12 22:06:26", "correct": "0", "upload": "def moyenne(liste):\n  if len (liste)==0:\n    res=None\n  else:\n    res=1\n    cpt=1\n    for elem in liste:\n      res=res+elem\n      cpt=cpt+1\n      res=res%cpt\n  return res ", "user": "userdId_20", "attemptID": 5218, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-4.763223", "embeddingY": "-3.6303463"},{"extension": "py", "date": "2020-04-07 04:08:45", "correct": "0", "upload": "def elemGeo(n,u0,q):\n  cpt=u0\n  i=0\n  while i<n:\n    cpt=cpt*n\n    i=i+1\n  return cpt", "user": "userdId_1", "attemptID": 5219, "exercise": "d7c83a7fb9b49e28804e55955ad06968", "exercise_name": "elemGeo", "embeddingX": "-10.174286", "embeddingY": "26.274326"},{"extension": "py", "date": "2020-03-23 00:42:05", "correct": "0", "upload": "def reconstruireChainePartielle(s,n):\n    res = \"\"\n    for i in s :\n      res = res + i\n    return res", "user": "userdId_24", "attemptID": 5220, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-33.536274", "embeddingY": "3.2689998"},{"extension": "py", "date": "2020-04-08 02:31:43", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  res=True\n  if len(liste)==0:\n    res=True\n  else:\n    while i<len(liste)-1 and res==True:\n      if liste[i]!=0:\n        q=liste[i+1]/liste[i]\n        if liste[i+1]/liste[i]==q:\n          res=True\n        else:\n          res=False\n      else:\n        res=False\n    i=i+1\n  return res", "user": "userdId_26", "attemptID": 5221, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "33.096172", "embeddingY": "60.066166"},{"extension": "py", "date": "2020-03-17 06:18:36", "correct": "0", "upload": "def distribution(liste,n):\n  cpt=[0]*n+1\n  for elem in liste:\n    cpt[elem]+=1\n  return res", "user": "userdId_23", "attemptID": 5222, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-57.160595", "embeddingY": "-5.749636"},{"extension": "py", "date": "2020-03-06 00:07:21", "correct": "0", "upload": "def maximum(liste):\n  res=0\n  for i in range(len(liste)):\n      res=res+liste[i] \n  return res", "user": "userdId_41", "attemptID": 5223, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-43.622475", "embeddingY": "-36.113335"},{"extension": "py", "date": "2020-03-30 22:35:04", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n  trouve=0\n  i=0\n  while i<len(l) and trouve!=n:\n    if x==l[i]:\n      trouve=trouve+1\n    i=i+1\n  return i", "user": "userdId_19", "attemptID": 5224, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-6.8298616", "embeddingY": "79.862885"},{"extension": "py", "date": "2020-03-06 00:09:21", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(liste)==0:\n    return None\n  cpt=0\n  for elem in mot==a,e,i,o,u,y:\n    cpt=cpt+1\n  return cpt", "user": "userdId_1", "attemptID": 5225, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "20.330626", "embeddingY": "-38.53659"},{"extension": "py", "date": "2020-03-05 21:59:13", "correct": "0", "upload": "def maximum(liste):\n  res=0\n  for i in range(len(l)):\n    if res<i:\n      res=i\n  return res", "user": "userdId_48", "attemptID": 5226, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "32.39536", "embeddingY": "-69.96244"},{"extension": "py", "date": "2020-03-05 23:39:51", "correct": "1", "upload": "def maximum(liste):\n  if len(liste)==0:\n    return None\n  else:\n    max=liste[0]\n    for elem in liste:\n      if elem>max:\n        max=elem\n  return max", "user": "userdId_14", "attemptID": 5227, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "13.21626", "embeddingY": "-71.8177"},{"extension": "py", "date": "2020-03-23 23:34:32", "correct": "0", "upload": "def nbSyllabes(mot):\n  res=0\n  for i in range (mot):\n    if mot[i-1] not in 'aeiouy' and mot[i] in 'aeiouy':\n      res=res+1\n  if mot[-1] not in 'aeiouy':\n    res=res-1\n  \n  return res", "user": "userdId_15", "attemptID": 5228, "exercise": "1c86bec0f4df503e23db53994f3d2991", "exercise_name": "nbSyllabes", "embeddingX": "-40.421288", "embeddingY": "-21.051529"},{"extension": "py", "date": "2020-03-04 05:04:31", "correct": "0", "upload": "def maximum(liste):\n    if len(liste)==0:\n      res=None\n    else:\n      res=liste[0]\n      for i in range(1,len(liste)):\n        if liste[i]>res:\n          res=i\n    return res", "user": "userdId_18", "attemptID": 5229, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "0.5092145", "embeddingY": "-60.748512"},{"extension": "py", "date": "2020-03-02 07:23:04", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1<=annee2 and mois1<=annee2 and jour1<=jour2:\n    return -1\n  elif annee1==annee2 and mois1==mois2 and jour1==jour2:\n    return 0\n  else:\n    return 1\n  \ncompareDates(10,1,2020,14,2,2020)\ncompareDates(14,2,2020,11,2,2020)\ncompareDates(10,1,2020,10,1,2020)", "user": "userdId_1", "attemptID": 5230, "exercise": "af7c1467ef9f7684d9ff58734067ae98", "exercise_name": "compareDates", "embeddingX": "89.11823", "embeddingY": "-10.965389"},{"extension": "py", "date": "2020-03-22 12:23:09", "correct": "0", "upload": "def nbVoyelles(mot):\n  cpt=0\n  for i in mot:\n    if lettre in 'aeiouy':\n      cpt=cpt+1\n  return res", "user": "userdId_21", "attemptID": 5231, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "15.590097", "embeddingY": "-28.601969"},{"extension": "py", "date": "2020-03-03 05:31:57", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    for i in range(len(liste)):\n      if res<liste[i]:\n        res=liste[i]\n  return res", "user": "userdId_8", "attemptID": 5232, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "24.899923", "embeddingY": "-64.29227"},{"extension": "py", "date": "2020-04-03 00:09:18", "correct": "0", "upload": "def nbChiffres(nombre):\n  cpt=0\n  while nombre>=1:\n    nombre=nombre/10\n    cpt=cpt+1\n  return cpt", "user": "userdId_14", "attemptID": 5233, "exercise": "3dcf332c003a1f3bf15df22ee17884a3", "exercise_name": "nbChiffres", "embeddingX": "31.734325", "embeddingY": "9.419202"},{"extension": "py", "date": "2020-03-23 23:35:00", "correct": "0", "upload": "def nbSyllabes(mot):\n  res=0\n  for i in range (len(mot)):\n    if mot[i-1] not in 'aeiouy' and mot[i] in 'aeiouy':\n      res=res+1\n  if mot[-1] not in 'aeiouy':\n    res=res-1\n  \n  return res", "user": "userdId_15", "attemptID": 5234, "exercise": "1c86bec0f4df503e23db53994f3d2991", "exercise_name": "nbSyllabes", "embeddingX": "-25.554573", "embeddingY": "-67.81765"},{"extension": "py", "date": "2020-03-05 23:47:46", "correct": "0", "upload": "def somme(liste):\n  res=0\n  for elem in list:\n   res=res+elem\n  return res", "user": "userdId_20", "attemptID": 5235, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-31.32301", "embeddingY": "-13.324378"},{"extension": "py", "date": "2020-03-17 00:06:02", "correct": "1", "upload": "def doubleLettre(mot):\n    prec=''\n    res=False\n    for lettre in mot:\n      if lettre==prec:\n        res=True\n      prec=lettre\n    return res", "user": "userdId_12", "attemptID": 5236, "exercise": "00da9cf1fa2b468d915724499459ed8f", "exercise_name": "doubleLettre", "embeddingX": "16.220348", "embeddingY": "-5.8172555"},{"extension": "py", "date": "2020-03-10 04:11:40", "correct": "0", "upload": "def sommeNPremiersEntiersPairs(n):\n    res=0\n    for i in range(0,n,2):\n      res=res+i\n    return res", "user": "userdId_18", "attemptID": 5237, "exercise": "3030dc079e6607c253e89e8ef4784b74", "exercise_name": "sommeNPremiersEntiersPairs", "embeddingX": "-19.06351", "embeddingY": "12.358989"},{"extension": "py", "date": "2020-03-05 23:47:56", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    return 0\n  else:\n    for elem in mot:\n      res=0\n      if elem==mot[0] or mot[4] or mot[8] or mot[14] or mot[20] or mot[24]:\n        res=res+1\n        return res", "user": "userdId_14", "attemptID": 5238, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-15.491087", "embeddingY": "-54.702038"},{"extension": "py", "date": "2020-03-07 00:22:00", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut1<debut2 or fin1>fin2:\n    res=False\n  elif fin1>=debut2:\n    res=True\n  return res", "user": "userdId_8", "attemptID": 5239, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "62.218475", "embeddingY": "-20.575335"},{"extension": "py", "date": "2020-03-13 00:39:00", "correct": "1", "upload": "def sommeNPremiersEntiers(n):\n  if n<=0:\n    res=0\n  else:\n    res=(n*(n+1))/2\n  return res", "user": "userdId_2", "attemptID": 5240, "exercise": "c315a540cf0bfb0182dc114c6f0eafd1", "exercise_name": "sommeNPremiersEntiers", "embeddingX": "62.961876", "embeddingY": "10.874121"},{"extension": "py", "date": "2020-03-17 06:41:29", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n  res=0\n  for i in range(0,len(mot)):\n    if mot[i]==lettre:\n      res=i\n  return res", "user": "userdId_7", "attemptID": 5241, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-20.452662", "embeddingY": "-39.827297"},{"extension": "py", "date": "2020-03-23 22:25:18", "correct": "0", "upload": "def quatrePlus100(liste):\n  res=[]\n  i=0\n  while len(res)<4 :\n      if liste[i]>100 :\n          res=res+[liste[i]]\n      i=i+1\n  return res", "user": "userdId_28", "attemptID": 5242, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-28.199665", "embeddingY": "37.483646"},{"extension": "py", "date": "2020-03-09 22:52:57", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n    return None", "user": "userdId_32", "attemptID": 5243, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "-88.51261", "embeddingY": "3.7409706"},{"extension": "py", "date": "2020-03-06 00:05:24", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    res=0\n  else:\n    for elem in mot:\n      res=0\n      if elem in 'aeiouy':\n        res=res+1\n  return res     ", "user": "userdId_14", "attemptID": 5244, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "5.6620264", "embeddingY": "-29.039"},{"extension": "py", "date": "2020-03-12 06:50:57", "correct": "0", "upload": "def maximum(liste):\n  res=liste[0]\n  for i in liste:\n     if res<i:\n      return i\n  else:\n    return res", "user": "userdId_20", "attemptID": 5245, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "42.11683", "embeddingY": "-58.36997"},{"extension": "py", "date": "2020-03-05 23:47:18", "correct": "0", "upload": "def maximum(liste):\n  res=0\n  for i in range(len(liste)):\n    res=res+liste[i]\n    if res<i:\n      res=i\n    \n      \n    return res", "user": "userdId_5", "attemptID": 5246, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "29.4866", "embeddingY": "-69.64834"},{"extension": "py", "date": "2020-03-06 22:11:53", "correct": "0", "upload": "def maximum(liste):\n    res = None\n    if len(liste) > 0:\n        liste.sort()\n        res = liste[0]\n    return res", "user": "userdId_4", "attemptID": 5247, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "8.029516", "embeddingY": "-56.399944"},{"extension": "py", "date": "2020-03-06 00:15:40", "correct": "0", "upload": "def nbVoyelles(mot):\n  voyel='aeiouy'\n  if len(mot)==0:\n    voy=None\n  if len(voyel)==0:\n    voyel=None\n  else:\n    voy=0\n    for i in range(len(liste)):\n      if voyel[i]==liste[i]:\n        voy=voy+1\n  return voy", "user": "userdId_13", "attemptID": 5248, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-1.4423128", "embeddingY": "-43.30282"},{"extension": "py", "date": "2020-03-11 05:56:22", "correct": "1", "upload": "def somme(liste):\n    return sum(liste)", "user": "userdId_56", "attemptID": 5249, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-61.920624", "embeddingY": "10.807184"},{"extension": "py", "date": "2020-03-10 04:28:10", "correct": "0", "upload": "def sommeNPremiersEntiersPairs(n):\n  res=0\n  for i in range(n,2):\n    if liste[i]:\n      res=res+liste[i]\n  return res", "user": "userdId_8", "attemptID": 5250, "exercise": "3030dc079e6607c253e89e8ef4784b74", "exercise_name": "sommeNPremiersEntiersPairs", "embeddingX": "-6.687478", "embeddingY": "-40.244785"},{"extension": "py", "date": "2020-03-14 03:10:18", "correct": "0", "upload": "def ecart(liste):\n   res=0\n   if len(liste)==0:\n      res=None\n   if len(liste)==1:\n      res=0\n   else:\n      max=liste[0]\n      min=max\n      for elem in range(len(liste)):\n         if elem>max:\n            max=elem\n      for elem in range(len(liste)):\n         if elem<min:\n            min=elem\n   res=res+(max-min)\n   return res", "user": "userdId_14", "attemptID": 5251, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "14.427601", "embeddingY": "-86.7342"},{"extension": "py", "date": "2020-04-05 12:15:44", "correct": "1", "upload": "def suiteGeo(liste):\n    res = True\n    if len(liste)>1:\n        if  liste[0] == 0:\n            q = 0\n        else:\n            q = liste[1]/liste[0]    \n        res=verifSuiteAriGeo(liste,q,0)\n\n    return res\n  \n  \n  \n  \ndef verifSuiteAriGeo(liste,a,b):\n    res=True\n    n=1\n    while n<len(liste) and res:\n        if liste[n]!=liste[n-1]*a+b:\n            res=False\n        n+=1\n    return res", "user": "userdId_4", "attemptID": 5252, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "-3.4734042", "embeddingY": "-72.35594"},{"extension": "py", "date": "2020-04-08 00:16:03", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  res=[]\n  cpt=0\n  if nombre==0:\n    res.append(nombre)\n  while nombre!=0:\n    res.append(nombre%10)\n    nombre=nombre//10\n  for elem in range(len(res)):\n    if elem==chiffre:\n      cpt=cpt+1\n  return cpt", "user": "userdId_14", "attemptID": 5253, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-0.49574435", "embeddingY": "7.3672967"},{"extension": "py", "date": "2020-03-31 04:06:25", "correct": "0", "upload": "def indiceOccurence (n,x,l):\n  verif = False\n  i = 0\n  cpt = 0\n  res = -1\n  while i <len(l) and verif == False :\n    res = res + 1\n    if l[i] == x :\n      cpt = cpt + 1  \n    if n == cpt :\n      verif = True\n    i = i + 1\n    \n  if verif == False :\n    res = None\n  return res", "user": "userdId_17", "attemptID": 5254, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "1.8510392", "embeddingY": "73.21181"},{"extension": "py", "date": "2020-04-12 12:20:56", "correct": "0", "upload": "def suiteGeo(liste):\n    if len(liste)==0 or len(liste)==1:\n      res=True\n    else:\n      res=True\n      for i in range(1,len(liste)):\n        if liste[i-1]==0:\n          res=False\n        else:\n          x=liste[1]/liste[0]\n          if liste[i]!=x*liste[i-1]:\n            res=False\n    return res", "user": "userdId_11", "attemptID": 5255, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "-15.552531", "embeddingY": "-83.66131"},{"extension": "py", "date": "2020-03-03 06:09:33", "correct": "0", "upload": "def nbVoyelles(mot):\n  res=0\n  for lettre in range(len(mot)):\n    if lettre in \"aeiouy\":\n       res=res+1\n  return res", "user": "userdId_25", "attemptID": 5256, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-6.052708", "embeddingY": "-47.775093"},{"extension": "py", "date": "2020-03-09 23:30:20", "correct": "1", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut2>fin1 or debut1>fin2:\n    res=False\n  else:\n    res=True\n  return res", "user": "userdId_32", "attemptID": 5257, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "63.988865", "embeddingY": "-22.50022"},{"extension": "py", "date": "2020-04-07 02:05:32", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res = True\n  i = 0\n  while res and i < len(liste):\n    if liste[i+1] != (a*liste[i]+b) :\n      res = False\n    i = i + 1\n  return res", "user": "userdId_17", "attemptID": 5258, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-79.10726", "embeddingY": "20.975853"},{"extension": "py", "date": "2020-06-02 21:59:29", "correct": "1", "upload": "def polynome(a,b,c):\n  import math\n  delta=b**2-4*a*c\n  if delta>0:\n    x1=(-b+(math.sqrt(delta)))/2*a\n    x2=(-b-(math.sqrt(delta)))/2*a\n    res=(x1,x2)\n  elif delta==0:\n    x=(-b)/(2*a)\n    res=x\n  else:\n    res='pas de solution'\n  return res", "user": "userdId_12", "attemptID": 5259, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-51.15801", "embeddingY": "9.36268"},{"extension": "py", "date": "2020-03-14 09:10:20", "correct": "0", "upload": "def rendezVous(d1,f1,d2,f2):\n    if d1<f2:\n      res=False\n    elif d2>f1: \n      res=False\n    else:\n      res=True\n    return res", "user": "userdId_21", "attemptID": 5260, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "63.66912", "embeddingY": "-19.75171"},{"extension": "py", "date": "2020-03-29 23:59:27", "correct": "1", "upload": "def distribution(liste,n):\n  res=[0]*(n+1)\n  for i in liste:\n    res[i]+=1\n  return res", "user": "userdId_6", "attemptID": 5261, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-64.95931", "embeddingY": "-12.072936"},{"extension": "py", "date": "2020-03-24 03:19:07", "correct": "0", "upload": "def quatrePlus100(liste):\n  res=[]\n  i=0\n  cpt=0\n  while i<len(l) and cpt!=4:\n    if liste[i]>100:\n      res=res+[l[i]]\n      cpt=cpt+1\n    i=i+1\n  return res", "user": "userdId_31", "attemptID": 5262, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-31.73972", "embeddingY": "43.685738"},{"extension": "py", "date": "2020-03-04 00:17:59", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1<=annee2 and mois1<=mois2 and jour1<jour2:\n    return -1\n  elif annee1==annee2 and mois1==mois2 and jour1==jour2:\n    return 0\n  elif annee1<annee2 and mois1<=mois2 and jour1<=jour2:\n    return -1\n  elif annee1<=annee2 and mois1<mois2 and jour1<=jour2:\n    return -1\n  else :\n    return 1\n\ncompareDates(10,1,2020,14,2,2020)\ncompareDates(14,2,2020,11,2,2020)\ncompareDates(10,1,2020,10,1,2020)", "user": "userdId_32", "attemptID": 5263, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "87.40468", "embeddingY": "-13.204735"},{"extension": "py", "date": "2020-03-17 06:00:57", "correct": "0", "upload": "def sommeNbPairs(liste):\n    if len(liste)==0:\n      res=0\n    else:\n      res=0\n      for i in range(0,liste):\n        if liste[i]%2==0:\n          res=res+liste[i]\n    return res", "user": "userdId_11", "attemptID": 5264, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "2.6254675", "embeddingY": "-46.954807"},{"extension": "py", "date": "2020-03-31 03:20:21", "correct": "0", "upload": "def fusion(liste1,liste2):\n  res=[]\n  i=0\n  j=0\n  while i<len(liste1) and j<len(liste2):\n    if liste1[i]<liste2[j]:\n      res.append(liste1[i])\n      i+=1\n    else:\n      res.append(liste2[j])\n      j+=1\n  if len(liste1)>len(liste2):\n    for t in range(len(liste1)):\n      res.append(liste1[t])\n  else:\n    for t in range(len(liste2)):\n      res.append(liste2 [t])\n  return res", "user": "userdId_13", "attemptID": 5265, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-43.24643", "embeddingY": "51.281517"},{"extension": "py", "date": "2020-04-07 10:55:38", "correct": "0", "upload": "def suiteGeo(liste):\n  ok=True\n  i=1\n  if len(liste)==0 and len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[0]==0:\n      ok=False\n    q=liste[1]/liste[0]\n    if liste[i+1]/liste[i]!=q:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 5266, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "27.837633", "embeddingY": "60.6037"},{"extension": "py", "date": "2020-03-12 21:38:00", "correct": "0", "upload": "def nbVoyelles(mot):\n   res=0\n   if (mot)==0:\n      res=0\n   else:\n      for lettre in 'aeiouy':\n         res=res+1\n   return res", "user": "userdId_14", "attemptID": 5267, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "4.3259516", "embeddingY": "-23.991861"},{"extension": "py", "date": "2020-03-12 23:56:14", "correct": "0", "upload": "def qualifJO(sexe,record,nbvictoires,champion):\n  res = True\n  if sexe == 'M':\n    if record < 12 or nbvictoires < 3 :\n      res = False\n      if champion == True :\n        res = True\n  else :\n    if record < 15 or nbvictoires < 3 :\n      res = False\n      if champion == True :\n        res = True\n  return res", "user": "userdId_17", "attemptID": 5268, "exercise": "78ec7738f3a7f3553d4a5c653534c32d", "exercise_name": "qualifJO", "embeddingX": "64.850975", "embeddingY": "-14.098072"},{"extension": "py", "date": "2020-05-04 20:26:47", "correct": "1", "upload": "def polynome(a,b,c):\n  res=\"pas de solution\"\n  delta=b**2-4*a*c\n  if delta>0:\n    S1=(-b+delta**(1/2))/2*a\n    S2=(-b-delta**(1/2))/2*a\n    res=(S1,S2)\n  elif delta==0:\n    res=-b/(2*a)\n  return res", "user": "userdId_8", "attemptID": 5269, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-51.90012", "embeddingY": "3.1321146"},{"extension": "py", "date": "2020-03-04 10:30:24", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut2<=fin1 and fin2>=debut1 :\n    res='true'\n  else :\n    res='false'\n  return res\n\n    \n  \n\n    \n    ", "user": "userdId_28", "attemptID": 5270, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "51.929756", "embeddingY": "-25.161469"},{"extension": "py", "date": "2020-03-06 00:19:32", "correct": "1", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    return 0\n  cpt=0\n  for lettre in mot:\n    if lettre in 'aeiouy':\n      cpt=cpt+1\n  return cpt", "user": "userdId_1", "attemptID": 5271, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "6.153364", "embeddingY": "-29.646336"},{"extension": "py", "date": "2020-04-08 00:07:52", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  res=True\n  if len(liste)==0:\n    res=True\n  while i<len(liste)-1 and res==True:\n    if liste[i]==0:\n      res=False\n    if liste[i]!=0:\n      q=liste[1]/liste[0]\n    if liste[i]!=0:\n      if liste[i+1]/liste[i]!=q:\n        res=False\n    i+=1\n  return res\n", "user": "userdId_34", "attemptID": 5272, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "34.76534", "embeddingY": "59.188408"},{"extension": "py", "date": "2020-04-13 22:56:01", "correct": "0", "upload": "def listeDecroissante(scores):\n  res=False\n  if scores==[]:\n    res=True\n  for i in range(len(scores)-1):\n    if scores[i]>scores[1+i]:\n      res=True\n  return res", "user": "userdId_8", "attemptID": 5273, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "-8.147718", "embeddingY": "-69.0199"},{"extension": "py", "date": "2020-03-01 11:47:41", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if fin1 >= debut2 :\n    res = True\n  else:\n    res = False\n  return res", "user": "userdId_42", "attemptID": 5274, "exercise": "6fd66bb2393fbf3809f1c6d04f3831f7", "exercise_name": "rendezVous", "embeddingX": "52.287067", "embeddingY": "-18.282513"},{"extension": "py", "date": "2020-03-10 21:09:56", "correct": "0", "upload": "def ecart(liste):\n  res=0\n  if len(liste)==0 or 1:\n    res=None\n    return res", "user": "userdId_14", "attemptID": 5275, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "9.876221", "embeddingY": "-51.177017"},{"extension": "py", "date": "2020-04-07 04:12:01", "correct": "0", "upload": "def suiteGeo(liste):\n  if len(liste)==0:\n    res=True\n  elif len(liste)==1 and liste[0]!=0:\n    res=True\n  else:\n    if liste[0]==0:\n      res=False\n    else:\n      i=0\n      End=False\n      while i<len(liste)-1:\n        r=liste[1]/liste[0]\n        if liste[i+1]/liste[i]==r and End==False:\n          res=True\n        else:\n          res=False\n          End=True\n  return res", "user": "userdId_26", "attemptID": 5276, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "37.536026", "embeddingY": "56.265705"},{"extension": "py", "date": "2020-03-12 23:45:00", "correct": "0", "upload": "def jourNuit(heure):\n  if heure<0 or heure>24:\n    res=\"l'heure saisie est invalide\"\n  if 6<=heure<=18:\n    if 5<=heure<=12:\n      res=\"on est le matin et il fait jour\"\n    if 12<=heure<=17:\n      res=\"on est l'apr\u00e8s-midi et il fait jour\"\n    if 17<=heure<=18:\n      res=\"on est le soir et il fait jour\"\n  if 1<=heure<=5 or 19<=heure<=24:\n    if 1<=heure<=4:\n      res=\"on est la nuit et il fait nuit\"\n    if 21<=heure<=24:\n      res=\"on est la nuit et il fait nuit\"\n    if 19<=heure<=20:\n      res=\"on est le soir et il fait nuit\"\n    return heure", "user": "userdId_13", "attemptID": 5277, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "69.48266", "embeddingY": "23.967127"},{"extension": "py", "date": "2020-03-06 00:07:22", "correct": "0", "upload": "def nbVoyelles(mot):\n  cpt=0\n  for elem in mot==(a,e,i,o,u,y):\n    cpt=cpt+1\n  return cpt", "user": "userdId_1", "attemptID": 5278, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-27.300615", "embeddingY": "-18.276081"},{"extension": "py", "date": "2020-04-03 00:40:29", "correct": "0", "upload": "def stockerChiffres(nombres):\n  res=[]\n  while nombres!=0:\n    res.append(nombres%10)\n    nombres=nombres//10\n  return res", "user": "userdId_5", "attemptID": 5279, "exercise": "c83ea6acd3e9f6f5543e87d515e8a44a", "exercise_name": "doubleChiffre", "embeddingX": "43.980904", "embeddingY": "14.222533"},{"extension": "py", "date": "2020-03-12 22:09:14", "correct": "0", "upload": "def moyenne(liste):\n  if len (liste)==0:\n    res=None\n  else:\n    res=0\n    cpt=0\n    for elem in liste:\n      res=res+elem\n      cpt=cpt+elem\n      res=cpt%elem\n  return res ", "user": "userdId_20", "attemptID": 5280, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-5.1133833", "embeddingY": "-4.2050443"},{"extension": "py", "date": "2020-04-05 07:26:11", "correct": "0", "upload": "def nbSyllabes(mot):\n  if mot=='':\n    cpt=0\n  else:\n    cpt=0\n    if mot[0] in 'aeiouy':\n      cpt+=1\n    for i in range(1,len(mot)):\n      if mot[i] in 'aeiouy' and mot[i-1] not in 'aeiouy':\n        cpt+=1\n    if mot[-1]=='e' or (mot[-1]+mot[-2]) not in 'aeiouy':\n      cpt-=1\n    if cpt==0:\n      cpt+=1\n  return cpt", "user": "userdId_18", "attemptID": 5281, "exercise": "1c86bec0f4df503e23db53994f3d2991", "exercise_name": "nbSyllabes", "embeddingX": "-24.999392", "embeddingY": "-70.029816"},{"extension": "py", "date": "2020-03-19 23:48:59", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  res=\"\"\n  if (longueur+debut)>len(s):\n    longueur=len(s)\n  for i in range(debut,longueur):\n    res=res+s[i]\n  return res", "user": "userdId_13", "attemptID": 5282, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-70.670685", "embeddingY": "21.12498"},{"extension": "py", "date": "2020-03-22 04:57:26", "correct": "0", "upload": "def polynome(a,b,c):\n  delta=b**2-4*a*c\n  if delta>0:\n    x=((-b)-(delta**0.5)/2*a),((-b)+(delta**0.5)/2*a)\n  elif delta==0:\n    x=-b/2*a\n  else:\n    x='pas de solution'\n  return x", "user": "userdId_12", "attemptID": 5283, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-54.96744", "embeddingY": "8.473878"},{"extension": "py", "date": "2020-03-27 06:07:35", "correct": "0", "upload": "def compare(chaine1,chaine2):\n  i=0\n  while res==0 and i<chaine1 and i<chaine2:\n    if chaine1[i]<chaine2[i]:\n      res=-1\n    elif chaine1[i]>chaine2[i]:\n      res=1\n    else:\n      res=0\n  return res", "user": "userdId_12", "attemptID": 5284, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-11.621268", "embeddingY": "42.038647"},{"extension": "py", "date": "2020-03-10 03:17:54", "correct": "1", "upload": "def jourNuit(heure):\n    if heure<0 or heure>24:\t\n        res=\"l'heure saisie est invalide\"\n    else:#l'heure est valide\n        if heure<5 or heure>=21:\n    \t    res= \"on est la nuit\"\n        elif heure<12:\n            res= \"on est le matin\"\n        elif heure<17:\n            res= \"on est l'apr\u00e8s-midi\"\n        else:\n            res= \"on est le soir\"\n        if heure <6 or heure >=18:\n            res=res+\" et il fait nuit\"\n        else:\n            res=res +\" et il fait jour\"\n    return res", "user": "userdId_39", "attemptID": 5285, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "71.9428", "embeddingY": "15.797079"},{"extension": "py", "date": "2020-04-06 22:37:47", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n    res=0\n    nb=nombre\n    while nb//10!=0:\n      if nb%10==chiffre:\n        res=res+1\n      nb=nb//10\n    if nombre==0 and chiffre==0:\n      res=1\n      return res\n      \n      ", "user": "userdId_28", "attemptID": 5286, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "14.591508", "embeddingY": "12.940653"},{"extension": "py", "date": "2020-03-15 07:20:30", "correct": "1", "upload": "def jourNuit(heure):\n  if heure<0 or heure>24:\n    res=\"l'heure saisie est invalide\"\n  else:\n    if heure<5 or heure>=21:\n      res=\"on est la nuit\"\n    elif heure<12:\n      res=\"on est le matin\"\n    elif heure<17:\n      res=\"on est l'apr\u00e8s-midi\"\n    else:\n      res=\"on est le soir\"\n    if heure>=6 and heure<18:\n      res=res+' et il fait jour'\n    else:\n      res=res+' et il fait nuit'\n  return res", "user": "userdId_12", "attemptID": 5287, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "78.93465", "embeddingY": "19.321722"},{"extension": "py", "date": "2020-04-06 03:59:33", "correct": "0", "upload": "def suiteGeo(liste):\n    if liste==[] or len(liste)==1:\n      ok=True\n    elif 0 in liste:\n      ok=False\n    else:\n      ok=True\n      i=1\n      while i<len(liste)+1 and ok:\n        cte=liste[i]/liste[i-1]\n        if liste[0]*cte**i!=liste[i+1]:\n          ok=False\n        i+=1\n    return ok", "user": "userdId_18", "attemptID": 5288, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "39.68945", "embeddingY": "66.156105"},{"extension": "py", "date": "2020-04-12 04:38:27", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=False\n  c=[]\n  for i in range(len(liste)-1):\n    c=a*liste[i]+b\n  return c", "user": "userdId_8", "attemptID": 5289, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-84.22199", "embeddingY": "18.483322"},{"extension": "py", "date": "2020-04-16 23:24:04", "correct": "0", "upload": "def indiceInsertion(sc,scores):\n  i=0\n  trouve=False\n  res=0\n  while i<len(scores) and not trouve :\n    if sc>scores[i] :\n      trouve=True\n    i+=1\n  res=i\n  return res", "user": "userdId_15", "attemptID": 5290, "exercise": "f8a820b2bd54d18d36716e3d703858f7", "exercise_name": "indiceInsertion", "embeddingX": "0.39056543", "embeddingY": "58.78014"},{"extension": "py", "date": "2020-04-05 22:51:03", "correct": "0", "upload": "def produitScalaire(vec1,vec2):\n  res=0\n  i=0\n  while i<len(vec1) and i<len(vec2) :\n    res= res+(vec1[elem]*vec2[elem])\n    i=i+1\n  return res", "user": "userdId_15", "attemptID": 5291, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-15.826274", "embeddingY": "50.191574"},{"extension": "py", "date": "2020-04-10 00:45:52", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i]==0:\n      ok=False\n    if liste[i]!=0:\n      q=liste[i]/liste[0]\n      if liste[i+1]/liste[i]!=q:\n        ok=False\n    i=i+1\n  return ok", "user": "userdId_3", "attemptID": 5292, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "29.483477", "embeddingY": "60.85991"},{"extension": "py", "date": "2020-03-24 05:48:43", "correct": "0", "upload": "def compare(chaine1,chaine2):\n  i=0\n  res=0\n  while i<len(chaine1) and i<len(chaine2) and res==0:\n    if chaine1[i]<chaine2[i]:\n      res=-1\n    if chaine1[i]>chaine2[i]:\n      res=1\n    i=i+1\n    if len(chaine1)<len(chaine2):\n      res=-1\n    else:\n      res=1\n  return res\n\n", "user": "userdId_13", "attemptID": 5293, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-23.7126", "embeddingY": "62.649025"},{"extension": "py", "date": "2020-03-17 06:37:36", "correct": "0", "upload": "def permutationListe(liste,permutation):\n  res=0\n  for elem in liste:\n    res=res+elem*(n+1)\n  return res", "user": "userdId_25", "attemptID": 5294, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-29.36379", "embeddingY": "-4.170653"},{"extension": "py", "date": "2020-03-06 00:08:36", "correct": "0", "upload": "def maximum(liste):\n  res=0\n  for i in range(len(liste)):\n      res==res+liste[i]\n  return res", "user": "userdId_41", "attemptID": 5295, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-28.806274", "embeddingY": "-47.02191"},{"extension": "py", "date": "2020-03-05 21:36:44", "correct": "0", "upload": "def maximum(liste):\n  max = liste[0]\n  for i in range(1,len(liste)):\n    if liste[i]>max:\n      max = liste[i]\n  return max", "user": "userdId_6", "attemptID": 5296, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "10.2498455", "embeddingY": "-72.18686"},{"extension": "py", "date": "2020-03-27 06:08:11", "correct": "0", "upload": "def compare(chaine1,chaine2):\n  i=0\n  while res==0 and i<len(chaine1) and i<len(chaine2):\n    if chaine1[i]<chaine2[i]:\n      res=-1\n    elif chaine1[i]>chaine2[i]:\n      res=1\n    else:\n      res=0\n  return res", "user": "userdId_12", "attemptID": 5297, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-11.407862", "embeddingY": "42.68106"},{"extension": "py", "date": "2020-03-05 22:17:11", "correct": "0", "upload": "def maximum(liste):\n  res=0\t\n  for elem in liste:\n    if res<elem(liste):\n      res=elem(liste)\n  \n    return res\n  ", "user": "userdId_23", "attemptID": 5298, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "40.27112", "embeddingY": "-51.975594"},{"extension": "py", "date": "2020-03-17 05:58:10", "correct": "0", "upload": "def permutationListe(liste,permutation):\n  res=[]\n  for i in liste:\n    liste[i]=permutation[i]\n  return res", "user": "userdId_35", "attemptID": 5299, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-55.65743", "embeddingY": "-17.24763"},{"extension": "py", "date": "2020-04-11 08:40:23", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  c=[]\n  for elem in liste:\n    c+=a*elem+b\n    if c==elem:\n      res=True\n  return res", "user": "userdId_8", "attemptID": 5300, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-71.629875", "embeddingY": "16.387728"},{"extension": "py", "date": "2020-03-08 23:19:57", "correct": "0", "upload": "from math import sqrt\n\ndef polynome(a,b,c):\n  d=b**2-(4*a*c)\n  if d<0:\n    return 'pas de solution'\n  elif d==0:\n    solution=-b/(2*a)\n    return solution\n  else:\n    if d>0:\n      solution1=(-b-sqrt(d))/(2*a)\n      solution2=(-b+sqrt(d))/(2*a)\n      return solution1 and solution2", "user": "userdId_1", "attemptID": 5301, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-50.63222", "embeddingY": "6.264404"},{"extension": "py", "date": "2020-03-19 05:59:24", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1<annee2:\n    if mois1<mois2:\n      if jour1<jour2:\n        res=-1\n  elif jour1==jour2 and mois1==mois2 and annee1==annee2:\n      res=0\n  elif date1==None or date2==None:\n    res=None\n  else:\n    res=1\n  return res", "user": "userdId_34", "attemptID": 5302, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "76.41695", "embeddingY": "-25.16821"},{"extension": "py", "date": "2020-04-07 23:28:49", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  ok=False\n  i=0\n  while i<len(phrase)//2 and not ok:\n    if phrase[i]!=phrase[-i-1]:\n      ok=True\n    i+=1\n  if phrase==\"\":\n    ok=True\n  return ok", "user": "userdId_13", "attemptID": 5303, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "27.044409", "embeddingY": "37.910786"},{"extension": "py", "date": "2020-04-06 02:50:25", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  res = True\n  phrase2 = []\n  for i in range (len(phrase)):\n    if i != ' ':\n      phrase2.append (phrase[i])\n  i = 0\n  while i < len(phrase2)/2 and res == True :\n    if phrase2[i] != phrase2[len(phrase2)-i-1] :\n      res = False\n    i = i + 1\n  return res\n ", "user": "userdId_17", "attemptID": 5304, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "31.701433", "embeddingY": "57.613045"},{"extension": "py", "date": "2020-04-13 22:32:12", "correct": "0", "upload": "def nextConway(s):\n  res=''\n  prec=None\n  cpt=0\n  for c in s:\n    if c==prec:\n      cpt+=1\n    else:\n      if prec:\n        res+=str(cpt)+str(prec)\n      cpt+=1\n    prec=c\n  if prec:\n    res+=str(cpt)+str(prec)\n  return res", "user": "userdId_8", "attemptID": 5305, "exercise": "a580c32690609356dae4401b3c89a3b8", "exercise_name": "nextConway", "embeddingX": "6.982322", "embeddingY": "-6.4412575"},{"extension": "py", "date": "2020-03-23 00:02:10", "correct": "0", "upload": "def nombrePair(n):\n  res=False\n  for x in range(n):\n    if x%2==True:\n      res=x\n  return res", "user": "userdId_8", "attemptID": 5306, "exercise": "3001254263845e9a478696f81a704d33", "exercise_name": "nombrePair", "embeddingX": "31.710941", "embeddingY": "-7.3868666"},{"extension": "py", "date": "2020-04-12 08:29:57", "correct": "0", "upload": "def suiteAriGeo(liste):\n  i=0\n  while i<len(liste)-1:\n    a=liste[0]\n    b=liste[0]\n    if liste[i+1]==liste[i]+(liste[1]-liste[0]):\n      b=liste[1]-liste[0]\n    if liste[0]!=0:                        \n      if liste[i+1]==liste[i]*liste[1]/liste[0]:\n        a=liste[1]/liste[0]\n        b=0\n    if liste[i+1]==liste[i]*(liste[1]-liste[0])+(liste[i]-liste[i-1]):\n      b=liste[0]\n    i=i+1\n  ok=True\n  i=0\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=a*liste[i]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 5307, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "35.63891", "embeddingY": "83.914276"},{"extension": "py", "date": "2020-03-05 23:50:16", "correct": "1", "upload": "def maximum(liste):\n\tif len(liste)==0:\n\t\tres=None\n\telse:\n\t\tres=liste[0]\n\t\tfor i in range(1,len(liste)):\n\t\t\tif liste [i]>res:\n\t\t\t\tres=liste[i]\n\treturn res\n      ", "user": "userdId_19", "attemptID": 5308, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-0.47589818", "embeddingY": "-60.561626"},{"extension": "py", "date": "2020-03-05 23:48:18", "correct": "0", "upload": "def maximum(liste):\n  res=0\n  for i in range (len(liste)):\n    res=res<i\n  return res", "user": "userdId_45", "attemptID": 5309, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "31.929243", "embeddingY": "-71.41208"},{"extension": "py", "date": "2020-03-22 23:57:47", "correct": "0", "upload": "def nombrePair(n):\n  res=0\n  for x in range(n):\n    if x%2==True:\n      res=True\n    else:\n      res=False\n  return res", "user": "userdId_8", "attemptID": 5310, "exercise": "3001254263845e9a478696f81a704d33", "exercise_name": "nombrePair", "embeddingX": "31.746637", "embeddingY": "-7.381635"},{"extension": "py", "date": "2020-03-10 10:01:06", "correct": "0", "upload": "def maximum(liste):\n    if len(liste)==0:\n      max=None\n    else:\n      max=liste[0]\n      for i in range(1,len(liste)):\n        if liste[i]>max:\n          res=liste[i]\n    ", "user": "userdId_11", "attemptID": 5311, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "7.730393", "embeddingY": "-69.30813"},{"extension": "py", "date": "2020-03-10 11:30:38", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n    if len(mot)==0:\n      res=None\n    else:\n      res=0\n      for c in mot:\n        if c==lettre:\n          res=mot[c]\n        else:\n          if lettre!=mot[elem]:\n            res=None\n    return res\n  \n      ", "user": "userdId_11", "attemptID": 5312, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-15.970666", "embeddingY": "-34.124683"},{"extension": "py", "date": "2020-03-05 10:38:51", "correct": "0", "upload": "from math import *\n\ndef polynome(a,b,c):\n  d=b**2-4*a*c\n  if d <0:\n    return \"pas de solution\"\n  elif d==0:\n    x1==-b/2*a and x2==-b/2*a\n    return x1 and x2\n  elif d>0:\n    x1==(-b-(sqrt(d)))/2*a\n    x2==(-b+(sqrt(d)))/2*a\n    return x1 and x2\n\n    polynome(1,-1,0)\n    polynome(2,-4,2)\n    polynome(3,-2,10)", "user": "userdId_1", "attemptID": 5313, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-53.084557", "embeddingY": "4.721888"},{"extension": "py", "date": "2020-04-11 07:07:20", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  res=True\n  i=0\n  while i<len(phrase) and res:\n    if phrase[i]==' ':\n      i+=1\n    if phrase[-i-1]==' ':\n      i-=1\n    elif phrase[i]!=phrase[-i-1]:\n      res=False\n    i+=1\n  return res", "user": "userdId_8", "attemptID": 5314, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "29.77815", "embeddingY": "41.180275"},{"extension": "py", "date": "2020-03-23 01:15:18", "correct": "1", "upload": "def maximum(liste):\n  if len(liste)==0:\n    max=None\n  else:\n    max=liste[0]\n    for i in range(1,len(liste)):\n      if liste[i]>max:\n        max=liste[i]\n  return max", "user": "userdId_34", "attemptID": 5315, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "12.1236725", "embeddingY": "-70.66966"},{"extension": "py", "date": "2020-03-05 06:42:54", "correct": "0", "upload": "from math import sqrt\ndef polynome(a,b,c):\n  x=0\n  delta=b**2-4*a*c\n  if delta>0 :\n    x=(-b-sqrt(delta))/2*a,(-b+sqrt(delta))/2-a\n  elif delta==0 :\n    x=-b/2*a\n  else :\n    x='pas de solution'\n  return x\n\n    \n", "user": "userdId_28", "attemptID": 5316, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-49.02237", "embeddingY": "9.793995"},{"extension": "py", "date": "2020-03-06 00:48:15", "correct": "0", "upload": "def nbVoyelles(mot):\n  res=0\n  for elem in mot:\n    if elem in mot==[\"a\",\"e\",\"i\",\"o\",\"u\",\"y\"]:\n      res=res+1\n  return res", "user": "userdId_23", "attemptID": 5317, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "13.346628", "embeddingY": "-34.805393"},{"extension": "py", "date": "2020-03-19 23:55:49", "correct": "0", "upload": "def sousChaine(s,d,l):\n  res=\"\"\n  for j in range(d,d+l):\n    res=res+j\n\n  return res\n", "user": "userdId_5", "attemptID": 5318, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-68.586395", "embeddingY": "28.290676"},{"extension": "py", "date": "2020-04-10 01:06:32", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  str(nombre)\n  for i in range(nombre):\n    if chiffre==i:\n      cpt=cpt+1\n  return cpt", "user": "userdId_3", "attemptID": 5319, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-23.726288", "embeddingY": "-26.45457"},{"extension": "py", "date": "2020-03-07 00:10:56", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if (debut1>=debut2 or fin1<=fin2) and fin1>=debut2:\n    res=True\n  else:\n    res=False\n  return res", "user": "userdId_8", "attemptID": 5320, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "53.420094", "embeddingY": "-24.001097"},{"extension": "py", "date": "2020-03-03 06:25:19", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if jour1<jour2:\n    if mois1<mois2:\n      if annee1<=annee2:\n        res=-1\n  else:\n    if jour1>jour2:\n      if mois1>mois2:\n        if annee1>=annee2:\n          res=1\n    else:\n      if jour1==jour2:\n        if jour1==jour2:\n          if annee1==annee2:\n            res=0\n  return res", "user": "userdId_30", "attemptID": 5321, "exercise": "af7c1467ef9f7684d9ff58734067ae98", "exercise_name": "compareDates", "embeddingX": "78.121086", "embeddingY": "-19.862455"},{"extension": "py", "date": "2020-03-03 06:06:54", "correct": "0", "upload": "def nbVoyelles(mot):\n  res=0\n  for c in range(len(mot)):\n    if c in \"aeiouy\":\n      res=res+1\n  return res", "user": "userdId_35", "attemptID": 5322, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-6.0671287", "embeddingY": "-47.76359"},{"extension": "py", "date": "2020-03-08 21:33:29", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if annee1==annee2 and mois1==mois2 and jour1==jour2:\n    return 0\n  elif annee1<=annee2 or mois1<=mois2 and jour1<jour2:\n    return -1\n  else:\n    return 1", "user": "userdId_1", "attemptID": 5323, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "87.0549", "embeddingY": "-11.741388"},{"extension": "py", "date": "2020-03-06 00:20:31", "correct": "0", "upload": "def nbVoyelles(mot):\n  voyel=\"aeiouy\"\n  if len(mot)==0:\n    voy=None\n  else:\n    voy=0\n    for i in mot:\n      if voyel[i] ==mot:\n        voy=voy+1\n  return voy", "user": "userdId_13", "attemptID": 5324, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "0.9322758", "embeddingY": "-43.070156"},{"extension": "py", "date": "2020-04-16 23:40:21", "correct": "0", "upload": "def indiceInsertion(sc,scores):\n  i=0\n  while i<len(scores)+1:\n    if sc>scores[i]:\n      return i\n    i=i+1", "user": "userdId_1", "attemptID": 5325, "exercise": "f8a820b2bd54d18d36716e3d703858f7", "exercise_name": "indiceInsertion", "embeddingX": "-16.411873", "embeddingY": "60.669205"},{"extension": "py", "date": "2020-03-24 05:49:05", "correct": "0", "upload": "def compare(chaine1,chaine2):\n  i=0\n  res=0\n  while i<len(chaine1) and i<len(chaine2) and res==0:\n    if chaine1[i]<chaine2[i]:\n      res=-1\n    if chaine1[i]>chaine2[i]:\n      res=1\n    i=i+1\n  if len(chaine1)<len(chaine2):\n    res=-1\n  else:\n    res=1\n  return res\n\n", "user": "userdId_13", "attemptID": 5326, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "-24.701387", "embeddingY": "61.7967"},{"extension": "py", "date": "2020-03-22 23:07:11", "correct": "1", "upload": "def sommeNbPairs(liste):\n  res=0\n  for n in liste:\n    if n % 2 == 0:\n      res += n\n  return res", "user": "userdId_36", "attemptID": 5327, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "32.89215", "embeddingY": "-19.434076"},{"extension": "py", "date": "2020-04-13 21:58:03", "correct": "0", "upload": "def nbOccurrencesJoueur(joueurs,nom):\n  res=0\n  for nom in joueurs:\n    res=res+1\n  return res", "user": "userdId_19", "attemptID": 5328, "exercise": "00ee5faf82e54951fbdb2ba2656f7ae7", "exercise_name": "nbOccurrencesJoueur", "embeddingX": "-32.356792", "embeddingY": "-2.9027836"},{"extension": "py", "date": "2020-03-06 00:00:15", "correct": "0", "upload": "def maximum(liste):\n    res=0\n    for elem in liste:\n        if elem>res:\n            res=elem\n    return res", "user": "userdId_49", "attemptID": 5329, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "31.419678", "embeddingY": "-43.237587"},{"extension": "py", "date": "2020-03-09 08:44:54", "correct": "0", "upload": "def moyenne(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=0\n    cpt=0\n    for elem in liste:\n      res=res+elem\n    cpt=cpt+1\n  return res/cpt\n\n    ", "user": "userdId_11", "attemptID": 5330, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-3.7745354", "embeddingY": "-9.609704"},{"extension": "py", "date": "2020-04-07 02:54:37", "correct": "1", "upload": "def indiceOccurrence(n,x,l):\n  res=None\n  i=0\n  cpt=0\n  while i<len(l) and cpt!=n:\n      if l[i]==x:\n        cpt+=1\n      i+=1\n  if cpt==n:\n    res=i-1\n  return res", "user": "userdId_16", "attemptID": 5331, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-9.443122", "embeddingY": "75.05333"},{"extension": "py", "date": "2020-03-15 02:01:51", "correct": "0", "upload": "def qualifJO(sexe,record,nbvictoires,champion):\n  if champion==True:\n    res=True\n  elif sexe==M and record<12.0 and nbvictoires>=3:\n    res=True\n  elif sexe==F and record<15.0 and nbvictoires>=3:\n    res=True\n  else:\n    res=False\n  return res", "user": "userdId_8", "attemptID": 5332, "exercise": "78ec7738f3a7f3553d4a5c653534c32d", "exercise_name": "qualifJO", "embeddingX": "61.404465", "embeddingY": "-11.373738"},{"extension": "py", "date": "2020-04-07 04:16:17", "correct": "1", "upload": "def sousChaine(s1,s2):\n  res = False\n  if s1 in s2:\n    res = True\n  return res", "user": "userdId_52", "attemptID": 5333, "exercise": "a7cdd094daa2f0bfccc7a4ec419f7243", "exercise_name": "sousChaine", "embeddingX": "46.21647", "embeddingY": "-16.307085"},{"extension": "py", "date": "2020-04-16 23:53:58", "correct": "1", "upload": "def listeDecroissante(scores):\n  i=0\n  while i<len(scores)-1:\n    if scores[i]<scores[i+1]:\n      return False\n    i+=1\n  return True", "user": "userdId_34", "attemptID": 5334, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "18.051043", "embeddingY": "44.5284"},{"extension": "py", "date": "2020-04-09 08:59:23", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n    cpt=0\n    decomp=nombre\n    while decomp!=0:\n      decomp=decomp%10\n      if decomp==chiffre:\n        cpt+=1\n    if cpt==0:\n      cpt=1\n    return cpt\n    ", "user": "userdId_11", "attemptID": 5335, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "11.309434", "embeddingY": "10.943871"},{"extension": "py", "date": "2020-03-06 00:00:15", "correct": "0", "upload": "def nbVoyelles(mot):\n\tnb=0\n\tvoy=['a','e','i','o','u','y']\n\tfor lettre in mot:\n\t\tif lettre in mot:\n\t\t\tnb=nb+1\n\treturn nb", "user": "userdId_19", "attemptID": 5336, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "17.983353", "embeddingY": "-29.469795"},{"extension": "py", "date": "2020-04-12 08:00:40", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n    cpt=0\n    x=nombre%10\n    decomp=nombre\n    while decomp!=0:\n      x=nombre%10\n      if x!=chiffre:\n        decomp=decomp//10\n        x=decomp%10\n      else:\n        cpt+=1\n    return cpt", "user": "userdId_11", "attemptID": 5337, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "5.1634483", "embeddingY": "15.491367"},{"extension": "py", "date": "2020-03-30 21:43:36", "correct": "0", "upload": "def fusion(liste1,liste2):\n  i=0\n  j=0\n  res = []\n  while j<len(liste2) and i<len(liste1):\n    if liste1[i]<=liste2[j]:\n      res.append(liste1[i])\n      print('i',i)\n      i+=1\n    else:\n      res.append(liste2[j])\n      print('j',j)\n      j+=1\n  while i<len(liste1):\n    res.append(liste1[i])\n    i+=1\n  while j<len(liste2):\n    res.append(liste2[ji])\n    j+=1\n  return res", "user": "userdId_6", "attemptID": 5338, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-42.61991", "embeddingY": "55.035564"},{"extension": "py", "date": "2020-03-20 00:53:08", "correct": "0", "upload": "def permutationListe(liste,permutation):\n    res = [0]*len(liste)\n    for i in range (len(liste)) :\n      for y in range (len(permutation)) :\n        if permutation[y] == i :\n          res[elem] = liste[y]\n    return res", "user": "userdId_17", "attemptID": 5339, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-26.805931", "embeddingY": "-33.906353"},{"extension": "py", "date": "2020-04-16 23:56:59", "correct": "0", "upload": "def meilleurClassementJoueur(scores,joueurs,nom):\n  res=0\n  if nom not in joueurs:\n    res=-1\n  else:\n    for i in range(len(joueurs)):\n      if joueurs[i]==nom:\n        res=i\n  return res   ", "user": "userdId_12", "attemptID": 5340, "exercise": "be6ce0a06c5d396190024c7c681da95d", "exercise_name": "meilleurClassementJoueur", "embeddingX": "-24.535557", "embeddingY": "-36.412964"},{"extension": "py", "date": "2020-03-06 00:35:25", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=0\n    for i in range(len(liste)):\n      if liste[i]>res:\n        res=liste[i]\n  return res", "user": "userdId_5", "attemptID": 5341, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "0.7336163", "embeddingY": "-62.1261"},{"extension": "py", "date": "2020-04-08 01:28:00", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  res=True\n  \n  return res", "user": "userdId_26", "attemptID": 5342, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "9.449474", "embeddingY": "49.385445"},{"extension": "py", "date": "2020-03-02 02:56:05", "correct": "0", "upload": "def semestreValide(ue1,ue2):\n  if ue1>10 :\n    a=ue1+ue2\n    if a>=20 :\n      res=True\n  else :\n    res=False\n  return res", "user": "userdId_15", "attemptID": 5343, "exercise": "70ae7ad6cf504e0fa8cedebd8e8a825f", "exercise_name": "semestreValide", "embeddingX": "65.410324", "embeddingY": "0.031238988"},{"extension": "py", "date": "2020-03-14 03:16:01", "correct": "0", "upload": "def moyenne(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=0\n    cpt=0\n    for elem in liste:\n      res=res+elem\n      cpt=cpt+1\n  res=res/cpt\n  return res", "user": "userdId_14", "attemptID": 5344, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-3.520007", "embeddingY": "-9.5749235"},{"extension": "py", "date": "2020-04-06 14:22:48", "correct": "0", "upload": "def produitScalaire(vec1,vec2):\n  res=0\n  for i in range(0,4):\n    res=(vec1[i]*vec2[i])+res\n  return res", "user": "userdId_3", "attemptID": 5345, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-63.638634", "embeddingY": "-16.50779"},{"extension": "py", "date": "2020-03-22 12:01:02", "correct": "0", "upload": "def maximum(liste):\n  res=[]\n  for x in liste: \n    if x>res:\n      res=x\n  return res", "user": "userdId_21", "attemptID": 5346, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "32.901592", "embeddingY": "-43.568127"},{"extension": "py", "date": "2020-04-05 04:49:38", "correct": "1", "upload": "def moyenne(liste):\n  if len(liste)!=0:\n    s=0\n    for elem in liste:\n      s+=elem\n    res=s/len(liste)\n  else:\n    res=None\n    \n  return res", "user": "userdId_26", "attemptID": 5347, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-5.5045285", "embeddingY": "-14.729582"},{"extension": "py", "date": "2020-03-22 10:23:43", "correct": "0", "upload": "def bissextile(a):\n    if a%4==0 or a%400==0: \n      res=True\n    elif a%100!=0: \n      res=False\n    return res", "user": "userdId_21", "attemptID": 5348, "exercise": "a7d37636649c0ada991520788deeb2d0", "exercise_name": "bissextile", "embeddingX": "45.28586", "embeddingY": "0.59675115"},{"extension": "py", "date": "2020-03-03 05:36:12", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    for i in range(len(liste)):\n      if res<liste[i]:\n        res=liste[i]\n  return res", "user": "userdId_8", "attemptID": 5349, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "24.932615", "embeddingY": "-64.36238"},{"extension": "py", "date": "2020-03-31 06:30:41", "correct": "1", "upload": "def bissextile(annee):\n    res=False\n    if (annee%4==0 and annee%100!=0) or (annee%400==0):\n      res=True\n    return res", "user": "userdId_11", "attemptID": 5350, "exercise": "a7d37636649c0ada991520788deeb2d0", "exercise_name": "bissextile", "embeddingX": "48.21005", "embeddingY": "1.3518648"},{"extension": "py", "date": "2020-03-24 03:20:00", "correct": "0", "upload": "def LSup100(liste):\n  res = []\n  c = 0\n  while c <len(liste) and len(res) < 4:\n    if liste[c] > 100 :\n      res = res + [liste[c]]\n    c=c+1\n  return res ", "user": "userdId_52", "attemptID": 5351, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-26.864384", "embeddingY": "44.559372"},{"extension": "py", "date": "2020-04-06 06:35:58", "correct": "0", "upload": "def motPalindrome(mot):\n  ok=True\n  i=0\n  j=len(mot)-1\n  while i<j and ok:\n    if mot[i]!=mot[j]:\n      ok=False\n    i=i+1\n    j=j+1\n  return ok", "user": "userdId_3", "attemptID": 5352, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "20.661686", "embeddingY": "59.26982"},{"extension": "py", "date": "2020-03-09 23:51:46", "correct": "0", "upload": "def ecart(liste):\n    if len(liste)==0:\n      res=None\n    else:\n      res=liste[0]\n      max=[]\n      min=[]\n      for i in range(1,len(liste)):\n        if liste[i]<res:\n          min=liste[i]\n        if liste[i]>res:\n          max=liste[i]\n          res=max-min\n    return res\n      \n      ", "user": "userdId_9", "attemptID": 5353, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "11.1474085", "embeddingY": "-82.7407"},{"extension": "py", "date": "2020-03-22 10:24:59", "correct": "0", "upload": "def bissextile(a):\n    if a%4==0 or a%400==0: \n      res=True\n    elif a%100!=0: \n      \tres=False\n    else: \n      \tres=False\n    return res", "user": "userdId_21", "attemptID": 5354, "exercise": "a7d37636649c0ada991520788deeb2d0", "exercise_name": "bissextile", "embeddingX": "45.317352", "embeddingY": "0.6027239"},{"extension": "py", "date": "2020-03-31 05:54:57", "correct": "0", "upload": "def stockerChiffres(nombre):\n  res=[]\n  while nombre!=0:\n    res.append(nombre%10)\n    nombre=nombre//10\n  if nombre==0:\n    res.append(0)\n  return res", "user": "userdId_27", "attemptID": 5355, "exercise": "49a87f644f84a443327fb4315b47f249", "exercise_name": "stockerChiffres", "embeddingX": "41.71326", "embeddingY": "14.715363"},{"extension": "py", "date": "2020-04-06 10:02:50", "correct": "1", "upload": "def nextConway(s):\n    s=int(s)\n    liste=[]\n    while s!=0:\n      liste.append(s%10)\n      s//=10\n    nliste=[0]\n    for i in range(len(liste)):\n      nliste=[liste[i]]+nliste\n    cw=[]\n    cpt=1\n    for i in range(len(nliste)-1):\n      if nliste[i]==nliste[i+1]:\n        cpt+=1\n      else:\n        cw+=[cpt]\n        cw+=[nliste[i]]\n        cpt=1\n    res=0\n    for i in range(len(cw)):\n      res+=cw[-i-1]*10**abs(-i)\n    res=str(res)\n    return res", "user": "userdId_18", "attemptID": 5356, "exercise": "a580c32690609356dae4401b3c89a3b8", "exercise_name": "nextConway", "embeddingX": "-29.84407", "embeddingY": "-52.785076"},{"extension": "py", "date": "2020-03-17 05:50:01", "correct": "0", "upload": "def maximum(liste):\n    res=0\n    if len (liste)==0:\n            res=none\n    else:\n         res=liste[0]\n         for elem in liste:\n             res=elem\n          \n    return res", "user": "userdId_22", "attemptID": 5357, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-3.3565753", "embeddingY": "-36.16948"},{"extension": "py", "date": "2020-03-03 05:08:11", "correct": "0", "upload": "def nbVoyelles(mot):\n  res = 0\n  for elem in mot :\n    if elem in [a,e,i,o,u,y]:\n      res = res + 1\n  return None", "user": "userdId_17", "attemptID": 5358, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "14.53747", "embeddingY": "-33.05941"},{"extension": "py", "date": "2020-03-31 06:20:12", "correct": "0", "upload": "def doubleChiffre(nombre):\n  res=False\n  com=[]\n  while nombre!=0:\n    com.append(nombre%10)\n    nombre=nombre//10\n    if com in nombre:\n      res=True\n  return res\n", "user": "userdId_13", "attemptID": 5359, "exercise": "c83ea6acd3e9f6f5543e87d515e8a44a", "exercise_name": "doubleChiffre", "embeddingX": "15.404741", "embeddingY": "6.240335"},{"extension": "py", "date": "2020-03-04 03:40:50", "correct": "0", "upload": "def moyenne(liste):\n  if len(liste) == 0 :\n    res = None\n  res = 0\n  for elem in liste :\n    res = res + liste\n  res = res/len(liste)  \n  return res", "user": "userdId_17", "attemptID": 5360, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "0.32497773", "embeddingY": "-17.141346"},{"extension": "py", "date": "2020-04-12 12:00:03", "correct": "0", "upload": "def suiteGeo(liste):\n    if len(liste)==0:\n      res=True\n    else:\n      res=True\n      for i in range(len(liste)):\n        if liste[i]==0:\n          res=False\n        else:\n          x=liste[1]//liste[0]\n          if liste[i]==liste[i-1]*x:\n            res=True\n          else:\n            res=False\n    return res", "user": "userdId_11", "attemptID": 5361, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "-13.807672", "embeddingY": "-81.55025"},{"extension": "py", "date": "2020-03-23 00:38:19", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=[]\n    for i in range(len(liste)):\n      res=liste[i]>res\n  return res", "user": "userdId_8", "attemptID": 5362, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-6.492176", "embeddingY": "-61.50664"},{"extension": "py", "date": "2020-03-31 04:32:49", "correct": "0", "upload": "def indiceOccurence(n,x,l):\n  trouve=False\n  cpt=0\n  i=0\n  res=None\n  while i<len(l) and not trouve :\n    if l[i]==x:\n      cpt=cpt+1\n    if cpt==n:\n      res=i\n    i=i+1\n  return res", "user": "userdId_10", "attemptID": 5363, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "1.0326777", "embeddingY": "72.309006"},{"extension": "py", "date": "2020-04-16 23:13:27", "correct": "0", "upload": "def indiceInsertion(sc,scores):\n  i = 0\n  res = None\n  while i < len(scores) and res == None:\n    if sc >= scores[i]:\n      res = i\n    i = i + 1\n  return res", "user": "userdId_17", "attemptID": 5364, "exercise": "f8a820b2bd54d18d36716e3d703858f7", "exercise_name": "indiceInsertion", "embeddingX": "-22.457542", "embeddingY": "70.2672"},{"extension": "py", "date": "2020-03-17 06:12:08", "correct": "0", "upload": "def permutationListe(liste,permutation):\n  res=[0]*(len(permutation))\n  for i in range(len(liste)):\n    permutation[i]=liste[i]  \n  return res", "user": "userdId_35", "attemptID": 5365, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-52.007656", "embeddingY": "-31.42044"},{"extension": "py", "date": "2020-03-06 00:50:18", "correct": "0", "upload": "def nbVoyelles(mot):\n  res=mot[0]\n  for elem in mot:\n    if elem in mot==([\"a\",\"e\",\"i\",\"o\",\"u\",\"y\"]):\n      res=res+1\n  return res", "user": "userdId_23", "attemptID": 5366, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "13.034408", "embeddingY": "-34.461575"},{"extension": "py", "date": "2020-05-04 21:47:09", "correct": "0", "upload": "def minimum(liste):\n  if liste==[]:\n    res=None\n  else:\n    res=liste[0]\n    for i in range(1,len(liste)-1):\n      if liste[i]<liste[i+1]:\n        res=liste[i]\n  return res", "user": "userdId_8", "attemptID": 5367, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "23.290771", "embeddingY": "-70.760956"},{"extension": "py", "date": "2020-03-09 08:39:54", "correct": "0", "upload": "def nbVoyelles(mot):\n    cpt=0\n    for i in range(len(mot)):\n      if mot[i]==Voyelles:\n        cpt=cpt+1\n    return cpt\n  ", "user": "userdId_11", "attemptID": 5368, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-4.168592", "embeddingY": "-42.23837"},{"extension": "py", "date": "2020-03-13 00:51:54", "correct": "0", "upload": "def doubleLettre(mot):\n  res=None\n  \n  for c in mot:\n    if c==c:\n      res=True\n    else:\n      res=False\n      \n  return res", "user": "userdId_38", "attemptID": 5369, "exercise": "00da9cf1fa2b468d915724499459ed8f", "exercise_name": "doubleLettre", "embeddingX": "18.21777", "embeddingY": "-8.657394"},{"extension": "py", "date": "2020-04-08 00:29:37", "correct": "1", "upload": "def suiteGeo(liste):\n  i=0\n  res=True\n  if len(liste)==0:\n    res=True\n  while i<len(liste)-1 and res==True:\n    if liste[i]==0:\n      res=False\n    if liste[i]!=0:\n      q=liste[1]/liste[0]\n    if liste[i]!=0:\n      if liste[i+1]/liste[i]!=q:\n        res=False\n    if liste[i] and liste[i+1]==0:\n      res=True\n    if liste[i]==0 and liste[i+1]==0:\n      res=True\n    i+=1\n  return res", "user": "userdId_34", "attemptID": 5370, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "34.719116", "embeddingY": "61.718674"},{"extension": "py", "date": "2020-03-24 06:46:31", "correct": "0", "upload": "def fusion(liste1,liste2):\n  res=[]\n  i=0\n  while i<len(liste1)+len(liste2):\n    if liste1[i]>liste2[i]:\n      res=res+[liste2[i]]\n    elif liste1[i]==liste2[i]:\n      res=res+[liste1[i]]+[liste2[i]]\n    else:\n      res=res+[liste1[i]]\n    i=i+1\n  return res", "user": "userdId_26", "attemptID": 5371, "exercise": "6613efb6c873b142dc2b6040c14eb616", "exercise_name": "fusion", "embeddingX": "-24.539158", "embeddingY": "55.48618"},{"extension": "py", "date": "2020-04-06 10:23:07", "correct": "0", "upload": "def suiteAriGeo(liste):\n    if liste==[] or len(liste)==1:\n      ok1=True\n    else:\n      ok1=True\n      ctePrec=liste[1]-liste[0]\n      cteAct=None\n      i=2\n      while i<len(liste) and ok:\n        cteAct=liste[i]-liste[i-1]\n        if cteAct!=ctePrec:\n          ok=False\n        ctePrec=cteAct\n        i+=1\n    if liste==[] or len(liste)==1:\n      ok=True\n    elif 0 in liste:\n      if liste[0]!=0:\n        ok=True\n      while 0 in liste:\n        liste.remove(0)\n      if liste==[]:\n        ok=True\n      else:\n        ok=False\n    else:\n      ok=True\n      i=1\n      while i<len(liste) and ok:\n        cte=liste[i]/liste[i-1]\n        if liste[0]*cte**i!=liste[i]:\n          ok=False\n        i+=1\n    return ok1 or ok2", "user": "userdId_18", "attemptID": 5372, "exercise": "4c9665daf155b115fe13218141fa1aff", "exercise_name": "suiteAriGeo", "embeddingX": "27.729532", "embeddingY": "83.082054"},{"extension": "py", "date": "2020-03-17 06:25:16", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n  res=0\n  for elem in mot:\n    if elem==lettre:\n      res=mot[elem]\n  return res", "user": "userdId_7", "attemptID": 5373, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-15.091249", "embeddingY": "-28.632355"},{"extension": "py", "date": "2020-03-13 00:45:18", "correct": "0", "upload": "def doubleLettre(mot):\n  lettre2 = ' '\n  cpt = 0\n  res = False\n  for lettre1 in mot :\n    if lettre1 == lettre2 :\n      lettre2 = lettre1\n      cpt =  cpt + 1\n      if cpt > 2 :\n        res = True\n    else :\n      cpt = 0\n  \t\n  return res", "user": "userdId_17", "attemptID": 5374, "exercise": "00da9cf1fa2b468d915724499459ed8f", "exercise_name": "doubleLettre", "embeddingX": "11.125302", "embeddingY": "-5.6493087"},{"extension": "py", "date": "2020-04-11 08:39:07", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  for elem in liste:\n    c=a*elem+b\n    if c==elem:\n      res=True\n  return res", "user": "userdId_8", "attemptID": 5375, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-80.79209", "embeddingY": "16.144476"},{"extension": "py", "date": "2020-04-08 00:17:37", "correct": "0", "upload": "def suiteGeo(liste):\n  ok=True\n  i=0\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i]==0:\n      ok=True\n    if liste[0]==0:\n      ok=False\n    if liste[i]!=0:\n      q=liste[1]/liste[0]\n    if liste[i]!=0:\n      if liste[i+1]/liste[i]!=q:\n        ok=False\n    i=i+1\n  return ok\n", "user": "userdId_1", "attemptID": 5376, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "33.131615", "embeddingY": "64.033"},{"extension": "py", "date": "2020-04-07 11:12:44", "correct": "0", "upload": "def suiteGeo(liste):\n  ok=True\n  i=0\n  if len(liste)==0 and len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i]!=0:\n      q=liste[1]/liste[0]\n    if liste[i]!=0:\n      if liste[i+1]/liste[i]!=q:\n        ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 5377, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "29.359634", "embeddingY": "61.929695"},{"extension": "py", "date": "2020-03-17 06:15:57", "correct": "0", "upload": "def permutationListe(liste,permutation):\n  res=[0]*(len(permutation))\n  for i in range(len(liste)):\n    res[len(permutation)]=liste[i]\n  return res\n      \n      ", "user": "userdId_9", "attemptID": 5378, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-50.371292", "embeddingY": "-26.634212"},{"extension": "py", "date": "2020-03-17 05:49:36", "correct": "0", "upload": "def distribution(liste,n):\n    cpts=0*n+1\n    for elem in liste:\n        cpts[elem]=cpts[elem]+1\n    return res", "user": "userdId_39", "attemptID": 5379, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-60.869423", "embeddingY": "-9.769586"},{"extension": "py", "date": "2020-03-09 05:45:20", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  \n  res=0\n  for elem in jour1,mois1,annee1,jour2,mois2,annee2:\n    \n    if ('jour1,mois1,annee1')<('jour2,mois2,annee2'):\n       res=res-1\n      \n    if ('jour1,mois1,annee1')==('jour2,mois2,annee2'):\n       res=res\n    \n    if ('jour1,mois1,annee1')<('jour2,mois2,annee2'):\n       res=res+1\n      \n  return res", "user": "userdId_23", "attemptID": 5380, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "-14.303758", "embeddingY": "1.1479346"},{"extension": "py", "date": "2020-06-02 21:11:37", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut1>=fin2 or debut2>=fin1:\n    return True\n  else:\n    return False", "user": "userdId_12", "attemptID": 5381, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "57.39159", "embeddingY": "-25.946522"},{"extension": "py", "date": "2020-03-09 22:23:15", "correct": "1", "upload": "def bissextile(annee):\n  if annee%4==0 and annee%100!=0 or annee%400==0:\n    res=True\n  else:\n    res=False\n  return res", "user": "userdId_12", "attemptID": 5382, "exercise": "a7d37636649c0ada991520788deeb2d0", "exercise_name": "bissextile", "embeddingX": "48.121372", "embeddingY": "1.9304376"},{"extension": "py", "date": "2020-03-31 06:07:27", "correct": "1", "upload": "def nbChiffres(nombre):\n  cpt=0\n  while nombre!=0:\n    nombre//=10\n    cpt+=1\n  if cpt==0:\n    cpt=1\n  return cpt", "user": "userdId_18", "attemptID": 5383, "exercise": "3dcf332c003a1f3bf15df22ee17884a3", "exercise_name": "nbChiffres", "embeddingX": "31.094904", "embeddingY": "15.691844"},{"extension": "py", "date": "2020-03-12 06:30:58", "correct": "1", "upload": "def somme(liste):\n  res=0\n  for i in liste:\n    res=res+i\n  return res\n", "user": "userdId_20", "attemptID": 5384, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-28.547455", "embeddingY": "2.2474768"},{"extension": "py", "date": "2020-04-13 23:45:08", "correct": "0", "upload": "def listeDecroissante(scores):\n  if scores==[] or res==True:\n    res=True\n  for i in range(len(scores)-1):\n    if scores[i]<=scores[i+1]:\n      res=False\n  return res", "user": "userdId_8", "attemptID": 5385, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "-9.298007", "embeddingY": "-69.31711"},{"extension": "py", "date": "2020-04-08 02:28:02", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  res=True\n  while i<len(liste)-1 and res==True:\n    if liste[i]!=0:\n      q=liste[i+1]/liste[i]\n      if liste[i+1]/liste[i]==q:\n        res=True\n      else:\n        res=False\n    else:\n      res=False\n  return res", "user": "userdId_26", "attemptID": 5386, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "33.14485", "embeddingY": "60.06411"},{"extension": "py", "date": "2020-04-14 04:08:32", "correct": "1", "upload": "def listeDecroissante(scores):\n  for i in range(len(scores)-1):\n    if scores[i]<scores[i+1]:\n      return False\n  return True", "user": "userdId_31", "attemptID": 5387, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "20.180521", "embeddingY": "-70.15735"},{"extension": "py", "date": "2020-03-31 05:39:20", "correct": "0", "upload": "def nbChiffres(nombre):\n  while nombre//10>0:\n    nombre=nombre%10\n  if nombre==0:\n    nombre=1\n  return nombre", "user": "userdId_13", "attemptID": 5388, "exercise": "3dcf332c003a1f3bf15df22ee17884a3", "exercise_name": "nbChiffres", "embeddingX": "36.000984", "embeddingY": "9.385064"},{"extension": "py", "date": "2020-04-12 12:12:05", "correct": "1", "upload": "def sousChaine(s1,s2):\n    if len(s1)==0:\n      res=True\n    else:\n      res=False\n      if s1 in s2:\n        res=True\n    return res", "user": "userdId_11", "attemptID": 5389, "exercise": "4bdf8c9c5d020593e1771e4d3ae1ae0d", "exercise_name": "sousChaine", "embeddingX": "42.71176", "embeddingY": "-16.904207"},{"extension": "py", "date": "2020-03-13 01:00:11", "correct": "0", "upload": "def plusLongueSuite(liste):\n  res=0\n  for n1 in range(0,len(liste)):\n     for n2 in range (1,len(liste)):\n      if n1==n2:\n        res=res+1\n  \n  return res", "user": "userdId_15", "attemptID": 5390, "exercise": "deed004abb317b11778f7e8247197a40", "exercise_name": "plusLongueSuite", "embeddingX": "-1.3562721", "embeddingY": "-40.048035"},{"extension": "py", "date": "2020-03-12 22:05:32", "correct": "0", "upload": "def moyenne(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=0\n    cpt=0\n    for i in range (len(liste)):\n      res=res+liste[i]\n      cpt=cpt+1\n      res=res%cpt\n  return res\n  ", "user": "userdId_25", "attemptID": 5391, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-7.5264053", "embeddingY": "-3.5960898"},{"extension": "py", "date": "2020-04-17 03:18:29", "correct": "0", "upload": "def minimum(liste):\n  res=liste[0]\n  for n in liste: \n    if n<res:\n      res=n\n  return res", "user": "userdId_21", "attemptID": 5392, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "42.095047", "embeddingY": "-58.14188"},{"extension": "py", "date": "2020-03-06 00:10:19", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    res=0\n  else:\n    for elem in mot:\n      res=0\n      if elem=='a':\n        res=res+1\n  return res     ", "user": "userdId_14", "attemptID": 5393, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "2.7158418", "embeddingY": "-26.723896"},{"extension": "py", "date": "2020-04-17 03:17:00", "correct": "0", "upload": "def minimum(liste):\n  min=liste[0]\n  for i in liste: \n    if i<min:\n      min=i\n  return min", "user": "userdId_21", "attemptID": 5394, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "35.465076", "embeddingY": "-57.491875"},{"extension": "py", "date": "2020-03-19 23:59:04", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  res=\"\"\n  if (longueur+debut)>len(s):\n    fin=len(s)\n  for i in range(debut,fin):\n    res=res+s[i]\n  return res", "user": "userdId_13", "attemptID": 5395, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-72.73993", "embeddingY": "27.680107"},{"extension": "py", "date": "2020-03-06 00:00:14", "correct": "1", "upload": "def moyenne(liste):\n  if len (liste)==0:\n    res=None\n  else:\n    res=0\n    cpt=0\n    for elem in liste:\n      res= res+elem\n      cpt= cpt+1\n    res= res/cpt\n  return res\n", "user": "userdId_13", "attemptID": 5396, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-3.8488061", "embeddingY": "-8.425725"},{"extension": "py", "date": "2020-04-07 03:29:07", "correct": "0", "upload": "def suiteGeo(liste):\n  i=-1\n  ok=True\n  if 0 in liste:\n    ok=False\n  elif len(liste)>1 and ok:\n    while i>-len(liste):\n      if liste[i-1]!=0 and liste[i]%liste[i-1]!=0:\n        ok=False\n      i-=1\n  return ok", "user": "userdId_12", "attemptID": 5397, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "17.215576", "embeddingY": "31.238981"},{"extension": "py", "date": "2020-03-05 23:33:47", "correct": "0", "upload": "def somme(liste):\n  res=0\n  for elem in liste:\n    res=res+elem\n    return res", "user": "userdId_12", "attemptID": 5398, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-25.95225", "embeddingY": "4.9121933"},{"extension": "py", "date": "2020-04-05 12:15:50", "correct": "1", "upload": "def verifSuiteAriGeo(liste,a,b):\n    res=True\n    n=1\n    while n<len(liste) and res:\n        if liste[n]!=liste[n-1]*a+b:\n            res=False\n        n+=1\n    return res\n", "user": "userdId_4", "attemptID": 5399, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-74.28383", "embeddingY": "16.093374"},{"extension": "py", "date": "2020-04-07 03:49:48", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  \n  if len(liste)==1 and liste[0]!=0:\n    res=True\n  if len(liste)>=1 and liste[0]==0:\n    res=False\n  if len(liste)==0:\n    res=True\n  else:\n    end=False\n    while i<len(liste)-1 and end==False:\n      r=liste[0]/liste[1]\n      if liste[i]/liste[i+1]==r:\n        res=True\n      else:\n        res=False\n        end=True\n      i+=1\n  return res\n  ", "user": "userdId_26", "attemptID": 5400, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "38.96874", "embeddingY": "58.776836"},{"extension": "py", "date": "2020-04-17 00:01:19", "correct": "0", "upload": "def meilleurClassementJoueur(scores,joueurs,nom):\n  if nom not in joueurs:\n    res=-1\n  else:\n    for i in range(len(joueurs)):\n      if joueurs[i]==nom:\n        return i\n  return res", "user": "userdId_12", "attemptID": 5401, "exercise": "be6ce0a06c5d396190024c7c681da95d", "exercise_name": "meilleurClassementJoueur", "embeddingX": "-24.696276", "embeddingY": "-36.582462"},{"extension": "py", "date": "2020-04-14 04:03:03", "correct": "1", "upload": "def listeDecroissante(scores):\n  res=True\n  i=0\n  while i<len(scores)-1:\n    if scores[i]<scores[i+1]:\n      return False\n    i=i+1\n  return res", "user": "userdId_50", "attemptID": 5402, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "16.762737", "embeddingY": "48.690422"},{"extension": "py", "date": "2020-04-12 08:44:16", "correct": "0", "upload": "def phrasePalindrome(phrase):\n    if len(phrase)==0:\n      res=True\n    else:\n      res=True\n      i=0\n      while i<len(phrase)//2 and res:\n        if phrase[i]!=phrase[-(i+1)]:\n          res=False\n        if phrase[i]=='':\n            res=False\n        i+=1\n    return res", "user": "userdId_11", "attemptID": 5403, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "27.959236", "embeddingY": "36.131603"},{"extension": "py", "date": "2020-03-10 04:16:45", "correct": "0", "upload": "def sommeNPremiersEntiers(n):\n  res=1\n  if x in range(n):\n    res=res+x\n  return res", "user": "userdId_8", "attemptID": 5404, "exercise": "c315a540cf0bfb0182dc114c6f0eafd1", "exercise_name": "sommeNPremiersEntiers", "embeddingX": "7.2171407", "embeddingY": "-19.03785"},{"extension": "py", "date": "2020-04-13 21:23:44", "correct": "0", "upload": "def indiceInsertion(sc,scores):\n  cpt = 0\n  while scores[cpt]>sc & cpt<len(scores):\n    cpt+=1\n  return cpt", "user": "userdId_6", "attemptID": 5405, "exercise": "f8a820b2bd54d18d36716e3d703858f7", "exercise_name": "indiceInsertion", "embeddingX": "-13.265053", "embeddingY": "61.808983"},{"extension": "py", "date": "2020-03-20 03:59:58", "correct": "1", "upload": "def reconstruireChainePartielle(s,n):\n  res =''\n  for i in range (0,len(s),n):\n    res = res + s[i]\n  return res", "user": "userdId_32", "attemptID": 5406, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-60.332626", "embeddingY": "-40.43054"},{"extension": "py", "date": "2020-04-11 05:15:23", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  while nombre!=0:\n    if chiffre==nombre%10:\n      cpt+=1\n    nombre-=nombre//10\n  return cpt", "user": "userdId_8", "attemptID": 5407, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "24.131653", "embeddingY": "12.179391"},{"extension": "py", "date": "2020-03-12 23:59:02", "correct": "0", "upload": "def jourNuit(heure):\n  res=[]\n  if heure==5:\n    res=\"on est le matin et il fait nuit\"\n  if heure<=0:\n    res=\"l'heure saisie est invalide\"\n  if heure>24:\n    res=\"l'heure saisie est invalide\"\n  if 6<=heure<=18:\n    if 5<heure<=12:\n      res=\"on est le matin et il fait jour\"\n    elif 12<=heure<17:\n      res=\"on est l'apr\u00e8s-midi et il fait jour\"\n    elif 17<=heure<=18:\n      res=\"on est le soir et il fait jour\"\n  if 1<=heure<=5 or 19<=heure<=24:\n    if 1<=heure<=4:\n      res=\"on est la nuit et il fait nuit\"\n    elif 21<=heure<=24:\n      res=\"on est la nuit et il fait nuit\"\n    elif 19<=heure<=20:\n      res=\"on est le soir et il fait nuit\"\n  return res", "user": "userdId_13", "attemptID": 5408, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "68.616035", "embeddingY": "22.647799"},{"extension": "py", "date": "2020-05-11 01:02:34", "correct": "1", "upload": "def meilleurScoreJoueur(scores,joueurs,nom):\n  res=0\n  for i in range(len(joueurs)):\n    if joueurs[i]==nom:\n      return scores[i]\n  return res\n    \n    ", "user": "userdId_12", "attemptID": 5409, "exercise": "c96fadc94086276f98451a798b3bb730", "exercise_name": "meilleurScoreJoueur", "embeddingX": "-23.692175", "embeddingY": "-36.722153"},{"extension": "py", "date": "2020-04-03 00:20:03", "correct": "1", "upload": "def stockerChiffres(nombre):\n  res=[]\n  chiffre=0\n  if nombre==0 :\n    res.append(nombre)\n  else :\n    while nombre!=0 :\n      chiffre=nombre%10\n      res.append(chiffre)\n      nombre=nombre//10\n  \n  return res", "user": "userdId_15", "attemptID": 5410, "exercise": "49a87f644f84a443327fb4315b47f249", "exercise_name": "stockerChiffres", "embeddingX": "40.111103", "embeddingY": "15.917673"},{"extension": "py", "date": "2020-03-17 05:28:21", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  res=''\n  if debut+longueur>len(s):\n    fin=len(s)\n  else:\n    fin=debut+longueur\n  for i in range(debut,Fin):\n    res=res+s[i]\n  return res", "user": "userdId_23", "attemptID": 5411, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-80.08427", "embeddingY": "28.866642"},{"extension": "py", "date": "2020-04-07 04:27:51", "correct": "1", "upload": "def verifSuiteAriGeo(liste,a,b):\n  if len(liste)>1:\n    suite=liste[0]\n  i=1\n  res=True\n  while i<len(liste) and res==True:\n    suite=a*suite+b\n    if suite==liste[i]:\n      res=True\n    else:\n      res=False\n    i+=1\n  return res", "user": "userdId_34", "attemptID": 5412, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-76.74258", "embeddingY": "17.555975"},{"extension": "py", "date": "2020-03-02 02:29:48", "correct": "0", "upload": "def rendezVous(fin1,debut2):\n  if fin1>debut2:\n    print(\"True\")\n  else:\n    print(\"False\")\n  \nrendezVous(10,7)", "user": "userdId_1", "attemptID": 5413, "exercise": "6fd66bb2393fbf3809f1c6d04f3831f7", "exercise_name": "rendezVous", "embeddingX": "-71.7705", "embeddingY": "10.63902"},{"extension": "py", "date": "2020-03-23 01:02:02", "correct": "0", "upload": "def prononcable(mot):\n  if mot=='':\n    res=True\n  else:\n    res=True\n    aux=''\n    for c in mot:\n      if c!=aux:\n        res=False\n      aux=c\n  return res", "user": "userdId_27", "attemptID": 5414, "exercise": "6318b210c201fba050d60bc0913cb7ef", "exercise_name": "prononcable", "embeddingX": "19.015461", "embeddingY": "-4.8334684"},{"extension": "py", "date": "2020-06-02 21:54:53", "correct": "0", "upload": "def polynome(a,b,c):\n  import math\n  delta=b**2-4*a*c\n  if delta>0:\n    x1=(-b+(math.sqrt(delta)))/2*a\n    x2=(-b-(math.sqrt(delta)))/2*a\n    return (x1,x2)\n  elif delta==0:\n    x=-b/a\n    return x\n  else:\n    return 'pas de solution'", "user": "userdId_12", "attemptID": 5415, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-51.794674", "embeddingY": "7.715837"},{"extension": "py", "date": "2020-03-17 06:41:57", "correct": "0", "upload": "def doubleLettre(mot):\n  c1=(0,len(mot),2)\n  c2=(1,len(mot),2)\n  for c1 in mot:\n    if c1!=c2:\n      res=False\n    else:\n      res=True\n  return res", "user": "userdId_8", "attemptID": 5416, "exercise": "00da9cf1fa2b468d915724499459ed8f", "exercise_name": "doubleLettre", "embeddingX": "19.002304", "embeddingY": "-3.0676508"},{"extension": "py", "date": "2020-03-12 21:58:52", "correct": "1", "upload": "def minimum(liste):  \n  if len(liste)==0:\n    res=None\n  else:\n    res=0\n    res=liste[0]\n    for i in range(len(liste)):\n      if liste[i]<res:\n        res=liste[i]\n  return res", "user": "userdId_25", "attemptID": 5417, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "26.920086", "embeddingY": "-68.32609"},{"extension": "py", "date": "2020-04-06 08:45:33", "correct": "1", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=True\n  i=1\n  while i<len(liste):\n    if liste[i]!=a*liste[i-1]+b:\n      res=False\n    i+=1\n  return res\ndef suiteAri(liste):\n  cpt=0\n  i=1\n  a=1\n  b=0\n  while i<len(liste) and cpt!=3:\n    if liste[i]!=liste[i-1]:\n      b=liste[i]-liste[i-1]\n      cpt+=1\n    i+=1 \n  return verifSuiteAriGeo(liste,a,b)", "user": "userdId_27", "attemptID": 5418, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "12.504195", "embeddingY": "77.207344"},{"extension": "py", "date": "2020-03-15 03:14:44", "correct": "0", "upload": "def polynome(a,b,c):\n    a=int(input())\n    b=int(input())\n    c=int(input())\n    d=((b*b)-(4*a*c))\n    print(\"delta=\",d)\n    if d<0:\n      print(\"pas de solution\")\n    else:\n      if d>0:\n        x1=(-b + sqrt(d))/(2*a)\n        x2=(-b - sqrt(d))/(2*a)\n        print(\"les deux r\u00e9ponses sont\",x1,\"et\",x2)\n      else:\n        print(\"la solution est\",-b/(2*a))\n ", "user": "userdId_21", "attemptID": 5419, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-57.304535", "embeddingY": "4.5477347"},{"extension": "py", "date": "2020-03-14 03:20:02", "correct": "0", "upload": "def moyenne(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=0\n    cpt=0\n    for elem in liste:\n      res=res+elem\n      cpt=cpt+1\n  res=res%cpt\n  return res", "user": "userdId_14", "attemptID": 5420, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-4.31641", "embeddingY": "-3.6382875"},{"extension": "py", "date": "2020-04-08 00:01:26", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  ok=False\n  i=0\n  j=0\n  while i<len(phrase)//2 and not ok:\n    if phrase[i]==\" \":\n      i+=1\n      if phrase[i]!=phrase[-j-1]:\n        ok=False\n      else:\n        ok=True\n    elif phrase[-j]==\" \":\n      j+=1\n      if phrase[i]!=phrase[-j-1]:\n        ok=False\n      else:\n        ok=True\n  i+=1\n  j+=1\n  if phrase==\"\":\n    ok=True\n  return ok", "user": "userdId_13", "attemptID": 5421, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "28.351185", "embeddingY": "33.337532"},{"extension": "py", "date": "2020-04-06 09:50:05", "correct": "0", "upload": "def nextConway(s):\n    liste=[]\n    while s!=0:\n      liste.append([s%10])\n      s//=10\n    nliste=[0]\n    for i in range(len(liste)):\n      nliste=[liste[i]]+nliste\n    cw=[]\n    cpt=1\n    for i in range(len(nliste)-1):\n      if nliste[i]==nliste[i+1]:\n        cpt+=1\n      else:\n        cw+=[cpt]\n        cw+=[nliste[i]]\n        cpt=1\n    res=0\n    for i in range(len(cw)):\n      res+=cw[-i-1]*10**abs(-i)\n    return res", "user": "userdId_18", "attemptID": 5422, "exercise": "a580c32690609356dae4401b3c89a3b8", "exercise_name": "nextConway", "embeddingX": "43.844624", "embeddingY": "17.261908"},{"extension": "py", "date": "2020-04-12 05:34:56", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=False\n  c=[]\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    d=liste[0]+d\n    c.append(d)\n  return c", "user": "userdId_8", "attemptID": 5423, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-85.20328", "embeddingY": "20.06886"},{"extension": "py", "date": "2020-03-05 22:15:39", "correct": "0", "upload": "def maximum(liste):\n    res=0\n    for elen in liste:\n     \tif elen>res:\n        \tres=elen\n    return res\n  \n  ", "user": "userdId_49", "attemptID": 5424, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "31.436474", "embeddingY": "-43.269398"},{"extension": "py", "date": "2020-03-24 06:41:03", "correct": "0", "upload": "def fusion(liste1,liste2):\n  res=[]\n  i=0\n  while i<len(liste1)+len(liste2) and res==len(liste1)+len(liste2):\n    if liste1[i]>liste2[i]:\n      res=res+[liste2[i]]\n    elif liste1[i]==liste2[i]:\n      res=res+[liste1[i]]+[liste2[i]]\n    else:\n      res=res+[liste1[i]]\n    i=i+1\n  return res", "user": "userdId_26", "attemptID": 5425, "exercise": "6613efb6c873b142dc2b6040c14eb616", "exercise_name": "fusion", "embeddingX": "-20.369074", "embeddingY": "51.1811"},{"extension": "py", "date": "2020-03-06 00:51:22", "correct": "0", "upload": "def ecart(liste):\n   if len(liste)==2:\n      res=0\n   if len(liste)==0:\n      res=None\n   return res", "user": "userdId_14", "attemptID": 5426, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "12.818383", "embeddingY": "-50.419655"},{"extension": "py", "date": "2020-04-12 08:48:46", "correct": "0", "upload": "def suiteAriGeo(liste):\n  i=0\n  while i<len(liste)-1:\n    a=liste[0]\n    b=liste[0]\n    if liste[i]==liste[i+1]:\n      a=1\n      b=0\n    if liste[i+1]==liste[i]+(liste[1]-liste[0]):\n      b=liste[1]-liste[0]\n    if liste[0]!=0:                        \n      if liste[i+1]==liste[i]*liste[1]/liste[0]:\n        a=liste[1]/liste[0]\n        b=0\n    if liste[i+1]==liste[i]*(liste[1]-liste[0])+(liste[i]-(liste[i-1]*(liste[1]-liste[0]))):\n      a=liste[1]-liste[0]\n      b=liste[i]-(liste[i-1]*a)\n    i=i+1\n  ok=True\n  i=0\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=a*liste[i]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 5427, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "35.28157", "embeddingY": "85.197"},{"extension": "py", "date": "2020-03-06 00:44:10", "correct": "0", "upload": "def moyenne(liste):\n  res=0\n  cpt=0\n  if len(liste)==0:\n    moy=None\n  else:\n     for i in liste:\n       res=res+i\n       cpt=cpt+1\n  moy=res*cpt\n  return moy", "user": "userdId_14", "attemptID": 5428, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "2.9883323", "embeddingY": "-7.711207"},{"extension": "py", "date": "2020-04-07 23:27:52", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  ok=False\n  i=0\n  while i<len(phrase) and not ok:\n    if phrase[i]!=phrase[-i-1]:\n      ok=True\n    i+=1\n  if phrase==\"\":\n    ok=True\n  return ok", "user": "userdId_13", "attemptID": 5429, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "27.276588", "embeddingY": "38.744595"},{"extension": "py", "date": "2020-03-11 03:18:38", "correct": "0", "upload": "def prononcable(mot):\n    listvoy = [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\",\"\"]\n    cons = 0\n    for lettre in mot:\n        if lettre not in listvoy:\n            cons += 1\n        elif cons > 3:\n            return False\n        else:\n            cons = 0\n    return True", "user": "userdId_42", "attemptID": 5430, "exercise": "6318b210c201fba050d60bc0913cb7ef", "exercise_name": "prononcable", "embeddingX": "23.842108", "embeddingY": "-31.517694"},{"extension": "py", "date": "2020-03-09 21:38:45", "correct": "0", "upload": "def polynome(a,b,c):\n  delta=pow(b,2)-4*a*c\n  if delta>0:\n    res=(-b-sqrt(delta)/2*a,-b+sqrt(delta)/2*a)\n  if delta==0:\n    res=-b/a\n  else:\n    res='pas de solution'\n  return res", "user": "userdId_12", "attemptID": 5431, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-49.967087", "embeddingY": "10.308853"},{"extension": "py", "date": "2020-03-24 06:38:34", "correct": "0", "upload": "def fusion(liste1,liste2):\n  res=[]\n  i=0\n  while i<len(liste1)+len(liste2):\n    if liste1[i]>liste2[i]:\n      res+=[liste2[i]]\n    elif liste1[i]<liste2[i]:\n      res+=[liste1[i]]\n    else:\n      res+=[liste[i]]+[liste[i]]\n    i+=1\n  return res", "user": "userdId_8", "attemptID": 5432, "exercise": "6613efb6c873b142dc2b6040c14eb616", "exercise_name": "fusion", "embeddingX": "-23.16455", "embeddingY": "55.144108"},{"extension": "py", "date": "2020-03-30 02:42:56", "correct": "0", "upload": "def fusion(liste1,liste2):\n  liste=[]\n  liste.extend(liste1+liste2)\n  i=1\n  res=[]\n  while i<len(liste) :\n    n=liste[0]\n    if n>liste[i] :\n      res.append(liste[i])\n    elif n<liste[i] :\n      res.append(n)\n      n=liste[i]\n    i=i+1\n  \n  return res", "user": "userdId_15", "attemptID": 5433, "exercise": "6613efb6c873b142dc2b6040c14eb616", "exercise_name": "fusion", "embeddingX": "-33.724167", "embeddingY": "39.4194"},{"extension": "py", "date": "2020-04-07 23:46:37", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  res=True\n  if len(liste)==0:\n    res=True\n  if len(liste)==[1]:\n    res=True\n  if liste[i]==0:\n    res=False\n  while i<len(liste)-1 and res==True:\n    q=liste[i+1]/liste[i]\n    if liste[i+1]/liste[i]==q:\n      res=True\n    else:\n      res=False\n    i+=1\n  return res\n", "user": "userdId_34", "attemptID": 5434, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "36.388905", "embeddingY": "53.952545"},{"extension": "py", "date": "2020-03-08 23:16:12", "correct": "0", "upload": "from math import sqrt \n\ndef polynome(a,b,c):\n  d=b**2-(4*a*c)\n  if d<0:\n    return 'pas de solution'\n  elif d==0:\n    solution=-b/(2*a)\n    return solution\n  else:\n    if d>0:\n      solution1=(-b+sqrt(d))/(2*a)\n      solution2=(-b-sqrt(d))/(2*a)\n      return solution1 and solution2", "user": "userdId_1", "attemptID": 5435, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-56.604717", "embeddingY": "3.40352"},{"extension": "py", "date": "2020-03-22 12:09:11", "correct": "0", "upload": "def maximum(l):\n  max=l[0]\n  for i in range(0,len(l)): \n    if l[i]>res:\n      res=l[i]\t\n  return res", "user": "userdId_21", "attemptID": 5436, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "8.161996", "embeddingY": "-70.81734"},{"extension": "py", "date": "2020-03-31 04:27:40", "correct": "0", "upload": "def indiceOccurrence(n,x,l):\n  cpt=0\n  trouve=0\n  i=0  \n  while i<len(l) and trouve==False:\n    if l[i]==x:\n      cpt=cpt+1\n    if cpt==n:\n      trouve=True\n  i=i+1    \n#post-traitement\n  if trouve:\n    res=i-1\n  else:\n    res=None  \n  return res      \n", "user": "userdId_39", "attemptID": 5437, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-0.7276756", "embeddingY": "75.54585"},{"extension": "py", "date": "2020-04-12 06:13:39", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=liste[2]\n  return res", "user": "userdId_8", "attemptID": 5438, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-66.35263", "embeddingY": "17.049833"},{"extension": "py", "date": "2020-04-09 02:46:38", "correct": "0", "upload": "def suiteAriGeo(liste):\n  ok=True\n  i=0\n  R=0\n  Q=0\n  if len(liste)<=2 :\n    ok=True\n  else :\n    for i in len(liste) :\n      if liste[0]==0 :\n        Q=1\n      elif (liste[i+1]-liste[i])==(liste[i+2]-liste[i+1]) :\n        Q=1\n        R=(liste[1]-liste[0])\n      elif (liste[i+1]/liste[i])==(liste[i+2]/liste[i+1]) :\n        Q=(liste[1]/liste[0])\n        R=0\n      \n    while i<(len(liste)-1) and ok :\n      if liste[i+1]!=Q*liste[i]+R :\n        ok=False\n      i+=1\n  return ok", "user": "userdId_15", "attemptID": 5439, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "30.073494", "embeddingY": "-35.26312"},{"extension": "py", "date": "2020-03-06 00:26:03", "correct": "0", "upload": "def nbVoyelles(mot):\n  nb=0\n  for lettre in [\"a\",\"e\",\"i\",\"o\",\"u\",\"y\"]:\n    res=nb+1\n  return res\n  \n      \n  \n\n ", "user": "userdId_9", "attemptID": 5440, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-28.033993", "embeddingY": "-9.986407"},{"extension": "py", "date": "2020-04-03 00:38:12", "correct": "0", "upload": "def stockerChiffres(nombre):\n  i=0\n  res=[]\n  if nombre==0:\n    res=[0]\n  while nombre!=0:\n    nombre=nombre%10\n    res.append(nombre)\n    i+=1\n  return res", "user": "userdId_1", "attemptID": 5441, "exercise": "49a87f644f84a443327fb4315b47f249", "exercise_name": "stockerChiffres", "embeddingX": "45.66033", "embeddingY": "16.355703"},{"extension": "py", "date": "2020-04-06 04:17:13", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  nbr=str(nombre)\n  chffre=str(chiffre)\n  i=0\n  res=0\n  while i<len(nbr):\n    if chffre==nbr:\n      res+=1\n  return res", "user": "userdId_26", "attemptID": 5442, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-7.9329677", "embeddingY": "65.31443"},{"extension": "py", "date": "2020-04-12 08:45:32", "correct": "0", "upload": "def suiteAriGeo(liste):\n  i=0\n  while i<len(liste)-1:\n    a=liste[0]\n    b=liste[0]\n    if liste[i]==i:\n      a=1\n      b=0\n    if liste[i+1]==liste[i]+(liste[1]-liste[0]):\n      b=liste[1]-liste[0]\n    if liste[0]!=0:                        \n      if liste[i+1]==liste[i]*liste[1]/liste[0]:\n        a=liste[1]/liste[0]\n        b=0\n    if liste[i+1]==liste[i]*(liste[1]-liste[0])+(liste[i]-(liste[i-1]*(liste[1]-liste[0]))):\n      a=liste[1]-liste[0]\n      b=liste[i]-(liste[i-1]*a)\n    i=i+1\n  ok=True\n  i=0\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=a*liste[i]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 5443, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "35.21924", "embeddingY": "85.15558"},{"extension": "py", "date": "2020-03-20 00:55:02", "correct": "1", "upload": "def permutationListe(liste,permutation):\n  res=[]\n  for i in permutation:\n    res.insert(permutation[i],liste[i])\n  return res", "user": "userdId_13", "attemptID": 5444, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-53.752144", "embeddingY": "-16.101452"},{"extension": "py", "date": "2020-03-09 08:08:42", "correct": "0", "upload": "def somme(liste):\n    res=0\n    for elem in l:\n      res=res+elem\n    return res\n  \n ", "user": "userdId_11", "attemptID": 5445, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-30.062422", "embeddingY": "-8.054767"},{"extension": "py", "date": "2020-03-31 03:38:10", "correct": "0", "upload": "def fusion (liste1,liste2):\n  res = []\n  i = 0\n  j = 0\n  while i < len(liste1) and j < len(liste2):\n    if liste1[i] < liste2[j] :\n      res.append (liste1[i])\n      i = i + 1\n    else :\n      res.append (liste2[j])\n      j = j + 1\n  while j < len(liste2) :\n    res.append(liste2[j])\n    j = j + 1\n  while i < len(liste1):\n    res.append(liste2[i])\n    i = i + 1\n  return res\n\nprint (fusion([1,2,3,4],[5,6,7]))", "user": "userdId_17", "attemptID": 5446, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-39.458996", "embeddingY": "48.812782"},{"extension": "py", "date": "2020-04-06 04:03:04", "correct": "0", "upload": "def motPalindrom(mot):\n  i=0\n  res=True\n  while i<len(mot) and res==True:\n    pl=mot[i]\n    dl=mot[i-1]\n    if pl==dl:\n        res=True\n    else:\n        res=False\n    i+=1\n  return res", "user": "userdId_26", "attemptID": 5447, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "9.311985", "embeddingY": "60.91882"},{"extension": "py", "date": "2020-03-10 03:19:12", "correct": "0", "upload": "def jourNuit(heure):\n    if heure<0 or heure>24:\n      res=\"l'heure saisie est invalide\"\n    else:\n      if heure<5 or heure>=21:\n        res=\"on est la nuit\"\n      elif heure<12:\n        res=\"on est le matin\"\n      elif heure<17:\n        res=\"on est l'apres-midi\"\n      else:\n        res=\"on est le soir\"\n      if heure<6 or heure>=18:\n        res=res+\" et il fait nuit\"\n      else:\n        res=res+\" et il fait jour\"\n    return res", "user": "userdId_9", "attemptID": 5448, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "71.63117", "embeddingY": "14.275167"},{"extension": "py", "date": "2020-03-02 02:22:32", "correct": "0", "upload": "def nombrePair(n):\n  a=n/2\n  if type(a)==int :\n    res=True\n  else :\n    res=False\n  return res", "user": "userdId_15", "attemptID": 5449, "exercise": "864911b08708fc8bae69311a8ddd3da7", "exercise_name": "nombrePair", "embeddingX": "38.640347", "embeddingY": "-4.1882706"},{"extension": "py", "date": "2020-03-31 05:51:25", "correct": "1", "upload": "def stockerChiffres(nombre):\n  cpt=0\n  res=[]\n  nb=nombre\n  while nb!=0:\n    res=res+[nb%10]\n    nb=nb//10\n  if res==[]:\n    res=[0]\n  return res\n    ", "user": "userdId_28", "attemptID": 5450, "exercise": "49a87f644f84a443327fb4315b47f249", "exercise_name": "stockerChiffres", "embeddingX": "-1.350827", "embeddingY": "18.61946"},{"extension": "py", "date": "2020-03-03 05:07:49", "correct": "0", "upload": "def somme(liste):\n  res=0\n  for elem in liste:\n    res=res+elem\n  return None", "user": "userdId_25", "attemptID": 5451, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-29.0602", "embeddingY": "-0.3352819"},{"extension": "py", "date": "2020-04-07 05:41:59", "correct": "0", "upload": "def suiteAri(liste):\n  ok=True\n  i=0\n  if len(liste)==0:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=(liste[i]+(liste[1]-liste[0]))*liste[i]:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 5452, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "19.31628", "embeddingY": "53.508892"},{"extension": "py", "date": "2020-03-12 08:48:28", "correct": "0", "upload": "def maximum(liste):\n    for i in liste :\n      res= liste[0]\n    if res<i in liste :\n      res=liste[i]\n    return res", "user": "userdId_24", "attemptID": 5453, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "44.228905", "embeddingY": "-57.814617"},{"extension": "py", "date": "2020-04-08 07:39:25", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n    cpt=0\n    decomp=nombre//10\n    while decomp!=0:\n      if chiffre in decomp:\n        cpt+=1\n    return cpt\n  ", "user": "userdId_11", "attemptID": 5454, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "15.115643", "embeddingY": "9.589099"},{"extension": "py", "date": "2020-03-06 00:27:07", "correct": "0", "upload": "def ecart(liste):\n    if liste==[]:\n      return None\n    elif len(liste)==1:\n      return 0\n    else:\n      res=liste[0]\n      max=0\n      min=0\n      for i in range(0,len(liste)):\n        if res>liste[i]:\n          max=liste[i]\n      for i in range(0,len(liste)):\n        if res<liste[i]:\n          min=liste[i]\n      ecart=max-min\n      return ecart\n          \n      \n      \n      ", "user": "userdId_2", "attemptID": 5455, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "10.231074", "embeddingY": "-84.634285"},{"extension": "py", "date": "2020-03-23 02:04:38", "correct": "0", "upload": "def nbVoyelles(mot):\n    res=0\n    for i in mot:\n      if i =='a,e,i,o,u,y' :\n        res=res+1\n    return res", "user": "userdId_24", "attemptID": 5456, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "1.1710387", "embeddingY": "-24.480827"},{"extension": "py", "date": "2020-05-11 00:27:06", "correct": "0", "upload": "def listeDecroissante(scores):\n  ok=True\n  i=0\n  if len(scores)>1:\n    while i<len(scores)-1:\n      if scores[i]>scores[i+1]:\n        ok=False\n      i=i+1\n  return ok", "user": "userdId_12", "attemptID": 5457, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "16.002153", "embeddingY": "49.2005"},{"extension": "py", "date": "2020-04-12 05:35:12", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n    if len(liste)==0:\n      res=True\n    else:\n      res=True\n      i=1\n      while i<len(liste) and res:\n        if liste[i]!=a*liste[i-1]+b:\n          res=False\n      return res\n    ", "user": "userdId_11", "attemptID": 5458, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-70.30686", "embeddingY": "24.499685"},{"extension": "py", "date": "2020-04-07 10:58:01", "correct": "0", "upload": "def suiteGeo(liste):\n  ok=True\n  i=0\n  if len(liste)==0 and len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i]==0:\n      ok=False\n      q=liste[i+1]/liste[i]\n      if liste[i+1]/liste[i]!=q:\n        ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 5459, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "26.578714", "embeddingY": "58.34961"},{"extension": "py", "date": "2020-04-12 06:48:24", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  if liste==[]:\n    res=True\n  c=[]\n  res=False\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n  for i in range(0,len(liste),0):\n    c=[liste[0]]+c\n  return c", "user": "userdId_8", "attemptID": 5460, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-73.87266", "embeddingY": "27.769878"},{"extension": "py", "date": "2020-03-12 07:51:49", "correct": "0", "upload": "def semestreValide(ue1,ue2):\n  if ue1==10 and ue2==10:\n    return True\n  if ue1>ue2 and ue1-ue2>=0:\n    return True\n  else:\n    return False", "user": "userdId_1", "attemptID": 5461, "exercise": "70ae7ad6cf504e0fa8cedebd8e8a825f", "exercise_name": "semestreValide", "embeddingX": "75.17125", "embeddingY": "-5.0491147"},{"extension": "py", "date": "2020-04-05 12:15:54", "correct": "1", "upload": "def elemGeo(n,u0,q):\n    return u0*q**n", "user": "userdId_4", "attemptID": 5462, "exercise": "d7c83a7fb9b49e28804e55955ad06968", "exercise_name": "elemGeo", "embeddingX": "-39.920906", "embeddingY": "19.774483"},{"extension": "py", "date": "2020-04-17 03:12:04", "correct": "0", "upload": "def minimum(liste):\n  min=0\n  for i in liste: \n    if l[i]<l[i+1]:\n      min=l[i]\n    else:\n      min=None\n  return min", "user": "userdId_21", "attemptID": 5463, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "34.008217", "embeddingY": "-58.685886"},{"extension": "py", "date": "2020-03-05 07:00:01", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut1==debut2:\n    res=True\n  else:\n    for debut1 in range(fin1,fin2):\n      res=True\n      \n      \n      \n   \n  \n  return res\n  ", "user": "userdId_5", "attemptID": 5464, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "64.742935", "embeddingY": "-30.140322"},{"extension": "py", "date": "2020-04-06 04:05:04", "correct": "0", "upload": "def motPalindrom(mot):\n  i=0\n  res=True\n  while i<len(mot) and res==True:\n    pl=mot[i]\n    dl=mot[-i-1]\n    if pl==dl:\n        res=True\n    else:\n        res=False\n    i+=1\n  return res", "user": "userdId_26", "attemptID": 5465, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "9.321074", "embeddingY": "60.92642"},{"extension": "py", "date": "2020-03-12 23:57:16", "correct": "0", "upload": "def jourNuit(heure):\n\tif heure<0 or heure>24:\n\t\tn=\"l'heure saisie est invalide\"\n\tif 6<=heure<=18:\n\t\tn='et il fait jour'\n\t\tif 6<=heure<=12:\n\t\t\tn='on est le matin '+n\n\t\tif 13<=heure<=16:\n\t\t\tn=\"on est l'apr\u00e8s-midi \"+n\n\t\telse:\n\t\t\tn='on est le soir '+n\n\tif heure<=5 or heure>=19:\n\t\tn='et il fait nuit'\n\t\tif heure<=5:\n\t\t\tn='on est la nuit '+n\n\t\tif heure==5:\n\t\t\tn='on est le matin '+n\n\t\tif 19<=heure<=21:\n\t\t\tn='on est le soir '+n\n\t\telse:\n\t\t\tn='on est la nuit '+n\n\treturn n\n\t\n\t\t\n", "user": "userdId_19", "attemptID": 5466, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "69.81218", "embeddingY": "19.920937"},{"extension": "py", "date": "2020-03-05 21:44:15", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n    return None\n  else:\n    max = liste[0]\n    for i in range(1,len(liste)):\n      if liste[i]<max:\n        max = liste[i]\n  return max", "user": "userdId_6", "attemptID": 5467, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "12.983392", "embeddingY": "-67.389015"},{"extension": "py", "date": "2020-04-13 21:14:32", "correct": "0", "upload": "def suiteAri(liste):\n  res=True\n  if len(liste)>1:\n    n=liste[1]-liste[0]\n    res=verifSuiteAriGeo(liste,1,n)\n  return res", "user": "userdId_8", "attemptID": 5468, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "-6.5259786", "embeddingY": "-74.38065"},{"extension": "py", "date": "2020-04-16 21:10:04", "correct": "0", "upload": "def meilleurClassementJoueur(scores,joueurs,nom):\n  i=0\n  while i<len(score):\n    if nom==joueur[i]:\n      return [i]\n    i=i+1", "user": "userdId_1", "attemptID": 5469, "exercise": "be6ce0a06c5d396190024c7c681da95d", "exercise_name": "meilleurClassementJoueur", "embeddingX": "-5.0945053", "embeddingY": "41.44222"},{"extension": "py", "date": "2020-03-28 11:50:50", "correct": "1", "upload": "def nbVoyelles(mot):\n    if len(mot)==0:\n      cpt=0\n    else:\n      cpt=0\n      for c in mot:\n        if c in 'aeiouy':\n          cpt=cpt+1\n    return cpt", "user": "userdId_11", "attemptID": 5470, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "6.334894", "embeddingY": "-29.626959"},{"extension": "py", "date": "2020-03-04 03:41:07", "correct": "0", "upload": "def moyenne(liste):\n  if len(liste) == 0 :\n    res = None\n  res = 0\n  for elem in liste :\n    res = res + elem\n  res = res/len(liste)  \n  return res", "user": "userdId_17", "attemptID": 5471, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-0.68259746", "embeddingY": "-17.316036"},{"extension": "py", "date": "2020-04-05 12:11:29", "correct": "1", "upload": "def produitScalaire(vec1,vec2):\n  res=0\n  for i in range(len(vec1)):\n    res+=vec1[i]*vec2[i]\n  return res", "user": "userdId_34", "attemptID": 5472, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-52.142075", "embeddingY": "-37.06255"},{"extension": "py", "date": "2020-04-06 16:55:01", "correct": "1", "upload": "def motPalindrome(mot):\n  ok=True\n  i=0\n  j=len(mot)-1\n  while i<j and ok:\n    if mot[i]==mot[j]:\n      ok=True\n    else:\n      ok=False\n    i=i+1\n    j=j-1\n  return ok", "user": "userdId_3", "attemptID": 5473, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "23.245836", "embeddingY": "57.288002"},{"extension": "py", "date": "2020-03-30 22:06:37", "correct": "0", "upload": "def stockerChiffres(nombre):\n  temp = str(nombre)\n  res = [0]*len(temp)\n  for i in range(len(temp)):\n    res[-(1+i)]=temp[i]\n  return res", "user": "userdId_6", "attemptID": 5474, "exercise": "49a87f644f84a443327fb4315b47f249", "exercise_name": "stockerChiffres", "embeddingX": "-55.65198", "embeddingY": "-28.345608"},{"extension": "py", "date": "2020-03-05 22:17:26", "correct": "0", "upload": "def maximum(liste):\n  res=0\t\n  for elem in liste:\n    if res<elem:\n      res=elem\n  \n    return res\n  ", "user": "userdId_23", "attemptID": 5475, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "42.131607", "embeddingY": "-52.862045"},{"extension": "py", "date": "2020-03-06 00:42:47", "correct": "1", "upload": "def maximum(liste):\n    if len(liste)==0:\n        res=None\n    else:\n        res=liste[0]\n        for elem in liste:\n            if elem>res:\n                res=elem\n    return res", "user": "userdId_41", "attemptID": 5476, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "9.499739", "embeddingY": "-61.469883"},{"extension": "py", "date": "2020-04-08 02:44:35", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  res=True\n  while i<len(liste) and res==True:\n    if liste[i]!=0 and len(liste)>=2:\n      listetest=[liste[0]]\n      q=liste[1]/liste[0]\n      u=liste[0]*q**i\n      listetest=listetest+u\n    else:\n      res=False\n    if liste[i]==listetest[i]:\n      res=True\n    else:\n      res=False\n  return res", "user": "userdId_26", "attemptID": 5477, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "35.344154", "embeddingY": "69.11516"},{"extension": "py", "date": "2020-04-14 04:26:06", "correct": "0", "upload": "def listeDecroissante(scores):\n  c=True\n  i=0\n  while i<(len(score)-1) and c:\n    if score[i]<score[i+1]:\n      c=False\n    i=i+1\n  return c      ", "user": "userdId_39", "attemptID": 5478, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "-3.6531966", "embeddingY": "43.10041"},{"extension": "py", "date": "2020-03-30 22:45:41", "correct": "0", "upload": "def nbChiffres(nombre):\n  res =0\n  while nombre//10!=nombre:\n    nombre//=10\n    res+=1\n  return res+1", "user": "userdId_6", "attemptID": 5479, "exercise": "3dcf332c003a1f3bf15df22ee17884a3", "exercise_name": "nbChiffres", "embeddingX": "30.244505", "embeddingY": "14.876745"},{"extension": "py", "date": "2020-03-31 07:42:24", "correct": "0", "upload": "def moyenne(liste):\n    if len(liste)==0:\n      res=None\n    else:\n      res=0\n      cpt=0\n      moy=res/cpt\n      for elem in liste:\n        res=res+elem\n        cpt=cpt+1\n    return moy\n  \n  ", "user": "userdId_11", "attemptID": 5480, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "-4.407432", "embeddingY": "-10.5558405"},{"extension": "py", "date": "2020-03-05 23:34:50", "correct": "0", "upload": "def maximum(liste):\n    res = 0\n    for i in range(0,len(liste)):\n      if liste[i] > res :\n        res = liste[i]\n    if len(liste) == 0:\n      res = None\n    return res", "user": "userdId_29", "attemptID": 5481, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "0.12878075", "embeddingY": "-60.20011"},{"extension": "py", "date": "2020-03-17 05:01:59", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  res=''\n  if debut+longueur>len(s):\n    fin=len(s)\n  else:\n    fin=debut+longueur\n  for i in range(debut,debut+longueur):\n    res=res+s[i]\n  return res", "user": "userdId_7", "attemptID": 5482, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-76.459755", "embeddingY": "16.19181"},{"extension": "py", "date": "2020-03-10 04:10:46", "correct": "1", "upload": "def sommeNbPairs(liste):\n  res=0\n  for x in liste:\n    if x%2==0:\n      res=res+x\n  return res", "user": "userdId_31", "attemptID": 5483, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "29.614037", "embeddingY": "-18.20924"},{"extension": "py", "date": "2020-03-06 00:05:47", "correct": "0", "upload": "def maximum(liste):\n  res=0\n  for i in range(len(liste)):\n      res=res+liste[i] \n  return None", "user": "userdId_41", "attemptID": 5484, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-40.918648", "embeddingY": "-36.09908"},{"extension": "py", "date": "2020-04-14 04:34:23", "correct": "0", "upload": "def meilleurScoreJoueur(scores,joueurs,nom):\n  i=0\n  max=0\n  while i<len(scores)-1 and i<len(joueurs) and max:\n    if nom==joueurs[i] and scores[i]>scores[i+1]:\n      max=i\n  return max", "user": "userdId_21", "attemptID": 5485, "exercise": "c96fadc94086276f98451a798b3bb730", "exercise_name": "meilleurScoreJoueur", "embeddingX": "-11.019733", "embeddingY": "47.06275"},{"extension": "py", "date": "2020-03-31 08:00:58", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n    if len(mot)==0 or lettre not in mot:\n      res=None\n    else:\n      res=0\n      cpt=0\n      for i in range(len(mot)):\n        if mot[i]==lettre:\n          cpt+=1\n          res=i\n    return res", "user": "userdId_11", "attemptID": 5486, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-19.392883", "embeddingY": "-37.287624"},{"extension": "py", "date": "2020-04-07 03:36:00", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  while nombre!=0:\n    nombre=nombre//10\n    if nombre==chiffre:\n      cpt=cpt+1\n  return cpt", "user": "userdId_50", "attemptID": 5487, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "22.215603", "embeddingY": "12.18999"},{"extension": "py", "date": "2020-04-07 01:01:53", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  i=0\n  end=False\n  while i<len(phrase) and end==False:\n    if phrase[i]==\" \":\n      end=True\n    elif phrase[i]==phrase[-i-1]:\n      res=True\n    elif phrase[-i-1]==\" \":\n      if phrase[i]==phrase[-i-2]:\n        res=True\n    else:\n      res=False\n    return res", "user": "userdId_26", "attemptID": 5488, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "34.415527", "embeddingY": "41.104397"},{"extension": "py", "date": "2020-03-03 05:01:38", "correct": "1", "upload": "def somme(liste):\n  res= 0\n  for i in range(0, len(liste)):\n    res= res + liste[i]\n  return res\n  ", "user": "userdId_7", "attemptID": 5489, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-45.7421", "embeddingY": "-39.436905"},{"extension": "py", "date": "2020-03-03 06:21:00", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut1 or fin1 in debut2 or fin2:\n    return True\n  else:\n    return False", "user": "userdId_8", "attemptID": 5490, "exercise": "6fd66bb2393fbf3809f1c6d04f3831f7", "exercise_name": "rendezVous", "embeddingX": "58.24183", "embeddingY": "-28.466515"},{"extension": "py", "date": "2020-03-14 21:39:04", "correct": "0", "upload": "def maximum(liste):\n    if x>=y and x>=z:\n      maxi=x\n    if y>=x and y>=z:\n      maxi=y\n    if z>=x and z>=y:\n      maxi=z\n    return maxi", "user": "userdId_21", "attemptID": 5491, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "49.87095", "embeddingY": "-29.62802"},{"extension": "py", "date": "2020-04-12 08:31:29", "correct": "0", "upload": "def suiteAriGeo(liste):\n  i=0\n  while i<len(liste)-1:\n    a=liste[0]\n    b=liste[0]\n    if liste[i+1]==liste[i]+(liste[1]-liste[0]):\n      b=liste[1]-liste[0]\n    if liste[0]!=0:                        \n      if liste[i+1]==liste[i]*liste[1]/liste[0]:\n        a=liste[1]/liste[0]\n        b=0\n    if liste[i+1]==liste[i]*(liste[1]-liste[0])+(liste[i]-liste[i-1]):\n      a=liste[1]-liste[0]\n      b=liste[i]-liste[i-1]*a\n    i=i+1\n  ok=True\n  i=0\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=a*liste[i]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 5492, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "35.7018", "embeddingY": "84.158104"},{"extension": "py", "date": "2020-03-12 21:43:39", "correct": "0", "upload": "def nbVoyelles(mot):\n  cpt=0\n  for i in mot:\n    if i in 'aeiouy':\n      cpt+1\n  return cpt", "user": "userdId_20", "attemptID": 5493, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "18.019037", "embeddingY": "-25.22325"},{"extension": "py", "date": "2020-03-17 06:31:40", "correct": "0", "upload": "def distribution(liste,n):\n  cpt=[0]*(n+1)\n  for elem in liste:\n    cpt[elem]=cpt[elem]+1\n  return res", "user": "userdId_25", "attemptID": 5494, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-60.330708", "embeddingY": "-14.978953"},{"extension": "py", "date": "2020-03-22 12:10:50", "correct": "0", "upload": "def maximum(liste):\n  max=liste[1]\n  for i in range(1,len(liste)): \n    if liste[i]>max:\n      max=liste[i]\t\n  return max", "user": "userdId_21", "attemptID": 5495, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "10.338014", "embeddingY": "-72.09848"},{"extension": "py", "date": "2020-03-19 05:20:21", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  if jour1<jour2 and mois1<mois2 and annee1<annee2:\n    res=-1\n    if jour1==jour2 and mois1==mois2 and annee1==annee2:\n      res=1\n  else:\n    res=0\n  return res", "user": "userdId_34", "attemptID": 5496, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "79.707596", "embeddingY": "-25.29139"},{"extension": "py", "date": "2020-03-10 03:02:12", "correct": "1", "upload": "def jourNuit(heure):\n  if 5<=heure<6:\n    res='on est le matin et il fait nuit'\n  elif 6<=heure<12:\n    res='on est le matin et il fait jour'\n  elif 12<=heure<17:\n    res=\"on est l'apr\u00e8s-midi et il fait jour\"\n  elif 17<=heure<18:\n    res='on est le soir et il fait jour'\n  elif 18<=heure<21:\n    res='on est le soir et il fait nuit'\n  elif 0<=heure<5 or 21<=heure<=24:\n    res='on est la nuit et il fait nuit'\n  else:\n    res=\"l'heure saisie est invalide\"\n  return res\n            ", "user": "userdId_18", "attemptID": 5497, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "71.82747", "embeddingY": "25.231247"},{"extension": "py", "date": "2020-03-06 00:43:35", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    res=None\n  else:\n    res=0\n    for mot in \"aeiouy\":\n      res=res+1\n  \n  return res", "user": "userdId_5", "attemptID": 5498, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "0.024403311", "embeddingY": "-29.78881"},{"extension": "py", "date": "2020-03-24 03:20:47", "correct": "1", "upload": "def quatrePlus100(liste):\n\tres=[]\n\ti=0\n\tcpt=0\n\twhile i<len(liste) and cpt!=4:\n\t\tif liste[i]>100:\n\t\t\tres=res+[liste[i]]\n\t\t\tcpt=cpt+1\n\t\ti=i+1\n\treturn res", "user": "userdId_31", "attemptID": 5499, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-30.753752", "embeddingY": "43.89806"},{"extension": "py", "date": "2020-03-13 00:34:54", "correct": "0", "upload": "def sommeNPremiersEntiers(n):\n  res = 0\n  for i in range (n):\n    res = res + i\n    return res", "user": "userdId_17", "attemptID": 5500, "exercise": "c315a540cf0bfb0182dc114c6f0eafd1", "exercise_name": "sommeNPremiersEntiers", "embeddingX": "-20.000744", "embeddingY": "11.281799"},{"extension": "py", "date": "2020-03-31 00:25:44", "correct": "0", "upload": "def listeSymetrique(l):\n    trouve=True\n    i=0\n    j=-1\n    while i<len(l) and j<=-len(l):\n      if l(i)!=l(j):\n        trouve=False\n      i=i+1\n      j=j-1\n    return trouve\n  \n      ", "user": "userdId_28", "attemptID": 5501, "exercise": "8eb27aeda471a467e2223abebeca886e", "exercise_name": "listeSymetrique", "embeddingX": "5.3011584", "embeddingY": "45.08439"},{"extension": "py", "date": "2020-04-12 10:33:29", "correct": "0", "upload": "def elemGeo(n,u0,q):\n  q=1\n  for i in range(0,n):\n    q=q*n\n  res=u0*q\n  \n  return res", "user": "userdId_38", "attemptID": 5502, "exercise": "d7c83a7fb9b49e28804e55955ad06968", "exercise_name": "elemGeo", "embeddingX": "-27.52253", "embeddingY": "16.699947"},{"extension": "py", "date": "2020-04-12 05:36:05", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=False\n  c=[]\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n    d=liste[i]+d\n  return c", "user": "userdId_8", "attemptID": 5503, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-72.78281", "embeddingY": "9.656444"},{"extension": "py", "date": "2020-04-07 09:50:31", "correct": "0", "upload": "def elemArisuiteAri(liste):\n  ok=True\n  cpt=u0\n  i=0\n  if len(liste)==0:\n    ok=True\n  while i<len(liste) and ok:\n    cpt=cpt+r\n    if liste[i+1]!=cpt:\n      ok=False\n    i=i+1\n  return ok\n    \n    ", "user": "userdId_1", "attemptID": 5504, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "10.595575", "embeddingY": "61.55823"},{"extension": "py", "date": "2020-06-02 07:12:39", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n\tres=False\n\tif fin2<=debut1<=debut2:\n\t\tres=True\n\tif fin2<=fin1<=debut2:\n\t\tres=True\n\treturn res", "user": "userdId_3", "attemptID": 5505, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "51.68797", "embeddingY": "-21.856874"},{"extension": "py", "date": "2020-04-07 02:07:41", "correct": "0", "upload": "def jourNuit(heure):\n  if 6<=heure<=18 and 5<=heure<=12:\n    res=\"on est le matin et il fait jour\"\n  if 6<=heure<=18 and 12<heure<17:\n    res=\"on est l'apres-midi et il fait jour\"\n  if 17<heure<=18 and 6<=heure<=18:\n    res=\"on est le soir et il fait jour\"\n  if 18<=heure<=5 and 17<=heure<=5:\n    res=\"on est la nuit et il fait nuit\"\n  return res", "user": "userdId_16", "attemptID": 5506, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "73.64764", "embeddingY": "24.274458"},{"extension": "py", "date": "2020-04-21 04:10:33", "correct": "1", "upload": "def rechercheDicho(liste,val):\n  debut=0\n  fin=len(liste)-1\n  nbAcces=0\n  while debut<fin:\n    nbAcces+=1\n    indice=(debut+fin)//2\n    elem=liste[indice]\n    if elem==val:\n      return (indice,nbAcces)\n    elif elem<val:\n      debut=indice+1\n    else:\n      fin=indice-1\n  return (None,nbAcces)", "user": "userdId_18", "attemptID": 5507, "exercise": "434544c545ce211c7e57445707047bee", "exercise_name": "rechercheDicho", "embeddingX": "-5.8989277", "embeddingY": "63.05381"},{"extension": "py", "date": "2020-03-02 08:47:52", "correct": "0", "upload": "def jourNuit(heure):\n    res = \"l'heure saisie est invalide\"\n\n    if heure <= 24:\n        if heure >= 5 and heure < 12:\n            res = \"on est le matin\"\n        elif heure >= 12 and heure < 17:\n      \t    res = \"on est l'apr\u00e8s-midi\"\n        elif heure >= 17 and heure <= 21:\n            res = \"on est le soir\"\n        else:\n            res = \"on est la nuit\"\n        if heure >= 6 and heure < 18:\n            res += \" et il fait jour\"\n        else:\n            res += \" et il fait nuit\"\n    return res\n", "user": "userdId_4", "attemptID": 5508, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "77.307945", "embeddingY": "24.832796"},{"extension": "py", "date": "2020-03-06 00:07:47", "correct": "0", "upload": "def maximum(liste):\n    res=0\n    for elem in liste:\n        if elem>res:\n            res=elem\n    return res", "user": "userdId_49", "attemptID": 5509, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "30.747", "embeddingY": "-43.055912"},{"extension": "py", "date": "2020-03-06 00:06:39", "correct": "0", "upload": "def nbVoyelles(mot):\n  cpt=0\n  if lettre in liste==(a,e,i,o,u,y):\n    cpt=cpt+1\n  return cpt", "user": "userdId_1", "attemptID": 5510, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "8.165027", "embeddingY": "-16.136538"},{"extension": "py", "date": "2020-04-08 02:30:26", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  res=True\n  while i<len(liste)-1 and res==True:\n    if liste[i]!=0:\n      q=liste[i+1]/liste[i]\n      if liste[i+1]/liste[i]==q:\n        res=True\n      else:\n        res=False\n    else:\n      res=False\n    i=i+1\n  return res", "user": "userdId_26", "attemptID": 5511, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "29.512579", "embeddingY": "60.227844"},{"extension": "py", "date": "2020-03-17 05:26:35", "correct": "0", "upload": "def permutationChaine(s):\n    res=''\n    for i in range(0,len(s)):\n        res=res+s[i]+1+s[i]\n    return res", "user": "userdId_39", "attemptID": 5512, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-44.033955", "embeddingY": "-47.787426"},{"extension": "py", "date": "2020-04-16 21:11:42", "correct": "0", "upload": "def meilleurClassementJoueur(scores,joueurs,nom):\n  i=0\n  while i<len(scores):\n    if nom==joueurs[i]:\n      return i+1\n    i=i+1\n    return 0\n    ", "user": "userdId_1", "attemptID": 5513, "exercise": "be6ce0a06c5d396190024c7c681da95d", "exercise_name": "meilleurClassementJoueur", "embeddingX": "-13.365439", "embeddingY": "66.75561"},{"extension": "py", "date": "2020-03-06 00:04:56", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    res=0\n  else:\n    for elem in mot:\n      res=0\n      if elem in 'a,e,i,o,u,y':\n        res=res+1\n  return res     ", "user": "userdId_14", "attemptID": 5514, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "5.6888847", "embeddingY": "-29.035505"},{"extension": "py", "date": "2020-04-12 06:10:32", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=False\n  c=[]\n  e=[liste]\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n  return e", "user": "userdId_8", "attemptID": 5515, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-77.76076", "embeddingY": "21.886848"},{"extension": "py", "date": "2020-04-11 08:06:33", "correct": "1", "upload": "def elemAri(n,u0,r):\n  return u0+n*r", "user": "userdId_8", "attemptID": 5516, "exercise": "f239498950e974e29e01472749d9a09d", "exercise_name": "elemAri", "embeddingX": "-35.55872", "embeddingY": "20.786745"},{"extension": "py", "date": "2020-03-23 01:49:18", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n  if len(mot)==0:\n    res=None \n  else:\n    res=None\n    for i in range(len(mot)): \n      if lettre==mot[i]:\n        res=i\n  return res", "user": "userdId_16", "attemptID": 5517, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "-18.429983", "embeddingY": "-40.230938"},{"extension": "py", "date": "2020-03-12 23:56:15", "correct": "0", "upload": "def jourNuit(heure):\n\tif heure<0 or heure>24:\n\t\tn=\"l'heure saisie est invalide\"\n\t\tif 6<=heure<=18:\n\t\t\tn='et il fait jour'\n\t\t\tif 6<=heure<=12:\n\t\t\t\tn='on est le matin '+n\n\t\t\tif 13<=heure<=17:\n\t\t\t\tn=\"on est l'apr\u00e8s-midi \"+n\n\t\t\telse:\n\t\t\t\tn='on est le soir '+n\n\t\tif heure<=5 or heure>=19:\n\t\t\tn='et il fait nuit'\n\t\t\tif heure<=5:\n\t\t\t\tn='on est la nuit '+n\n\t\t\tif heure==5:\n\t\t\t\tn='on est le matin '+n\n\t\t\tif 19<=heure<=21:\n\t\t\t\tn='on est le soir '+n\n\t\t\telse:\n\t\t\t\tn='on est la nuit '+n\n\treturn n\n\t\n\t\t\n", "user": "userdId_19", "attemptID": 5518, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "70.340996", "embeddingY": "19.271854"},{"extension": "py", "date": "2020-03-12 21:40:05", "correct": "1", "upload": "def nbVoyelles(mot):\n  cpt=0\n  for lettre in mot:\n    if lettre in \"aeiouy\":\n      cpt=cpt+1\n  return cpt", "user": "userdId_35", "attemptID": 5519, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "15.188833", "embeddingY": "-24.556799"},{"extension": "py", "date": "2020-03-31 06:44:24", "correct": "0", "upload": "def doubleChiffre(nombre):\n  res=False\n  com1=0\n  while nombre!=0 and not res:\n    chiffre=nombre%10\n    nombre=nombre//10\n    if chiffre==com1:\n      res=True\n    com1=chiffre\n  return res", "user": "userdId_13", "attemptID": 5520, "exercise": "c83ea6acd3e9f6f5543e87d515e8a44a", "exercise_name": "doubleChiffre", "embeddingX": "11.218079", "embeddingY": "21.294975"},{"extension": "py", "date": "2020-04-07 10:45:50", "correct": "0", "upload": "def suiteGeo(liste):\n  ok=True\n  i=0\n  if len(liste)==0 and len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i]==0:\n      ok=False\n    q=liste[i+1]*liste[i]\n    if liste[i+1]/liste[i]!=q:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 5521, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "28.506659", "embeddingY": "68.66206"},{"extension": "py", "date": "2020-03-23 00:24:04", "correct": "1", "upload": "def nbOccurrencesLettre(lettre,mot):\n  cpt=0\n  for c in mot:\n    if c==lettre:\n      cpt=cpt+1\n  return cpt", "user": "userdId_27", "attemptID": 5522, "exercise": "2864c9e5861229d2ff32570f6bc944fb", "exercise_name": "nbOccurrencesLettre", "embeddingX": "-12.339858", "embeddingY": "-28.01433"},{"extension": "py", "date": "2020-03-24 05:22:29", "correct": "1", "upload": "def quatrePlus100(liste):\n  res=[]\n  i=0\n  while i<len(liste) and len(res)<4:\n    if liste[i]>100:\n      res.append(liste[i])\n    i+=1\n  return res", "user": "userdId_8", "attemptID": 5523, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "-24.60257", "embeddingY": "41.005043"},{"extension": "py", "date": "2020-03-19 23:20:30", "correct": "1", "upload": "def reconstruireChainePartielle(s,n):\n  res=\"\"\n  for i in range(0,len(s),n):\n    res=res+s[i]\n  return res", "user": "userdId_13", "attemptID": 5524, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-59.746765", "embeddingY": "-40.644665"},{"extension": "py", "date": "2020-05-04 21:44:35", "correct": "1", "upload": "def nbVoyelles(mot):\n  res=0\n  for elem in mot:\n    if elem in 'aeiouy':\n      res+=1\n  return res", "user": "userdId_26", "attemptID": 5525, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "12.648018", "embeddingY": "-24.764853"},{"extension": "py", "date": "2020-03-09 22:54:10", "correct": "1", "upload": "def ecart(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    max=liste[0]\n    min=liste[0]\n    for i in range(len(liste)):\n      if liste[i]>max:\n        max=liste[i]\n    for i in range(len(liste)):\n      if liste[i]<min:\n        min=liste[i]\n    res=max-min\n    return res", "user": "userdId_12", "attemptID": 5526, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "12.915378", "embeddingY": "-84.305595"},{"extension": "py", "date": "2020-04-06 15:07:30", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  for i in range(nombre):\n    if chiffre==nombre[i]:\n      cpt=cpt+1\n    i=i+1\n  return cpt", "user": "userdId_3", "attemptID": 5527, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-21.230762", "embeddingY": "-31.060575"},{"extension": "py", "date": "2020-06-02 21:06:08", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut1<=fin2 or debut2<fin1:\n    return True\n  else:\n    return False", "user": "userdId_12", "attemptID": 5528, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "59.487064", "embeddingY": "-27.362547"},{"extension": "py", "date": "2020-03-20 00:53:21", "correct": "1", "upload": "def distribution(liste,n):\n  liste2=[]\n  liste2=liste2+([0]*(n+1))\n  for i in liste:\n    liste2[i]=liste2[i]+1\n  return liste2\n  \n              \n                 \n", "user": "userdId_2", "attemptID": 5529, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-59.476574", "embeddingY": "-15.883597"},{"extension": "py", "date": "2020-03-09 21:52:19", "correct": "1", "upload": "def minimum(liste):\n  if liste == []:\n    return None\n  else:\n    minimum = liste[0]\n    for i in range(1,len(liste)):\n      if minimum > liste[i]:\n        minimum = liste[i]\n    return minimum", "user": "userdId_42", "attemptID": 5530, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "-6.6572294", "embeddingY": "-63.990845"},{"extension": "py", "date": "2020-03-20 00:44:20", "correct": "0", "upload": "def permutationChaine(s):\n  res=''\n  for i in range (0,len(s),2):\n    res=res+s[i+1]+s[i]\n  \n  return res", "user": "userdId_15", "attemptID": 5531, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-46.18683", "embeddingY": "-46.850204"},{"extension": "py", "date": "2020-03-22 23:56:38", "correct": "0", "upload": "def nombrePair(n):\n  res=0\n  for x in range(len(n)):\n    if x%2==0:\n      res=True\n    else:\n      res=False\n  return res", "user": "userdId_8", "attemptID": 5532, "exercise": "3001254263845e9a478696f81a704d33", "exercise_name": "nombrePair", "embeddingX": "-39.680843", "embeddingY": "-25.13196"},{"extension": "py", "date": "2020-03-05 22:15:38", "correct": "0", "upload": "def maximum(liste):\n    max=liste[0]\n    for i in range(0,len(liste)):\n      if liste[i] > max:\n        max = liste[i]\n    return max", "user": "userdId_29", "attemptID": 5533, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "10.213716", "embeddingY": "-72.40451"},{"extension": "py", "date": "2020-03-22 04:52:30", "correct": "0", "upload": "def polynome(a,b,c):\n  delta=b^2-4*a*c\n  if delta>0:\n    x=(-b-(sqrt(delta))/2*a,-b+(sqrt(delta))/2*a)\n  elif delta==0:\n    x=-b/2*a\n  else:\n    x='pas de solution'\n  return x", "user": "userdId_12", "attemptID": 5534, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-54.409824", "embeddingY": "5.007081"},{"extension": "py", "date": "2020-04-12 12:22:56", "correct": "0", "upload": "def suiteGeo(liste):\n    if len(liste)==0 or len(liste)==1:\n      res=True\n    else:\n      res=True\n      for i in range(1,len(liste)):\n        if liste[i-1]==0:\n          res=False\n        else:\n          x=liste[1]/liste[0]\n          if x==0:\n            res=False\n          else:\n            if liste[i]!=liste[i-1]*x:\n              res=False\n    return res", "user": "userdId_11", "attemptID": 5535, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "-15.547219", "embeddingY": "-83.64029"},{"extension": "py", "date": "2020-03-24 06:50:27", "correct": "0", "upload": "def fusion(liste1,liste2):\n  res=[]\n  i=0\n  while i<len(liste1)+len(liste2) and len(res)<len(liste1)+len(liste2):\n    if [liste1[i]]<[liste2[i]]:\n      res=res+[liste1[i]]\n    elif liste1[i]==liste2[i]:\n      res=res+[liste1[i]]+[liste2[i]]\n    else:\n      res=res+[liste2[i]]\n    i=i+1\n  return res", "user": "userdId_26", "attemptID": 5536, "exercise": "6613efb6c873b142dc2b6040c14eb616", "exercise_name": "fusion", "embeddingX": "-25.416388", "embeddingY": "52.575813"},{"extension": "py", "date": "2020-04-07 05:26:16", "correct": "1", "upload": "def elemAri(n,u0,r):\n  res=u0+r*n\n  return res", "user": "userdId_34", "attemptID": 5537, "exercise": "f239498950e974e29e01472749d9a09d", "exercise_name": "elemAri", "embeddingX": "-35.511463", "embeddingY": "18.557276"},{"extension": "py", "date": "2020-03-22 05:28:27", "correct": "0", "upload": "def nbVoyelles(mot):\n  res=0\n  for lettre in 'aeiouy':\n    res=res+1\n  return res", "user": "userdId_12", "attemptID": 5538, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-36.21787", "embeddingY": "-3.9945657"},{"extension": "py", "date": "2020-03-10 04:22:09", "correct": "1", "upload": "def sommeNbPairs(liste):\n  res=0\n  for x in liste:\n    if x%2==0:\n      res=res+x\n  return res", "user": "userdId_25", "attemptID": 5539, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "29.848673", "embeddingY": "-19.149195"},{"extension": "py", "date": "2020-04-05 23:08:50", "correct": "1", "upload": "def compteChiffre(chiffre,nombre):\n  liste=[]\n  chif=0\n  res=0\n  i=0\n  if nombre==0 :\n    liste.append(nombre)\n  else :\n    while nombre!=0 :\n      chif=nombre%10\n      liste.append(chif)\n      nombre=nombre//10\n  \n  while i<len(liste) :\n    if liste[i]==chiffre :\n      res+=1\n    i+=1\n  print(liste)\n  print(chiffre)\n  return res", "user": "userdId_15", "attemptID": 5540, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "19.253725", "embeddingY": "18.4641"},{"extension": "py", "date": "2020-04-06 20:54:27", "correct": "1", "upload": "def produitScalaire(vec1,vec2):\n  res=0\n  vec3=[0]*len(vec1)\n  for i in range(len(vec1)):\n    vec3[i]=vec1[i]*vec2[i]\n  for elem in vec3:\n    res+=elem\n  return res", "user": "userdId_12", "attemptID": 5541, "exercise": "4c4b7a924be986e72228374530812bf0", "exercise_name": "produitScalaire", "embeddingX": "-52.81645", "embeddingY": "-35.056377"},{"extension": "py", "date": "2020-03-02 21:10:46", "correct": "1", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut1 <= debut2 and fin1 >= debut2 :\n    res = True\n  elif debut2 <= debut1 and fin2 >= debut1 :\n    res = True\n  else :\n    res = False\n  return res", "user": "userdId_17", "attemptID": 5542, "exercise": "6fd66bb2393fbf3809f1c6d04f3831f7", "exercise_name": "rendezVous", "embeddingX": "52.124485", "embeddingY": "-24.017445"},{"extension": "py", "date": "2020-03-19 23:51:51", "correct": "1", "upload": "def reconstruireChainePartielle(s,n):\n  res=''\n  for i in range (0,len(s),n):\n      res=res + s[i]\n  \n  return res\n\n", "user": "userdId_15", "attemptID": 5543, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-60.901848", "embeddingY": "-40.905506"},{"extension": "py", "date": "2020-03-17 06:25:43", "correct": "0", "upload": "def reconstruireChainePartielle(s,n):\n  res=''\n  for i in range(0,len(s),2):\n    res=res+s[i]\n  return res", "user": "userdId_25", "attemptID": 5544, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-45.936424", "embeddingY": "-45.83172"},{"extension": "py", "date": "2020-03-30 11:32:16", "correct": "0", "upload": "def nombreSymetrique(nombre):\n    decomp=stockerChiffres(nombre);\n    return listeSymetrique(decomp)", "user": "userdId_32", "attemptID": 5545, "exercise": "fae4d6a34289cf5bf06f9d6d17e8547e", "exercise_name": "nombreSymetrique", "embeddingX": "-40.774208", "embeddingY": "15.96825"},{"extension": "py", "date": "2020-04-12 05:32:41", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=False\n  c=[]\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n  return c", "user": "userdId_8", "attemptID": 5546, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-85.111336", "embeddingY": "19.34523"},{"extension": "py", "date": "2020-03-05 21:54:07", "correct": "1", "upload": "def somme(liste):\n  res=0\n  for elem in liste:\n  \tres=res+elem\n  return res", "user": "userdId_14", "attemptID": 5547, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-29.017658", "embeddingY": "1.6358345"},{"extension": "py", "date": "2020-04-05 07:35:47", "correct": "0", "upload": "def nbSyllabes(mot):\n  voy='aeiouy'\n  if mot=='':\n    cpt=0\n  else:\n    cpt=0\n    if mot[0] in voy:\n      cpt+=1\n    for i in range(1,len(mot)):\n      if mot[i] in voy and mot[i-1] not in voy:\n        cpt+=1\n    if mot[-1]=='e':\n      cpt-=1\n  return cpt", "user": "userdId_18", "attemptID": 5548, "exercise": "1c86bec0f4df503e23db53994f3d2991", "exercise_name": "nbSyllabes", "embeddingX": "-23.505507", "embeddingY": "-71.280464"},{"extension": "py", "date": "2020-03-31 08:06:57", "correct": "0", "upload": "def prononcable(mot):\n    if len(mot)==0:\n      res=True\n    else:\n      res=False\n      for i in range(len(mot)):\n        if mot[i] in 'aeiouy' and mot[i]!=mot[i+3]:\n          res=True\n        if mot[i] in 'bcdfghjklmnpqrstvwxz' and mot[i]!=mot[i+3]:\n          res=True\n    return res\n      ", "user": "userdId_11", "attemptID": 5549, "exercise": "6318b210c201fba050d60bc0913cb7ef", "exercise_name": "prononcable", "embeddingX": "-23.717667", "embeddingY": "-67.76196"},{"extension": "py", "date": "2020-03-20 00:18:10", "correct": "0", "upload": "def permutationChaine(s):\n  res=''\n  if len(s)<1:\n  \tres=''\n  else:\n    for i in range(0,len(s)-1,2):\n      res=res+s[i+1]\n      res=res+s[i]\n  l=len(s)\n  res=res+s[l-1]\n  return res", "user": "userdId_40", "attemptID": 5550, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-40.235294", "embeddingY": "-54.93028"},{"extension": "py", "date": "2020-03-05 22:11:38", "correct": "0", "upload": "def maximum(l):\n  if len(l)==0:\n    res=l[0]\n    for i in range(1,len(l)):\n      if res<i:\n        res=i\n  else:\n    res=None\n    return res", "user": "userdId_48", "attemptID": 5551, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "11.040787", "embeddingY": "-51.594112"},{"extension": "py", "date": "2020-03-30 21:55:47", "correct": "1", "upload": "def indiceOccurrence(n,x,l): #A faire plus tard ca m a soule\n  cpt=0\n  i=0\n  while i<len(l) and cpt<n:\n    if l[i] == x :\n      cpt+=1\n    i+=1   \n  if cpt != n:\n    return None\n  else: return i-1\n", "user": "userdId_6", "attemptID": 5552, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "-10.140865", "embeddingY": "74.08572"},{"extension": "py", "date": "2020-03-10 04:20:43", "correct": "1", "upload": "def sommeNPremiersEntiers(n):\n  res=0\n  for x in range(1,n+1):\n    res=res+x\n  return res", "user": "userdId_8", "attemptID": 5553, "exercise": "c315a540cf0bfb0182dc114c6f0eafd1", "exercise_name": "sommeNPremiersEntiers", "embeddingX": "-19.016867", "embeddingY": "13.664511"},{"extension": "py", "date": "2020-03-12 07:53:00", "correct": "0", "upload": "def semestreValide(ue1,ue2):\n  if ue1==10 and ue2==10:\n    return True\n  if ue1>ue2 and ue1-ue2>=0:\n    return True\n  if ue1<ue2 and ue2-ue1>0:\n    return True\n  else:\n    return False", "user": "userdId_1", "attemptID": 5554, "exercise": "70ae7ad6cf504e0fa8cedebd8e8a825f", "exercise_name": "semestreValide", "embeddingX": "75.27236", "embeddingY": "-5.152243"},{"extension": "py", "date": "2020-03-29 09:40:22", "correct": "0", "upload": "def distribution(liste,n):\n  res=[0]*(n+1)\n  for elem in liste:\n    res[elem]=res+1\n  return res", "user": "userdId_12", "attemptID": 5555, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-59.413013", "embeddingY": "-9.16124"},{"extension": "py", "date": "2020-03-31 01:12:37", "correct": "1", "upload": "def nbChiffres(nombre):\n    return len(str(nombre))", "user": "userdId_4", "attemptID": 5556, "exercise": "3dcf332c003a1f3bf15df22ee17884a3", "exercise_name": "nbChiffres", "embeddingX": "-62.108814", "embeddingY": "11.297253"},{"extension": "py", "date": "2020-04-07 03:33:22", "correct": "1", "upload": "def suiteAriGeo(liste):\n  if len(liste)<3:\n    ok=True\n  else:\n    ok=True\n    ecart1=liste[1]-liste[0]\n    ecart2=liste[2]-liste[1]\n    if ecart1==0 or ecart2==0:\n      a=1\n    else:\n      a=ecart2/ecart1\n    b=-a*liste[0]+liste[1]\n    if a*liste[2]+b!=liste[3]:\n      ok=False\n  return ok", "user": "userdId_32", "attemptID": 5557, "exercise": "4c9665daf155b115fe13218141fa1aff", "exercise_name": "suiteAriGeo", "embeddingX": "36.9946", "embeddingY": "76.04679"},{"extension": "py", "date": "2020-03-05 23:48:50", "correct": "1", "upload": "def maximum(liste):\n  if liste==[]:\n    return None\n  else:\n    res=liste[0]\n    for i in range (0,len(liste)):\n      if res<liste[i]:\n        res=liste[i]\n    return res\n  \n  ", "user": "userdId_2", "attemptID": 5558, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "25.60518", "embeddingY": "-70.99033"},{"extension": "py", "date": "2020-04-14 05:09:01", "correct": "1", "upload": "def meilleurScoreJoueur(scores,joueurs,nom):\n  MS=0\n  i=0\n  while i<len(joueurs) and MS==0:\n    if nom==joueurs[i]:\n      MS=scores[i]\n    i=i+1\n    if nom not in joueurs:\n      MS=0\n  return MS\n", "user": "userdId_28", "attemptID": 5559, "exercise": "c96fadc94086276f98451a798b3bb730", "exercise_name": "meilleurScoreJoueur", "embeddingX": "-8.315425", "embeddingY": "79.1688"},{"extension": "py", "date": "2020-03-31 03:25:26", "correct": "0", "upload": "def fusion(liste1,liste2):\n  nbr\n  res=[]\n  i=0\n  j=0\n  while i<len(liste1) and j<len(liste2):\n    if liste1[i]<liste2[j]:\n      res.append(liste1[i])\n      i+=1\n    else:\n      res.append(liste2[j])\n      j+=1\n  if j<len(liste2):\n    while j<len(liste2):\n\n      res.append(liste2[j])\n      j+=1\n  else:\n    while i<len(liste1):\n      res.append(liste1[i])\n      i+=1\n  return res", "user": "userdId_13", "attemptID": 5560, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "-47.34176", "embeddingY": "-5.7343445"},{"extension": "py", "date": "2020-03-04 10:11:52", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n   \n    if debut1 <= debut2 and fin1 <= fin2 or debut2 <= debut1 and fin2 <= fin1:\n      return true \n    else :\n     return false", "user": "userdId_28", "attemptID": 5561, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "54.400055", "embeddingY": "-27.541473"},{"extension": "py", "date": "2020-04-11 00:28:49", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  c=True\n  while i<(len(liste)-2) and c:\n    if liste[i+1]*liste[i+2]!=liste[i+1]*liste[i]:\n      c=False\n    i=i+1\n  return c", "user": "userdId_19", "attemptID": 5562, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "18.746052", "embeddingY": "53.51571"},{"extension": "py", "date": "2020-03-20 00:53:20", "correct": "1", "upload": "def permutationListe(liste,permutation):\n    res = [0]*len(liste)\n    for i in range (len(liste)) :\n      for y in range (len(permutation)) :\n        if permutation[y] == i :\n          res[i] = liste[y]\n    return res", "user": "userdId_17", "attemptID": 5563, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-26.785828", "embeddingY": "-33.909237"},{"extension": "py", "date": "2020-03-07 00:12:15", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if (debut1>=debut2 or fin1<=fin2) and fin1>=debut2:\n    res=True\n  else:\n    res=False\n  return res", "user": "userdId_8", "attemptID": 5564, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "53.41897", "embeddingY": "-23.97735"},{"extension": "py", "date": "2020-02-29 06:25:40", "correct": "0", "upload": "def semestreValide(ue1,ue2):\n    if ue1>10:\n      if ue2<10:\n        if (ue1+ue2)/2>10:\n          res=True\n        else:\n          res=False\n      else:\n        res=True\n    else:\n      res=False\n    return res", "user": "userdId_18", "attemptID": 5565, "exercise": "70ae7ad6cf504e0fa8cedebd8e8a825f", "exercise_name": "semestreValide", "embeddingX": "66.914", "embeddingY": "-0.23534612"},{"extension": "py", "date": "2020-04-06 21:37:29", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n    res=0\n    i=0\n    for i in nombre:\n      if i==chiffre:\n        res=res+1\n    return res", "user": "userdId_28", "attemptID": 5566, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "-36.806656", "embeddingY": "-13.869683"},{"extension": "py", "date": "2020-04-03 00:46:22", "correct": "0", "upload": "def stockerChiffres(nombre):\n  res=[]\n  if nombre==0:\n    res.append(nombre)\n  while nombre!=0:\n    res.append(nombre%10)\n    n=n//10\n  return res", "user": "userdId_14", "attemptID": 5567, "exercise": "49a87f644f84a443327fb4315b47f249", "exercise_name": "stockerChiffres", "embeddingX": "40.211926", "embeddingY": "16.098516"},{"extension": "py", "date": "2020-03-13 00:55:51", "correct": "0", "upload": "def plusLongueSuite(liste):\n  res=0\n  n1=liste[0]\n  for n2 in range (1,len(liste)):\n    if n1==n2:\n      res=res+1\n    n1=n2\n  \n  return res", "user": "userdId_15", "attemptID": 5568, "exercise": "deed004abb317b11778f7e8247197a40", "exercise_name": "plusLongueSuite", "embeddingX": "-2.4911819", "embeddingY": "-41.364925"},{"extension": "py", "date": "2020-04-07 04:03:48", "correct": "0", "upload": "def elemAri(n,u0,r):\n  cpt=0\n  i=1\n  while i<=n:\n    cpt=cpt+u0+r\n    i=i+1\n  return cpt\n  ", "user": "userdId_1", "attemptID": 5569, "exercise": "f239498950e974e29e01472749d9a09d", "exercise_name": "elemAri", "embeddingX": "-8.417768", "embeddingY": "24.343603"},{"extension": "py", "date": "2020-03-06 00:13:06", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    voy=None\n  if len(voyel)==0:\n    voyel=None\n  else:\n    voy=0\n    for i in range(len(liste)):\n      if voyel[i]==liste[i]:\n        voy=voy+1\n  return None", "user": "userdId_13", "attemptID": 5570, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "14.539735", "embeddingY": "-51.410984"},{"extension": "py", "date": "2020-03-31 05:42:26", "correct": "1", "upload": "def nbChiffres(nombre):\n  res=0\n  nb=nombre\n  cpt=0\n  while nb!=0:\n    cpt=cpt+1\n    nb=nb//10\n  if cpt==0:\n    cpt=cpt+1\n  return cpt\n    \n    ", "user": "userdId_28", "attemptID": 5571, "exercise": "3dcf332c003a1f3bf15df22ee17884a3", "exercise_name": "nbChiffres", "embeddingX": "0.4052813", "embeddingY": "18.507858"},{"extension": "py", "date": "2020-04-06 14:46:08", "correct": "0", "upload": "def motPalindrome(mot):\n  ok=True\n  i=0\n  j=len(mot)-1\n  while i<len(mot) and ok:\n    if i==j:\n      ok=true\n    else:\n      ok=true\n    i=i+1\n    j=j-1\n  return None", "user": "userdId_3", "attemptID": 5572, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "6.6777654", "embeddingY": "52.947502"},{"extension": "py", "date": "2020-04-07 03:54:47", "correct": "1", "upload": "def phrasePalindrome(phrase):\n    flagIn = 0\n    flagOut = len(phrase)-1\n    trouve = False\n    while flagOut > flagIn and not trouve:\n        if phrase[flagOut] == \" \":\n          flagOut -= 1\n        if phrase[flagIn] == \" \":\n          flagIn += 1\n        if phrase[flagIn] == phrase[flagOut]:\n          flagIn += 1\n          flagOut -= 1\n        else:\n          trouve = True\n    if trouve == False:\n      res = True\n    else:\n      res = False\n    return res", "user": "userdId_42", "attemptID": 5573, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "38.91934", "embeddingY": "41.231037"},{"extension": "py", "date": "2020-03-17 06:10:54", "correct": "0", "upload": "def permutationListe(liste,permutation):\n  res=[0]*(len(liste))\n  for i in range(len(permutation)):\n    res[permutation[i]]=liste\n    return ", "user": "userdId_8", "attemptID": 5574, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-50.394768", "embeddingY": "-27.183746"},{"extension": "py", "date": "2020-04-05 12:16:11", "correct": "1", "upload": "def motPalindrome(mot):\n  res=True\n  i=0\n  while i<int(len(mot)/2) and res:\n    if mot[i]!=mot[-1-i]:\n      res=False\n    i+=1\n  return res", "user": "userdId_4", "attemptID": 5575, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "24.93677", "embeddingY": "40.51876"},{"extension": "py", "date": "2020-03-02 08:38:45", "correct": "0", "upload": "def jourNuit(heure):\n    res = \"l'heure saisie est invalide\"\n\n    if heure <= 24:\n        if heure >= 5 and heure < 12:\n            res = \"on est le matin \"\n        elif heure >= 12 and heure < 17:\n      \t    res = \"on est l'apr\u00e8s-midi \"\n        elif heure >= 17 and heure <= 21:\n            res = \"on est le nuit \"\n        else:\n            res = \"on sais pas c'est pas dis \"\n        if heure >= 6 and heure <= 18:\n            res += \"et il fait jour\"\n        else:\n            res += \"et il fait nuit\"\n    return res\n      ", "user": "userdId_4", "attemptID": 5576, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "77.2655", "embeddingY": "24.796526"},{"extension": "py", "date": "2020-03-05 21:40:46", "correct": "0", "upload": "def somme(liste):\n  res=0\n  for i in range (len,(l)):\n   res=res+liste(i)\n  return None", "user": "userdId_23", "attemptID": 5577, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-31.493263", "embeddingY": "-15.517245"},{"extension": "py", "date": "2020-03-06 00:15:15", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    res=0\n  else:\n    for elem in mot:\n      res=0\n      if elem in 'aeiouy':\n        res=res+1\n  return res     ", "user": "userdId_14", "attemptID": 5578, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "5.6346836", "embeddingY": "-29.100893"},{"extension": "py", "date": "2020-04-14 05:50:28", "correct": "0", "upload": "def meilleurClassementJoueur(scores,joueurs,nom):\n  MS=1\n  i=0\n  while i<len(joueurs) and nom!=joueurs[i]:\n    MS=MS+1\n    i=i+1\n    if nom not in joueurs:\n      MS=-1\n  return MS", "user": "userdId_28", "attemptID": 5579, "exercise": "be6ce0a06c5d396190024c7c681da95d", "exercise_name": "meilleurClassementJoueur", "embeddingX": "-9.273924", "embeddingY": "81.59662"},{"extension": "py", "date": "2020-03-12 21:32:47", "correct": "1", "upload": "def nbVoyelles(mot):\n  cpt=0\n  for lettre in mot:\n    if lettre in 'aeiouy':\n      cpt=cpt+1\n  return cpt\n", "user": "userdId_25", "attemptID": 5580, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "15.97818", "embeddingY": "-23.85194"},{"extension": "py", "date": "2020-03-09 05:26:20", "correct": "0", "upload": "def compareDates(jour1,mois1,annee1,jour2,mois2,annee2):\n  \n  res=0\n  for elem in jour1,mois1,annee1,jour2,mois2,annee2 :\n    \n    if (jour1,mois1,annee1<jour2,mois2,annee2):\n      res=-1\n      \n    elif (jour1,mois1,annee1==jour2,mois2,annee2):\n      res=0\n      \n    else:\n      res=1\n      \n  return res", "user": "userdId_23", "attemptID": 5581, "exercise": "4c3cff428b26be2b1464a3c9ee78c7cf", "exercise_name": "compareDates", "embeddingX": "-22.333078", "embeddingY": "-8.888847"},{"extension": "py", "date": "2020-04-07 04:33:09", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  res=0\n  cpt=0\n  l=[]\n  decomp=nombre\n  while decomp!=0:\n    l.append(decomp%10)\n    decomp=decomp//10\n    cpt=cpt+1\n  for i in range(cpt):\n    if l[i]==chiffre:\n      res=res+1\n  return res", "user": "userdId_31", "attemptID": 5582, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "7.4998674", "embeddingY": "2.443908"},{"extension": "py", "date": "2020-04-14 04:33:35", "correct": "0", "upload": "def meilleurScoreJoueur(scores,joueurs,nom):\n  i=0\n  max=0\n  while i<len(scores)-1 and i<len(joueurs) and max:\n    if nom!=joueurs[i] and scores[i]>score[i+1]:\n      max=i\n  return max", "user": "userdId_21", "attemptID": 5583, "exercise": "c96fadc94086276f98451a798b3bb730", "exercise_name": "meilleurScoreJoueur", "embeddingX": "-11.017178", "embeddingY": "47.061653"},{"extension": "py", "date": "2020-04-07 23:47:26", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  res=True\n  if len(liste)==0:\n    res=True\n  if len(liste)==[1]:\n    res=True\n  #if liste[i]==0:\n  #  res=False\n  while i<len(liste)-1 and res==True:\n    q=liste[i+1]/liste[i]\n    if liste[i+1]/liste[i]==q:\n      res=True\n    else:\n      res=False\n    i+=1\n  return res\n", "user": "userdId_34", "attemptID": 5584, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "36.40365", "embeddingY": "53.9523"},{"extension": "py", "date": "2020-03-17 05:36:52", "correct": "0", "upload": "def permutationChaine(s):\n  res=''\n  for i in range(0,len(s)-1,2):\n    res=res+s[i]+s[i]\n  return res", "user": "userdId_23", "attemptID": 5585, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-44.123154", "embeddingY": "-50.52563"},{"extension": "py", "date": "2020-03-01 11:46:06", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if fin1 >= debut2 :\n    return True\n  else:\n    return False", "user": "userdId_42", "attemptID": 5586, "exercise": "6fd66bb2393fbf3809f1c6d04f3831f7", "exercise_name": "rendezVous", "embeddingX": "56.939857", "embeddingY": "-24.871552"},{"extension": "py", "date": "2020-03-06 00:11:07", "correct": "0", "upload": "def ecart(liste):\n  if len(liste)==0:\n    res=None\n  elif len(liste)==1:\n    res=0\n  else:\n    res=0\n    m1=liste[i]\n    m2=liste[i]\n    for i in range(len(liste)):\n      if m1>liste[i]:\n        m1=liste[i]\n      if m2<liste[i]:\n        m2=liste[i]\n    res=m1-m2\n  return res", "user": "userdId_30", "attemptID": 5587, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "13.765971", "embeddingY": "-52.059834"},{"extension": "py", "date": "2020-03-17 05:24:59", "correct": "0", "upload": "def permutationChaine(s):\n  res=''\n  for i in range(0,len(s)-1,2):\n    res=res+s[i+1]+s[i]\n    if len(s)%2!=0:\n      res=res+s[-1]\n    return res\n    ", "user": "userdId_9", "attemptID": 5588, "exercise": "0c9aa2cd6791f3c44ce75bb46fb0b625", "exercise_name": "permutationChaine", "embeddingX": "-34.46143", "embeddingY": "-59.908726"},{"extension": "py", "date": "2020-03-06 00:00:01", "correct": "0", "upload": "def maximum(liste):\n    res=0\n    for elem in liste:\n        if elem>res:\n            res=elem\n    return res", "user": "userdId_49", "attemptID": 5589, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "30.814116", "embeddingY": "-42.973145"},{"extension": "py", "date": "2020-04-12 06:13:18", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=liste[1]\n  return res", "user": "userdId_8", "attemptID": 5590, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-64.831184", "embeddingY": "19.274412"},{"extension": "py", "date": "2020-03-22 12:00:04", "correct": "0", "upload": "def maximum(liste):\n  res=l(1)\n  for x in liste: \n    if x>res:\n      res=x\n  return res", "user": "userdId_21", "attemptID": 5591, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-48.281055", "embeddingY": "2.7549813"},{"extension": "py", "date": "2020-03-17 06:18:30", "correct": "0", "upload": "def distribution(liste,n):\n  cpt=liste[0]*n+1\n  for elem in liste:\n    cpt[elem]+=1\n  return res", "user": "userdId_23", "attemptID": 5592, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-62.701992", "embeddingY": "-9.513981"},{"extension": "py", "date": "2020-04-08 00:08:00", "correct": "0", "upload": "def suiteGeo(liste):\n  ok=True\n  i=0\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[0]==0:\n      ok=False\n    if liste[i]!=0:\n      q=liste[1]/liste[0]\n    if liste[i]!=0:\n      if liste[i+1]/liste[i]!=q:\n        ok=False\n    if liste[i]==0:\n      ok=True\n    i=i+1\n  return ok\n", "user": "userdId_1", "attemptID": 5593, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "33.37633", "embeddingY": "64.19071"},{"extension": "py", "date": "2020-04-12 06:09:40", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=False\n  c=[]\n  e=[liste]\n  for i in range(len(liste)-1):\n    d=a*liste[i]+b\n    c.append(d)\n    e.append(c)\n  return e", "user": "userdId_8", "attemptID": 5594, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-77.07031", "embeddingY": "19.513704"},{"extension": "py", "date": "2020-03-22 12:27:16", "correct": "0", "upload": "def minimum(liste):\n  for i in liste: \n    if i<min:\n      min=i\n  return min", "user": "userdId_21", "attemptID": 5595, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "36.49123", "embeddingY": "-55.994137"},{"extension": "py", "date": "2020-03-12 23:58:29", "correct": "0", "upload": "def jourNuit(heure):\n  h=heure[0]\n  if 0>h or h>24:\n    res=\"l'heure saisi est invalide\"\n  else:\n    if h>=5 and h<=12:\n      res=\"on est le matin\"\n    else:\n      if h>=12 and h<=17:\n        res=\"on est l'apr\u00e8s-midi\"\n      else:\n        if h>=17 and h<=21:\n          res=\"on est la nuit\"\n  if h>=6 and h<=18:\n    res=res+\" il fait jour\"\n  else:\n    res=res+\" il fait nuit\"\n    \n  return res", "user": "userdId_14", "attemptID": 5596, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "-49.2415", "embeddingY": "-14.754121"},{"extension": "py", "date": "2020-04-09 11:17:30", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  ok=True\n  if 0 in liste:\n    ok=False\n  elif len(liste)>1:\n    raison=liste[-1]/liste[-2]\n    while i<len(liste)-1:\n      if liste[i+1]!=liste[i]*raison:\n        ok=False\n      i+=1\n  return ok", "user": "userdId_12", "attemptID": 5597, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "23.038488", "embeddingY": "73.60144"},{"extension": "py", "date": "2020-04-08 00:42:13", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res = True\n  i = 0\n  while res and i < len(liste)-1:\n    if liste[i+1] != (a*liste[i]+b) :\n      res = False\n    i = i + 1\n  return res\n\ndef suiteAriGeo(liste):\n  if len(liste) < 3 :\n    res = True\n  else :\n    ecart1 = liste[1]-liste[0]\n    ecart2 = liste[2]-liste[1]\n    a = ecart1/ecart2\n    b = liste[1]-a*liste[0]\n    res = verifSuiteAriGeo(liste,a,b)\n  return res\n", "user": "userdId_17", "attemptID": 5598, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "16.857569", "embeddingY": "72.68628"},{"extension": "py", "date": "2020-04-05 08:55:04", "correct": "0", "upload": "def phrasePalindrome(phrase):\n    if phrase=='':\n      ok=True\n    else:\n      ok=True\n      i=0\n      while i<len(phrase) and ok:\n        if phrase[i]!=phrase[-i-1] and ((phrase[i]!='') and (phrase[-i-1]!='')):\n          ok=False\n        i+=1\n    return ok", "user": "userdId_18", "attemptID": 5599, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "28.732737", "embeddingY": "39.44437"},{"extension": "py", "date": "2020-04-17 03:13:59", "correct": "0", "upload": "def minimum(liste):\n  min=liste[0]\n  for i in range(1,len(liste),1): \n    if liste[i]<liste[i+1]:\n      min=liste[i]\n    else:\n      min=None\n  return min", "user": "userdId_21", "attemptID": 5600, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "34.597122", "embeddingY": "-56.712368"},{"extension": "py", "date": "2020-04-07 23:40:43", "correct": "0", "upload": "def suiteGeo(liste):\n  ok=True\n  i=0\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  q=liste[1]/liste[0]\n  while i<len(liste)-1 and ok:\n    if liste[i]!=0:\n      if liste[i+1]/liste[i]!=q:\n        ok=False\n    i=i+1\n  return ok\n\n", "user": "userdId_1", "attemptID": 5601, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "4.518018", "embeddingY": "33.59737"},{"extension": "py", "date": "2020-04-13 21:14:47", "correct": "0", "upload": "def suiteAri(liste):\n  res=True\n  if len(liste)>1:\n    r=liste[1]-liste[0]\n    res=verifSuiteAriGeo(liste,1,r)\n  return res", "user": "userdId_8", "attemptID": 5602, "exercise": "24fcf43c6eaccdd09abf09cc65703741", "exercise_name": "suiteAri", "embeddingX": "51.858967", "embeddingY": "-13.731753"},{"extension": "py", "date": "2020-04-03 00:35:22", "correct": "0", "upload": "def stockerChiffres(nombre):\n  i=0\n  res=[]\n  if nombre==0:\n    res=[0]\n  while nombre!=0:\n    nombre=nombre//10\n    res.append(nombre)\n    i+=1\n  return res", "user": "userdId_1", "attemptID": 5603, "exercise": "49a87f644f84a443327fb4315b47f249", "exercise_name": "stockerChiffres", "embeddingX": "35.833252", "embeddingY": "13.52938"},{"extension": "py", "date": "2020-03-05 21:33:20", "correct": "1", "upload": "def somme(liste):\n  res = 0\n  for i in liste:\n    res+=i\n  return res\n", "user": "userdId_6", "attemptID": 5604, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-25.365547", "embeddingY": "5.8845625"},{"extension": "py", "date": "2020-03-13 00:44:11", "correct": "1", "upload": "def sommeNbPairs(liste):\n    res=0\n    for elem in liste:\n      if elem%2==0 :\n        res=res+elem\n    return res", "user": "userdId_15", "attemptID": 5605, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "38.54339", "embeddingY": "-37.286724"},{"extension": "py", "date": "2020-03-05 21:45:19", "correct": "1", "upload": "def somme(liste):\n  res=0\n  for i in range (len(liste)):\n     res=res+liste[i]\n  return res", "user": "userdId_23", "attemptID": 5606, "exercise": "0122ce71b76597453e8389b0fd99ca17", "exercise_name": "somme", "embeddingX": "-35.98972", "embeddingY": "-2.4959195"},{"extension": "py", "date": "2020-03-12 09:27:45", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    return 0\n  cpt=0\n  for lettre in mot:\n    if lettre in mot=='aeiouy':\n      cpt=cpt+1\n  return cpt", "user": "userdId_1", "attemptID": 5607, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "37.722008", "embeddingY": "-37.28427"},{"extension": "py", "date": "2020-03-02 09:24:17", "correct": "0", "upload": "def qualifJO(sexe,record,nbvictoires,champion):\n    res = False\n    if (sexe == \"F\" or sexe == \"M\") and record > 0 and nbvictoires > 0 and type(champion) == bool:\n        \n        if champion == True: res = True\n\n        record_need = 12\n\n        if sexe == \"F\":\n            record_need = 15\n        print(record_need)\n        if record < record_need and nbvictoires >= 3:\n            res = True\n        \n    \n    return res", "user": "userdId_4", "attemptID": 5608, "exercise": "78ec7738f3a7f3553d4a5c653534c32d", "exercise_name": "qualifJO", "embeddingX": "7.299739", "embeddingY": "32.054955"},{"extension": "py", "date": "2020-03-22 10:26:26", "correct": "0", "upload": "def bissextile(a):\n    if a%4==0 and a%400==0: \n      res=True\n    elif a%4==0 and a%100!=0: \n      \tres=False\n    else: \n      \tres=False\n    return res", "user": "userdId_21", "attemptID": 5609, "exercise": "a7d37636649c0ada991520788deeb2d0", "exercise_name": "bissextile", "embeddingX": "50.941353", "embeddingY": "-15.116713"},{"extension": "py", "date": "2020-03-24 04:53:44", "correct": "0", "upload": "def quatrePlus100(liste):\n  i=0\n  res=[]\n  while i<len(liste):\n    if i>100:\n      res.append(liste[i])\n    i=i+1\n  return res\n", "user": "userdId_13", "attemptID": 5610, "exercise": "8c67b76032d571a8d7eca8796ed11752", "exercise_name": "quatrePlus100", "embeddingX": "1.5562558", "embeddingY": "26.051128"},{"extension": "py", "date": "2020-03-10 03:04:45", "correct": "0", "upload": "def prononcable(mot):\n  if mot=='':\n    res=True\n  else:\n    res=True\n    Voyelles=['a','e','i','o','u','y']\n    chiffres=[]\n    for i in range(len(mot)):\n      if mot[i]==Voyelles:\n        chiffres.append(1)\n      elif mot[i]!=Voyelles:\n        chiffres.append(0)\n    if [0,0,0,0]in chiffres or [1,1,1,1] in chiffres :\n      res=False\n  return res", "user": "userdId_15", "attemptID": 5611, "exercise": "6318b210c201fba050d60bc0913cb7ef", "exercise_name": "prononcable", "embeddingX": "38.18979", "embeddingY": "-36.001213"},{"extension": "py", "date": "2020-04-07 23:34:12", "correct": "0", "upload": "def suiteGeo(liste):\n  ok=True\n  i=0\n  if liste[i]!=0:\n    q=liste[1]/liste[0]\n  while i<len(liste)-1 and ok:\n    if liste[i]!=0:\n      if liste[i+1]/liste[i]!=q:\n        ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 5612, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "3.7476673", "embeddingY": "33.41864"},{"extension": "py", "date": "2020-03-31 07:41:39", "correct": "0", "upload": "def moyenne(liste):\n    if len(liste)==0:\n      res=None\n    else:\n      res=0\n      cpt=0\n      for elem in liste:\n        res=res+elem\n        cpt=cpt+1\n    return (res/cpt)\n  ", "user": "userdId_11", "attemptID": 5613, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "21.172182", "embeddingY": "-21.252317"},{"extension": "py", "date": "2020-03-13 00:53:51", "correct": "0", "upload": "def doubleLettre(mot):\n  res=None\n  prev=\" \"\n  for c in mot:\n    if prev==\" \" and c!=\" \":\n      res=True\n    else:\n      res=False\n      \n  return res", "user": "userdId_38", "attemptID": 5614, "exercise": "00da9cf1fa2b468d915724499459ed8f", "exercise_name": "doubleLettre", "embeddingX": "22.066301", "embeddingY": "-5.8582616"},{"extension": "py", "date": "2020-04-12 07:16:31", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n    cpt=0\n    decomp=nombre\n    x=nombre%10\n    while decomp!=0:\n      if x==chiffre:\n        cpt+=1\n      else:\n        decomp=decomp//10\n        x=decomp%10\n    return cpt", "user": "userdId_11", "attemptID": 5615, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "5.267421", "embeddingY": "30.387476"},{"extension": "py", "date": "2020-03-17 06:20:57", "correct": "0", "upload": "def permutationListe(liste,permutation):\n  res=[0]*(len(permutation))\n  for i in range(len(liste)):\n    res[permutaton[i]]=liste[i]\n  return res\n      \n      ", "user": "userdId_9", "attemptID": 5616, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-50.05123", "embeddingY": "-12.440427"},{"extension": "py", "date": "2020-03-06 00:55:02", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n  res=0\n  for i in range(len(mot)):\n    if mot[i]==lettre:\n      res=i\n  return res", "user": "userdId_12", "attemptID": 5617, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "37.44214", "embeddingY": "-37.40445"},{"extension": "py", "date": "2020-03-31 04:20:13", "correct": "1", "upload": "def listeSymetrique(l):\n  res = True\n  i = 0\n  while i < len(l) and res == True :\n    if l[i] != l[len(l)-i-1] :\n      res = False\n    i = i + 1\n  return res", "user": "userdId_17", "attemptID": 5618, "exercise": "8eb27aeda471a467e2223abebeca886e", "exercise_name": "listeSymetrique", "embeddingX": "3.3376918", "embeddingY": "33.474155"},{"extension": "py", "date": "2020-03-06 23:16:56", "correct": "0", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut1>=debut2 or fin1<=fin2:\n    res=True\n  else:\n    res=False\n  return res", "user": "userdId_8", "attemptID": 5619, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "55.702988", "embeddingY": "-16.66683"},{"extension": "py", "date": "2020-04-07 04:03:20", "correct": "0", "upload": "def elemAri(n,u0,r):\n  cpt=0\n  i=1\n  while i<=n:\n    cpt=u0+r\n  i=i+1\n  return cpt\n  ", "user": "userdId_1", "attemptID": 5620, "exercise": "f239498950e974e29e01472749d9a09d", "exercise_name": "elemAri", "embeddingX": "1.2632502", "embeddingY": "25.370224"},{"extension": "py", "date": "2020-03-22 12:27:03", "correct": "0", "upload": "def minimum(liste):\n  min=l[1]\n  for i in liste: \n    if i<min:\n      min=i\n  return min", "user": "userdId_21", "attemptID": 5621, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "33.481316", "embeddingY": "-56.527966"},{"extension": "py", "date": "2020-03-31 04:25:54", "correct": "1", "upload": "def indiceOccurrence(n,x,l):\n  cpt=0\n  i=0\n  res=None\n  while i<len(l) and cpt<n:\n    if l[i]==x:\n      cpt=cpt+1\n    i=i+1\n  if cpt==n:\n    res=i-1\n  return res", "user": "userdId_12", "attemptID": 5622, "exercise": "f918da384abe3dbfb19a02f888cbf3b1", "exercise_name": "indiceOccurrence", "embeddingX": "3.1864686", "embeddingY": "33.485943"},{"extension": "py", "date": "2020-04-12 06:11:56", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  res=liste\n  return res", "user": "userdId_8", "attemptID": 5623, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-65.02193", "embeddingY": "17.940418"},{"extension": "py", "date": "2020-03-12 21:55:48", "correct": "0", "upload": "def minimum(liste):\n  res=l([0])\n  for elem in liste:\n    if res>elem:\n      res=elem\n  return res", "user": "userdId_23", "attemptID": 5624, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "-48.625473", "embeddingY": "-0.5279213"},{"extension": "py", "date": "2020-04-06 03:43:24", "correct": "1", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  if nombre==0 and cpt==0:\n    cpt=1\n  while nombre>0:\n    if nombre%10==chiffre:\n      cpt+=1\n    nombre=nombre//10\n  return cpt", "user": "userdId_6", "attemptID": 5625, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "20.868801", "embeddingY": "13.543295"},{"extension": "py", "date": "2020-03-19 23:56:52", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  res=\"\"\n  if (longueur+debut)>len(s):\n    longueur=len(s)\n  if (debut+len(s))>len(s):\n    longueur=len(s)\n  else:\n    longueur=debut+longueur\n  for i in range(debut,longueur):\n    res=res+s[i]\n  return res\n", "user": "userdId_13", "attemptID": 5626, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-75.9795", "embeddingY": "19.415054"},{"extension": "py", "date": "2020-03-23 22:41:11", "correct": "0", "upload": "def fusion(liste1,liste2):\n    a1,a2 = 0,0\n    res = []\n    while a1 < len(liste1) and a2 < len(liste2):\n        if liste1[a1] < liste2[a2]:\n            res.append(liste1[a1])\n            a1 += 1\n        elif liste2[a2] <= liste1[a1]:\n            res.append(liste2[a2])\n            a2 += 1\n    if a1 < len(liste1):\n        res.append(liste1[-1])\n    elif a2 < len(liste2):\n        res.append(liste2[-1])\n    return res", "user": "userdId_42", "attemptID": 5627, "exercise": "6613efb6c873b142dc2b6040c14eb616", "exercise_name": "fusion", "embeddingX": "6.7197785", "embeddingY": "32.268944"},{"extension": "py", "date": "2020-03-10 03:28:48", "correct": "0", "upload": "def jourNuit(heure):\n  if heure<0 or heure >24:\n    res=\"l'heure saisie est invalide\"\n  else:\n    if heure<5 or heure>=21:\n      res=\"on est la nuit\"\n    elif heure<12:\n      res=\"on est le matin\" \n    elif heure<17:\n      res=\"on est l'apr\u00e8s-midi\"\n    else:\n      res=\"on est le soir\"\n    if heure<6 or heure>18:\n      res=res+\" et il fait nuit\"\n    else:\n      res=res+\" et il fait jour\"\n  return res", "user": "userdId_16", "attemptID": 5628, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "71.07671", "embeddingY": "7.7920823"},{"extension": "py", "date": "2020-05-04 21:13:13", "correct": "1", "upload": "def nombrePair(n):\n  res=True\n  if n%2!=0:\n    res=False\n  return res", "user": "userdId_26", "attemptID": 5629, "exercise": "3001254263845e9a478696f81a704d33", "exercise_name": "nombrePair", "embeddingX": "50.746193", "embeddingY": "-14.044792"},{"extension": "py", "date": "2020-03-17 05:04:42", "correct": "0", "upload": "def reconstruireChainePartielle(s,n):\n  res=\"\"\n  for i in range(0,len(s),n):\n    res=re+s[i]\n  return res", "user": "userdId_8", "attemptID": 5630, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-36.28802", "embeddingY": "-2.4021366"},{"extension": "py", "date": "2020-03-12 06:37:18", "correct": "0", "upload": "def maximum(liste):\n  res=liste[0]\n  if res<liste:\n    res=max\n  return res   ", "user": "userdId_20", "attemptID": 5631, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "38.004517", "embeddingY": "-60.413643"},{"extension": "py", "date": "2020-03-19 23:44:59", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  res=''\n  if debut<len(s) or debut>len(s):\n    res=''\n  elif (debut+longueur)>len(s):\n    for i in range(debut,len(s)-debut):\n      res=res+s[i]\n  else:\n    for i in range (debut,longueur):\n      res=res+s[i]\n  return res\n    ", "user": "userdId_40", "attemptID": 5632, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-77.68809", "embeddingY": "11.334621"},{"extension": "py", "date": "2020-03-04 04:18:28", "correct": "0", "upload": "def ecart(liste):\n    return None", "user": "userdId_32", "attemptID": 5633, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "-88.4636", "embeddingY": "3.631522"},{"extension": "py", "date": "2020-03-06 00:35:28", "correct": "1", "upload": "def premiereOccurrenceLettre(lettre,mot):\n\tres=None\n\tfor i in range(len(mot)):\n\t\tif lettre==mot[i]:\n\t\t\tif res==None:\n\t\t\t\tres=i       \n\treturn res", "user": "userdId_19", "attemptID": 5634, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "37.929916", "embeddingY": "-38.35065"},{"extension": "py", "date": "2020-03-12 22:13:52", "correct": "0", "upload": "def moyenne(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=0\n    cpt=0\n    for elem in liste:\n      res=res+elem\n      cpt=cpt+1\n      res=res/cpt\n  return res", "user": "userdId_25", "attemptID": 5635, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "21.165154", "embeddingY": "-21.248102"},{"extension": "py", "date": "2020-03-27 06:41:42", "correct": "0", "upload": "def compare (chaine1,chaine2):\n  i = 0\n  res = 0\n  while i < len(chaine1) and i < len(chaine2) and res == 0 :\n    if chaine1[i] > chaine2[i]:\n      res = -1\n    elif chaine1[i] < chaine2[i]:\n      res = 1\n    else :\n      res = 0\n    i = i + 1\n  if len(chaine1) < len(chaine2):\n    res = -1\n  elif len(chaine1) > len (chaine2):\n    res = 1\n  else :\n    res = 0\n  return res", "user": "userdId_17", "attemptID": 5636, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "3.0209618", "embeddingY": "33.63494"},{"extension": "py", "date": "2020-03-17 05:49:00", "correct": "0", "upload": "def maximum(liste):\n    res=0\n    if len (liste)==0:\n      res=none\n    else:\n         res=liste[0]\n         for elem in liste:\n             res=elem\n          \n    return res", "user": "userdId_22", "attemptID": 5637, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "-3.766219", "embeddingY": "-35.05699"},{"extension": "py", "date": "2020-04-13 20:58:41", "correct": "1", "upload": "def elemAri(n,u0,r):\n    return u0+n*r", "user": "userdId_8", "attemptID": 5638, "exercise": "f239498950e974e29e01472749d9a09d", "exercise_name": "elemAri", "embeddingX": "-34.805355", "embeddingY": "21.430405"},{"extension": "py", "date": "2020-04-06 22:11:09", "correct": "0", "upload": "def motPalindrome(mot):\n    if len(mot)==0:\n      res=True\n    else:\n      ok=True\n      i=0\n      while i<len(mot) and ok:\n        ok=mot[i]==mot[-1]\n        i+=1\n      res=ok\n    return res", "user": "userdId_11", "attemptID": 5639, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "5.1718082", "embeddingY": "31.795822"},{"extension": "py", "date": "2020-03-03 05:55:51", "correct": "0", "upload": "def nbVoyelles(mot):\n  res=0\n  if \"aeiouy\" in (mot):\n    res=mot*\"aeiouy\"\n  return res", "user": "userdId_8", "attemptID": 5640, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "50.34806", "embeddingY": "-11.384843"},{"extension": "py", "date": "2020-03-05 22:08:22", "correct": "0", "upload": "def prononcable(mot):\n  if len(mot)<4:\n    return True\n  else:\n    voyelles = 'aeiouy'\n    cpt=0\n    laLettrePrecedenteEstUneVoyelle = True\n    for i in mot :\n      if i in 'aeiouy' == laLettrePrecedenteEstUneVoyelle:\n        cpt+=1\n        if cpt == 4:\n          return False\n      else:\n        cpt = 0\n        laLettrePrecedenteEstUneVoyelle = not laLettrePrecedenteEstUneVoyelle \n    return True", "user": "userdId_6", "attemptID": 5641, "exercise": "6318b210c201fba050d60bc0913cb7ef", "exercise_name": "prononcable", "embeddingX": "35.973923", "embeddingY": "-36.578674"},{"extension": "py", "date": "2020-04-14 04:02:19", "correct": "0", "upload": "def listeDecroissante(scores):\n  res=True\n  i=0\n  while i<len(score)-1:\n    if score[i]<score[i+1]:\n      return False\n    i=i+1\n  return res", "user": "userdId_50", "attemptID": 5642, "exercise": "099575e6c079f20c94ada89cac5c78a2", "exercise_name": "listeDecroissante", "embeddingX": "-4.09337", "embeddingY": "41.317787"},{"extension": "py", "date": "2020-03-24 03:56:53", "correct": "0", "upload": "def compare(chaine1,chaine2):\n  res=0\n  i=0\n  while i<len(ch1) and i<len(ch2) and res==0:\n    if ch1[i] > ch2[i]:\n      res=-1\n    elif ch1[i] < ch2[i]:\n      res=1\n    i=i+1\n  return res", "user": "userdId_31", "attemptID": 5643, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "1.9073493", "embeddingY": "34.503582"},{"extension": "py", "date": "2020-03-31 05:09:53", "correct": "1", "upload": "def listeSymetrique(l):\n  ok=True\n  i=0\n  j=len(l)-1\n  while i<j and ok:\n    if l[i]!=l[j]:\n      ok=False\n    i+=1\n    j-=1\n  return ok", "user": "userdId_21", "attemptID": 5644, "exercise": "8eb27aeda471a467e2223abebeca886e", "exercise_name": "listeSymetrique", "embeddingX": "5.248383", "embeddingY": "31.623075"},{"extension": "py", "date": "2020-03-17 06:09:25", "correct": "0", "upload": "def permutationListe(liste,permutation):\n  res=[0]*(n+1)\n  for i in liste:\n    permutation[i]=liste[i] \n  return res", "user": "userdId_35", "attemptID": 5645, "exercise": "650576bdbe5d9d045c80fdf76ad3ba90", "exercise_name": "permutationListe", "embeddingX": "-48.570637", "embeddingY": "-6.7420316"},{"extension": "py", "date": "2020-04-07 01:02:16", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  i=0\n  end=False\n  while i<len(phrase) and end==False:\n    if phrase[i]==\" \":\n      end=True\n    elif phrase[i]==phrase[-i-1]:\n      res=True\n    elif phrase[-i-1]==\" \":\n      if phrase[i]==phrase[-i-2]:\n        res=True\n    else:\n      res=False\n  return res", "user": "userdId_26", "attemptID": 5646, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "3.6704109", "embeddingY": "32.370033"},{"extension": "py", "date": "2020-03-23 00:01:25", "correct": "0", "upload": "def nombrePair(n):\n  res=False\n  for x in range(n):\n    if x%2==0:\n      res=True\n  return res", "user": "userdId_8", "attemptID": 5647, "exercise": "3001254263845e9a478696f81a704d33", "exercise_name": "nombrePair", "embeddingX": "38.33752", "embeddingY": "-36.540043"},{"extension": "py", "date": "2020-04-07 03:01:22", "correct": "0", "upload": "def suiteGeo(liste):\n  i=1\n  ok=True\n  if len(liste)>=2:\n    raison=liste[1]-liste[0]\n    while i<len(liste)-1 and ok:\n      ok=liste[i+1]==liste[i]*raison\n      i+=1\n  return ok", "user": "userdId_12", "attemptID": 5648, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "5.200833", "embeddingY": "31.702225"},{"extension": "py", "date": "2020-03-09 08:53:00", "correct": "0", "upload": "def nbVoyelles(mot):\n    cpt=0\n    for lettre in mot:\n      if lettre==[\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"]:\n        cpt=cpt+1\n    return cpt\n  ", "user": "userdId_11", "attemptID": 5649, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "37.733734", "embeddingY": "-37.27084"},{"extension": "py", "date": "2020-03-12 22:08:31", "correct": "0", "upload": "def moyenne(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=0\n    cpt=0\n    for i in range (len(liste)):\n      res=res+liste[i]\n      cpt=cpt+1\n      res=res%cpt\n  return res\n  ", "user": "userdId_25", "attemptID": 5650, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "21.544016", "embeddingY": "-21.246014"},{"extension": "py", "date": "2020-03-06 00:35:04", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    voy=0\n  else:\n    voy=0\n    for i in mot:\n      if mot in [\"a\",\"e\",\"i\",\"o\",\"u\",\"y\"]:\n        voy=voy+1\n  return voy", "user": "userdId_13", "attemptID": 5651, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "37.7274", "embeddingY": "-37.28947"},{"extension": "py", "date": "2020-04-14 06:08:06", "correct": "1", "upload": "def indiceInsertion(sc,scores):\n  res=0\n  i=0\n  while i<len(scores) and sc<scores[i]:\n    res=res+1\n    i=i+1\n  return res\n", "user": "userdId_28", "attemptID": 5652, "exercise": "f8a820b2bd54d18d36716e3d703858f7", "exercise_name": "indiceInsertion", "embeddingX": "1.9934541", "embeddingY": "34.423504"},{"extension": "py", "date": "2020-03-05 22:01:40", "correct": "0", "upload": "def maximum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=None\n    for i in range(len(liste)):\n      if res<liste[i]:\n        res=liste[i]\n  return res", "user": "userdId_30", "attemptID": 5653, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "38.117435", "embeddingY": "-38.543938"},{"extension": "py", "date": "2020-03-06 00:37:15", "correct": "0", "upload": "def premiereOccurrenceLettre(lettre,mot):\n  if len(mot)==0:\n    pos=None\n  else:\n    for elem in mot:\n      if lettre==elem:\n        pos=elem\n      else:\n        pos=None\n        \n  return pos", "user": "userdId_15", "attemptID": 5654, "exercise": "0e0f49f2073ce229d4ecf5c7f38eb773", "exercise_name": "premiereOccurrenceLettre", "embeddingX": "38.09443", "embeddingY": "-38.65522"},{"extension": "py", "date": "2020-03-31 06:20:52", "correct": "0", "upload": "def doubleChiffre(nombre):\n  res=False\n  com=[]\n  while nombre!=0:\n    com=nombre%10\n    nombre=nombre//10\n    if com in nombre:\n      res=True\n  return res\n", "user": "userdId_13", "attemptID": 5655, "exercise": "49a87f644f84a443327fb4315b47f249", "exercise_name": "stockerChiffres", "embeddingX": "49.851055", "embeddingY": "-13.36113"},{"extension": "py", "date": "2020-03-24 05:42:43", "correct": "0", "upload": "def compare(chaine1,chaine2):\n  i=0\n  res=0\n  while i<len(chaine1) and i<len(chaine2) and res==0:\n    if chain1[i]<chain2[i]:\n      res=-1\n    if chain1[i]>chain2[i]:\n      res=1\n  i=i+1\n  return res\n\n", "user": "userdId_13", "attemptID": 5656, "exercise": "392e69c90b63b832ef1b1489027c9c7f", "exercise_name": "compare", "embeddingX": "2.4956014", "embeddingY": "34.04145"},{"extension": "py", "date": "2020-04-11 08:41:11", "correct": "0", "upload": "def verifSuiteAriGeo(liste,a,b):\n  c=[]\n  for elem in liste:\n    c+=a*liste[elem]+b\n    if c==liste[elem]:\n      res=True\n  return res", "user": "userdId_8", "attemptID": 5657, "exercise": "415838ff0b81e52cfa661e514d52f26e", "exercise_name": "verifSuiteAriGeo", "embeddingX": "-64.98292", "embeddingY": "21.744722"},{"extension": "py", "date": "2020-03-10 03:15:15", "correct": "0", "upload": "def jourNuit(heure):\n  if heure<0 or heure >24:\n    res=\"l'heure saisie est invalide\"\n  else:\n    if heure<5:\n      res=\"on est la nuit\"\n    elif heure<12:\n      res=\"on est le matin\" \n    elif heure<17:\n      res=\"on est l'apres midi\"\n    elif heure<21:\n      res=\"on est la soir\"\n    if heure<6 or heure>18:\n      res=res +\" et il fait nuit\"\n    else:\n      res=res +\" et il fait jour\"\n    return res", "user": "userdId_16", "attemptID": 5658, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "71.07672", "embeddingY": "7.7956033"},{"extension": "py", "date": "2020-04-05 03:35:57", "correct": "1", "upload": "def minimum(liste):\n  if len(liste)==0:\n    res=None\n  else:\n    res=liste[0]\n    for i in range(1,len(liste)):\n      if res>liste[i]:\n        res=liste[i]\n  return res", "user": "userdId_26", "attemptID": 5659, "exercise": "582dcbc047b264a41a011f56f86574ba", "exercise_name": "minimum", "embeddingX": "33.8794", "embeddingY": "-55.48705"},{"extension": "py", "date": "2020-03-30 21:23:19", "correct": "0", "upload": "def fusion(liste1,liste2):\n  i=0\n  j=0\n  res = []\n  while j<len(liste2) or i<len(liste1):\n    if liste1[i]<liste2[j]:\n      res.append(liste1[i])\n      i+=1\n    else:\n      res.append(liste2[j])\n      j+=1\n  return res", "user": "userdId_6", "attemptID": 5660, "exercise": "bcba2c28e22ff4c3c436043da5d1190d", "exercise_name": "fusion", "embeddingX": "6.6922398", "embeddingY": "32.397633"},{"extension": "py", "date": "2020-03-06 00:24:22", "correct": "0", "upload": "def ecart(liste):\n    if liste==[]:\n      return None\n    elif len(liste)==1:\n      return 0\n    else:\n      res=liste[0]\n      max=0\n      min=0\n      for i in range(1,len(liste)):\n        if res>liste[i]:\n          max=liste[i]\n      for i in range(1,len(liste)):\n        if res<liste[i]:\n          min=liste[i]\n      ecart=max-min\n      return ecart\n          \n      \n      \n      ", "user": "userdId_2", "attemptID": 5661, "exercise": "3bd6b5ade783ad5db31a3df820edc748", "exercise_name": "ecart", "embeddingX": "33.52897", "embeddingY": "-56.04138"},{"extension": "py", "date": "2020-03-13 00:25:54", "correct": "1", "upload": "def sommeNbPairs(liste):\n  if liste == []:\n    return 0\n  else:\n    sum = 0\n    for num in liste:\n      if num%2 == 0:\n        sum += num\n    return sum", "user": "userdId_42", "attemptID": 5662, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "37.45639", "embeddingY": "-38.949833"},{"extension": "py", "date": "2020-03-17 05:27:22", "correct": "0", "upload": "def distribution(liste,n):\n  cpt=[0]*4\n  for elem in liste:\n    cpt[elem]=cpt[elem]+1\n  return cpt ", "user": "userdId_35", "attemptID": 5663, "exercise": "7ee24396987077d1cc0ddb7ee261c57e", "exercise_name": "distribution", "embeddingX": "-53.35699", "embeddingY": "-10.342996"},{"extension": "py", "date": "2020-04-12 09:50:49", "correct": "0", "upload": "def suiteAriGeo(liste):\n  i=0\n  while i<len(liste)-1:\n    a=liste[0]\n    b=liste[0]\n    if liste[i+1]==liste[i]+(liste[1]-liste[0]):\n      b=liste[1]-liste[0]\n    if liste[0]!=0:                        \n      if liste[i+1]==liste[i]*liste[1]/liste[0]:\n        a=liste[1]/liste[0]\n        b=0\n    if liste[i+1]==liste[i]*(liste[1]-liste[0])+(liste[i]-(liste[i-1]*(liste[1]-liste[0]))):\n      a=liste[1]-liste[0]\n      b=liste[i]-(liste[i-1]*a)\n    i=i+1\n  ok=True\n  i=0\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=a*liste[i]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 5664, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "39.463512", "embeddingY": "83.41987"},{"extension": "py", "date": "2020-03-19 04:47:20", "correct": "1", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if debut2>fin1 or debut1>fin2:\n    res=False\n  else:\n    res=True\n  return res", "user": "userdId_34", "attemptID": 5665, "exercise": "980adf17e3b37f35e8ec5f5785aad2fe", "exercise_name": "rendezVous", "embeddingX": "55.706", "embeddingY": "-16.66991"},{"extension": "py", "date": "2020-04-03 00:54:08", "correct": "1", "upload": "def nbChiffres(nombre):\n  cpt=0\n  if nombre==0:\n    cpt=1\n  else:\n    while nombre!=0:\n      nombre=nombre//10\n      cpt=cpt+1\n  return cpt\n", "user": "userdId_43", "attemptID": 5666, "exercise": "3dcf332c003a1f3bf15df22ee17884a3", "exercise_name": "nbChiffres", "embeddingX": "31.11863", "embeddingY": "10.9688"},{"extension": "py", "date": "2020-04-03 00:41:25", "correct": "1", "upload": "def stockerChiffres(nombre):\n  res=[]\n  if nombre==0:\n    res=[0]\n  while nombre!=0:\n    res.append(nombre%10)\n    nombre//=10\n  return res", "user": "userdId_34", "attemptID": 5667, "exercise": "49a87f644f84a443327fb4315b47f249", "exercise_name": "stockerChiffres", "embeddingX": "35.859215", "embeddingY": "13.53026"},{"extension": "py", "date": "2020-03-12 06:43:40", "correct": "0", "upload": "def maximum(liste):\n  res=liste[0]\n  for i in liste:\n    res=max\n    if res<i:\n       res=max\n  return res", "user": "userdId_20", "attemptID": 5668, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "37.52155", "embeddingY": "-59.079353"},{"extension": "py", "date": "2020-03-12 21:47:37", "correct": "0", "upload": "def nbVoyelles(mot):\n   for lettre in mot:\n      if lettre in 'aeiouy':\n         res=res+1\n   return res", "user": "userdId_14", "attemptID": 5669, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "38.7578", "embeddingY": "-37.443226"},{"extension": "py", "date": "2020-03-22 08:05:29", "correct": "0", "upload": "def maximum(liste):\n  if liste==():\n    res=none\n  else:\n    res=liste[0]\n    for i in range (len(liste)):\n      if res<liste[i]:\n        res=liste[i]\n  return res", "user": "userdId_16", "attemptID": 5670, "exercise": "d85f680ac36024b0de3381b816e252ce", "exercise_name": "maximum", "embeddingX": "33.92283", "embeddingY": "-55.444416"},{"extension": "py", "date": "2020-03-23 00:38:38", "correct": "0", "upload": "def reconstruireChainePartielle(s,n):\n  res=\" \"\n  for i in range(0,len(s),2):\n    res=res+s[i]\n  return res", "user": "userdId_35", "attemptID": 5671, "exercise": "35516e2773c8a26f10aa597ec17cc378", "exercise_name": "reconstruireChainePartielle", "embeddingX": "-36.16991", "embeddingY": "-2.4733222"},{"extension": "py", "date": "2020-03-17 05:14:07", "correct": "0", "upload": "def sousChaine(s,debut,longueur):\n  res=\"\"\n  if debut+longueur>len(s):\n    fin=len(s)\n  else:\n    fin=debut+longueur\n  for i in range(debut,debut+longueur):\n    res=res+s[i]\n  return res  ", "user": "userdId_35", "attemptID": 5672, "exercise": "7dc222ae52966d42af9920d95c1c45b2", "exercise_name": "sousChaine", "embeddingX": "-68.76658", "embeddingY": "28.407377"},{"extension": "py", "date": "2020-03-03 06:04:37", "correct": "1", "upload": "def rendezVous(debut1,fin1,debut2,fin2):\n  if fin1>=debut2:\n    if fin2>=debut1:\n      res=True\n    else:\n      res=False\n  else:\n    res=False\n  return res", "user": "userdId_30", "attemptID": 5673, "exercise": "6fd66bb2393fbf3809f1c6d04f3831f7", "exercise_name": "rendezVous", "embeddingX": "50.73256", "embeddingY": "-13.994881"},{"extension": "py", "date": "2020-04-10 00:35:17", "correct": "0", "upload": "def suiteAriGeo(liste):\n  i=0\n  while i<len(liste)-1:\n    a=liste[0]\n    b=liste[1]-liste[0]\n    if liste[i+1]==liste[i]*a:\n        b=0\n        if liste[0]!=0:\n          a=liste[1]/liste[0]\n    if liste[i+1]==liste[i]+b:\n      a=1\n      b=liste[1]-liste[0]\n    i=i+1\n  i=0\n  ok=True\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[i+1]!=a*liste[i]+b:\n      ok=False\n    i=i+1\n  return ok", "user": "userdId_1", "attemptID": 5674, "exercise": "0787173acdaeb235af8b8904fce81952", "exercise_name": "suiteAriGeo", "embeddingX": "39.475037", "embeddingY": "83.41534"},{"extension": "py", "date": "2020-04-06 17:24:28", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  i=0\n  for i in range(nombre):\n    if chiffre==len(nombre):\n      cpt=cpt+1\n    i=i+1\n  return cpt", "user": "userdId_3", "attemptID": 5675, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "32.606567", "embeddingY": "-37.244545"},{"extension": "py", "date": "2020-03-31 06:45:14", "correct": "1", "upload": "def doubleChiffre(nombre):\n  res=False\n  prec=None\n  while nombre!=0 and not res:\n    chiffre=nombre%10\n    nombre=nombre//10\n    if chiffre==prec:\n      res=True\n    prec=chiffre\n  return res", "user": "userdId_13", "attemptID": 5676, "exercise": "c83ea6acd3e9f6f5543e87d515e8a44a", "exercise_name": "doubleChiffre", "embeddingX": "8.3573475", "embeddingY": "22.096827"},{"extension": "py", "date": "2020-03-15 03:22:25", "correct": "0", "upload": "def polynome(a,b,c):\n    delta=(b**2)-(4*a*c)\n    x=((-b-(sqrt(delta)))/(2*a))\n    y=((-b+(sqrt(delta)))/(2*a))\n    if delta<0:\n      return(\"pas de solution\")\n    if delta>0:\n      return(x,y)\n    if delta==0:\n      return(x)\n \n\n ", "user": "userdId_21", "attemptID": 5677, "exercise": "3355182ef981952e841618c19103ef09", "exercise_name": "polynome", "embeddingX": "-54.840336", "embeddingY": "9.063964"},{"extension": "py", "date": "2020-03-10 09:52:27", "correct": "0", "upload": "def nbVoyelles(mot):\n  res=0\n  x='a,e,i,o,u,y'\n  for mot in x:\n    res=res+1\n     \n  return res", "user": "userdId_5", "attemptID": 5678, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "-36.10918", "embeddingY": "-2.6817052"},{"extension": "py", "date": "2020-04-07 23:19:10", "correct": "0", "upload": "def compteChiffre(chiffre,nombre):\n  cpt=0\n  res=False\n  prec=None\n  while nombre!=0 and not res:\n    numero=nombre%10\n    nombre=nombre//10\n    if chiffre==prec:\n      cpt=cpt+1\n    prec=numero\n  if chiffre==0 and nombre==0:\n    cpt=0\n  return cpt ", "user": "userdId_13", "attemptID": 5679, "exercise": "908defc05cefcce7d5707781c7f9e500", "exercise_name": "compteChiffre", "embeddingX": "8.262403", "embeddingY": "22.747152"},{"extension": "py", "date": "2020-03-13 00:39:15", "correct": "1", "upload": "def sommeNbPairs(liste):\n  if liste==[]:\n    res=0\n  else:\n    res=0\n    for n in liste:\n      if n%2==0:\n        res=res+n\n  return res\n        \n        \n      ", "user": "userdId_2", "attemptID": 5680, "exercise": "863be7d2bf89c7261781b8b75d109451", "exercise_name": "sommeNbPairs", "embeddingX": "38.55664", "embeddingY": "-37.294235"},{"extension": "py", "date": "2020-03-12 08:35:54", "correct": "0", "upload": "def nbVoyelles(mot):\n  if len(mot)==0:\n    return 0\n  cpt=0\n  for lettre in mot:\n    if lettre in mot=='aeiouy':\n      cpt=cpt+1\n  return cpt\n  ", "user": "userdId_1", "attemptID": 5681, "exercise": "74ee1a47420bfeadf184c999d5c6dce9", "exercise_name": "nbVoyelles", "embeddingX": "37.704506", "embeddingY": "-37.279575"},{"extension": "py", "date": "2020-04-07 03:33:47", "correct": "0", "upload": "def motPalindrome(mot):\n  res=False\n  if mot[0]==mot[-1]:\n    res=True\n  return res", "user": "userdId_30", "attemptID": 5682, "exercise": "e2e71241db6a4971b7f407789330fdfd", "exercise_name": "motPalindrome", "embeddingX": "50.72331", "embeddingY": "-14.072881"},{"extension": "py", "date": "2020-04-07 04:27:48", "correct": "0", "upload": "def suiteGeo(liste):\n  i=0\n  res=True\n  while i<len(liste)-1 and res==True:\n    r=liste[1]/liste[0]\n    if liste[i+1]/liste[i]==r:\n      res=True\n    else:\n      res=False\n    i+=1\n  return res", "user": "userdId_26", "attemptID": 5683, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "5.1332273", "embeddingY": "32.2713"},{"extension": "py", "date": "2020-04-07 23:43:31", "correct": "0", "upload": "def phrasePalindrome(phrase):\n  ok=False\n  i=0\n  while i<len(phrase)//2:\n    if phrase[i]==\" \" and phrase[-i]==\" \":\n      i+=1\n    elif phrase[i]!=phrase[-i-1]:\n      ok=False\n      i+=1\n    else:\n      ok=True\n      i+=1\n  if phrase==\"\":\n    ok=True\n  return ok", "user": "userdId_13", "attemptID": 5684, "exercise": "3588d5b2366ad1ff5f1d78b184175afa", "exercise_name": "phrasePalindrome", "embeddingX": "5.108891", "embeddingY": "31.892723"},{"extension": "py", "date": "2020-04-08 00:01:26", "correct": "0", "upload": "def suiteGeo(liste):\n  ok=True\n  i=0\n  if len(liste)==0 or len(liste)==1:\n    ok=True\n  if liste[i]==0:\n    ok=True\n  while i<len(liste)-1 and ok:\n    if liste[0]==0:\n      ok=False\n    if liste[i]!=0:\n      q=liste[1]/liste[0]\n    if liste[i]!=0:\n      if liste[i+1]/liste[i]!=q:\n        ok=False\n    i=i+1\n  return ok\n", "user": "userdId_1", "attemptID": 5685, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "4.5201216", "embeddingY": "33.587826"},{"extension": "py", "date": "2020-03-10 03:14:43", "correct": "0", "upload": "def jourNuit(heure):\n  if heure<0 or heure >24:\n    res=\"l'heure saisie est invalide\"\n  else:\n    if heure<5:\n      res=\"on est la nuit\"\n    elif heure<12:\n      res=\"on est le matin\" \n    elif heure<17:\n      res=\"on est l'apres midi\"\n    elif heure<21:\n      res=\"on est la soir\"\n    if heure<6 or heure>18:\n      res=res+\" et il fait nuit\"\n    else:\n      res=res+\" et il fait jour\"\n    return res", "user": "userdId_16", "attemptID": 5686, "exercise": "709a3600dc12d686d1c8f691a0af1e19", "exercise_name": "jourNuit", "embeddingX": "71.076965", "embeddingY": "7.7948318"},{"extension": "py", "date": "2020-04-06 04:01:24", "correct": "0", "upload": "def suiteGeo(liste):\n    if liste==[] or len(liste)==1:\n      ok=True\n    elif 0 in liste:\n      ok=False\n    else:\n      ok=True\n      i=1\n      while i<len(liste) and ok:\n        cte=liste[i]/liste[i-1]\n        if liste[0]*cte**i!=liste[i]:\n          ok=False\n        i+=1\n    return ok", "user": "userdId_18", "attemptID": 5687, "exercise": "1bf7c612843eda9ce08f308b85561049", "exercise_name": "suiteGeo", "embeddingX": "5.23887", "embeddingY": "32.735966"},{"extension": "py", "date": "2020-03-31 06:27:36", "correct": "1", "upload": "def nombrePair(n):\n    res=False\n    if n%2==0:\n      res=True\n    return res", "user": "userdId_11", "attemptID": 5688, "exercise": "3001254263845e9a478696f81a704d33", "exercise_name": "nombrePair", "embeddingX": "50.75445", "embeddingY": "-14.074891"},{"extension": "py", "date": "2020-03-12 22:12:57", "correct": "0", "upload": "def moyenne(liste):\n  if len (liste)==0:\n    res=None\n  else:\n    res=0\n    cpt=0\n    for elem in liste:\n      res=res+elem\n      cpt=cpt+elem\n    res=elem//cpt\n  return res ", "user": "userdId_20", "attemptID": 5689, "exercise": "6fc4a139f72ee6e245b9f97fcc15712e", "exercise_name": "moyenne", "embeddingX": "21.539162", "embeddingY": "-21.29507"}]
